
TestProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1d0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016f0  0800c3d0  0800c3d0  0000d3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dac0  0800dac0  0000f1c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800dac0  0800dac0  0000eac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dac8  0800dac8  0000f1c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dac8  0800dac8  0000eac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dacc  0800dacc  0000eacc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800dad0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000080  0800db50  0000f080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000120  0800dbf0  0000f120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000841c  200001c0  0800dc90  0000f1c0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200085dc  0800dc90  0000f5dc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000f1c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002182b  00000000  00000000  0000f1ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000558c  00000000  00000000  00030a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a70  00000000  00000000  00035fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001476  00000000  00000000  00037a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000347cf  00000000  00000000  00038e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002ac36  00000000  00000000  0006d65d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001146e3  00000000  00000000  00098293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001ac976  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000076d4  00000000  00000000  001ac9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005c  00000000  00000000  001b4090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001c0 	.word	0x200001c0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c3b8 	.word	0x0800c3b8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001c4 	.word	0x200001c4
 800023c:	0800c3b8 	.word	0x0800c3b8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	// отправляем пакет раз в секунду
	udp_send_msg(upcb, "text");
 80005e8:	4b04      	ldr	r3, [pc, #16]	@ (80005fc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4904      	ldr	r1, [pc, #16]	@ (8000600 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 fcaa 	bl	8000f48 <udp_send_msg>
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	200007b8 	.word	0x200007b8
 8000600:	0800c3d0 	.word	0x0800c3d0

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f000 fe6f 	bl	80012ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060e:	f000 f827 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000612:	f000 f941 	bl	8000898 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000616:	f000 f8e1 	bl	80007dc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800061a:	f000 f90f 	bl	800083c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800061e:	f000 f88f 	bl	8000740 <MX_TIM2_Init>
  MX_LWIP_Init();
 8000622:	f005 fa75 	bl	8005b10 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
	//my_udp_connect();
	ip4_addr_t dest;
	IP4_ADDR(&dest, 192, 168, 0, 11);
 8000626:	4b0a      	ldr	r3, [pc, #40]	@ (8000650 <main+0x4c>)
 8000628:	603b      	str	r3, [r7, #0]
	u16_t port = 3333;
 800062a:	f640 5305 	movw	r3, #3333	@ 0xd05
 800062e:	80fb      	strh	r3, [r7, #6]
	upcb = udp_create_socket(dest, port, udp_receive_callback, NULL);
 8000630:	88f9      	ldrh	r1, [r7, #6]
 8000632:	2300      	movs	r3, #0
 8000634:	4a07      	ldr	r2, [pc, #28]	@ (8000654 <main+0x50>)
 8000636:	6838      	ldr	r0, [r7, #0]
 8000638:	f000 fc4a 	bl	8000ed0 <udp_create_socket>
 800063c:	4603      	mov	r3, r0
 800063e:	4a06      	ldr	r2, [pc, #24]	@ (8000658 <main+0x54>)
 8000640:	6013      	str	r3, [r2, #0]

	//udp_create_socket();
	HAL_TIM_Base_Start_IT(&htim2);
 8000642:	4806      	ldr	r0, [pc, #24]	@ (800065c <main+0x58>)
 8000644:	f003 fe98 	bl	8004378 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		MX_LWIP_Process();
 8000648:	f005 fbae 	bl	8005da8 <MX_LWIP_Process>
 800064c:	e7fc      	b.n	8000648 <main+0x44>
 800064e:	bf00      	nop
 8000650:	0b00a8c0 	.word	0x0b00a8c0
 8000654:	08000e89 	.word	0x08000e89
 8000658:	200007b8 	.word	0x200007b8
 800065c:	200001dc 	.word	0x200001dc

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	@ 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	2234      	movs	r2, #52	@ 0x34
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f00a ffeb 	bl	800b64a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	4b2c      	ldr	r3, [pc, #176]	@ (8000738 <SystemClock_Config+0xd8>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	4a2b      	ldr	r2, [pc, #172]	@ (8000738 <SystemClock_Config+0xd8>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000690:	4b29      	ldr	r3, [pc, #164]	@ (8000738 <SystemClock_Config+0xd8>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800069c:	4b27      	ldr	r3, [pc, #156]	@ (800073c <SystemClock_Config+0xdc>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006a4:	4a25      	ldr	r2, [pc, #148]	@ (800073c <SystemClock_Config+0xdc>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b23      	ldr	r3, [pc, #140]	@ (800073c <SystemClock_Config+0xdc>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b8:	2301      	movs	r3, #1
 80006ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006cc:	2308      	movs	r3, #8
 80006ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006d0:	23d8      	movs	r3, #216	@ 0xd8
 80006d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d8:	2304      	movs	r3, #4
 80006da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006dc:	2302      	movs	r3, #2
 80006de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 fcf3 	bl	80030d0 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f0:	f000 f974 	bl	80009dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006f4:	f002 fc9c 	bl	8003030 <HAL_PWREx_EnableOverDrive>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006fe:	f000 f96d 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	230f      	movs	r3, #15
 8000704:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2302      	movs	r3, #2
 8000708:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800070e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000718:	f107 0308 	add.w	r3, r7, #8
 800071c:	2103      	movs	r1, #3
 800071e:	4618      	mov	r0, r3
 8000720:	f002 ff84 	bl	800362c <HAL_RCC_ClockConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800072a:	f000 f957 	bl	80009dc <Error_Handler>
  }
}
 800072e:	bf00      	nop
 8000730:	3750      	adds	r7, #80	@ 0x50
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000746:	f107 0310 	add.w	r3, r7, #16
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800075e:	4b1d      	ldr	r3, [pc, #116]	@ (80007d4 <MX_TIM2_Init+0x94>)
 8000760:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000764:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8000766:	4b1b      	ldr	r3, [pc, #108]	@ (80007d4 <MX_TIM2_Init+0x94>)
 8000768:	226b      	movs	r2, #107	@ 0x6b
 800076a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076c:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <MX_TIM2_Init+0x94>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 8000772:	4b18      	ldr	r3, [pc, #96]	@ (80007d4 <MX_TIM2_Init+0x94>)
 8000774:	4a18      	ldr	r2, [pc, #96]	@ (80007d8 <MX_TIM2_Init+0x98>)
 8000776:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000778:	4b16      	ldr	r3, [pc, #88]	@ (80007d4 <MX_TIM2_Init+0x94>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077e:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <MX_TIM2_Init+0x94>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000784:	4813      	ldr	r0, [pc, #76]	@ (80007d4 <MX_TIM2_Init+0x94>)
 8000786:	f003 fd9f 	bl	80042c8 <HAL_TIM_Base_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000790:	f000 f924 	bl	80009dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000794:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000798:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800079a:	f107 0310 	add.w	r3, r7, #16
 800079e:	4619      	mov	r1, r3
 80007a0:	480c      	ldr	r0, [pc, #48]	@ (80007d4 <MX_TIM2_Init+0x94>)
 80007a2:	f003 ff81 	bl	80046a8 <HAL_TIM_ConfigClockSource>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80007ac:	f000 f916 	bl	80009dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <MX_TIM2_Init+0x94>)
 80007be:	f004 f99f 	bl	8004b00 <HAL_TIMEx_MasterConfigSynchronization>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007c8:	f000 f908 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200001dc 	.word	0x200001dc
 80007d8:	000f423f 	.word	0x000f423f

080007dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_USART3_UART_Init+0x58>)
 80007e2:	4a15      	ldr	r2, [pc, #84]	@ (8000838 <MX_USART3_UART_Init+0x5c>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007e6:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <MX_USART3_UART_Init+0x58>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <MX_USART3_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <MX_USART3_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <MX_USART3_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <MX_USART3_UART_Init+0x58>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <MX_USART3_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <MX_USART3_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000812:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <MX_USART3_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <MX_USART3_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_USART3_UART_Init+0x58>)
 8000820:	f004 fa1a 	bl	8004c58 <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800082a:	f000 f8d7 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000228 	.word	0x20000228
 8000838:	40004800 	.word	0x40004800

0800083c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000840:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000842:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000846:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000848:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084a:	2206      	movs	r2, #6
 800084c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000850:	2202      	movs	r2, #2
 8000852:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000854:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085c:	2202      	movs	r2, #2
 800085e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000860:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000862:	2201      	movs	r2, #1
 8000864:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800086c:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000872:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000874:	2201      	movs	r2, #1
 8000876:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000878:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000880:	f002 fa8d 	bl	8002d9e <HAL_PCD_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800088a:	f000 f8a7 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200002b0 	.word	0x200002b0

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	@ 0x30
 800089c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	4b47      	ldr	r3, [pc, #284]	@ (80009cc <MX_GPIO_Init+0x134>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a46      	ldr	r2, [pc, #280]	@ (80009cc <MX_GPIO_Init+0x134>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b44      	ldr	r3, [pc, #272]	@ (80009cc <MX_GPIO_Init+0x134>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	61bb      	str	r3, [r7, #24]
 80008c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c6:	4b41      	ldr	r3, [pc, #260]	@ (80009cc <MX_GPIO_Init+0x134>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a40      	ldr	r2, [pc, #256]	@ (80009cc <MX_GPIO_Init+0x134>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b3e      	ldr	r3, [pc, #248]	@ (80009cc <MX_GPIO_Init+0x134>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b3b      	ldr	r3, [pc, #236]	@ (80009cc <MX_GPIO_Init+0x134>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a3a      	ldr	r2, [pc, #232]	@ (80009cc <MX_GPIO_Init+0x134>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b38      	ldr	r3, [pc, #224]	@ (80009cc <MX_GPIO_Init+0x134>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b35      	ldr	r3, [pc, #212]	@ (80009cc <MX_GPIO_Init+0x134>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a34      	ldr	r2, [pc, #208]	@ (80009cc <MX_GPIO_Init+0x134>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b32      	ldr	r3, [pc, #200]	@ (80009cc <MX_GPIO_Init+0x134>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090e:	4b2f      	ldr	r3, [pc, #188]	@ (80009cc <MX_GPIO_Init+0x134>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a2e      	ldr	r2, [pc, #184]	@ (80009cc <MX_GPIO_Init+0x134>)
 8000914:	f043 0308 	orr.w	r3, r3, #8
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b2c      	ldr	r3, [pc, #176]	@ (80009cc <MX_GPIO_Init+0x134>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0308 	and.w	r3, r3, #8
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000926:	4b29      	ldr	r3, [pc, #164]	@ (80009cc <MX_GPIO_Init+0x134>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a28      	ldr	r2, [pc, #160]	@ (80009cc <MX_GPIO_Init+0x134>)
 800092c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b26      	ldr	r3, [pc, #152]	@ (80009cc <MX_GPIO_Init+0x134>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000944:	4822      	ldr	r0, [pc, #136]	@ (80009d0 <MX_GPIO_Init+0x138>)
 8000946:	f002 f9f7 	bl	8002d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2140      	movs	r1, #64	@ 0x40
 800094e:	4821      	ldr	r0, [pc, #132]	@ (80009d4 <MX_GPIO_Init+0x13c>)
 8000950:	f002 f9f2 	bl	8002d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000954:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	481b      	ldr	r0, [pc, #108]	@ (80009d8 <MX_GPIO_Init+0x140>)
 800096c:	f002 f838 	bl	80029e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000970:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4811      	ldr	r0, [pc, #68]	@ (80009d0 <MX_GPIO_Init+0x138>)
 800098a:	f002 f829 	bl	80029e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800098e:	2340      	movs	r3, #64	@ 0x40
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	480b      	ldr	r0, [pc, #44]	@ (80009d4 <MX_GPIO_Init+0x13c>)
 80009a6:	f002 f81b 	bl	80029e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009aa:	2380      	movs	r3, #128	@ 0x80
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <MX_GPIO_Init+0x13c>)
 80009be:	f002 f80f 	bl	80029e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c2:	bf00      	nop
 80009c4:	3730      	adds	r7, #48	@ 0x30
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020400 	.word	0x40020400
 80009d4:	40021800 	.word	0x40021800
 80009d8:	40020800 	.word	0x40020800

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <Error_Handler+0x8>

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <HAL_MspInit+0x44>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f2:	4a0e      	ldr	r2, [pc, #56]	@ (8000a2c <HAL_MspInit+0x44>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009fa:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <HAL_MspInit+0x44>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <HAL_MspInit+0x44>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0a:	4a08      	ldr	r2, [pc, #32]	@ (8000a2c <HAL_MspInit+0x44>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a12:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <HAL_MspInit+0x44>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a40:	d113      	bne.n	8000a6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a42:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <HAL_TIM_Base_MspInit+0x44>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a46:	4a0b      	ldr	r2, [pc, #44]	@ (8000a74 <HAL_TIM_Base_MspInit+0x44>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <HAL_TIM_Base_MspInit+0x44>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	201c      	movs	r0, #28
 8000a60:	f000 fda1 	bl	80015a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a64:	201c      	movs	r0, #28
 8000a66:	f000 fdba 	bl	80015de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800

08000a78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b0ae      	sub	sp, #184	@ 0xb8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	2290      	movs	r2, #144	@ 0x90
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f00a fdd6 	bl	800b64a <memset>
  if(huart->Instance==USART3)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a22      	ldr	r2, [pc, #136]	@ (8000b2c <HAL_UART_MspInit+0xb4>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d13c      	bne.n	8000b22 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000aa8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000aac:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f002 ffde 	bl	8003a78 <HAL_RCCEx_PeriphCLKConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ac2:	f7ff ff8b 	bl	80009dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b30 <HAL_UART_MspInit+0xb8>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	4a19      	ldr	r2, [pc, #100]	@ (8000b30 <HAL_UART_MspInit+0xb8>)
 8000acc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad2:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <HAL_UART_MspInit+0xb8>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ade:	4b14      	ldr	r3, [pc, #80]	@ (8000b30 <HAL_UART_MspInit+0xb8>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a13      	ldr	r2, [pc, #76]	@ (8000b30 <HAL_UART_MspInit+0xb8>)
 8000ae4:	f043 0308 	orr.w	r3, r3, #8
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <HAL_UART_MspInit+0xb8>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0308 	and.w	r3, r3, #8
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000af6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000afa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b10:	2307      	movs	r3, #7
 8000b12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b16:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <HAL_UART_MspInit+0xbc>)
 8000b1e:	f001 ff5f 	bl	80029e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b22:	bf00      	nop
 8000b24:	37b8      	adds	r7, #184	@ 0xb8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40004800 	.word	0x40004800
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020c00 	.word	0x40020c00

08000b38 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b0ae      	sub	sp, #184	@ 0xb8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2290      	movs	r2, #144	@ 0x90
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f00a fd76 	bl	800b64a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b66:	d166      	bne.n	8000c36 <HAL_PCD_MspInit+0xfe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000b68:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000b6c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000b6e:	23c0      	movs	r3, #192	@ 0xc0
 8000b70:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000b72:	2302      	movs	r3, #2
 8000b74:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000b76:	2302      	movs	r3, #2
 8000b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000b82:	2300      	movs	r3, #0
 8000b84:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000b86:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4618      	mov	r0, r3
 8000b94:	f002 ff70 	bl	8003a78 <HAL_RCCEx_PeriphCLKConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 8000b9e:	f7ff ff1d 	bl	80009dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	4b27      	ldr	r3, [pc, #156]	@ (8000c40 <HAL_PCD_MspInit+0x108>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	4a26      	ldr	r2, [pc, #152]	@ (8000c40 <HAL_PCD_MspInit+0x108>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bae:	4b24      	ldr	r3, [pc, #144]	@ (8000c40 <HAL_PCD_MspInit+0x108>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bba:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bd4:	230a      	movs	r3, #10
 8000bd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bde:	4619      	mov	r1, r3
 8000be0:	4818      	ldr	r0, [pc, #96]	@ (8000c44 <HAL_PCD_MspInit+0x10c>)
 8000be2:	f001 fefd 	bl	80029e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000be6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4810      	ldr	r0, [pc, #64]	@ (8000c44 <HAL_PCD_MspInit+0x10c>)
 8000c02:	f001 feed 	bl	80029e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c06:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <HAL_PCD_MspInit+0x108>)
 8000c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c0a:	4a0d      	ldr	r2, [pc, #52]	@ (8000c40 <HAL_PCD_MspInit+0x108>)
 8000c0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c10:	6353      	str	r3, [r2, #52]	@ 0x34
 8000c12:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <HAL_PCD_MspInit+0x108>)
 8000c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <HAL_PCD_MspInit+0x108>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c22:	4a07      	ldr	r2, [pc, #28]	@ (8000c40 <HAL_PCD_MspInit+0x108>)
 8000c24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c2a:	4b05      	ldr	r3, [pc, #20]	@ (8000c40 <HAL_PCD_MspInit+0x108>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	37b8      	adds	r7, #184	@ 0xb8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <NMI_Handler+0x4>

08000c50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <HardFault_Handler+0x4>

08000c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <MemManage_Handler+0x4>

08000c60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <BusFault_Handler+0x4>

08000c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <UsageFault_Handler+0x4>

08000c70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c9e:	f000 fb63 	bl	8001368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cac:	4802      	ldr	r0, [pc, #8]	@ (8000cb8 <TIM2_IRQHandler+0x10>)
 8000cae:	f003 fbdb 	bl	8004468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200001dc 	.word	0x200001dc

08000cbc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000cc0:	4802      	ldr	r0, [pc, #8]	@ (8000ccc <ETH_IRQHandler+0x10>)
 8000cc2:	f000 ffa7 	bl	8001c14 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20005224 	.word	0x20005224

08000cd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return 1;
 8000cd4:	2301      	movs	r3, #1
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <_kill>:

int _kill(int pid, int sig)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000cea:	4b05      	ldr	r3, [pc, #20]	@ (8000d00 <_kill+0x20>)
 8000cec:	2216      	movs	r2, #22
 8000cee:	601a      	str	r2, [r3, #0]
  return -1;
 8000cf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	200085cc 	.word	0x200085cc

08000d04 <_exit>:

void _exit (int status)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff ffe5 	bl	8000ce0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d16:	bf00      	nop
 8000d18:	e7fd      	b.n	8000d16 <_exit+0x12>

08000d1a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b086      	sub	sp, #24
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	60f8      	str	r0, [r7, #12]
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	e00a      	b.n	8000d42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d2c:	f3af 8000 	nop.w
 8000d30:	4601      	mov	r1, r0
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	1c5a      	adds	r2, r3, #1
 8000d36:	60ba      	str	r2, [r7, #8]
 8000d38:	b2ca      	uxtb	r2, r1
 8000d3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	697a      	ldr	r2, [r7, #20]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	dbf0      	blt.n	8000d2c <_read+0x12>
  }

  return len;
 8000d4a:	687b      	ldr	r3, [r7, #4]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	e009      	b.n	8000d7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	1c5a      	adds	r2, r3, #1
 8000d6a:	60ba      	str	r2, [r7, #8]
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	3301      	adds	r3, #1
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	dbf1      	blt.n	8000d66 <_write+0x12>
  }
  return len;
 8000d82:	687b      	ldr	r3, [r7, #4]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <_close>:

int _close(int file)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000db4:	605a      	str	r2, [r3, #4]
  return 0;
 8000db6:	2300      	movs	r3, #0
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <_isatty>:

int _isatty(int file)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dcc:	2301      	movs	r3, #1
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b085      	sub	sp, #20
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	60f8      	str	r0, [r7, #12]
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000de6:	2300      	movs	r3, #0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b087      	sub	sp, #28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dfc:	4a14      	ldr	r2, [pc, #80]	@ (8000e50 <_sbrk+0x5c>)
 8000dfe:	4b15      	ldr	r3, [pc, #84]	@ (8000e54 <_sbrk+0x60>)
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e08:	4b13      	ldr	r3, [pc, #76]	@ (8000e58 <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e10:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <_sbrk+0x64>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	@ (8000e5c <_sbrk+0x68>)
 8000e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e16:	4b10      	ldr	r3, [pc, #64]	@ (8000e58 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d205      	bcs.n	8000e30 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e24:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <_sbrk+0x6c>)
 8000e26:	220c      	movs	r2, #12
 8000e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2e:	e009      	b.n	8000e44 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e30:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e36:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4a06      	ldr	r2, [pc, #24]	@ (8000e58 <_sbrk+0x64>)
 8000e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e42:	68fb      	ldr	r3, [r7, #12]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	371c      	adds	r7, #28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	20080000 	.word	0x20080000
 8000e54:	00000400 	.word	0x00000400
 8000e58:	200007bc 	.word	0x200007bc
 8000e5c:	200085e0 	.word	0x200085e0
 8000e60:	200085cc 	.word	0x200085cc

08000e64 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e68:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <SystemInit+0x20>)
 8000e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e6e:	4a05      	ldr	r2, [pc, #20]	@ (8000e84 <SystemInit+0x20>)
 8000e70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <udp_receive_callback>:

static struct udp_pcb *upcb = NULL;
char str1[128];

void udp_receive_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p,
		const ip_addr_t *addr, u16_t port) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	603b      	str	r3, [r7, #0]
	// в этой функции обязательно должны очистить p, иначе память потечёт
	strncpy(str1, p->payload, p->len);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6859      	ldr	r1, [r3, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	895b      	ldrh	r3, [r3, #10]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4809      	ldr	r0, [pc, #36]	@ (8000ec8 <udp_receive_callback+0x40>)
 8000ea2:	f00a fbda 	bl	800b65a <strncpy>
	str1[p->len] = 0;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	895b      	ldrh	r3, [r3, #10]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <udp_receive_callback+0x40>)
 8000eae:	2100      	movs	r1, #0
 8000eb0:	5499      	strb	r1, [r3, r2]
	pbuf_free(p);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f006 fe7c 	bl	8007bb0 <pbuf_free>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000eb8:	2180      	movs	r1, #128	@ 0x80
 8000eba:	4804      	ldr	r0, [pc, #16]	@ (8000ecc <udp_receive_callback+0x44>)
 8000ebc:	f001 ff55 	bl	8002d6a <HAL_GPIO_TogglePin>
}
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200007c4 	.word	0x200007c4
 8000ecc:	40020400 	.word	0x40020400

08000ed0 <udp_create_socket>:
//	IP4_ADDR(&dest, 10, 102, 2, 186);
//	udp_create_socket(dest, 3333,udp_receive_callback,NULL);
//}

struct udp_pcb* udp_create_socket(const ip4_addr_t ip_addr, const u16_t port,
		udp_recv_fn recv, void *recv_arg) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	460b      	mov	r3, r1
 8000ede:	817b      	strh	r3, [r7, #10]
	// проверяем, что не инициализировали сокет еще
	if (upcb == NULL) {
 8000ee0:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <udp_create_socket+0x74>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d10b      	bne.n	8000f00 <udp_create_socket+0x30>
		// создание сокета
		upcb = udp_new();
 8000ee8:	f007 ff46 	bl	8008d78 <udp_new>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4a15      	ldr	r2, [pc, #84]	@ (8000f44 <udp_create_socket+0x74>)
 8000ef0:	6013      	str	r3, [r2, #0]
		// если не удалось создать сокет, то на выход с ошибкой
		if (upcb == NULL) {
 8000ef2:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <udp_create_socket+0x74>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d102      	bne.n	8000f00 <udp_create_socket+0x30>
			return upcb;
 8000efa:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <udp_create_socket+0x74>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	e01d      	b.n	8000f3c <udp_create_socket+0x6c>

	//ip4_addr_t dest;
	//IP4_ADDR(&dest, 10, 102, 2, 186);//192, 168, 0, 11, сервер для теста 10, 102, 2, 186
	// коннектимся к удаленному серверу по ИП и порту (сервер должен быть настроен именно на так)
//	err_t err = udp_connect(upcb, &dest, 3333);
	err_t err = udp_connect(upcb, &ip_addr, port);
 8000f00:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <udp_create_socket+0x74>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	897a      	ldrh	r2, [r7, #10]
 8000f06:	f107 010c 	add.w	r1, r7, #12
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f007 fe64 	bl	8008bd8 <udp_connect>
 8000f10:	4603      	mov	r3, r0
 8000f12:	75fb      	strb	r3, [r7, #23]
	if (ERR_OK != err) {
 8000f14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d006      	beq.n	8000f2a <udp_create_socket+0x5a>
		udp_remove(upcb);
 8000f1c:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <udp_create_socket+0x74>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f007 fee7 	bl	8008cf4 <udp_remove>
		return NULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e008      	b.n	8000f3c <udp_create_socket+0x6c>
	}
	// регистрируем колбэк на прием пакета
	udp_recv(upcb, recv, NULL);
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <udp_create_socket+0x74>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f007 febe 	bl	8008cb4 <udp_recv>
	return upcb;
 8000f38:	4b02      	ldr	r3, [pc, #8]	@ (8000f44 <udp_create_socket+0x74>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200007c0 	.word	0x200007c0

08000f48 <udp_send_msg>:

err_t udp_send_msg(struct udp_pcb *upcb, const char *dataSource) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
	// если сокет не создался, то на выход с ошибкой
	if (upcb == NULL) {
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <udp_send_msg+0x16>
		return ERR_ABRT;
 8000f58:	f06f 030c 	mvn.w	r3, #12
 8000f5c:	e037      	b.n	8000fce <udp_send_msg+0x86>
	}
	u16_t dataLength = strlen(dataSource) + 1;
 8000f5e:	6838      	ldr	r0, [r7, #0]
 8000f60:	f7ff f96e 	bl	8000240 <strlen>
 8000f64:	4603      	mov	r3, r0
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	3301      	adds	r3, #1
 8000f6a:	82fb      	strh	r3, [r7, #22]
	// аллоцируем память под буфер с данными
	struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, dataLength, PBUF_RAM);
 8000f6c:	8afb      	ldrh	r3, [r7, #22]
 8000f6e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000f72:	4619      	mov	r1, r3
 8000f74:	2036      	movs	r0, #54	@ 0x36
 8000f76:	f006 fb39 	bl	80075ec <pbuf_alloc>
 8000f7a:	6138      	str	r0, [r7, #16]
	if (p != NULL) {
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d024      	beq.n	8000fcc <udp_send_msg+0x84>
//		if (data == NULL) {
//			return ERR_ABRT;
//		}
//		strncpy(data, dataSource, dataLength);
		// кладём данные в аллоцированный буфер
		err_t err = pbuf_take(p, dataSource, dataLength);
 8000f82:	8afb      	ldrh	r3, [r7, #22]
 8000f84:	461a      	mov	r2, r3
 8000f86:	6839      	ldr	r1, [r7, #0]
 8000f88:	6938      	ldr	r0, [r7, #16]
 8000f8a:	f007 f80b 	bl	8007fa4 <pbuf_take>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	73fb      	strb	r3, [r7, #15]
		//очистить память от сообщения
		//free(data);
		if (ERR_OK != err) {
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d005      	beq.n	8000fa6 <udp_send_msg+0x5e>
			// обязательно должны очистить аллоцированную память при ошибке
			pbuf_free(p);
 8000f9a:	6938      	ldr	r0, [r7, #16]
 8000f9c:	f006 fe08 	bl	8007bb0 <pbuf_free>
			return err;
 8000fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa4:	e013      	b.n	8000fce <udp_send_msg+0x86>
		}

		// отсылаем пакет
		err = udp_send(upcb, p);
 8000fa6:	6939      	ldr	r1, [r7, #16]
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f007 fba3 	bl	80086f4 <udp_send>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73fb      	strb	r3, [r7, #15]
		if (ERR_OK != err) {
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d005      	beq.n	8000fc6 <udp_send_msg+0x7e>
			// обязательно должны очистить аллоцированную память при ошибке
			pbuf_free(p);
 8000fba:	6938      	ldr	r0, [r7, #16]
 8000fbc:	f006 fdf8 	bl	8007bb0 <pbuf_free>
			return err;
 8000fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc4:	e003      	b.n	8000fce <udp_send_msg+0x86>
		}
		// очищаем аллоцированную память
		pbuf_free(p);
 8000fc6:	6938      	ldr	r0, [r7, #16]
 8000fc8:	f006 fdf2 	bl	8007bb0 <pbuf_free>
	}
	return ERR_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001010 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fdc:	480d      	ldr	r0, [pc, #52]	@ (8001014 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fde:	490e      	ldr	r1, [pc, #56]	@ (8001018 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	@ (800101c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe4:	e002      	b.n	8000fec <LoopCopyDataInit>

08000fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fea:	3304      	adds	r3, #4

08000fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff0:	d3f9      	bcc.n	8000fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	@ (8001020 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ff4:	4c0b      	ldr	r4, [pc, #44]	@ (8001024 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff8:	e001      	b.n	8000ffe <LoopFillZerobss>

08000ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ffc:	3204      	adds	r2, #4

08000ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001000:	d3fb      	bcc.n	8000ffa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001002:	f7ff ff2f 	bl	8000e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001006:	f00a fb81 	bl	800b70c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800100a:	f7ff fafb 	bl	8000604 <main>
  bx  lr    
 800100e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001010:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001018:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800101c:	0800dad0 	.word	0x0800dad0
  ldr r2, =_sbss
 8001020:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 8001024:	200085dc 	.word	0x200085dc

08001028 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001028:	e7fe      	b.n	8001028 <ADC_IRQHandler>

0800102a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00b      	beq.n	8001052 <LAN8742_RegisterBusIO+0x28>
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d007      	beq.n	8001052 <LAN8742_RegisterBusIO+0x28>
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <LAN8742_RegisterBusIO+0x28>
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d102      	bne.n	8001058 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	e014      	b.n	8001082 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	68da      	ldr	r2, [r3, #12]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	691a      	ldr	r2, [r3, #16]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d17c      	bne.n	80011a8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d002      	beq.n	80010bc <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2220      	movs	r2, #32
 80010c0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	e01c      	b.n	8001102 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	f107 0208 	add.w	r2, r7, #8
 80010d0:	2112      	movs	r1, #18
 80010d2:	6978      	ldr	r0, [r7, #20]
 80010d4:	4798      	blx	r3
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	da03      	bge.n	80010e4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80010dc:	f06f 0304 	mvn.w	r3, #4
 80010e0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80010e2:	e00b      	b.n	80010fc <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	f003 031f 	and.w	r3, r3, #31
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d105      	bne.n	80010fc <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
         break;
 80010fa:	e005      	b.n	8001108 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	3301      	adds	r3, #1
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	2b1f      	cmp	r3, #31
 8001106:	d9df      	bls.n	80010c8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b1f      	cmp	r3, #31
 800110e:	d902      	bls.n	8001116 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001110:	f06f 0302 	mvn.w	r3, #2
 8001114:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d145      	bne.n	80011a8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	6810      	ldr	r0, [r2, #0]
 8001124:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001128:	2100      	movs	r1, #0
 800112a:	4798      	blx	r3
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	db37      	blt.n	80011a2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	6810      	ldr	r0, [r2, #0]
 800113a:	f107 0208 	add.w	r2, r7, #8
 800113e:	2100      	movs	r1, #0
 8001140:	4798      	blx	r3
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	db28      	blt.n	800119a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4798      	blx	r3
 800114e:	4603      	mov	r3, r0
 8001150:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001152:	e01c      	b.n	800118e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4798      	blx	r3
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001166:	d80e      	bhi.n	8001186 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	6810      	ldr	r0, [r2, #0]
 8001170:	f107 0208 	add.w	r2, r7, #8
 8001174:	2100      	movs	r1, #0
 8001176:	4798      	blx	r3
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	da07      	bge.n	800118e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800117e:	f06f 0304 	mvn.w	r3, #4
 8001182:	613b      	str	r3, [r7, #16]
                 break;
 8001184:	e010      	b.n	80011a8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001186:	f06f 0301 	mvn.w	r3, #1
 800118a:	613b      	str	r3, [r7, #16]
               break;
 800118c:	e00c      	b.n	80011a8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1dd      	bne.n	8001154 <LAN8742_Init+0xc6>
 8001198:	e006      	b.n	80011a8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800119a:	f06f 0304 	mvn.w	r3, #4
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	e002      	b.n	80011a8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80011a2:	f06f 0303 	mvn.w	r3, #3
 80011a6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d112      	bne.n	80011d4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	4798      	blx	r3
 80011b4:	4603      	mov	r3, r0
 80011b6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80011b8:	bf00      	nop
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	4798      	blx	r3
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80011cc:	d9f5      	bls.n	80011ba <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2201      	movs	r2, #1
 80011d2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80011d4:	693b      	ldr	r3, [r7, #16]
 }
 80011d6:	4618      	mov	r0, r3
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b084      	sub	sp, #16
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	6810      	ldr	r0, [r2, #0]
 80011f2:	f107 020c 	add.w	r2, r7, #12
 80011f6:	2101      	movs	r1, #1
 80011f8:	4798      	blx	r3
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	da02      	bge.n	8001206 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001200:	f06f 0304 	mvn.w	r3, #4
 8001204:	e06e      	b.n	80012e4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	6810      	ldr	r0, [r2, #0]
 800120e:	f107 020c 	add.w	r2, r7, #12
 8001212:	2101      	movs	r1, #1
 8001214:	4798      	blx	r3
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	da02      	bge.n	8001222 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800121c:	f06f 0304 	mvn.w	r3, #4
 8001220:	e060      	b.n	80012e4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800122c:	2301      	movs	r3, #1
 800122e:	e059      	b.n	80012e4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	6810      	ldr	r0, [r2, #0]
 8001238:	f107 020c 	add.w	r2, r7, #12
 800123c:	2100      	movs	r1, #0
 800123e:	4798      	blx	r3
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	da02      	bge.n	800124c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001246:	f06f 0304 	mvn.w	r3, #4
 800124a:	e04b      	b.n	80012e4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d11b      	bne.n	800128e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d006      	beq.n	800126e <LAN8742_GetLinkState+0x90>
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800126a:	2302      	movs	r3, #2
 800126c:	e03a      	b.n	80012e4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001278:	2303      	movs	r3, #3
 800127a:	e033      	b.n	80012e4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001286:	2304      	movs	r3, #4
 8001288:	e02c      	b.n	80012e4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800128a:	2305      	movs	r3, #5
 800128c:	e02a      	b.n	80012e4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	6810      	ldr	r0, [r2, #0]
 8001296:	f107 020c 	add.w	r2, r7, #12
 800129a:	211f      	movs	r1, #31
 800129c:	4798      	blx	r3
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	da02      	bge.n	80012aa <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80012a4:	f06f 0304 	mvn.w	r3, #4
 80012a8:	e01c      	b.n	80012e4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d101      	bne.n	80012b8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80012b4:	2306      	movs	r3, #6
 80012b6:	e015      	b.n	80012e4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 031c 	and.w	r3, r3, #28
 80012be:	2b18      	cmp	r3, #24
 80012c0:	d101      	bne.n	80012c6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80012c2:	2302      	movs	r3, #2
 80012c4:	e00e      	b.n	80012e4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f003 031c 	and.w	r3, r3, #28
 80012cc:	2b08      	cmp	r3, #8
 80012ce:	d101      	bne.n	80012d4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e007      	b.n	80012e4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 031c 	and.w	r3, r3, #28
 80012da:	2b14      	cmp	r3, #20
 80012dc:	d101      	bne.n	80012e2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80012de:	2304      	movs	r3, #4
 80012e0:	e000      	b.n	80012e4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80012e2:	2305      	movs	r3, #5
    }				
  }
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f0:	2003      	movs	r0, #3
 80012f2:	f000 f94d 	bl	8001590 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f6:	2000      	movs	r0, #0
 80012f8:	f000 f806 	bl	8001308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012fc:	f7ff fb74 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001310:	4b12      	ldr	r3, [pc, #72]	@ (800135c <HAL_InitTick+0x54>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <HAL_InitTick+0x58>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4619      	mov	r1, r3
 800131a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800131e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001322:	fbb2 f3f3 	udiv	r3, r2, r3
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f967 	bl	80015fa <HAL_SYSTICK_Config>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e00e      	b.n	8001354 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b0f      	cmp	r3, #15
 800133a:	d80a      	bhi.n	8001352 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800133c:	2200      	movs	r2, #0
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	f04f 30ff 	mov.w	r0, #4294967295
 8001344:	f000 f92f 	bl	80015a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001348:	4a06      	ldr	r2, [pc, #24]	@ (8001364 <HAL_InitTick+0x5c>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
 8001350:	e000      	b.n	8001354 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000000 	.word	0x20000000
 8001360:	20000008 	.word	0x20000008
 8001364:	20000004 	.word	0x20000004

08001368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <HAL_IncTick+0x20>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	4b06      	ldr	r3, [pc, #24]	@ (800138c <HAL_IncTick+0x24>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4413      	add	r3, r2
 8001378:	4a04      	ldr	r2, [pc, #16]	@ (800138c <HAL_IncTick+0x24>)
 800137a:	6013      	str	r3, [r2, #0]
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000008 	.word	0x20000008
 800138c:	20000844 	.word	0x20000844

08001390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return uwTick;
 8001394:	4b03      	ldr	r3, [pc, #12]	@ (80013a4 <HAL_GetTick+0x14>)
 8001396:	681b      	ldr	r3, [r3, #0]
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000844 	.word	0x20000844

080013a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b0:	f7ff ffee 	bl	8001390 <HAL_GetTick>
 80013b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c0:	d005      	beq.n	80013ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013c2:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <HAL_Delay+0x44>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4413      	add	r3, r2
 80013cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ce:	bf00      	nop
 80013d0:	f7ff ffde 	bl	8001390 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d8f7      	bhi.n	80013d0 <HAL_Delay+0x28>
  {
  }
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000008 	.word	0x20000008

080013f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001400:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <__NVIC_SetPriorityGrouping+0x40>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800140c:	4013      	ands	r3, r2
 800140e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <__NVIC_SetPriorityGrouping+0x44>)
 800141a:	4313      	orrs	r3, r2
 800141c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141e:	4a04      	ldr	r2, [pc, #16]	@ (8001430 <__NVIC_SetPriorityGrouping+0x40>)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	60d3      	str	r3, [r2, #12]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00
 8001434:	05fa0000 	.word	0x05fa0000

08001438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800143c:	4b04      	ldr	r3, [pc, #16]	@ (8001450 <__NVIC_GetPriorityGrouping+0x18>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	0a1b      	lsrs	r3, r3, #8
 8001442:	f003 0307 	and.w	r3, r3, #7
}
 8001446:	4618      	mov	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	2b00      	cmp	r3, #0
 8001464:	db0b      	blt.n	800147e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	f003 021f 	and.w	r2, r3, #31
 800146c:	4907      	ldr	r1, [pc, #28]	@ (800148c <__NVIC_EnableIRQ+0x38>)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	095b      	lsrs	r3, r3, #5
 8001474:	2001      	movs	r0, #1
 8001476:	fa00 f202 	lsl.w	r2, r0, r2
 800147a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000e100 	.word	0xe000e100

08001490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	6039      	str	r1, [r7, #0]
 800149a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	db0a      	blt.n	80014ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	490c      	ldr	r1, [pc, #48]	@ (80014dc <__NVIC_SetPriority+0x4c>)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	0112      	lsls	r2, r2, #4
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	440b      	add	r3, r1
 80014b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b8:	e00a      	b.n	80014d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4908      	ldr	r1, [pc, #32]	@ (80014e0 <__NVIC_SetPriority+0x50>)
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	3b04      	subs	r3, #4
 80014c8:	0112      	lsls	r2, r2, #4
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	440b      	add	r3, r1
 80014ce:	761a      	strb	r2, [r3, #24]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000e100 	.word	0xe000e100
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b089      	sub	sp, #36	@ 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f1c3 0307 	rsb	r3, r3, #7
 80014fe:	2b04      	cmp	r3, #4
 8001500:	bf28      	it	cs
 8001502:	2304      	movcs	r3, #4
 8001504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3304      	adds	r3, #4
 800150a:	2b06      	cmp	r3, #6
 800150c:	d902      	bls.n	8001514 <NVIC_EncodePriority+0x30>
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3b03      	subs	r3, #3
 8001512:	e000      	b.n	8001516 <NVIC_EncodePriority+0x32>
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	f04f 32ff 	mov.w	r2, #4294967295
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43da      	mvns	r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	401a      	ands	r2, r3
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800152c:	f04f 31ff 	mov.w	r1, #4294967295
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa01 f303 	lsl.w	r3, r1, r3
 8001536:	43d9      	mvns	r1, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	4313      	orrs	r3, r2
         );
}
 800153e:	4618      	mov	r0, r3
 8001540:	3724      	adds	r7, #36	@ 0x24
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800155c:	d301      	bcc.n	8001562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800155e:	2301      	movs	r3, #1
 8001560:	e00f      	b.n	8001582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001562:	4a0a      	ldr	r2, [pc, #40]	@ (800158c <SysTick_Config+0x40>)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3b01      	subs	r3, #1
 8001568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800156a:	210f      	movs	r1, #15
 800156c:	f04f 30ff 	mov.w	r0, #4294967295
 8001570:	f7ff ff8e 	bl	8001490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001574:	4b05      	ldr	r3, [pc, #20]	@ (800158c <SysTick_Config+0x40>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157a:	4b04      	ldr	r3, [pc, #16]	@ (800158c <SysTick_Config+0x40>)
 800157c:	2207      	movs	r2, #7
 800157e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	e000e010 	.word	0xe000e010

08001590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff ff29 	bl	80013f0 <__NVIC_SetPriorityGrouping>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b086      	sub	sp, #24
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
 80015b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b8:	f7ff ff3e 	bl	8001438 <__NVIC_GetPriorityGrouping>
 80015bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	6978      	ldr	r0, [r7, #20]
 80015c4:	f7ff ff8e 	bl	80014e4 <NVIC_EncodePriority>
 80015c8:	4602      	mov	r2, r0
 80015ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff5d 	bl	8001490 <__NVIC_SetPriority>
}
 80015d6:	bf00      	nop
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4603      	mov	r3, r0
 80015e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff31 	bl	8001454 <__NVIC_EnableIRQ>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff ffa2 	bl	800154c <SysTick_Config>
 8001608:	4603      	mov	r3, r0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e06a      	b.n	80016fc <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800162c:	2b00      	cmp	r3, #0
 800162e:	d106      	bne.n	800163e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2223      	movs	r2, #35	@ 0x23
 8001634:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f004 fd9d 	bl	8006178 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163e:	4b31      	ldr	r3, [pc, #196]	@ (8001704 <HAL_ETH_Init+0xf0>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001642:	4a30      	ldr	r2, [pc, #192]	@ (8001704 <HAL_ETH_Init+0xf0>)
 8001644:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001648:	6453      	str	r3, [r2, #68]	@ 0x44
 800164a:	4b2e      	ldr	r3, [pc, #184]	@ (8001704 <HAL_ETH_Init+0xf0>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001656:	4b2c      	ldr	r3, [pc, #176]	@ (8001708 <HAL_ETH_Init+0xf4>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	4a2b      	ldr	r2, [pc, #172]	@ (8001708 <HAL_ETH_Init+0xf4>)
 800165c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001660:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001662:	4b29      	ldr	r3, [pc, #164]	@ (8001708 <HAL_ETH_Init+0xf4>)
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	4927      	ldr	r1, [pc, #156]	@ (8001708 <HAL_ETH_Init+0xf4>)
 800166c:	4313      	orrs	r3, r2
 800166e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001670:	4b25      	ldr	r3, [pc, #148]	@ (8001708 <HAL_ETH_Init+0xf4>)
 8001672:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6812      	ldr	r2, [r2, #0]
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800168a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800168c:	f7ff fe80 	bl	8001390 <HAL_GetTick>
 8001690:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001692:	e011      	b.n	80016b8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001694:	f7ff fe7c 	bl	8001390 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016a2:	d909      	bls.n	80016b8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2204      	movs	r2, #4
 80016a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	22e0      	movs	r2, #224	@ 0xe0
 80016b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e021      	b.n	80016fc <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1e4      	bne.n	8001694 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 fee4 	bl	8002498 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 ff8b 	bl	80025ec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 ffe1 	bl	800269e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	461a      	mov	r2, r3
 80016e2:	2100      	movs	r1, #0
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 ff49 	bl	800257c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2210      	movs	r2, #16
 80016f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40023800 	.word	0x40023800
 8001708:	40013800 	.word	0x40013800

0800170c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800171a:	2b10      	cmp	r3, #16
 800171c:	d150      	bne.n	80017c0 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2223      	movs	r2, #35	@ 0x23
 8001722:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2204      	movs	r2, #4
 800172a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 f9fd 	bl	8001b2c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f042 0208 	orr.w	r2, r2, #8
 8001740:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800174a:	2001      	movs	r0, #1
 800174c:	f7ff fe2c 	bl	80013a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0204 	orr.w	r2, r2, #4
 8001766:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001770:	2001      	movs	r0, #1
 8001772:	f7ff fe19 	bl	80013a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 fd2a 	bl	80021d8 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6812      	ldr	r2, [r2, #0]
 8001792:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001796:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800179a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	f043 0302 	orr.w	r3, r3, #2
 80017ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017b2:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2223      	movs	r2, #35	@ 0x23
 80017b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	e000      	b.n	80017c2 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
  }
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b084      	sub	sp, #16
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017d8:	2b23      	cmp	r3, #35	@ 0x23
 80017da:	d14a      	bne.n	8001872 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2223      	movs	r2, #35	@ 0x23
 80017e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6812      	ldr	r2, [r2, #0]
 80017f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80017f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017fa:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	f023 0302 	bic.w	r3, r3, #2
 800180e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001812:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0204 	bic.w	r2, r2, #4
 8001822:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800182c:	2001      	movs	r0, #1
 800182e:	f7ff fdbb 	bl	80013a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 fccc 	bl	80021d8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0208 	bic.w	r2, r2, #8
 800184e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001858:	2001      	movs	r0, #1
 800185a:	f7ff fda5 	bl	80013a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2210      	movs	r2, #16
 800186a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	e000      	b.n	8001874 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
  }
}
 8001874:	4618      	mov	r0, r3
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d109      	bne.n	80018a2 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001894:	f043 0201 	orr.w	r2, r3, #1
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e07c      	b.n	800199c <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018a8:	2b23      	cmp	r3, #35	@ 0x23
 80018aa:	d176      	bne.n	800199a <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80018ac:	2200      	movs	r2, #0
 80018ae:	68b9      	ldr	r1, [r7, #8]
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f000 ff61 	bl	8002778 <ETH_Prepare_Tx_Descriptors>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d009      	beq.n	80018d0 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018c2:	f043 0202 	orr.w	r2, r3, #2
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e065      	b.n	800199c <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018d0:	f3bf 8f4f 	dsb	sy
}
 80018d4:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	3206      	adds	r2, #6
 80018de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	d904      	bls.n	8001900 <HAL_ETH_Transmit+0x84>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fa:	1f1a      	subs	r2, r3, #4
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	3106      	adds	r1, #6
 800190c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001910:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001914:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001916:	f7ff fd3b 	bl	8001390 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800191c:	e037      	b.n	800198e <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d011      	beq.n	8001954 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001936:	f043 0208 	orr.w	r2, r3, #8
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001948:	695a      	ldr	r2, [r3, #20]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e023      	b.n	800199c <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195a:	d018      	beq.n	800198e <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800195c:	f7ff fd18 	bl	8001390 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	429a      	cmp	r2, r3
 800196a:	d302      	bcc.n	8001972 <HAL_ETH_Transmit+0xf6>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10d      	bne.n	800198e <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001978:	f043 0204 	orr.w	r2, r3, #4
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001988:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e006      	b.n	800199c <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	dbc3      	blt.n	800191e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001996:	2300      	movs	r3, #0
 8001998:	e000      	b.n	800199c <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
  }
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d109      	bne.n	80019d0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019c2:	f043 0201 	orr.w	r2, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0a8      	b.n	8001b22 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80019d6:	2b23      	cmp	r3, #35	@ 0x23
 80019d8:	d001      	beq.n	80019de <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e0a1      	b.n	8001b22 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	3212      	adds	r2, #18
 80019ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ee:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019f4:	f1c3 0304 	rsb	r3, r3, #4
 80019f8:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80019fa:	e06a      	b.n	8001ad2 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d007      	beq.n	8001a18 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	699a      	ldr	r2, [r3, #24]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	69da      	ldr	r2, [r3, #28]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d103      	bne.n	8001a2c <HAL_ETH_ReadData+0x88>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d040      	beq.n	8001aae <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00c      	beq.n	8001a70 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	0c1b      	lsrs	r3, r3, #16
 8001a5c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001a60:	3b04      	subs	r3, #4
 8001a62:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001a88:	461a      	mov	r2, r3
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	f004 fd3d 	bl	800650c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	441a      	add	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	61fb      	str	r3, [r7, #28]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d902      	bls.n	8001ac0 <HAL_ETH_ReadData+0x11c>
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3b04      	subs	r3, #4
 8001abe:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69fa      	ldr	r2, [r7, #28]
 8001ac4:	3212      	adds	r2, #18
 8001ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aca:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	db06      	blt.n	8001ae8 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d202      	bcs.n	8001ae8 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d089      	beq.n	80019fc <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	441a      	add	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d002      	beq.n	8001b02 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f815 	bl	8001b2c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69fa      	ldr	r2, [r7, #28]
 8001b06:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d108      	bne.n	8001b20 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	e000      	b.n	8001b22 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3720      	adds	r7, #32
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b40:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69fa      	ldr	r2, [r7, #28]
 8001b46:	3212      	adds	r2, #18
 8001b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b4c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b52:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001b54:	e040      	b.n	8001bd8 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d112      	bne.n	8001b84 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	4618      	mov	r0, r3
 8001b64:	f004 fca2 	bl	80064ac <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d102      	bne.n	8001b74 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	74fb      	strb	r3, [r7, #19]
 8001b72:	e007      	b.n	8001b84 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	461a      	mov	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001b84:	7cfb      	ldrb	r3, [r7, #19]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d026      	beq.n	8001bd8 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d103      	bne.n	8001b9a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	4a1e      	ldr	r2, [pc, #120]	@ (8001c10 <ETH_UpdateDescriptor+0xe4>)
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	e003      	b.n	8001ba2 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8001ba0:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ba2:	f3bf 8f5f 	dmb	sy
}
 8001ba6:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d902      	bls.n	8001bc6 <ETH_UpdateDescriptor+0x9a>
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	3b04      	subs	r3, #4
 8001bc4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	3212      	adds	r2, #18
 8001bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd0:	617b      	str	r3, [r7, #20]
      desccount--;
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <ETH_UpdateDescriptor+0xb8>
 8001bde:	7cfb      	ldrb	r3, [r7, #19]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1b8      	bne.n	8001b56 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d00c      	beq.n	8001c08 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001c08:	bf00      	nop
 8001c0a:	3720      	adds	r7, #32
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	80004600 	.word	0x80004600

08001c14 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c2a:	2b40      	cmp	r3, #64	@ 0x40
 8001c2c:	d112      	bne.n	8001c54 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c3c:	2b40      	cmp	r3, #64	@ 0x40
 8001c3e:	d109      	bne.n	8001c54 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b50      	ldr	r3, [pc, #320]	@ (8001d8c <HAL_ETH_IRQHandler+0x178>)
 8001c4c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f8ac 	bl	8001dac <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d113      	bne.n	8001c8e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d10a      	bne.n	8001c8e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c80:	461a      	mov	r2, r3
 8001c82:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001c86:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f885 	bl	8001d98 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ca0:	d14c      	bne.n	8001d3c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001cb4:	d142      	bne.n	8001d3c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cbc:	f043 0208 	orr.w	r2, r3, #8
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cd8:	d11a      	bne.n	8001d10 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ce2:	695a      	ldr	r2, [r3, #20]
 8001ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d90 <HAL_ETH_IRQHandler+0x17c>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001d00:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d04:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	22e0      	movs	r2, #224	@ 0xe0
 8001d0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001d0e:	e012      	b.n	8001d36 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d18:	695a      	ldr	r2, [r3, #20]
 8001d1a:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001d1e:	4013      	ands	r3, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d2e:	461a      	mov	r2, r3
 8001d30:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001d34:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f842 	bl	8001dc0 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d10e      	bne.n	8001d68 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d50:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f83a 	bl	8001dd4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001d68:	4b0a      	ldr	r3, [pc, #40]	@ (8001d94 <HAL_ETH_IRQHandler+0x180>)
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d006      	beq.n	8001d82 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001d74:	4b07      	ldr	r3, [pc, #28]	@ (8001d94 <HAL_ETH_IRQHandler+0x180>)
 8001d76:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001d7a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f833 	bl	8001de8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	00010040 	.word	0x00010040
 8001d90:	007e2000 	.word	0x007e2000
 8001d94:	40013c00 	.word	0x40013c00

08001d98 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f003 031c 	and.w	r3, r3, #28
 8001e18:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	02db      	lsls	r3, r3, #11
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	019b      	lsls	r3, r3, #6
 8001e2a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f023 0302 	bic.w	r3, r3, #2
 8001e3a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001e4c:	f7ff faa0 	bl	8001390 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e52:	e00d      	b.n	8001e70 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001e54:	f7ff fa9c 	bl	8001390 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e62:	d301      	bcc.n	8001e68 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e010      	b.n	8001e8a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1ec      	bne.n	8001e54 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	461a      	mov	r2, r3
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b086      	sub	sp, #24
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
 8001e9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f003 031c 	and.w	r3, r3, #28
 8001eae:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	02db      	lsls	r3, r3, #11
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	019b      	lsls	r3, r3, #6
 8001ec0:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001eec:	f7ff fa50 	bl	8001390 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ef2:	e00d      	b.n	8001f10 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001ef4:	f7ff fa4c 	bl	8001390 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f02:	d301      	bcc.n	8001f08 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e009      	b.n	8001f1c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1ec      	bne.n	8001ef4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0d9      	b.n	80020ec <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	bf14      	ite	ne
 8001f46:	2301      	movne	r3, #1
 8001f48:	2300      	moveq	r3, #0
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	bf0c      	ite	eq
 8001f70:	2301      	moveq	r3, #1
 8001f72:	2300      	movne	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	461a      	mov	r2, r3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf14      	ite	ne
 8001f8c:	2301      	movne	r3, #1
 8001f8e:	2300      	moveq	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	bf0c      	ite	eq
 8001fa6:	2301      	moveq	r3, #1
 8001fa8:	2300      	movne	r3, #0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	bf14      	ite	ne
 8001fc0:	2301      	movne	r3, #1
 8001fc2:	2300      	moveq	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	bf0c      	ite	eq
 8001ff6:	2301      	moveq	r3, #1
 8001ff8:	2300      	movne	r3, #0
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf0c      	ite	eq
 8002010:	2301      	moveq	r3, #1
 8002012:	2300      	movne	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	461a      	mov	r2, r3
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002026:	2b00      	cmp	r3, #0
 8002028:	bf14      	ite	ne
 800202a:	2301      	movne	r3, #1
 800202c:	2300      	moveq	r3, #0
 800202e:	b2db      	uxtb	r3, r3
 8002030:	461a      	mov	r2, r3
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800204e:	2b00      	cmp	r3, #0
 8002050:	bf14      	ite	ne
 8002052:	2301      	movne	r3, #1
 8002054:	2300      	moveq	r3, #0
 8002056:	b2db      	uxtb	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf14      	ite	ne
 800206c:	2301      	movne	r3, #1
 800206e:	2300      	moveq	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002084:	2b00      	cmp	r3, #0
 8002086:	bf0c      	ite	eq
 8002088:	2301      	moveq	r3, #1
 800208a:	2300      	movne	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	461a      	mov	r2, r3
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	0c1b      	lsrs	r3, r3, #16
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	bf14      	ite	ne
 80020c0:	2301      	movne	r3, #1
 80020c2:	2300      	moveq	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	461a      	mov	r2, r3
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80020d8:	2b00      	cmp	r3, #0
 80020da:	bf14      	ite	ne
 80020dc:	2301      	movne	r3, #1
 80020de:	2300      	moveq	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e00b      	b.n	8002124 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002112:	2b10      	cmp	r3, #16
 8002114:	d105      	bne.n	8002122 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002116:	6839      	ldr	r1, [r7, #0]
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f883 	bl	8002224 <ETH_SetMACConfig>

    return HAL_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	e000      	b.n	8002124 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
  }
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f023 031c 	bic.w	r3, r3, #28
 8002142:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002144:	f001 fc64 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8002148:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	4a1d      	ldr	r2, [pc, #116]	@ (80021c4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d908      	bls.n	8002164 <HAL_ETH_SetMDIOClockRange+0x38>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	4a1c      	ldr	r2, [pc, #112]	@ (80021c8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d804      	bhi.n	8002164 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f043 0308 	orr.w	r3, r3, #8
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	e027      	b.n	80021b4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	4a18      	ldr	r2, [pc, #96]	@ (80021c8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d908      	bls.n	800217e <HAL_ETH_SetMDIOClockRange+0x52>
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	4a17      	ldr	r2, [pc, #92]	@ (80021cc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d204      	bcs.n	800217e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f043 030c 	orr.w	r3, r3, #12
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	e01a      	b.n	80021b4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	4a12      	ldr	r2, [pc, #72]	@ (80021cc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d303      	bcc.n	800218e <HAL_ETH_SetMDIOClockRange+0x62>
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	4a11      	ldr	r2, [pc, #68]	@ (80021d0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d911      	bls.n	80021b2 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	4a0f      	ldr	r2, [pc, #60]	@ (80021d0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d908      	bls.n	80021a8 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	4a0e      	ldr	r2, [pc, #56]	@ (80021d4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d804      	bhi.n	80021a8 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f043 0304 	orr.w	r3, r3, #4
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	e005      	b.n	80021b4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f043 0310 	orr.w	r3, r3, #16
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	e000      	b.n	80021b4 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80021b2:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	611a      	str	r2, [r3, #16]
}
 80021bc:	bf00      	nop
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	01312cff 	.word	0x01312cff
 80021c8:	02160ebf 	.word	0x02160ebf
 80021cc:	03938700 	.word	0x03938700
 80021d0:	05f5e0ff 	.word	0x05f5e0ff
 80021d4:	08f0d17f 	.word	0x08f0d17f

080021d8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021fa:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002208:	2001      	movs	r0, #1
 800220a:	f7ff f8cd 	bl	80013a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002218:	6193      	str	r3, [r2, #24]
}
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	4b51      	ldr	r3, [pc, #324]	@ (8002380 <ETH_SetMACConfig+0x15c>)
 800223a:	4013      	ands	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	7c1b      	ldrb	r3, [r3, #16]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d102      	bne.n	800224c <ETH_SetMACConfig+0x28>
 8002246:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800224a:	e000      	b.n	800224e <ETH_SetMACConfig+0x2a>
 800224c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	7c5b      	ldrb	r3, [r3, #17]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d102      	bne.n	800225c <ETH_SetMACConfig+0x38>
 8002256:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800225a:	e000      	b.n	800225e <ETH_SetMACConfig+0x3a>
 800225c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800225e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002264:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	7fdb      	ldrb	r3, [r3, #31]
 800226a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800226c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002272:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	7f92      	ldrb	r2, [r2, #30]
 8002278:	2a00      	cmp	r2, #0
 800227a:	d102      	bne.n	8002282 <ETH_SetMACConfig+0x5e>
 800227c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002280:	e000      	b.n	8002284 <ETH_SetMACConfig+0x60>
 8002282:	2200      	movs	r2, #0
                        macconf->Speed |
 8002284:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	7f1b      	ldrb	r3, [r3, #28]
 800228a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800228c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002292:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	791b      	ldrb	r3, [r3, #4]
 8002298:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800229a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	f892 2020 	ldrb.w	r2, [r2, #32]
 80022a2:	2a00      	cmp	r2, #0
 80022a4:	d102      	bne.n	80022ac <ETH_SetMACConfig+0x88>
 80022a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022aa:	e000      	b.n	80022ae <ETH_SetMACConfig+0x8a>
 80022ac:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	7bdb      	ldrb	r3, [r3, #15]
 80022b4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80022b6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80022bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80022c4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022c6:	4313      	orrs	r3, r2
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022de:	2001      	movs	r0, #1
 80022e0:	f7ff f862 	bl	80013a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80022fa:	4013      	ands	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002302:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800230a:	2a00      	cmp	r2, #0
 800230c:	d101      	bne.n	8002312 <ETH_SetMACConfig+0xee>
 800230e:	2280      	movs	r2, #128	@ 0x80
 8002310:	e000      	b.n	8002314 <ETH_SetMACConfig+0xf0>
 8002312:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002314:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800231a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002322:	2a01      	cmp	r2, #1
 8002324:	d101      	bne.n	800232a <ETH_SetMACConfig+0x106>
 8002326:	2208      	movs	r2, #8
 8002328:	e000      	b.n	800232c <ETH_SetMACConfig+0x108>
 800232a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800232c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002334:	2a01      	cmp	r2, #1
 8002336:	d101      	bne.n	800233c <ETH_SetMACConfig+0x118>
 8002338:	2204      	movs	r2, #4
 800233a:	e000      	b.n	800233e <ETH_SetMACConfig+0x11a>
 800233c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800233e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002346:	2a01      	cmp	r2, #1
 8002348:	d101      	bne.n	800234e <ETH_SetMACConfig+0x12a>
 800234a:	2202      	movs	r2, #2
 800234c:	e000      	b.n	8002350 <ETH_SetMACConfig+0x12c>
 800234e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002350:	4313      	orrs	r3, r2
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	4313      	orrs	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002368:	2001      	movs	r0, #1
 800236a:	f7ff f81d 	bl	80013a8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	619a      	str	r2, [r3, #24]
}
 8002376:	bf00      	nop
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	ff20810f 	.word	0xff20810f

08002384 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	4b3d      	ldr	r3, [pc, #244]	@ (8002494 <ETH_SetDMAConfig+0x110>)
 800239e:	4013      	ands	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	7b1b      	ldrb	r3, [r3, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d102      	bne.n	80023b0 <ETH_SetDMAConfig+0x2c>
 80023aa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80023ae:	e000      	b.n	80023b2 <ETH_SetDMAConfig+0x2e>
 80023b0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	7b5b      	ldrb	r3, [r3, #13]
 80023b6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023b8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	7f52      	ldrb	r2, [r2, #29]
 80023be:	2a00      	cmp	r2, #0
 80023c0:	d102      	bne.n	80023c8 <ETH_SetDMAConfig+0x44>
 80023c2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80023c6:	e000      	b.n	80023ca <ETH_SetDMAConfig+0x46>
 80023c8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80023ca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	7b9b      	ldrb	r3, [r3, #14]
 80023d0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80023d2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80023d8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	7f1b      	ldrb	r3, [r3, #28]
 80023de:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80023e0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	7f9b      	ldrb	r3, [r3, #30]
 80023e6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80023e8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80023ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023f6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023f8:	4313      	orrs	r3, r2
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002408:	461a      	mov	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800241a:	2001      	movs	r0, #1
 800241c:	f7fe ffc4 	bl	80013a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002428:	461a      	mov	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	791b      	ldrb	r3, [r3, #4]
 8002432:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002438:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800243e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002444:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800244c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800244e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002454:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002456:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800245c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002466:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800246a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002478:	2001      	movs	r0, #1
 800247a:	f7fe ff95 	bl	80013a8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002486:	461a      	mov	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6013      	str	r3, [r2, #0]
}
 800248c:	bf00      	nop
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	f8de3f23 	.word	0xf8de3f23

08002498 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b0a6      	sub	sp, #152	@ 0x98
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80024a0:	2301      	movs	r3, #1
 80024a2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80024a6:	2301      	movs	r3, #1
 80024a8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80024ac:	2300      	movs	r3, #0
 80024ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80024b6:	2301      	movs	r3, #1
 80024b8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80024bc:	2300      	movs	r3, #0
 80024be:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80024c2:	2301      	movs	r3, #1
 80024c4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80024c8:	2300      	movs	r3, #0
 80024ca:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80024d4:	2300      	movs	r3, #0
 80024d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80024fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80024fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002500:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002504:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002506:	2300      	movs	r3, #0
 8002508:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800250c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002510:	4619      	mov	r1, r3
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff fe86 	bl	8002224 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002518:	2301      	movs	r3, #1
 800251a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800251c:	2301      	movs	r3, #1
 800251e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002520:	2301      	movs	r3, #1
 8002522:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002526:	2301      	movs	r3, #1
 8002528:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800252e:	2300      	movs	r3, #0
 8002530:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002534:	2300      	movs	r3, #0
 8002536:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800253a:	2300      	movs	r3, #0
 800253c:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800253e:	2301      	movs	r3, #1
 8002540:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002544:	2301      	movs	r3, #1
 8002546:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002548:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800254c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800254e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002552:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002554:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002558:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800255a:	2301      	movs	r3, #1
 800255c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002560:	2300      	movs	r3, #0
 8002562:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002564:	2300      	movs	r3, #0
 8002566:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002568:	f107 0308 	add.w	r3, r7, #8
 800256c:	4619      	mov	r1, r3
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff ff08 	bl	8002384 <ETH_SetDMAConfig>
}
 8002574:	bf00      	nop
 8002576:	3798      	adds	r7, #152	@ 0x98
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3305      	adds	r3, #5
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	3204      	adds	r2, #4
 8002594:	7812      	ldrb	r2, [r2, #0]
 8002596:	4313      	orrs	r3, r2
 8002598:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	4b11      	ldr	r3, [pc, #68]	@ (80025e4 <ETH_MACAddressConfig+0x68>)
 800259e:	4413      	add	r3, r2
 80025a0:	461a      	mov	r2, r3
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3303      	adds	r3, #3
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	061a      	lsls	r2, r3, #24
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3302      	adds	r3, #2
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	041b      	lsls	r3, r3, #16
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3301      	adds	r3, #1
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	021b      	lsls	r3, r3, #8
 80025c0:	4313      	orrs	r3, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	7812      	ldrb	r2, [r2, #0]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	4b06      	ldr	r3, [pc, #24]	@ (80025e8 <ETH_MACAddressConfig+0x6c>)
 80025ce:	4413      	add	r3, r2
 80025d0:	461a      	mov	r2, r3
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	6013      	str	r3, [r2, #0]
}
 80025d6:	bf00      	nop
 80025d8:	371c      	adds	r7, #28
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40028040 	.word	0x40028040
 80025e8:	40028044 	.word	0x40028044

080025ec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025f4:	2300      	movs	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	e03e      	b.n	8002678 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68d9      	ldr	r1, [r3, #12]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	440b      	add	r3, r1
 800260a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2200      	movs	r2, #0
 8002616:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2200      	movs	r2, #0
 8002622:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	3206      	adds	r2, #6
 800262c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d80c      	bhi.n	800265c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68d9      	ldr	r1, [r3, #12]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	4613      	mov	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	440b      	add	r3, r1
 8002654:	461a      	mov	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	e004      	b.n	8002666 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	461a      	mov	r2, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	3301      	adds	r3, #1
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2b03      	cmp	r3, #3
 800267c:	d9bd      	bls.n	80025fa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002690:	611a      	str	r2, [r3, #16]
}
 8002692:	bf00      	nop
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800269e:	b480      	push	{r7}
 80026a0:	b085      	sub	sp, #20
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	e046      	b.n	800273a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6919      	ldr	r1, [r3, #16]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	440b      	add	r3, r1
 80026bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2200      	movs	r2, #0
 80026c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2200      	movs	r2, #0
 80026ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2200      	movs	r2, #0
 80026d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2200      	movs	r2, #0
 80026da:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2200      	movs	r2, #0
 80026e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80026e8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 80026f0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80026fe:	68b9      	ldr	r1, [r7, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	3212      	adds	r2, #18
 8002706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b02      	cmp	r3, #2
 800270e:	d80c      	bhi.n	800272a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6919      	ldr	r1, [r3, #16]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	440b      	add	r3, r1
 8002722:	461a      	mov	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	60da      	str	r2, [r3, #12]
 8002728:	e004      	b.n	8002734 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	461a      	mov	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	3301      	adds	r3, #1
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d9b5      	bls.n	80026ac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691a      	ldr	r2, [r3, #16]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800276a:	60da      	str	r2, [r3, #12]
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002778:	b480      	push	{r7}
 800277a:	b08d      	sub	sp, #52	@ 0x34
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	3318      	adds	r3, #24
 8002788:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800279e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80027b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027ba:	d007      	beq.n	80027cc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c0:	3304      	adds	r3, #4
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80027cc:	2302      	movs	r3, #2
 80027ce:	e0ff      	b.n	80029d0 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80027d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d2:	3301      	adds	r3, #1
 80027d4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	4b7d      	ldr	r3, [pc, #500]	@ (80029dc <ETH_Prepare_Tx_Descriptors+0x264>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	6852      	ldr	r2, [r2, #4]
 80027ec:	431a      	orrs	r2, r3
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d008      	beq.n	8002810 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	431a      	orrs	r2, r3
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	431a      	orrs	r2, r3
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b00      	cmp	r3, #0
 8002838:	d005      	beq.n	8002846 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002852:	f3bf 8f5f 	dmb	sy
}
 8002856:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002864:	e082      	b.n	800296c <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d006      	beq.n	8002886 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	e005      	b.n	8002892 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002894:	3301      	adds	r3, #1
 8002896:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800289a:	2b03      	cmp	r3, #3
 800289c:	d902      	bls.n	80028a4 <ETH_Prepare_Tx_Descriptors+0x12c>
 800289e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a0:	3b04      	subs	r3, #4
 80028a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ac:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80028b6:	6a3b      	ldr	r3, [r7, #32]
 80028b8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80028c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028c6:	d007      	beq.n	80028d8 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028cc:	3304      	adds	r3, #4
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d029      	beq.n	800292c <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80028e6:	2300      	movs	r3, #0
 80028e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028ea:	e019      	b.n	8002920 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 80028ec:	f3bf 8f5f 	dmb	sy
}
 80028f0:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80028fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002900:	3301      	adds	r3, #1
 8002902:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002906:	2b03      	cmp	r3, #3
 8002908:	d902      	bls.n	8002910 <ETH_Prepare_Tx_Descriptors+0x198>
 800290a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800290c:	3b04      	subs	r3, #4
 800290e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002918:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800291a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291c:	3301      	adds	r3, #1
 800291e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002920:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	429a      	cmp	r2, r3
 8002926:	d3e1      	bcc.n	80028ec <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002928:	2302      	movs	r3, #2
 800292a:	e051      	b.n	80029d0 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 800292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292e:	3301      	adds	r3, #1
 8002930:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	461a      	mov	r2, r3
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	4b25      	ldr	r3, [pc, #148]	@ (80029dc <ETH_Prepare_Tx_Descriptors+0x264>)
 8002948:	4013      	ands	r3, r2
 800294a:	69fa      	ldr	r2, [r7, #28]
 800294c:	6852      	ldr	r2, [r2, #4]
 800294e:	431a      	orrs	r2, r3
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	3301      	adds	r3, #1
 8002958:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800295a:	f3bf 8f5f 	dmb	sy
}
 800295e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	f47f af78 	bne.w	8002866 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d006      	beq.n	800298a <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	e005      	b.n	8002996 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029a6:	6979      	ldr	r1, [r7, #20]
 80029a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029aa:	3304      	adds	r3, #4
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029b6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80029b8:	b672      	cpsid	i
}
 80029ba:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	4413      	add	r3, r2
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80029ca:	b662      	cpsie	i
}
 80029cc:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3734      	adds	r7, #52	@ 0x34
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	ffffe000 	.word	0xffffe000

080029e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b089      	sub	sp, #36	@ 0x24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	e175      	b.n	8002cec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a00:	2201      	movs	r2, #1
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	f040 8164 	bne.w	8002ce6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d005      	beq.n	8002a36 <HAL_GPIO_Init+0x56>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d130      	bne.n	8002a98 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	2203      	movs	r2, #3
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f003 0201 	and.w	r2, r3, #1
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d017      	beq.n	8002ad4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	2203      	movs	r2, #3
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d123      	bne.n	8002b28 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	08da      	lsrs	r2, r3, #3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3208      	adds	r2, #8
 8002ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	220f      	movs	r2, #15
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	08da      	lsrs	r2, r3, #3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3208      	adds	r2, #8
 8002b22:	69b9      	ldr	r1, [r7, #24]
 8002b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	2203      	movs	r2, #3
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 0203 	and.w	r2, r3, #3
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 80be 	beq.w	8002ce6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6a:	4b66      	ldr	r3, [pc, #408]	@ (8002d04 <HAL_GPIO_Init+0x324>)
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6e:	4a65      	ldr	r2, [pc, #404]	@ (8002d04 <HAL_GPIO_Init+0x324>)
 8002b70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b74:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b76:	4b63      	ldr	r3, [pc, #396]	@ (8002d04 <HAL_GPIO_Init+0x324>)
 8002b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b82:	4a61      	ldr	r2, [pc, #388]	@ (8002d08 <HAL_GPIO_Init+0x328>)
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	089b      	lsrs	r3, r3, #2
 8002b88:	3302      	adds	r3, #2
 8002b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	220f      	movs	r2, #15
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a58      	ldr	r2, [pc, #352]	@ (8002d0c <HAL_GPIO_Init+0x32c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d037      	beq.n	8002c1e <HAL_GPIO_Init+0x23e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a57      	ldr	r2, [pc, #348]	@ (8002d10 <HAL_GPIO_Init+0x330>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d031      	beq.n	8002c1a <HAL_GPIO_Init+0x23a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a56      	ldr	r2, [pc, #344]	@ (8002d14 <HAL_GPIO_Init+0x334>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d02b      	beq.n	8002c16 <HAL_GPIO_Init+0x236>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a55      	ldr	r2, [pc, #340]	@ (8002d18 <HAL_GPIO_Init+0x338>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d025      	beq.n	8002c12 <HAL_GPIO_Init+0x232>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a54      	ldr	r2, [pc, #336]	@ (8002d1c <HAL_GPIO_Init+0x33c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d01f      	beq.n	8002c0e <HAL_GPIO_Init+0x22e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a53      	ldr	r2, [pc, #332]	@ (8002d20 <HAL_GPIO_Init+0x340>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d019      	beq.n	8002c0a <HAL_GPIO_Init+0x22a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a52      	ldr	r2, [pc, #328]	@ (8002d24 <HAL_GPIO_Init+0x344>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <HAL_GPIO_Init+0x226>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a51      	ldr	r2, [pc, #324]	@ (8002d28 <HAL_GPIO_Init+0x348>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00d      	beq.n	8002c02 <HAL_GPIO_Init+0x222>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a50      	ldr	r2, [pc, #320]	@ (8002d2c <HAL_GPIO_Init+0x34c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d007      	beq.n	8002bfe <HAL_GPIO_Init+0x21e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a4f      	ldr	r2, [pc, #316]	@ (8002d30 <HAL_GPIO_Init+0x350>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d101      	bne.n	8002bfa <HAL_GPIO_Init+0x21a>
 8002bf6:	2309      	movs	r3, #9
 8002bf8:	e012      	b.n	8002c20 <HAL_GPIO_Init+0x240>
 8002bfa:	230a      	movs	r3, #10
 8002bfc:	e010      	b.n	8002c20 <HAL_GPIO_Init+0x240>
 8002bfe:	2308      	movs	r3, #8
 8002c00:	e00e      	b.n	8002c20 <HAL_GPIO_Init+0x240>
 8002c02:	2307      	movs	r3, #7
 8002c04:	e00c      	b.n	8002c20 <HAL_GPIO_Init+0x240>
 8002c06:	2306      	movs	r3, #6
 8002c08:	e00a      	b.n	8002c20 <HAL_GPIO_Init+0x240>
 8002c0a:	2305      	movs	r3, #5
 8002c0c:	e008      	b.n	8002c20 <HAL_GPIO_Init+0x240>
 8002c0e:	2304      	movs	r3, #4
 8002c10:	e006      	b.n	8002c20 <HAL_GPIO_Init+0x240>
 8002c12:	2303      	movs	r3, #3
 8002c14:	e004      	b.n	8002c20 <HAL_GPIO_Init+0x240>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e002      	b.n	8002c20 <HAL_GPIO_Init+0x240>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <HAL_GPIO_Init+0x240>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	f002 0203 	and.w	r2, r2, #3
 8002c26:	0092      	lsls	r2, r2, #2
 8002c28:	4093      	lsls	r3, r2
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c30:	4935      	ldr	r1, [pc, #212]	@ (8002d08 <HAL_GPIO_Init+0x328>)
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	089b      	lsrs	r3, r3, #2
 8002c36:	3302      	adds	r3, #2
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d34 <HAL_GPIO_Init+0x354>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c62:	4a34      	ldr	r2, [pc, #208]	@ (8002d34 <HAL_GPIO_Init+0x354>)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c68:	4b32      	ldr	r3, [pc, #200]	@ (8002d34 <HAL_GPIO_Init+0x354>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c8c:	4a29      	ldr	r2, [pc, #164]	@ (8002d34 <HAL_GPIO_Init+0x354>)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c92:	4b28      	ldr	r3, [pc, #160]	@ (8002d34 <HAL_GPIO_Init+0x354>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cb6:	4a1f      	ldr	r2, [pc, #124]	@ (8002d34 <HAL_GPIO_Init+0x354>)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d34 <HAL_GPIO_Init+0x354>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ce0:	4a14      	ldr	r2, [pc, #80]	@ (8002d34 <HAL_GPIO_Init+0x354>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	2b0f      	cmp	r3, #15
 8002cf0:	f67f ae86 	bls.w	8002a00 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3724      	adds	r7, #36	@ 0x24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40013800 	.word	0x40013800
 8002d0c:	40020000 	.word	0x40020000
 8002d10:	40020400 	.word	0x40020400
 8002d14:	40020800 	.word	0x40020800
 8002d18:	40020c00 	.word	0x40020c00
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40021400 	.word	0x40021400
 8002d24:	40021800 	.word	0x40021800
 8002d28:	40021c00 	.word	0x40021c00
 8002d2c:	40022000 	.word	0x40022000
 8002d30:	40022400 	.word	0x40022400
 8002d34:	40013c00 	.word	0x40013c00

08002d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	807b      	strh	r3, [r7, #2]
 8002d44:	4613      	mov	r3, r2
 8002d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d48:	787b      	ldrb	r3, [r7, #1]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d4e:	887a      	ldrh	r2, [r7, #2]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d54:	e003      	b.n	8002d5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d56:	887b      	ldrh	r3, [r7, #2]
 8002d58:	041a      	lsls	r2, r3, #16
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	619a      	str	r2, [r3, #24]
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b085      	sub	sp, #20
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	460b      	mov	r3, r1
 8002d74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d7c:	887a      	ldrh	r2, [r7, #2]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4013      	ands	r3, r2
 8002d82:	041a      	lsls	r2, r3, #16
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	43d9      	mvns	r1, r3
 8002d88:	887b      	ldrh	r3, [r7, #2]
 8002d8a:	400b      	ands	r3, r1
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	619a      	str	r2, [r3, #24]
}
 8002d92:	bf00      	nop
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002da0:	b08f      	sub	sp, #60	@ 0x3c
 8002da2:	af0a      	add	r7, sp, #40	@ 0x28
 8002da4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e116      	b.n	8002fde <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d106      	bne.n	8002dd0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fd feb4 	bl	8000b38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d102      	bne.n	8002dea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f002 fbf2 	bl	80055d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	603b      	str	r3, [r7, #0]
 8002dfa:	687e      	ldr	r6, [r7, #4]
 8002dfc:	466d      	mov	r5, sp
 8002dfe:	f106 0410 	add.w	r4, r6, #16
 8002e02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e12:	1d33      	adds	r3, r6, #4
 8002e14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e16:	6838      	ldr	r0, [r7, #0]
 8002e18:	f002 fb86 	bl	8005528 <USB_CoreInit>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d005      	beq.n	8002e2e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2202      	movs	r2, #2
 8002e26:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e0d7      	b.n	8002fde <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2100      	movs	r1, #0
 8002e34:	4618      	mov	r0, r3
 8002e36:	f002 fbe0 	bl	80055fa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	73fb      	strb	r3, [r7, #15]
 8002e3e:	e04a      	b.n	8002ed6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e40:	7bfa      	ldrb	r2, [r7, #15]
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4413      	add	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	333d      	adds	r3, #61	@ 0x3d
 8002e50:	2201      	movs	r2, #1
 8002e52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e54:	7bfa      	ldrb	r2, [r7, #15]
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	333c      	adds	r3, #60	@ 0x3c
 8002e64:	7bfa      	ldrb	r2, [r7, #15]
 8002e66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e68:	7bfa      	ldrb	r2, [r7, #15]
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	b298      	uxth	r0, r3
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	3344      	adds	r3, #68	@ 0x44
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e80:	7bfa      	ldrb	r2, [r7, #15]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	3340      	adds	r3, #64	@ 0x40
 8002e90:	2200      	movs	r2, #0
 8002e92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e94:	7bfa      	ldrb	r2, [r7, #15]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	3348      	adds	r3, #72	@ 0x48
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ea8:	7bfa      	ldrb	r2, [r7, #15]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	334c      	adds	r3, #76	@ 0x4c
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ebc:	7bfa      	ldrb	r2, [r7, #15]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	3354      	adds	r3, #84	@ 0x54
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	73fb      	strb	r3, [r7, #15]
 8002ed6:	7bfa      	ldrb	r2, [r7, #15]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d3af      	bcc.n	8002e40 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	73fb      	strb	r3, [r7, #15]
 8002ee4:	e044      	b.n	8002f70 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ee6:	7bfa      	ldrb	r2, [r7, #15]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8002ef8:	2200      	movs	r2, #0
 8002efa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002efc:	7bfa      	ldrb	r2, [r7, #15]
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8002f0e:	7bfa      	ldrb	r2, [r7, #15]
 8002f10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f12:	7bfa      	ldrb	r2, [r7, #15]
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002f24:	2200      	movs	r2, #0
 8002f26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f28:	7bfa      	ldrb	r2, [r7, #15]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	4413      	add	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f3e:	7bfa      	ldrb	r2, [r7, #15]
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4413      	add	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f54:	7bfa      	ldrb	r2, [r7, #15]
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	73fb      	strb	r3, [r7, #15]
 8002f70:	7bfa      	ldrb	r2, [r7, #15]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d3b5      	bcc.n	8002ee6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	603b      	str	r3, [r7, #0]
 8002f80:	687e      	ldr	r6, [r7, #4]
 8002f82:	466d      	mov	r5, sp
 8002f84:	f106 0410 	add.w	r4, r6, #16
 8002f88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f94:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f98:	1d33      	adds	r3, r6, #4
 8002f9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f9c:	6838      	ldr	r0, [r7, #0]
 8002f9e:	f002 fb79 	bl	8005694 <USB_DevInit>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e014      	b.n	8002fde <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d102      	bne.n	8002fd2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f80b 	bl	8002fe8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f002 fd37 	bl	8005a4a <USB_DevDisconnect>

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002fe8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003016:	4b05      	ldr	r3, [pc, #20]	@ (800302c <HAL_PCDEx_ActivateLPM+0x44>)
 8003018:	4313      	orrs	r3, r2
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	10000003 	.word	0x10000003

08003030 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003036:	2300      	movs	r3, #0
 8003038:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800303a:	4b23      	ldr	r3, [pc, #140]	@ (80030c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	4a22      	ldr	r2, [pc, #136]	@ (80030c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003044:	6413      	str	r3, [r2, #64]	@ 0x40
 8003046:	4b20      	ldr	r3, [pc, #128]	@ (80030c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800304e:	603b      	str	r3, [r7, #0]
 8003050:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003052:	4b1e      	ldr	r3, [pc, #120]	@ (80030cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1d      	ldr	r2, [pc, #116]	@ (80030cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800305c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800305e:	f7fe f997 	bl	8001390 <HAL_GetTick>
 8003062:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003064:	e009      	b.n	800307a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003066:	f7fe f993 	bl	8001390 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003074:	d901      	bls.n	800307a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e022      	b.n	80030c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800307a:	4b14      	ldr	r3, [pc, #80]	@ (80030cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003086:	d1ee      	bne.n	8003066 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003088:	4b10      	ldr	r3, [pc, #64]	@ (80030cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a0f      	ldr	r2, [pc, #60]	@ (80030cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800308e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003092:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003094:	f7fe f97c 	bl	8001390 <HAL_GetTick>
 8003098:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800309a:	e009      	b.n	80030b0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800309c:	f7fe f978 	bl	8001390 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030aa:	d901      	bls.n	80030b0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e007      	b.n	80030c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030b0:	4b06      	ldr	r3, [pc, #24]	@ (80030cc <HAL_PWREx_EnableOverDrive+0x9c>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030bc:	d1ee      	bne.n	800309c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40007000 	.word	0x40007000

080030d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80030d8:	2300      	movs	r3, #0
 80030da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e29b      	b.n	800361e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 8087 	beq.w	8003202 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030f4:	4b96      	ldr	r3, [pc, #600]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 030c 	and.w	r3, r3, #12
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d00c      	beq.n	800311a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003100:	4b93      	ldr	r3, [pc, #588]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 030c 	and.w	r3, r3, #12
 8003108:	2b08      	cmp	r3, #8
 800310a:	d112      	bne.n	8003132 <HAL_RCC_OscConfig+0x62>
 800310c:	4b90      	ldr	r3, [pc, #576]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003114:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003118:	d10b      	bne.n	8003132 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311a:	4b8d      	ldr	r3, [pc, #564]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d06c      	beq.n	8003200 <HAL_RCC_OscConfig+0x130>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d168      	bne.n	8003200 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e275      	b.n	800361e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800313a:	d106      	bne.n	800314a <HAL_RCC_OscConfig+0x7a>
 800313c:	4b84      	ldr	r3, [pc, #528]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a83      	ldr	r2, [pc, #524]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 8003142:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	e02e      	b.n	80031a8 <HAL_RCC_OscConfig+0xd8>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10c      	bne.n	800316c <HAL_RCC_OscConfig+0x9c>
 8003152:	4b7f      	ldr	r3, [pc, #508]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a7e      	ldr	r2, [pc, #504]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 8003158:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	4b7c      	ldr	r3, [pc, #496]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a7b      	ldr	r2, [pc, #492]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 8003164:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	e01d      	b.n	80031a8 <HAL_RCC_OscConfig+0xd8>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003174:	d10c      	bne.n	8003190 <HAL_RCC_OscConfig+0xc0>
 8003176:	4b76      	ldr	r3, [pc, #472]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a75      	ldr	r2, [pc, #468]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 800317c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	4b73      	ldr	r3, [pc, #460]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a72      	ldr	r2, [pc, #456]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 8003188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	e00b      	b.n	80031a8 <HAL_RCC_OscConfig+0xd8>
 8003190:	4b6f      	ldr	r3, [pc, #444]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a6e      	ldr	r2, [pc, #440]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 8003196:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	4b6c      	ldr	r3, [pc, #432]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a6b      	ldr	r2, [pc, #428]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 80031a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d013      	beq.n	80031d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7fe f8ee 	bl	8001390 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b8:	f7fe f8ea 	bl	8001390 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b64      	cmp	r3, #100	@ 0x64
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e229      	b.n	800361e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ca:	4b61      	ldr	r3, [pc, #388]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0xe8>
 80031d6:	e014      	b.n	8003202 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d8:	f7fe f8da 	bl	8001390 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e0:	f7fe f8d6 	bl	8001390 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b64      	cmp	r3, #100	@ 0x64
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e215      	b.n	800361e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f2:	4b57      	ldr	r3, [pc, #348]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x110>
 80031fe:	e000      	b.n	8003202 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d069      	beq.n	80032e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800320e:	4b50      	ldr	r3, [pc, #320]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00b      	beq.n	8003232 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800321a:	4b4d      	ldr	r3, [pc, #308]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b08      	cmp	r3, #8
 8003224:	d11c      	bne.n	8003260 <HAL_RCC_OscConfig+0x190>
 8003226:	4b4a      	ldr	r3, [pc, #296]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d116      	bne.n	8003260 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003232:	4b47      	ldr	r3, [pc, #284]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d005      	beq.n	800324a <HAL_RCC_OscConfig+0x17a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d001      	beq.n	800324a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e1e9      	b.n	800361e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324a:	4b41      	ldr	r3, [pc, #260]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	493d      	ldr	r1, [pc, #244]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 800325a:	4313      	orrs	r3, r2
 800325c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800325e:	e040      	b.n	80032e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d023      	beq.n	80032b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003268:	4b39      	ldr	r3, [pc, #228]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a38      	ldr	r2, [pc, #224]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fe f88c 	bl	8001390 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800327c:	f7fe f888 	bl	8001390 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e1c7      	b.n	800361e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328e:	4b30      	ldr	r3, [pc, #192]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329a:	4b2d      	ldr	r3, [pc, #180]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4929      	ldr	r1, [pc, #164]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	600b      	str	r3, [r1, #0]
 80032ae:	e018      	b.n	80032e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b0:	4b27      	ldr	r3, [pc, #156]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a26      	ldr	r2, [pc, #152]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 80032b6:	f023 0301 	bic.w	r3, r3, #1
 80032ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fe f868 	bl	8001390 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c4:	f7fe f864 	bl	8001390 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e1a3      	b.n	800361e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d038      	beq.n	8003360 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d019      	beq.n	800332a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032f6:	4b16      	ldr	r3, [pc, #88]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 80032f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032fa:	4a15      	ldr	r2, [pc, #84]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003302:	f7fe f845 	bl	8001390 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800330a:	f7fe f841 	bl	8001390 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e180      	b.n	800361e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331c:	4b0c      	ldr	r3, [pc, #48]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 800331e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_OscConfig+0x23a>
 8003328:	e01a      	b.n	8003360 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800332a:	4b09      	ldr	r3, [pc, #36]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 800332c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800332e:	4a08      	ldr	r2, [pc, #32]	@ (8003350 <HAL_RCC_OscConfig+0x280>)
 8003330:	f023 0301 	bic.w	r3, r3, #1
 8003334:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003336:	f7fe f82b 	bl	8001390 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800333c:	e00a      	b.n	8003354 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800333e:	f7fe f827 	bl	8001390 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d903      	bls.n	8003354 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e166      	b.n	800361e <HAL_RCC_OscConfig+0x54e>
 8003350:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003354:	4b92      	ldr	r3, [pc, #584]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 8003356:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1ee      	bne.n	800333e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 80a4 	beq.w	80034b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800336e:	4b8c      	ldr	r3, [pc, #560]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10d      	bne.n	8003396 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800337a:	4b89      	ldr	r3, [pc, #548]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337e:	4a88      	ldr	r2, [pc, #544]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 8003380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003384:	6413      	str	r3, [r2, #64]	@ 0x40
 8003386:	4b86      	ldr	r3, [pc, #536]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800338e:	60bb      	str	r3, [r7, #8]
 8003390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003392:	2301      	movs	r3, #1
 8003394:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003396:	4b83      	ldr	r3, [pc, #524]	@ (80035a4 <HAL_RCC_OscConfig+0x4d4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d118      	bne.n	80033d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80033a2:	4b80      	ldr	r3, [pc, #512]	@ (80035a4 <HAL_RCC_OscConfig+0x4d4>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a7f      	ldr	r2, [pc, #508]	@ (80035a4 <HAL_RCC_OscConfig+0x4d4>)
 80033a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ae:	f7fd ffef 	bl	8001390 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b6:	f7fd ffeb 	bl	8001390 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b64      	cmp	r3, #100	@ 0x64
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e12a      	b.n	800361e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c8:	4b76      	ldr	r3, [pc, #472]	@ (80035a4 <HAL_RCC_OscConfig+0x4d4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0f0      	beq.n	80033b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d106      	bne.n	80033ea <HAL_RCC_OscConfig+0x31a>
 80033dc:	4b70      	ldr	r3, [pc, #448]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 80033de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e0:	4a6f      	ldr	r2, [pc, #444]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 80033e2:	f043 0301 	orr.w	r3, r3, #1
 80033e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80033e8:	e02d      	b.n	8003446 <HAL_RCC_OscConfig+0x376>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0x33c>
 80033f2:	4b6b      	ldr	r3, [pc, #428]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 80033f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f6:	4a6a      	ldr	r2, [pc, #424]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80033fe:	4b68      	ldr	r3, [pc, #416]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003402:	4a67      	ldr	r2, [pc, #412]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 8003404:	f023 0304 	bic.w	r3, r3, #4
 8003408:	6713      	str	r3, [r2, #112]	@ 0x70
 800340a:	e01c      	b.n	8003446 <HAL_RCC_OscConfig+0x376>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b05      	cmp	r3, #5
 8003412:	d10c      	bne.n	800342e <HAL_RCC_OscConfig+0x35e>
 8003414:	4b62      	ldr	r3, [pc, #392]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003418:	4a61      	ldr	r2, [pc, #388]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 800341a:	f043 0304 	orr.w	r3, r3, #4
 800341e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003420:	4b5f      	ldr	r3, [pc, #380]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003424:	4a5e      	ldr	r2, [pc, #376]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6713      	str	r3, [r2, #112]	@ 0x70
 800342c:	e00b      	b.n	8003446 <HAL_RCC_OscConfig+0x376>
 800342e:	4b5c      	ldr	r3, [pc, #368]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 8003430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003432:	4a5b      	ldr	r2, [pc, #364]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 8003434:	f023 0301 	bic.w	r3, r3, #1
 8003438:	6713      	str	r3, [r2, #112]	@ 0x70
 800343a:	4b59      	ldr	r3, [pc, #356]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343e:	4a58      	ldr	r2, [pc, #352]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 8003440:	f023 0304 	bic.w	r3, r3, #4
 8003444:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d015      	beq.n	800347a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344e:	f7fd ff9f 	bl	8001390 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003454:	e00a      	b.n	800346c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7fd ff9b 	bl	8001390 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003464:	4293      	cmp	r3, r2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e0d8      	b.n	800361e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346c:	4b4c      	ldr	r3, [pc, #304]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 800346e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0ee      	beq.n	8003456 <HAL_RCC_OscConfig+0x386>
 8003478:	e014      	b.n	80034a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347a:	f7fd ff89 	bl	8001390 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003480:	e00a      	b.n	8003498 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003482:	f7fd ff85 	bl	8001390 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003490:	4293      	cmp	r3, r2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e0c2      	b.n	800361e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003498:	4b41      	ldr	r3, [pc, #260]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1ee      	bne.n	8003482 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d105      	bne.n	80034b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034aa:	4b3d      	ldr	r3, [pc, #244]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	4a3c      	ldr	r2, [pc, #240]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 80034b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034b4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 80ae 	beq.w	800361c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034c0:	4b37      	ldr	r3, [pc, #220]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 030c 	and.w	r3, r3, #12
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d06d      	beq.n	80035a8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d14b      	bne.n	800356c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d4:	4b32      	ldr	r3, [pc, #200]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a31      	ldr	r2, [pc, #196]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 80034da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e0:	f7fd ff56 	bl	8001390 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e8:	f7fd ff52 	bl	8001390 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e091      	b.n	800361e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fa:	4b29      	ldr	r3, [pc, #164]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69da      	ldr	r2, [r3, #28]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003514:	019b      	lsls	r3, r3, #6
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351c:	085b      	lsrs	r3, r3, #1
 800351e:	3b01      	subs	r3, #1
 8003520:	041b      	lsls	r3, r3, #16
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003528:	061b      	lsls	r3, r3, #24
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003530:	071b      	lsls	r3, r3, #28
 8003532:	491b      	ldr	r1, [pc, #108]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 8003534:	4313      	orrs	r3, r2
 8003536:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003538:	4b19      	ldr	r3, [pc, #100]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a18      	ldr	r2, [pc, #96]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 800353e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7fd ff24 	bl	8001390 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800354c:	f7fd ff20 	bl	8001390 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e05f      	b.n	800361e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355e:	4b10      	ldr	r3, [pc, #64]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0x47c>
 800356a:	e057      	b.n	800361c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356c:	4b0c      	ldr	r3, [pc, #48]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a0b      	ldr	r2, [pc, #44]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 8003572:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003578:	f7fd ff0a 	bl	8001390 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003580:	f7fd ff06 	bl	8001390 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e045      	b.n	800361e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003592:	4b03      	ldr	r3, [pc, #12]	@ (80035a0 <HAL_RCC_OscConfig+0x4d0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x4b0>
 800359e:	e03d      	b.n	800361c <HAL_RCC_OscConfig+0x54c>
 80035a0:	40023800 	.word	0x40023800
 80035a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80035a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003628 <HAL_RCC_OscConfig+0x558>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d030      	beq.n	8003618 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d129      	bne.n	8003618 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d122      	bne.n	8003618 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035d8:	4013      	ands	r3, r2
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d119      	bne.n	8003618 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ee:	085b      	lsrs	r3, r3, #1
 80035f0:	3b01      	subs	r3, #1
 80035f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d10f      	bne.n	8003618 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003602:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003604:	429a      	cmp	r2, r3
 8003606:	d107      	bne.n	8003618 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003612:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003614:	429a      	cmp	r2, r3
 8003616:	d001      	beq.n	800361c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e000      	b.n	800361e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40023800 	.word	0x40023800

0800362c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0d0      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003644:	4b6a      	ldr	r3, [pc, #424]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 030f 	and.w	r3, r3, #15
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d910      	bls.n	8003674 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003652:	4b67      	ldr	r3, [pc, #412]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 020f 	bic.w	r2, r3, #15
 800365a:	4965      	ldr	r1, [pc, #404]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	4313      	orrs	r3, r2
 8003660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003662:	4b63      	ldr	r3, [pc, #396]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d001      	beq.n	8003674 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0b8      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d020      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800368c:	4b59      	ldr	r3, [pc, #356]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c8>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	4a58      	ldr	r2, [pc, #352]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003692:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003696:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036a4:	4b53      	ldr	r3, [pc, #332]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c8>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	4a52      	ldr	r2, [pc, #328]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c8>)
 80036aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b0:	4b50      	ldr	r3, [pc, #320]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c8>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	494d      	ldr	r1, [pc, #308]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c8>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d040      	beq.n	8003750 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d107      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d6:	4b47      	ldr	r3, [pc, #284]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d115      	bne.n	800370e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e07f      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d107      	bne.n	80036fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ee:	4b41      	ldr	r3, [pc, #260]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e073      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fe:	4b3d      	ldr	r3, [pc, #244]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e06b      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800370e:	4b39      	ldr	r3, [pc, #228]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f023 0203 	bic.w	r2, r3, #3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	4936      	ldr	r1, [pc, #216]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c8>)
 800371c:	4313      	orrs	r3, r2
 800371e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003720:	f7fd fe36 	bl	8001390 <HAL_GetTick>
 8003724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003726:	e00a      	b.n	800373e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003728:	f7fd fe32 	bl	8001390 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003736:	4293      	cmp	r3, r2
 8003738:	d901      	bls.n	800373e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e053      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373e:	4b2d      	ldr	r3, [pc, #180]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 020c 	and.w	r2, r3, #12
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	429a      	cmp	r2, r3
 800374e:	d1eb      	bne.n	8003728 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003750:	4b27      	ldr	r3, [pc, #156]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 030f 	and.w	r3, r3, #15
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d210      	bcs.n	8003780 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375e:	4b24      	ldr	r3, [pc, #144]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f023 020f 	bic.w	r2, r3, #15
 8003766:	4922      	ldr	r1, [pc, #136]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	4313      	orrs	r3, r2
 800376c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376e:	4b20      	ldr	r3, [pc, #128]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d001      	beq.n	8003780 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e032      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800378c:	4b19      	ldr	r3, [pc, #100]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c8>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4916      	ldr	r1, [pc, #88]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c8>)
 800379a:	4313      	orrs	r3, r2
 800379c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d009      	beq.n	80037be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037aa:	4b12      	ldr	r3, [pc, #72]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c8>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	490e      	ldr	r1, [pc, #56]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c8>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037be:	f000 f821 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 80037c2:	4602      	mov	r2, r0
 80037c4:	4b0b      	ldr	r3, [pc, #44]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c8>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	091b      	lsrs	r3, r3, #4
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	490a      	ldr	r1, [pc, #40]	@ (80037f8 <HAL_RCC_ClockConfig+0x1cc>)
 80037d0:	5ccb      	ldrb	r3, [r1, r3]
 80037d2:	fa22 f303 	lsr.w	r3, r2, r3
 80037d6:	4a09      	ldr	r2, [pc, #36]	@ (80037fc <HAL_RCC_ClockConfig+0x1d0>)
 80037d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037da:	4b09      	ldr	r3, [pc, #36]	@ (8003800 <HAL_RCC_ClockConfig+0x1d4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fd fd92 	bl	8001308 <HAL_InitTick>

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40023c00 	.word	0x40023c00
 80037f4:	40023800 	.word	0x40023800
 80037f8:	0800d93c 	.word	0x0800d93c
 80037fc:	20000000 	.word	0x20000000
 8003800:	20000004 	.word	0x20000004

08003804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003808:	b094      	sub	sp, #80	@ 0x50
 800380a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800380c:	2300      	movs	r3, #0
 800380e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003810:	2300      	movs	r3, #0
 8003812:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003814:	2300      	movs	r3, #0
 8003816:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003818:	2300      	movs	r3, #0
 800381a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800381c:	4b79      	ldr	r3, [pc, #484]	@ (8003a04 <HAL_RCC_GetSysClockFreq+0x200>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 030c 	and.w	r3, r3, #12
 8003824:	2b08      	cmp	r3, #8
 8003826:	d00d      	beq.n	8003844 <HAL_RCC_GetSysClockFreq+0x40>
 8003828:	2b08      	cmp	r3, #8
 800382a:	f200 80e1 	bhi.w	80039f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0x34>
 8003832:	2b04      	cmp	r3, #4
 8003834:	d003      	beq.n	800383e <HAL_RCC_GetSysClockFreq+0x3a>
 8003836:	e0db      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003838:	4b73      	ldr	r3, [pc, #460]	@ (8003a08 <HAL_RCC_GetSysClockFreq+0x204>)
 800383a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800383c:	e0db      	b.n	80039f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800383e:	4b73      	ldr	r3, [pc, #460]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x208>)
 8003840:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003842:	e0d8      	b.n	80039f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003844:	4b6f      	ldr	r3, [pc, #444]	@ (8003a04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800384c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800384e:	4b6d      	ldr	r3, [pc, #436]	@ (8003a04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d063      	beq.n	8003922 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800385a:	4b6a      	ldr	r3, [pc, #424]	@ (8003a04 <HAL_RCC_GetSysClockFreq+0x200>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	099b      	lsrs	r3, r3, #6
 8003860:	2200      	movs	r2, #0
 8003862:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003864:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800386c:	633b      	str	r3, [r7, #48]	@ 0x30
 800386e:	2300      	movs	r3, #0
 8003870:	637b      	str	r3, [r7, #52]	@ 0x34
 8003872:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003876:	4622      	mov	r2, r4
 8003878:	462b      	mov	r3, r5
 800387a:	f04f 0000 	mov.w	r0, #0
 800387e:	f04f 0100 	mov.w	r1, #0
 8003882:	0159      	lsls	r1, r3, #5
 8003884:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003888:	0150      	lsls	r0, r2, #5
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4621      	mov	r1, r4
 8003890:	1a51      	subs	r1, r2, r1
 8003892:	6139      	str	r1, [r7, #16]
 8003894:	4629      	mov	r1, r5
 8003896:	eb63 0301 	sbc.w	r3, r3, r1
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038a8:	4659      	mov	r1, fp
 80038aa:	018b      	lsls	r3, r1, #6
 80038ac:	4651      	mov	r1, sl
 80038ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038b2:	4651      	mov	r1, sl
 80038b4:	018a      	lsls	r2, r1, #6
 80038b6:	4651      	mov	r1, sl
 80038b8:	ebb2 0801 	subs.w	r8, r2, r1
 80038bc:	4659      	mov	r1, fp
 80038be:	eb63 0901 	sbc.w	r9, r3, r1
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038d6:	4690      	mov	r8, r2
 80038d8:	4699      	mov	r9, r3
 80038da:	4623      	mov	r3, r4
 80038dc:	eb18 0303 	adds.w	r3, r8, r3
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	462b      	mov	r3, r5
 80038e4:	eb49 0303 	adc.w	r3, r9, r3
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038f6:	4629      	mov	r1, r5
 80038f8:	024b      	lsls	r3, r1, #9
 80038fa:	4621      	mov	r1, r4
 80038fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003900:	4621      	mov	r1, r4
 8003902:	024a      	lsls	r2, r1, #9
 8003904:	4610      	mov	r0, r2
 8003906:	4619      	mov	r1, r3
 8003908:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800390a:	2200      	movs	r2, #0
 800390c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800390e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003910:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003914:	f7fc fcec 	bl	80002f0 <__aeabi_uldivmod>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	4613      	mov	r3, r2
 800391e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003920:	e058      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003922:	4b38      	ldr	r3, [pc, #224]	@ (8003a04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	099b      	lsrs	r3, r3, #6
 8003928:	2200      	movs	r2, #0
 800392a:	4618      	mov	r0, r3
 800392c:	4611      	mov	r1, r2
 800392e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003932:	623b      	str	r3, [r7, #32]
 8003934:	2300      	movs	r3, #0
 8003936:	627b      	str	r3, [r7, #36]	@ 0x24
 8003938:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800393c:	4642      	mov	r2, r8
 800393e:	464b      	mov	r3, r9
 8003940:	f04f 0000 	mov.w	r0, #0
 8003944:	f04f 0100 	mov.w	r1, #0
 8003948:	0159      	lsls	r1, r3, #5
 800394a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800394e:	0150      	lsls	r0, r2, #5
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4641      	mov	r1, r8
 8003956:	ebb2 0a01 	subs.w	sl, r2, r1
 800395a:	4649      	mov	r1, r9
 800395c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800396c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003970:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003974:	ebb2 040a 	subs.w	r4, r2, sl
 8003978:	eb63 050b 	sbc.w	r5, r3, fp
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	00eb      	lsls	r3, r5, #3
 8003986:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800398a:	00e2      	lsls	r2, r4, #3
 800398c:	4614      	mov	r4, r2
 800398e:	461d      	mov	r5, r3
 8003990:	4643      	mov	r3, r8
 8003992:	18e3      	adds	r3, r4, r3
 8003994:	603b      	str	r3, [r7, #0]
 8003996:	464b      	mov	r3, r9
 8003998:	eb45 0303 	adc.w	r3, r5, r3
 800399c:	607b      	str	r3, [r7, #4]
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039aa:	4629      	mov	r1, r5
 80039ac:	028b      	lsls	r3, r1, #10
 80039ae:	4621      	mov	r1, r4
 80039b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039b4:	4621      	mov	r1, r4
 80039b6:	028a      	lsls	r2, r1, #10
 80039b8:	4610      	mov	r0, r2
 80039ba:	4619      	mov	r1, r3
 80039bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039be:	2200      	movs	r2, #0
 80039c0:	61bb      	str	r3, [r7, #24]
 80039c2:	61fa      	str	r2, [r7, #28]
 80039c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039c8:	f7fc fc92 	bl	80002f0 <__aeabi_uldivmod>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4613      	mov	r3, r2
 80039d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80039d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a04 <HAL_RCC_GetSysClockFreq+0x200>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	0c1b      	lsrs	r3, r3, #16
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	3301      	adds	r3, #1
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80039e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039ee:	e002      	b.n	80039f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039f0:	4b05      	ldr	r3, [pc, #20]	@ (8003a08 <HAL_RCC_GetSysClockFreq+0x204>)
 80039f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3750      	adds	r7, #80	@ 0x50
 80039fc:	46bd      	mov	sp, r7
 80039fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a02:	bf00      	nop
 8003a04:	40023800 	.word	0x40023800
 8003a08:	00f42400 	.word	0x00f42400
 8003a0c:	007a1200 	.word	0x007a1200

08003a10 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a14:	4b03      	ldr	r3, [pc, #12]	@ (8003a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a16:	681b      	ldr	r3, [r3, #0]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	20000000 	.word	0x20000000

08003a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a2c:	f7ff fff0 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a30:	4602      	mov	r2, r0
 8003a32:	4b05      	ldr	r3, [pc, #20]	@ (8003a48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	0a9b      	lsrs	r3, r3, #10
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	4903      	ldr	r1, [pc, #12]	@ (8003a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a3e:	5ccb      	ldrb	r3, [r1, r3]
 8003a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	0800d94c 	.word	0x0800d94c

08003a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a54:	f7ff ffdc 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	4b05      	ldr	r3, [pc, #20]	@ (8003a70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	0b5b      	lsrs	r3, r3, #13
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	4903      	ldr	r1, [pc, #12]	@ (8003a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a66:	5ccb      	ldrb	r3, [r1, r3]
 8003a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40023800 	.word	0x40023800
 8003a74:	0800d94c 	.word	0x0800d94c

08003a78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a84:	2300      	movs	r3, #0
 8003a86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d012      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003aa0:	4b69      	ldr	r3, [pc, #420]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	4a68      	ldr	r2, [pc, #416]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003aaa:	6093      	str	r3, [r2, #8]
 8003aac:	4b66      	ldr	r3, [pc, #408]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ab4:	4964      	ldr	r1, [pc, #400]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d017      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ad2:	4b5d      	ldr	r3, [pc, #372]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ad8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae0:	4959      	ldr	r1, [pc, #356]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003af0:	d101      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003af2:	2301      	movs	r3, #1
 8003af4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003afe:	2301      	movs	r3, #1
 8003b00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d017      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b0e:	4b4e      	ldr	r3, [pc, #312]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b14:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1c:	494a      	ldr	r1, [pc, #296]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0320 	and.w	r3, r3, #32
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 808b 	beq.w	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b5c:	4b3a      	ldr	r3, [pc, #232]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b60:	4a39      	ldr	r2, [pc, #228]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b66:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b68:	4b37      	ldr	r3, [pc, #220]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b74:	4b35      	ldr	r3, [pc, #212]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a34      	ldr	r2, [pc, #208]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b80:	f7fd fc06 	bl	8001390 <HAL_GetTick>
 8003b84:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b88:	f7fd fc02 	bl	8001390 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b64      	cmp	r3, #100	@ 0x64
 8003b94:	d901      	bls.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e38f      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ba6:	4b28      	ldr	r3, [pc, #160]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003baa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d035      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d02e      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bc4:	4b20      	ldr	r3, [pc, #128]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bcc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bce:	4b1e      	ldr	r3, [pc, #120]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd2:	4a1d      	ldr	r2, [pc, #116]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bda:	4b1b      	ldr	r3, [pc, #108]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bde:	4a1a      	ldr	r2, [pc, #104]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003be4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003be6:	4a18      	ldr	r2, [pc, #96]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003bec:	4b16      	ldr	r3, [pc, #88]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d114      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fd fbca 	bl	8001390 <HAL_GetTick>
 8003bfc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfe:	e00a      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c00:	f7fd fbc6 	bl	8001390 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e351      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c16:	4b0c      	ldr	r3, [pc, #48]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0ee      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c2e:	d111      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003c30:	4b05      	ldr	r3, [pc, #20]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003c3c:	4b04      	ldr	r3, [pc, #16]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c3e:	400b      	ands	r3, r1
 8003c40:	4901      	ldr	r1, [pc, #4]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	608b      	str	r3, [r1, #8]
 8003c46:	e00b      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	40007000 	.word	0x40007000
 8003c50:	0ffffcff 	.word	0x0ffffcff
 8003c54:	4bac      	ldr	r3, [pc, #688]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	4aab      	ldr	r2, [pc, #684]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c5a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003c5e:	6093      	str	r3, [r2, #8]
 8003c60:	4ba9      	ldr	r3, [pc, #676]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c6c:	49a6      	ldr	r1, [pc, #664]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d010      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c7e:	4ba2      	ldr	r3, [pc, #648]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c84:	4aa0      	ldr	r2, [pc, #640]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003c8e:	4b9e      	ldr	r3, [pc, #632]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c90:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c98:	499b      	ldr	r1, [pc, #620]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cac:	4b96      	ldr	r3, [pc, #600]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cba:	4993      	ldr	r1, [pc, #588]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cce:	4b8e      	ldr	r3, [pc, #568]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cdc:	498a      	ldr	r1, [pc, #552]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cf0:	4b85      	ldr	r3, [pc, #532]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cfe:	4982      	ldr	r1, [pc, #520]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d12:	4b7d      	ldr	r3, [pc, #500]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d18:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d20:	4979      	ldr	r1, [pc, #484]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d34:	4b74      	ldr	r3, [pc, #464]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d3a:	f023 0203 	bic.w	r2, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d42:	4971      	ldr	r1, [pc, #452]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d56:	4b6c      	ldr	r3, [pc, #432]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d5c:	f023 020c 	bic.w	r2, r3, #12
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d64:	4968      	ldr	r1, [pc, #416]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d78:	4b63      	ldr	r3, [pc, #396]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d7e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d86:	4960      	ldr	r1, [pc, #384]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d9a:	4b5b      	ldr	r3, [pc, #364]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003da8:	4957      	ldr	r1, [pc, #348]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00a      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dbc:	4b52      	ldr	r3, [pc, #328]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dca:	494f      	ldr	r1, [pc, #316]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003dde:	4b4a      	ldr	r3, [pc, #296]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dec:	4946      	ldr	r1, [pc, #280]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00a      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e00:	4b41      	ldr	r3, [pc, #260]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e06:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e0e:	493e      	ldr	r1, [pc, #248]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e22:	4b39      	ldr	r3, [pc, #228]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e28:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e30:	4935      	ldr	r1, [pc, #212]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e44:	4b30      	ldr	r3, [pc, #192]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e52:	492d      	ldr	r1, [pc, #180]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d011      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e66:	4b28      	ldr	r3, [pc, #160]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e74:	4924      	ldr	r1, [pc, #144]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e84:	d101      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e86:	2301      	movs	r3, #1
 8003e88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e96:	2301      	movs	r3, #1
 8003e98:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ea6:	4b18      	ldr	r3, [pc, #96]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eac:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eb4:	4914      	ldr	r1, [pc, #80]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00b      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ece:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ed8:	490b      	ldr	r1, [pc, #44]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00f      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003eec:	4b06      	ldr	r3, [pc, #24]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003efc:	4902      	ldr	r1, [pc, #8]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f04:	e002      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003f06:	bf00      	nop
 8003f08:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00b      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f18:	4b8a      	ldr	r3, [pc, #552]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f1e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f28:	4986      	ldr	r1, [pc, #536]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00b      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f3c:	4b81      	ldr	r3, [pc, #516]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f42:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f4c:	497d      	ldr	r1, [pc, #500]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d006      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 80d6 	beq.w	8004114 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f68:	4b76      	ldr	r3, [pc, #472]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a75      	ldr	r2, [pc, #468]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f74:	f7fd fa0c 	bl	8001390 <HAL_GetTick>
 8003f78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f7c:	f7fd fa08 	bl	8001390 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b64      	cmp	r3, #100	@ 0x64
 8003f88:	d901      	bls.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e195      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f8e:	4b6d      	ldr	r3, [pc, #436]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f0      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d021      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d11d      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003fae:	4b65      	ldr	r3, [pc, #404]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fb4:	0c1b      	lsrs	r3, r3, #16
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fbc:	4b61      	ldr	r3, [pc, #388]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fc2:	0e1b      	lsrs	r3, r3, #24
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	019a      	lsls	r2, r3, #6
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	041b      	lsls	r3, r3, #16
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	061b      	lsls	r3, r3, #24
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	071b      	lsls	r3, r3, #28
 8003fe2:	4958      	ldr	r1, [pc, #352]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d004      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ffe:	d00a      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004008:	2b00      	cmp	r3, #0
 800400a:	d02e      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004010:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004014:	d129      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004016:	4b4b      	ldr	r3, [pc, #300]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004018:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800401c:	0c1b      	lsrs	r3, r3, #16
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004024:	4b47      	ldr	r3, [pc, #284]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004026:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800402a:	0f1b      	lsrs	r3, r3, #28
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	019a      	lsls	r2, r3, #6
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	041b      	lsls	r3, r3, #16
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	061b      	lsls	r3, r3, #24
 8004044:	431a      	orrs	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	071b      	lsls	r3, r3, #28
 800404a:	493e      	ldr	r1, [pc, #248]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004052:	4b3c      	ldr	r3, [pc, #240]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004054:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004058:	f023 021f 	bic.w	r2, r3, #31
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	3b01      	subs	r3, #1
 8004062:	4938      	ldr	r1, [pc, #224]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d01d      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004076:	4b33      	ldr	r3, [pc, #204]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004078:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800407c:	0e1b      	lsrs	r3, r3, #24
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004084:	4b2f      	ldr	r3, [pc, #188]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004086:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800408a:	0f1b      	lsrs	r3, r3, #28
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	019a      	lsls	r2, r3, #6
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	041b      	lsls	r3, r3, #16
 800409e:	431a      	orrs	r2, r3
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	061b      	lsls	r3, r3, #24
 80040a4:	431a      	orrs	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	071b      	lsls	r3, r3, #28
 80040aa:	4926      	ldr	r1, [pc, #152]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d011      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	019a      	lsls	r2, r3, #6
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	041b      	lsls	r3, r3, #16
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	061b      	lsls	r3, r3, #24
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	071b      	lsls	r3, r3, #28
 80040da:	491a      	ldr	r1, [pc, #104]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040e2:	4b18      	ldr	r3, [pc, #96]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a17      	ldr	r2, [pc, #92]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ee:	f7fd f94f 	bl	8001390 <HAL_GetTick>
 80040f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040f4:	e008      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040f6:	f7fd f94b 	bl	8001390 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b64      	cmp	r3, #100	@ 0x64
 8004102:	d901      	bls.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e0d8      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004108:	4b0e      	ldr	r3, [pc, #56]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0f0      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	2b01      	cmp	r3, #1
 8004118:	f040 80ce 	bne.w	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800411c:	4b09      	ldr	r3, [pc, #36]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a08      	ldr	r2, [pc, #32]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004122:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004126:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004128:	f7fd f932 	bl	8001390 <HAL_GetTick>
 800412c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800412e:	e00b      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004130:	f7fd f92e 	bl	8001390 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b64      	cmp	r3, #100	@ 0x64
 800413c:	d904      	bls.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e0bb      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004142:	bf00      	nop
 8004144:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004148:	4b5e      	ldr	r3, [pc, #376]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004150:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004154:	d0ec      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004166:	2b00      	cmp	r3, #0
 8004168:	d009      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004172:	2b00      	cmp	r3, #0
 8004174:	d02e      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d12a      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800417e:	4b51      	ldr	r3, [pc, #324]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004184:	0c1b      	lsrs	r3, r3, #16
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800418c:	4b4d      	ldr	r3, [pc, #308]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800418e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004192:	0f1b      	lsrs	r3, r3, #28
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	019a      	lsls	r2, r3, #6
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	041b      	lsls	r3, r3, #16
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	061b      	lsls	r3, r3, #24
 80041ac:	431a      	orrs	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	071b      	lsls	r3, r3, #28
 80041b2:	4944      	ldr	r1, [pc, #272]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80041ba:	4b42      	ldr	r3, [pc, #264]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041c0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c8:	3b01      	subs	r3, #1
 80041ca:	021b      	lsls	r3, r3, #8
 80041cc:	493d      	ldr	r1, [pc, #244]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d022      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041e8:	d11d      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041ea:	4b36      	ldr	r3, [pc, #216]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f0:	0e1b      	lsrs	r3, r3, #24
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041f8:	4b32      	ldr	r3, [pc, #200]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fe:	0f1b      	lsrs	r3, r3, #28
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	019a      	lsls	r2, r3, #6
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	041b      	lsls	r3, r3, #16
 8004212:	431a      	orrs	r2, r3
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	061b      	lsls	r3, r3, #24
 8004218:	431a      	orrs	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	071b      	lsls	r3, r3, #28
 800421e:	4929      	ldr	r1, [pc, #164]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d028      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004232:	4b24      	ldr	r3, [pc, #144]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004238:	0e1b      	lsrs	r3, r3, #24
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004240:	4b20      	ldr	r3, [pc, #128]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004246:	0c1b      	lsrs	r3, r3, #16
 8004248:	f003 0303 	and.w	r3, r3, #3
 800424c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	019a      	lsls	r2, r3, #6
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	041b      	lsls	r3, r3, #16
 8004258:	431a      	orrs	r2, r3
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	061b      	lsls	r3, r3, #24
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	071b      	lsls	r3, r3, #28
 8004266:	4917      	ldr	r1, [pc, #92]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800426e:	4b15      	ldr	r3, [pc, #84]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004270:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004274:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427c:	4911      	ldr	r1, [pc, #68]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004284:	4b0f      	ldr	r3, [pc, #60]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a0e      	ldr	r2, [pc, #56]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800428a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800428e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004290:	f7fd f87e 	bl	8001390 <HAL_GetTick>
 8004294:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004298:	f7fd f87a 	bl	8001390 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b64      	cmp	r3, #100	@ 0x64
 80042a4:	d901      	bls.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e007      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042aa:	4b06      	ldr	r3, [pc, #24]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042b6:	d1ef      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3720      	adds	r7, #32
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40023800 	.word	0x40023800

080042c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e049      	b.n	800436e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fc fb9e 	bl	8000a30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3304      	adds	r3, #4
 8004304:	4619      	mov	r1, r3
 8004306:	4610      	mov	r0, r2
 8004308:	f000 fac0 	bl	800488c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b01      	cmp	r3, #1
 800438a:	d001      	beq.n	8004390 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e054      	b.n	800443a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0201 	orr.w	r2, r2, #1
 80043a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a26      	ldr	r2, [pc, #152]	@ (8004448 <HAL_TIM_Base_Start_IT+0xd0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d022      	beq.n	80043f8 <HAL_TIM_Base_Start_IT+0x80>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ba:	d01d      	beq.n	80043f8 <HAL_TIM_Base_Start_IT+0x80>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a22      	ldr	r2, [pc, #136]	@ (800444c <HAL_TIM_Base_Start_IT+0xd4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d018      	beq.n	80043f8 <HAL_TIM_Base_Start_IT+0x80>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a21      	ldr	r2, [pc, #132]	@ (8004450 <HAL_TIM_Base_Start_IT+0xd8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d013      	beq.n	80043f8 <HAL_TIM_Base_Start_IT+0x80>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a1f      	ldr	r2, [pc, #124]	@ (8004454 <HAL_TIM_Base_Start_IT+0xdc>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00e      	beq.n	80043f8 <HAL_TIM_Base_Start_IT+0x80>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a1e      	ldr	r2, [pc, #120]	@ (8004458 <HAL_TIM_Base_Start_IT+0xe0>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d009      	beq.n	80043f8 <HAL_TIM_Base_Start_IT+0x80>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a1c      	ldr	r2, [pc, #112]	@ (800445c <HAL_TIM_Base_Start_IT+0xe4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d004      	beq.n	80043f8 <HAL_TIM_Base_Start_IT+0x80>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004460 <HAL_TIM_Base_Start_IT+0xe8>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d115      	bne.n	8004424 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	4b19      	ldr	r3, [pc, #100]	@ (8004464 <HAL_TIM_Base_Start_IT+0xec>)
 8004400:	4013      	ands	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b06      	cmp	r3, #6
 8004408:	d015      	beq.n	8004436 <HAL_TIM_Base_Start_IT+0xbe>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004410:	d011      	beq.n	8004436 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f042 0201 	orr.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004422:	e008      	b.n	8004436 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	e000      	b.n	8004438 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004436:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40010000 	.word	0x40010000
 800444c:	40000400 	.word	0x40000400
 8004450:	40000800 	.word	0x40000800
 8004454:	40000c00 	.word	0x40000c00
 8004458:	40010400 	.word	0x40010400
 800445c:	40014000 	.word	0x40014000
 8004460:	40001800 	.word	0x40001800
 8004464:	00010007 	.word	0x00010007

08004468 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b02      	cmp	r3, #2
 800447c:	d122      	bne.n	80044c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b02      	cmp	r3, #2
 800448a:	d11b      	bne.n	80044c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f06f 0202 	mvn.w	r2, #2
 8004494:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f9d0 	bl	8004850 <HAL_TIM_IC_CaptureCallback>
 80044b0:	e005      	b.n	80044be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f9c2 	bl	800483c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f9d3 	bl	8004864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f003 0304 	and.w	r3, r3, #4
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d122      	bne.n	8004518 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b04      	cmp	r3, #4
 80044de:	d11b      	bne.n	8004518 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f06f 0204 	mvn.w	r2, #4
 80044e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2202      	movs	r2, #2
 80044ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f9a6 	bl	8004850 <HAL_TIM_IC_CaptureCallback>
 8004504:	e005      	b.n	8004512 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f998 	bl	800483c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f9a9 	bl	8004864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b08      	cmp	r3, #8
 8004524:	d122      	bne.n	800456c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b08      	cmp	r3, #8
 8004532:	d11b      	bne.n	800456c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0208 	mvn.w	r2, #8
 800453c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2204      	movs	r2, #4
 8004542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f97c 	bl	8004850 <HAL_TIM_IC_CaptureCallback>
 8004558:	e005      	b.n	8004566 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f96e 	bl	800483c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f97f 	bl	8004864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f003 0310 	and.w	r3, r3, #16
 8004576:	2b10      	cmp	r3, #16
 8004578:	d122      	bne.n	80045c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	2b10      	cmp	r3, #16
 8004586:	d11b      	bne.n	80045c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0210 	mvn.w	r2, #16
 8004590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2208      	movs	r2, #8
 8004596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f952 	bl	8004850 <HAL_TIM_IC_CaptureCallback>
 80045ac:	e005      	b.n	80045ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f944 	bl	800483c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f955 	bl	8004864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d10e      	bne.n	80045ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d107      	bne.n	80045ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f06f 0201 	mvn.w	r2, #1
 80045e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7fb fffa 	bl	80005e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045f6:	2b80      	cmp	r3, #128	@ 0x80
 80045f8:	d10e      	bne.n	8004618 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004604:	2b80      	cmp	r3, #128	@ 0x80
 8004606:	d107      	bne.n	8004618 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 fb0c 	bl	8004c30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004626:	d10e      	bne.n	8004646 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004632:	2b80      	cmp	r3, #128	@ 0x80
 8004634:	d107      	bne.n	8004646 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800463e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 faff 	bl	8004c44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004650:	2b40      	cmp	r3, #64	@ 0x40
 8004652:	d10e      	bne.n	8004672 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800465e:	2b40      	cmp	r3, #64	@ 0x40
 8004660:	d107      	bne.n	8004672 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800466a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f903 	bl	8004878 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	f003 0320 	and.w	r3, r3, #32
 800467c:	2b20      	cmp	r3, #32
 800467e:	d10e      	bne.n	800469e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f003 0320 	and.w	r3, r3, #32
 800468a:	2b20      	cmp	r3, #32
 800468c:	d107      	bne.n	800469e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f06f 0220 	mvn.w	r2, #32
 8004696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 fabf 	bl	8004c1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800469e:	bf00      	nop
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
	...

080046a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d101      	bne.n	80046c4 <HAL_TIM_ConfigClockSource+0x1c>
 80046c0:	2302      	movs	r3, #2
 80046c2:	e0b4      	b.n	800482e <HAL_TIM_ConfigClockSource+0x186>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	4b56      	ldr	r3, [pc, #344]	@ (8004838 <HAL_TIM_ConfigClockSource+0x190>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046fc:	d03e      	beq.n	800477c <HAL_TIM_ConfigClockSource+0xd4>
 80046fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004702:	f200 8087 	bhi.w	8004814 <HAL_TIM_ConfigClockSource+0x16c>
 8004706:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800470a:	f000 8086 	beq.w	800481a <HAL_TIM_ConfigClockSource+0x172>
 800470e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004712:	d87f      	bhi.n	8004814 <HAL_TIM_ConfigClockSource+0x16c>
 8004714:	2b70      	cmp	r3, #112	@ 0x70
 8004716:	d01a      	beq.n	800474e <HAL_TIM_ConfigClockSource+0xa6>
 8004718:	2b70      	cmp	r3, #112	@ 0x70
 800471a:	d87b      	bhi.n	8004814 <HAL_TIM_ConfigClockSource+0x16c>
 800471c:	2b60      	cmp	r3, #96	@ 0x60
 800471e:	d050      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0x11a>
 8004720:	2b60      	cmp	r3, #96	@ 0x60
 8004722:	d877      	bhi.n	8004814 <HAL_TIM_ConfigClockSource+0x16c>
 8004724:	2b50      	cmp	r3, #80	@ 0x50
 8004726:	d03c      	beq.n	80047a2 <HAL_TIM_ConfigClockSource+0xfa>
 8004728:	2b50      	cmp	r3, #80	@ 0x50
 800472a:	d873      	bhi.n	8004814 <HAL_TIM_ConfigClockSource+0x16c>
 800472c:	2b40      	cmp	r3, #64	@ 0x40
 800472e:	d058      	beq.n	80047e2 <HAL_TIM_ConfigClockSource+0x13a>
 8004730:	2b40      	cmp	r3, #64	@ 0x40
 8004732:	d86f      	bhi.n	8004814 <HAL_TIM_ConfigClockSource+0x16c>
 8004734:	2b30      	cmp	r3, #48	@ 0x30
 8004736:	d064      	beq.n	8004802 <HAL_TIM_ConfigClockSource+0x15a>
 8004738:	2b30      	cmp	r3, #48	@ 0x30
 800473a:	d86b      	bhi.n	8004814 <HAL_TIM_ConfigClockSource+0x16c>
 800473c:	2b20      	cmp	r3, #32
 800473e:	d060      	beq.n	8004802 <HAL_TIM_ConfigClockSource+0x15a>
 8004740:	2b20      	cmp	r3, #32
 8004742:	d867      	bhi.n	8004814 <HAL_TIM_ConfigClockSource+0x16c>
 8004744:	2b00      	cmp	r3, #0
 8004746:	d05c      	beq.n	8004802 <HAL_TIM_ConfigClockSource+0x15a>
 8004748:	2b10      	cmp	r3, #16
 800474a:	d05a      	beq.n	8004802 <HAL_TIM_ConfigClockSource+0x15a>
 800474c:	e062      	b.n	8004814 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800475e:	f000 f9af 	bl	8004ac0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004770:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	609a      	str	r2, [r3, #8]
      break;
 800477a:	e04f      	b.n	800481c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800478c:	f000 f998 	bl	8004ac0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800479e:	609a      	str	r2, [r3, #8]
      break;
 80047a0:	e03c      	b.n	800481c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ae:	461a      	mov	r2, r3
 80047b0:	f000 f90c 	bl	80049cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2150      	movs	r1, #80	@ 0x50
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 f965 	bl	8004a8a <TIM_ITRx_SetConfig>
      break;
 80047c0:	e02c      	b.n	800481c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ce:	461a      	mov	r2, r3
 80047d0:	f000 f92b 	bl	8004a2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2160      	movs	r1, #96	@ 0x60
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 f955 	bl	8004a8a <TIM_ITRx_SetConfig>
      break;
 80047e0:	e01c      	b.n	800481c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ee:	461a      	mov	r2, r3
 80047f0:	f000 f8ec 	bl	80049cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2140      	movs	r1, #64	@ 0x40
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 f945 	bl	8004a8a <TIM_ITRx_SetConfig>
      break;
 8004800:	e00c      	b.n	800481c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4619      	mov	r1, r3
 800480c:	4610      	mov	r0, r2
 800480e:	f000 f93c 	bl	8004a8a <TIM_ITRx_SetConfig>
      break;
 8004812:	e003      	b.n	800481c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	73fb      	strb	r3, [r7, #15]
      break;
 8004818:	e000      	b.n	800481c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800481a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800482c:	7bfb      	ldrb	r3, [r7, #15]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	fffeff88 	.word	0xfffeff88

0800483c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a40      	ldr	r2, [pc, #256]	@ (80049a0 <TIM_Base_SetConfig+0x114>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d013      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048aa:	d00f      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a3d      	ldr	r2, [pc, #244]	@ (80049a4 <TIM_Base_SetConfig+0x118>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d00b      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a3c      	ldr	r2, [pc, #240]	@ (80049a8 <TIM_Base_SetConfig+0x11c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d007      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a3b      	ldr	r2, [pc, #236]	@ (80049ac <TIM_Base_SetConfig+0x120>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d003      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a3a      	ldr	r2, [pc, #232]	@ (80049b0 <TIM_Base_SetConfig+0x124>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d108      	bne.n	80048de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a2f      	ldr	r2, [pc, #188]	@ (80049a0 <TIM_Base_SetConfig+0x114>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d02b      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ec:	d027      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a2c      	ldr	r2, [pc, #176]	@ (80049a4 <TIM_Base_SetConfig+0x118>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d023      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a2b      	ldr	r2, [pc, #172]	@ (80049a8 <TIM_Base_SetConfig+0x11c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d01f      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a2a      	ldr	r2, [pc, #168]	@ (80049ac <TIM_Base_SetConfig+0x120>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d01b      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a29      	ldr	r2, [pc, #164]	@ (80049b0 <TIM_Base_SetConfig+0x124>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d017      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a28      	ldr	r2, [pc, #160]	@ (80049b4 <TIM_Base_SetConfig+0x128>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d013      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a27      	ldr	r2, [pc, #156]	@ (80049b8 <TIM_Base_SetConfig+0x12c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d00f      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a26      	ldr	r2, [pc, #152]	@ (80049bc <TIM_Base_SetConfig+0x130>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00b      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a25      	ldr	r2, [pc, #148]	@ (80049c0 <TIM_Base_SetConfig+0x134>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d007      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a24      	ldr	r2, [pc, #144]	@ (80049c4 <TIM_Base_SetConfig+0x138>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d003      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a23      	ldr	r2, [pc, #140]	@ (80049c8 <TIM_Base_SetConfig+0x13c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d108      	bne.n	8004950 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a0a      	ldr	r2, [pc, #40]	@ (80049a0 <TIM_Base_SetConfig+0x114>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d003      	beq.n	8004984 <TIM_Base_SetConfig+0xf8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a0c      	ldr	r2, [pc, #48]	@ (80049b0 <TIM_Base_SetConfig+0x124>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d103      	bne.n	800498c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	615a      	str	r2, [r3, #20]
}
 8004992:	bf00      	nop
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40010000 	.word	0x40010000
 80049a4:	40000400 	.word	0x40000400
 80049a8:	40000800 	.word	0x40000800
 80049ac:	40000c00 	.word	0x40000c00
 80049b0:	40010400 	.word	0x40010400
 80049b4:	40014000 	.word	0x40014000
 80049b8:	40014400 	.word	0x40014400
 80049bc:	40014800 	.word	0x40014800
 80049c0:	40001800 	.word	0x40001800
 80049c4:	40001c00 	.word	0x40001c00
 80049c8:	40002000 	.word	0x40002000

080049cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	f023 0201 	bic.w	r2, r3, #1
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	011b      	lsls	r3, r3, #4
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f023 030a 	bic.w	r3, r3, #10
 8004a08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	621a      	str	r2, [r3, #32]
}
 8004a1e:	bf00      	nop
 8004a20:	371c      	adds	r7, #28
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b087      	sub	sp, #28
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	f023 0210 	bic.w	r2, r3, #16
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	031b      	lsls	r3, r3, #12
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	011b      	lsls	r3, r3, #4
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	621a      	str	r2, [r3, #32]
}
 8004a7e:	bf00      	nop
 8004a80:	371c      	adds	r7, #28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b085      	sub	sp, #20
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	f043 0307 	orr.w	r3, r3, #7
 8004aac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	609a      	str	r2, [r3, #8]
}
 8004ab4:	bf00      	nop
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ada:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	021a      	lsls	r2, r3, #8
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	609a      	str	r2, [r3, #8]
}
 8004af4:	bf00      	nop
 8004af6:	371c      	adds	r7, #28
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d101      	bne.n	8004b18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b14:	2302      	movs	r3, #2
 8004b16:	e06d      	b.n	8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2202      	movs	r2, #2
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a30      	ldr	r2, [pc, #192]	@ (8004c00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d004      	beq.n	8004b4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a2f      	ldr	r2, [pc, #188]	@ (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d108      	bne.n	8004b5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004b52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a20      	ldr	r2, [pc, #128]	@ (8004c00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d022      	beq.n	8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b8a:	d01d      	beq.n	8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a1d      	ldr	r2, [pc, #116]	@ (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d018      	beq.n	8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d013      	beq.n	8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a1a      	ldr	r2, [pc, #104]	@ (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00e      	beq.n	8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a15      	ldr	r2, [pc, #84]	@ (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d009      	beq.n	8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a16      	ldr	r2, [pc, #88]	@ (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d004      	beq.n	8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a15      	ldr	r2, [pc, #84]	@ (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d10c      	bne.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	40010000 	.word	0x40010000
 8004c04:	40010400 	.word	0x40010400
 8004c08:	40000400 	.word	0x40000400
 8004c0c:	40000800 	.word	0x40000800
 8004c10:	40000c00 	.word	0x40000c00
 8004c14:	40014000 	.word	0x40014000
 8004c18:	40001800 	.word	0x40001800

08004c1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e040      	b.n	8004cec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d106      	bne.n	8004c80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7fb fefc 	bl	8000a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2224      	movs	r2, #36	@ 0x24
 8004c84:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0201 	bic.w	r2, r2, #1
 8004c94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f82c 	bl	8004cf4 <UART_SetConfig>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e022      	b.n	8004cec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fa84 	bl	80051bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0201 	orr.w	r2, r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fb0b 	bl	8005300 <UART_CheckIdleState>
 8004cea:	4603      	mov	r3, r0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	4ba6      	ldr	r3, [pc, #664]	@ (8004fb8 <UART_SetConfig+0x2c4>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	6812      	ldr	r2, [r2, #0]
 8004d26:	6979      	ldr	r1, [r7, #20]
 8004d28:	430b      	orrs	r3, r1
 8004d2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a94      	ldr	r2, [pc, #592]	@ (8004fbc <UART_SetConfig+0x2c8>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d120      	bne.n	8004db2 <UART_SetConfig+0xbe>
 8004d70:	4b93      	ldr	r3, [pc, #588]	@ (8004fc0 <UART_SetConfig+0x2cc>)
 8004d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	d816      	bhi.n	8004dac <UART_SetConfig+0xb8>
 8004d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d84 <UART_SetConfig+0x90>)
 8004d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d84:	08004d95 	.word	0x08004d95
 8004d88:	08004da1 	.word	0x08004da1
 8004d8c:	08004d9b 	.word	0x08004d9b
 8004d90:	08004da7 	.word	0x08004da7
 8004d94:	2301      	movs	r3, #1
 8004d96:	77fb      	strb	r3, [r7, #31]
 8004d98:	e150      	b.n	800503c <UART_SetConfig+0x348>
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	77fb      	strb	r3, [r7, #31]
 8004d9e:	e14d      	b.n	800503c <UART_SetConfig+0x348>
 8004da0:	2304      	movs	r3, #4
 8004da2:	77fb      	strb	r3, [r7, #31]
 8004da4:	e14a      	b.n	800503c <UART_SetConfig+0x348>
 8004da6:	2308      	movs	r3, #8
 8004da8:	77fb      	strb	r3, [r7, #31]
 8004daa:	e147      	b.n	800503c <UART_SetConfig+0x348>
 8004dac:	2310      	movs	r3, #16
 8004dae:	77fb      	strb	r3, [r7, #31]
 8004db0:	e144      	b.n	800503c <UART_SetConfig+0x348>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a83      	ldr	r2, [pc, #524]	@ (8004fc4 <UART_SetConfig+0x2d0>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d132      	bne.n	8004e22 <UART_SetConfig+0x12e>
 8004dbc:	4b80      	ldr	r3, [pc, #512]	@ (8004fc0 <UART_SetConfig+0x2cc>)
 8004dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc2:	f003 030c 	and.w	r3, r3, #12
 8004dc6:	2b0c      	cmp	r3, #12
 8004dc8:	d828      	bhi.n	8004e1c <UART_SetConfig+0x128>
 8004dca:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd0 <UART_SetConfig+0xdc>)
 8004dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd0:	08004e05 	.word	0x08004e05
 8004dd4:	08004e1d 	.word	0x08004e1d
 8004dd8:	08004e1d 	.word	0x08004e1d
 8004ddc:	08004e1d 	.word	0x08004e1d
 8004de0:	08004e11 	.word	0x08004e11
 8004de4:	08004e1d 	.word	0x08004e1d
 8004de8:	08004e1d 	.word	0x08004e1d
 8004dec:	08004e1d 	.word	0x08004e1d
 8004df0:	08004e0b 	.word	0x08004e0b
 8004df4:	08004e1d 	.word	0x08004e1d
 8004df8:	08004e1d 	.word	0x08004e1d
 8004dfc:	08004e1d 	.word	0x08004e1d
 8004e00:	08004e17 	.word	0x08004e17
 8004e04:	2300      	movs	r3, #0
 8004e06:	77fb      	strb	r3, [r7, #31]
 8004e08:	e118      	b.n	800503c <UART_SetConfig+0x348>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	77fb      	strb	r3, [r7, #31]
 8004e0e:	e115      	b.n	800503c <UART_SetConfig+0x348>
 8004e10:	2304      	movs	r3, #4
 8004e12:	77fb      	strb	r3, [r7, #31]
 8004e14:	e112      	b.n	800503c <UART_SetConfig+0x348>
 8004e16:	2308      	movs	r3, #8
 8004e18:	77fb      	strb	r3, [r7, #31]
 8004e1a:	e10f      	b.n	800503c <UART_SetConfig+0x348>
 8004e1c:	2310      	movs	r3, #16
 8004e1e:	77fb      	strb	r3, [r7, #31]
 8004e20:	e10c      	b.n	800503c <UART_SetConfig+0x348>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a68      	ldr	r2, [pc, #416]	@ (8004fc8 <UART_SetConfig+0x2d4>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d120      	bne.n	8004e6e <UART_SetConfig+0x17a>
 8004e2c:	4b64      	ldr	r3, [pc, #400]	@ (8004fc0 <UART_SetConfig+0x2cc>)
 8004e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e32:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e36:	2b30      	cmp	r3, #48	@ 0x30
 8004e38:	d013      	beq.n	8004e62 <UART_SetConfig+0x16e>
 8004e3a:	2b30      	cmp	r3, #48	@ 0x30
 8004e3c:	d814      	bhi.n	8004e68 <UART_SetConfig+0x174>
 8004e3e:	2b20      	cmp	r3, #32
 8004e40:	d009      	beq.n	8004e56 <UART_SetConfig+0x162>
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	d810      	bhi.n	8004e68 <UART_SetConfig+0x174>
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <UART_SetConfig+0x15c>
 8004e4a:	2b10      	cmp	r3, #16
 8004e4c:	d006      	beq.n	8004e5c <UART_SetConfig+0x168>
 8004e4e:	e00b      	b.n	8004e68 <UART_SetConfig+0x174>
 8004e50:	2300      	movs	r3, #0
 8004e52:	77fb      	strb	r3, [r7, #31]
 8004e54:	e0f2      	b.n	800503c <UART_SetConfig+0x348>
 8004e56:	2302      	movs	r3, #2
 8004e58:	77fb      	strb	r3, [r7, #31]
 8004e5a:	e0ef      	b.n	800503c <UART_SetConfig+0x348>
 8004e5c:	2304      	movs	r3, #4
 8004e5e:	77fb      	strb	r3, [r7, #31]
 8004e60:	e0ec      	b.n	800503c <UART_SetConfig+0x348>
 8004e62:	2308      	movs	r3, #8
 8004e64:	77fb      	strb	r3, [r7, #31]
 8004e66:	e0e9      	b.n	800503c <UART_SetConfig+0x348>
 8004e68:	2310      	movs	r3, #16
 8004e6a:	77fb      	strb	r3, [r7, #31]
 8004e6c:	e0e6      	b.n	800503c <UART_SetConfig+0x348>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a56      	ldr	r2, [pc, #344]	@ (8004fcc <UART_SetConfig+0x2d8>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d120      	bne.n	8004eba <UART_SetConfig+0x1c6>
 8004e78:	4b51      	ldr	r3, [pc, #324]	@ (8004fc0 <UART_SetConfig+0x2cc>)
 8004e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e7e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004e82:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e84:	d013      	beq.n	8004eae <UART_SetConfig+0x1ba>
 8004e86:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e88:	d814      	bhi.n	8004eb4 <UART_SetConfig+0x1c0>
 8004e8a:	2b80      	cmp	r3, #128	@ 0x80
 8004e8c:	d009      	beq.n	8004ea2 <UART_SetConfig+0x1ae>
 8004e8e:	2b80      	cmp	r3, #128	@ 0x80
 8004e90:	d810      	bhi.n	8004eb4 <UART_SetConfig+0x1c0>
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <UART_SetConfig+0x1a8>
 8004e96:	2b40      	cmp	r3, #64	@ 0x40
 8004e98:	d006      	beq.n	8004ea8 <UART_SetConfig+0x1b4>
 8004e9a:	e00b      	b.n	8004eb4 <UART_SetConfig+0x1c0>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	77fb      	strb	r3, [r7, #31]
 8004ea0:	e0cc      	b.n	800503c <UART_SetConfig+0x348>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	77fb      	strb	r3, [r7, #31]
 8004ea6:	e0c9      	b.n	800503c <UART_SetConfig+0x348>
 8004ea8:	2304      	movs	r3, #4
 8004eaa:	77fb      	strb	r3, [r7, #31]
 8004eac:	e0c6      	b.n	800503c <UART_SetConfig+0x348>
 8004eae:	2308      	movs	r3, #8
 8004eb0:	77fb      	strb	r3, [r7, #31]
 8004eb2:	e0c3      	b.n	800503c <UART_SetConfig+0x348>
 8004eb4:	2310      	movs	r3, #16
 8004eb6:	77fb      	strb	r3, [r7, #31]
 8004eb8:	e0c0      	b.n	800503c <UART_SetConfig+0x348>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a44      	ldr	r2, [pc, #272]	@ (8004fd0 <UART_SetConfig+0x2dc>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d125      	bne.n	8004f10 <UART_SetConfig+0x21c>
 8004ec4:	4b3e      	ldr	r3, [pc, #248]	@ (8004fc0 <UART_SetConfig+0x2cc>)
 8004ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ece:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ed2:	d017      	beq.n	8004f04 <UART_SetConfig+0x210>
 8004ed4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ed8:	d817      	bhi.n	8004f0a <UART_SetConfig+0x216>
 8004eda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ede:	d00b      	beq.n	8004ef8 <UART_SetConfig+0x204>
 8004ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ee4:	d811      	bhi.n	8004f0a <UART_SetConfig+0x216>
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <UART_SetConfig+0x1fe>
 8004eea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eee:	d006      	beq.n	8004efe <UART_SetConfig+0x20a>
 8004ef0:	e00b      	b.n	8004f0a <UART_SetConfig+0x216>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	77fb      	strb	r3, [r7, #31]
 8004ef6:	e0a1      	b.n	800503c <UART_SetConfig+0x348>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	77fb      	strb	r3, [r7, #31]
 8004efc:	e09e      	b.n	800503c <UART_SetConfig+0x348>
 8004efe:	2304      	movs	r3, #4
 8004f00:	77fb      	strb	r3, [r7, #31]
 8004f02:	e09b      	b.n	800503c <UART_SetConfig+0x348>
 8004f04:	2308      	movs	r3, #8
 8004f06:	77fb      	strb	r3, [r7, #31]
 8004f08:	e098      	b.n	800503c <UART_SetConfig+0x348>
 8004f0a:	2310      	movs	r3, #16
 8004f0c:	77fb      	strb	r3, [r7, #31]
 8004f0e:	e095      	b.n	800503c <UART_SetConfig+0x348>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a2f      	ldr	r2, [pc, #188]	@ (8004fd4 <UART_SetConfig+0x2e0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d125      	bne.n	8004f66 <UART_SetConfig+0x272>
 8004f1a:	4b29      	ldr	r3, [pc, #164]	@ (8004fc0 <UART_SetConfig+0x2cc>)
 8004f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f28:	d017      	beq.n	8004f5a <UART_SetConfig+0x266>
 8004f2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f2e:	d817      	bhi.n	8004f60 <UART_SetConfig+0x26c>
 8004f30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f34:	d00b      	beq.n	8004f4e <UART_SetConfig+0x25a>
 8004f36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f3a:	d811      	bhi.n	8004f60 <UART_SetConfig+0x26c>
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d003      	beq.n	8004f48 <UART_SetConfig+0x254>
 8004f40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f44:	d006      	beq.n	8004f54 <UART_SetConfig+0x260>
 8004f46:	e00b      	b.n	8004f60 <UART_SetConfig+0x26c>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	77fb      	strb	r3, [r7, #31]
 8004f4c:	e076      	b.n	800503c <UART_SetConfig+0x348>
 8004f4e:	2302      	movs	r3, #2
 8004f50:	77fb      	strb	r3, [r7, #31]
 8004f52:	e073      	b.n	800503c <UART_SetConfig+0x348>
 8004f54:	2304      	movs	r3, #4
 8004f56:	77fb      	strb	r3, [r7, #31]
 8004f58:	e070      	b.n	800503c <UART_SetConfig+0x348>
 8004f5a:	2308      	movs	r3, #8
 8004f5c:	77fb      	strb	r3, [r7, #31]
 8004f5e:	e06d      	b.n	800503c <UART_SetConfig+0x348>
 8004f60:	2310      	movs	r3, #16
 8004f62:	77fb      	strb	r3, [r7, #31]
 8004f64:	e06a      	b.n	800503c <UART_SetConfig+0x348>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a1b      	ldr	r2, [pc, #108]	@ (8004fd8 <UART_SetConfig+0x2e4>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d138      	bne.n	8004fe2 <UART_SetConfig+0x2ee>
 8004f70:	4b13      	ldr	r3, [pc, #76]	@ (8004fc0 <UART_SetConfig+0x2cc>)
 8004f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f76:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004f7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f7e:	d017      	beq.n	8004fb0 <UART_SetConfig+0x2bc>
 8004f80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f84:	d82a      	bhi.n	8004fdc <UART_SetConfig+0x2e8>
 8004f86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f8a:	d00b      	beq.n	8004fa4 <UART_SetConfig+0x2b0>
 8004f8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f90:	d824      	bhi.n	8004fdc <UART_SetConfig+0x2e8>
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <UART_SetConfig+0x2aa>
 8004f96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f9a:	d006      	beq.n	8004faa <UART_SetConfig+0x2b6>
 8004f9c:	e01e      	b.n	8004fdc <UART_SetConfig+0x2e8>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	77fb      	strb	r3, [r7, #31]
 8004fa2:	e04b      	b.n	800503c <UART_SetConfig+0x348>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	77fb      	strb	r3, [r7, #31]
 8004fa8:	e048      	b.n	800503c <UART_SetConfig+0x348>
 8004faa:	2304      	movs	r3, #4
 8004fac:	77fb      	strb	r3, [r7, #31]
 8004fae:	e045      	b.n	800503c <UART_SetConfig+0x348>
 8004fb0:	2308      	movs	r3, #8
 8004fb2:	77fb      	strb	r3, [r7, #31]
 8004fb4:	e042      	b.n	800503c <UART_SetConfig+0x348>
 8004fb6:	bf00      	nop
 8004fb8:	efff69f3 	.word	0xefff69f3
 8004fbc:	40011000 	.word	0x40011000
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	40004400 	.word	0x40004400
 8004fc8:	40004800 	.word	0x40004800
 8004fcc:	40004c00 	.word	0x40004c00
 8004fd0:	40005000 	.word	0x40005000
 8004fd4:	40011400 	.word	0x40011400
 8004fd8:	40007800 	.word	0x40007800
 8004fdc:	2310      	movs	r3, #16
 8004fde:	77fb      	strb	r3, [r7, #31]
 8004fe0:	e02c      	b.n	800503c <UART_SetConfig+0x348>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a72      	ldr	r2, [pc, #456]	@ (80051b0 <UART_SetConfig+0x4bc>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d125      	bne.n	8005038 <UART_SetConfig+0x344>
 8004fec:	4b71      	ldr	r3, [pc, #452]	@ (80051b4 <UART_SetConfig+0x4c0>)
 8004fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004ff6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004ffa:	d017      	beq.n	800502c <UART_SetConfig+0x338>
 8004ffc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005000:	d817      	bhi.n	8005032 <UART_SetConfig+0x33e>
 8005002:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005006:	d00b      	beq.n	8005020 <UART_SetConfig+0x32c>
 8005008:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800500c:	d811      	bhi.n	8005032 <UART_SetConfig+0x33e>
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <UART_SetConfig+0x326>
 8005012:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005016:	d006      	beq.n	8005026 <UART_SetConfig+0x332>
 8005018:	e00b      	b.n	8005032 <UART_SetConfig+0x33e>
 800501a:	2300      	movs	r3, #0
 800501c:	77fb      	strb	r3, [r7, #31]
 800501e:	e00d      	b.n	800503c <UART_SetConfig+0x348>
 8005020:	2302      	movs	r3, #2
 8005022:	77fb      	strb	r3, [r7, #31]
 8005024:	e00a      	b.n	800503c <UART_SetConfig+0x348>
 8005026:	2304      	movs	r3, #4
 8005028:	77fb      	strb	r3, [r7, #31]
 800502a:	e007      	b.n	800503c <UART_SetConfig+0x348>
 800502c:	2308      	movs	r3, #8
 800502e:	77fb      	strb	r3, [r7, #31]
 8005030:	e004      	b.n	800503c <UART_SetConfig+0x348>
 8005032:	2310      	movs	r3, #16
 8005034:	77fb      	strb	r3, [r7, #31]
 8005036:	e001      	b.n	800503c <UART_SetConfig+0x348>
 8005038:	2310      	movs	r3, #16
 800503a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005044:	d15b      	bne.n	80050fe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005046:	7ffb      	ldrb	r3, [r7, #31]
 8005048:	2b08      	cmp	r3, #8
 800504a:	d828      	bhi.n	800509e <UART_SetConfig+0x3aa>
 800504c:	a201      	add	r2, pc, #4	@ (adr r2, 8005054 <UART_SetConfig+0x360>)
 800504e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005052:	bf00      	nop
 8005054:	08005079 	.word	0x08005079
 8005058:	08005081 	.word	0x08005081
 800505c:	08005089 	.word	0x08005089
 8005060:	0800509f 	.word	0x0800509f
 8005064:	0800508f 	.word	0x0800508f
 8005068:	0800509f 	.word	0x0800509f
 800506c:	0800509f 	.word	0x0800509f
 8005070:	0800509f 	.word	0x0800509f
 8005074:	08005097 	.word	0x08005097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005078:	f7fe fcd6 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 800507c:	61b8      	str	r0, [r7, #24]
        break;
 800507e:	e013      	b.n	80050a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005080:	f7fe fce6 	bl	8003a50 <HAL_RCC_GetPCLK2Freq>
 8005084:	61b8      	str	r0, [r7, #24]
        break;
 8005086:	e00f      	b.n	80050a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005088:	4b4b      	ldr	r3, [pc, #300]	@ (80051b8 <UART_SetConfig+0x4c4>)
 800508a:	61bb      	str	r3, [r7, #24]
        break;
 800508c:	e00c      	b.n	80050a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800508e:	f7fe fbb9 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 8005092:	61b8      	str	r0, [r7, #24]
        break;
 8005094:	e008      	b.n	80050a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005096:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800509a:	61bb      	str	r3, [r7, #24]
        break;
 800509c:	e004      	b.n	80050a8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800509e:	2300      	movs	r3, #0
 80050a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	77bb      	strb	r3, [r7, #30]
        break;
 80050a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d074      	beq.n	8005198 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	005a      	lsls	r2, r3, #1
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	085b      	lsrs	r3, r3, #1
 80050b8:	441a      	add	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	2b0f      	cmp	r3, #15
 80050c8:	d916      	bls.n	80050f8 <UART_SetConfig+0x404>
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050d0:	d212      	bcs.n	80050f8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	f023 030f 	bic.w	r3, r3, #15
 80050da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	085b      	lsrs	r3, r3, #1
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	89fb      	ldrh	r3, [r7, #14]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	89fa      	ldrh	r2, [r7, #14]
 80050f4:	60da      	str	r2, [r3, #12]
 80050f6:	e04f      	b.n	8005198 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	77bb      	strb	r3, [r7, #30]
 80050fc:	e04c      	b.n	8005198 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050fe:	7ffb      	ldrb	r3, [r7, #31]
 8005100:	2b08      	cmp	r3, #8
 8005102:	d828      	bhi.n	8005156 <UART_SetConfig+0x462>
 8005104:	a201      	add	r2, pc, #4	@ (adr r2, 800510c <UART_SetConfig+0x418>)
 8005106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510a:	bf00      	nop
 800510c:	08005131 	.word	0x08005131
 8005110:	08005139 	.word	0x08005139
 8005114:	08005141 	.word	0x08005141
 8005118:	08005157 	.word	0x08005157
 800511c:	08005147 	.word	0x08005147
 8005120:	08005157 	.word	0x08005157
 8005124:	08005157 	.word	0x08005157
 8005128:	08005157 	.word	0x08005157
 800512c:	0800514f 	.word	0x0800514f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005130:	f7fe fc7a 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 8005134:	61b8      	str	r0, [r7, #24]
        break;
 8005136:	e013      	b.n	8005160 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005138:	f7fe fc8a 	bl	8003a50 <HAL_RCC_GetPCLK2Freq>
 800513c:	61b8      	str	r0, [r7, #24]
        break;
 800513e:	e00f      	b.n	8005160 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005140:	4b1d      	ldr	r3, [pc, #116]	@ (80051b8 <UART_SetConfig+0x4c4>)
 8005142:	61bb      	str	r3, [r7, #24]
        break;
 8005144:	e00c      	b.n	8005160 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005146:	f7fe fb5d 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 800514a:	61b8      	str	r0, [r7, #24]
        break;
 800514c:	e008      	b.n	8005160 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800514e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005152:	61bb      	str	r3, [r7, #24]
        break;
 8005154:	e004      	b.n	8005160 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	77bb      	strb	r3, [r7, #30]
        break;
 800515e:	bf00      	nop
    }

    if (pclk != 0U)
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d018      	beq.n	8005198 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	085a      	lsrs	r2, r3, #1
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	441a      	add	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	fbb2 f3f3 	udiv	r3, r2, r3
 8005178:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	2b0f      	cmp	r3, #15
 800517e:	d909      	bls.n	8005194 <UART_SetConfig+0x4a0>
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005186:	d205      	bcs.n	8005194 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	b29a      	uxth	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	60da      	str	r2, [r3, #12]
 8005192:	e001      	b.n	8005198 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80051a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3720      	adds	r7, #32
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	40007c00 	.word	0x40007c00
 80051b4:	40023800 	.word	0x40023800
 80051b8:	00f42400 	.word	0x00f42400

080051bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00a      	beq.n	80051e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00a      	beq.n	800522a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00a      	beq.n	800524c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005250:	f003 0310 	and.w	r3, r3, #16
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00a      	beq.n	800526e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005272:	f003 0320 	and.w	r3, r3, #32
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01a      	beq.n	80052d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052ba:	d10a      	bne.n	80052d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	605a      	str	r2, [r3, #4]
  }
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af02      	add	r7, sp, #8
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005310:	f7fc f83e 	bl	8001390 <HAL_GetTick>
 8005314:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0308 	and.w	r3, r3, #8
 8005320:	2b08      	cmp	r3, #8
 8005322:	d10e      	bne.n	8005342 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005324:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f831 	bl	800539a <UART_WaitOnFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e027      	b.n	8005392 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b04      	cmp	r3, #4
 800534e:	d10e      	bne.n	800536e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005350:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f81b 	bl	800539a <UART_WaitOnFlagUntilTimeout>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e011      	b.n	8005392 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2220      	movs	r2, #32
 8005372:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2220      	movs	r2, #32
 8005378:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b09c      	sub	sp, #112	@ 0x70
 800539e:	af00      	add	r7, sp, #0
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	603b      	str	r3, [r7, #0]
 80053a6:	4613      	mov	r3, r2
 80053a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053aa:	e0a7      	b.n	80054fc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b2:	f000 80a3 	beq.w	80054fc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053b6:	f7fb ffeb 	bl	8001390 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d302      	bcc.n	80053cc <UART_WaitOnFlagUntilTimeout+0x32>
 80053c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d13f      	bne.n	800544c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80053da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053dc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80053e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80053f0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80053f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e6      	bne.n	80053cc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3308      	adds	r3, #8
 8005404:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005408:	e853 3f00 	ldrex	r3, [r3]
 800540c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800540e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005410:	f023 0301 	bic.w	r3, r3, #1
 8005414:	663b      	str	r3, [r7, #96]	@ 0x60
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	3308      	adds	r3, #8
 800541c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800541e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005420:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005422:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005424:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005426:	e841 2300 	strex	r3, r2, [r1]
 800542a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800542c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1e5      	bne.n	80053fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2220      	movs	r2, #32
 8005436:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2220      	movs	r2, #32
 800543c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e068      	b.n	800551e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0304 	and.w	r3, r3, #4
 8005456:	2b00      	cmp	r3, #0
 8005458:	d050      	beq.n	80054fc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005464:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005468:	d148      	bne.n	80054fc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005472:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547c:	e853 3f00 	ldrex	r3, [r3]
 8005480:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005484:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005488:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	461a      	mov	r2, r3
 8005490:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005492:	637b      	str	r3, [r7, #52]	@ 0x34
 8005494:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005496:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005498:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800549a:	e841 2300 	strex	r3, r2, [r1]
 800549e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80054a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1e6      	bne.n	8005474 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3308      	adds	r3, #8
 80054ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	e853 3f00 	ldrex	r3, [r3]
 80054b4:	613b      	str	r3, [r7, #16]
   return(result);
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	f023 0301 	bic.w	r3, r3, #1
 80054bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3308      	adds	r3, #8
 80054c4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80054c6:	623a      	str	r2, [r7, #32]
 80054c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ca:	69f9      	ldr	r1, [r7, #28]
 80054cc:	6a3a      	ldr	r2, [r7, #32]
 80054ce:	e841 2300 	strex	r3, r2, [r1]
 80054d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1e5      	bne.n	80054a6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2220      	movs	r2, #32
 80054de:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2220      	movs	r2, #32
 80054e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e010      	b.n	800551e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	69da      	ldr	r2, [r3, #28]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	4013      	ands	r3, r2
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	429a      	cmp	r2, r3
 800550a:	bf0c      	ite	eq
 800550c:	2301      	moveq	r3, #1
 800550e:	2300      	movne	r3, #0
 8005510:	b2db      	uxtb	r3, r3
 8005512:	461a      	mov	r2, r3
 8005514:	79fb      	ldrb	r3, [r7, #7]
 8005516:	429a      	cmp	r2, r3
 8005518:	f43f af48 	beq.w	80053ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3770      	adds	r7, #112	@ 0x70
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005528:	b084      	sub	sp, #16
 800552a:	b580      	push	{r7, lr}
 800552c:	b084      	sub	sp, #16
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
 8005532:	f107 001c 	add.w	r0, r7, #28
 8005536:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800553a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553c:	2b01      	cmp	r3, #1
 800553e:	d120      	bne.n	8005582 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005544:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	4b20      	ldr	r3, [pc, #128]	@ (80055d4 <USB_CoreInit+0xac>)
 8005552:	4013      	ands	r3, r2
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005564:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005566:	2b01      	cmp	r3, #1
 8005568:	d105      	bne.n	8005576 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 fa96 	bl	8005aa8 <USB_CoreReset>
 800557c:	4603      	mov	r3, r0
 800557e:	73fb      	strb	r3, [r7, #15]
 8005580:	e010      	b.n	80055a4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fa8a 	bl	8005aa8 <USB_CoreReset>
 8005594:	4603      	mov	r3, r0
 8005596:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80055a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d10b      	bne.n	80055c2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f043 0206 	orr.w	r2, r3, #6
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f043 0220 	orr.w	r2, r3, #32
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055ce:	b004      	add	sp, #16
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	ffbdffbf 	.word	0xffbdffbf

080055d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f023 0201 	bic.w	r2, r3, #1
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b084      	sub	sp, #16
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	460b      	mov	r3, r1
 8005604:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005616:	78fb      	ldrb	r3, [r7, #3]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d115      	bne.n	8005648 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005628:	2001      	movs	r0, #1
 800562a:	f7fb febd 	bl	80013a8 <HAL_Delay>
      ms++;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3301      	adds	r3, #1
 8005632:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 fa29 	bl	8005a8c <USB_GetMode>
 800563a:	4603      	mov	r3, r0
 800563c:	2b01      	cmp	r3, #1
 800563e:	d01e      	beq.n	800567e <USB_SetCurrentMode+0x84>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2b31      	cmp	r3, #49	@ 0x31
 8005644:	d9f0      	bls.n	8005628 <USB_SetCurrentMode+0x2e>
 8005646:	e01a      	b.n	800567e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005648:	78fb      	ldrb	r3, [r7, #3]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d115      	bne.n	800567a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800565a:	2001      	movs	r0, #1
 800565c:	f7fb fea4 	bl	80013a8 <HAL_Delay>
      ms++;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	3301      	adds	r3, #1
 8005664:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fa10 	bl	8005a8c <USB_GetMode>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d005      	beq.n	800567e <USB_SetCurrentMode+0x84>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2b31      	cmp	r3, #49	@ 0x31
 8005676:	d9f0      	bls.n	800565a <USB_SetCurrentMode+0x60>
 8005678:	e001      	b.n	800567e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e005      	b.n	800568a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2b32      	cmp	r3, #50	@ 0x32
 8005682:	d101      	bne.n	8005688 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e000      	b.n	800568a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005694:	b084      	sub	sp, #16
 8005696:	b580      	push	{r7, lr}
 8005698:	b086      	sub	sp, #24
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80056a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056ae:	2300      	movs	r3, #0
 80056b0:	613b      	str	r3, [r7, #16]
 80056b2:	e009      	b.n	80056c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	3340      	adds	r3, #64	@ 0x40
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	2200      	movs	r2, #0
 80056c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	3301      	adds	r3, #1
 80056c6:	613b      	str	r3, [r7, #16]
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	2b0e      	cmp	r3, #14
 80056cc:	d9f2      	bls.n	80056b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80056ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d11c      	bne.n	800570e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056e2:	f043 0302 	orr.w	r3, r3, #2
 80056e6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ec:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	e005      	b.n	800571a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005712:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005720:	461a      	mov	r2, r3
 8005722:	2300      	movs	r3, #0
 8005724:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800572c:	4619      	mov	r1, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005734:	461a      	mov	r2, r3
 8005736:	680b      	ldr	r3, [r1, #0]
 8005738:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800573a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800573c:	2b01      	cmp	r3, #1
 800573e:	d10c      	bne.n	800575a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005742:	2b00      	cmp	r3, #0
 8005744:	d104      	bne.n	8005750 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005746:	2100      	movs	r1, #0
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f965 	bl	8005a18 <USB_SetDevSpeed>
 800574e:	e008      	b.n	8005762 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005750:	2101      	movs	r1, #1
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f960 	bl	8005a18 <USB_SetDevSpeed>
 8005758:	e003      	b.n	8005762 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800575a:	2103      	movs	r1, #3
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f95b 	bl	8005a18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005762:	2110      	movs	r1, #16
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f8f3 	bl	8005950 <USB_FlushTxFifo>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f91f 	bl	80059b8 <USB_FlushRxFifo>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d001      	beq.n	8005784 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800578a:	461a      	mov	r2, r3
 800578c:	2300      	movs	r3, #0
 800578e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005796:	461a      	mov	r2, r3
 8005798:	2300      	movs	r3, #0
 800579a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057a2:	461a      	mov	r2, r3
 80057a4:	2300      	movs	r3, #0
 80057a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057a8:	2300      	movs	r3, #0
 80057aa:	613b      	str	r3, [r7, #16]
 80057ac:	e043      	b.n	8005836 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057c4:	d118      	bne.n	80057f8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10a      	bne.n	80057e2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057d8:	461a      	mov	r2, r3
 80057da:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	e013      	b.n	800580a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057ee:	461a      	mov	r2, r3
 80057f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	e008      	b.n	800580a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005804:	461a      	mov	r2, r3
 8005806:	2300      	movs	r3, #0
 8005808:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	4413      	add	r3, r2
 8005812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005816:	461a      	mov	r2, r3
 8005818:	2300      	movs	r3, #0
 800581a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005828:	461a      	mov	r2, r3
 800582a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800582e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	3301      	adds	r3, #1
 8005834:	613b      	str	r3, [r7, #16]
 8005836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	429a      	cmp	r2, r3
 800583c:	d3b7      	bcc.n	80057ae <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800583e:	2300      	movs	r3, #0
 8005840:	613b      	str	r3, [r7, #16]
 8005842:	e043      	b.n	80058cc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005856:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800585a:	d118      	bne.n	800588e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10a      	bne.n	8005878 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800586e:	461a      	mov	r2, r3
 8005870:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	e013      	b.n	80058a0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005884:	461a      	mov	r2, r3
 8005886:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	e008      	b.n	80058a0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800589a:	461a      	mov	r2, r3
 800589c:	2300      	movs	r3, #0
 800589e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ac:	461a      	mov	r2, r3
 80058ae:	2300      	movs	r3, #0
 80058b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058be:	461a      	mov	r2, r3
 80058c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80058c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	3301      	adds	r3, #1
 80058ca:	613b      	str	r3, [r7, #16]
 80058cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d3b7      	bcc.n	8005844 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80058f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d105      	bne.n	8005908 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	f043 0210 	orr.w	r2, r3, #16
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	699a      	ldr	r2, [r3, #24]
 800590c:	4b0e      	ldr	r3, [pc, #56]	@ (8005948 <USB_DevInit+0x2b4>)
 800590e:	4313      	orrs	r3, r2
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005916:	2b00      	cmp	r3, #0
 8005918:	d005      	beq.n	8005926 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	f043 0208 	orr.w	r2, r3, #8
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005926:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005928:	2b01      	cmp	r3, #1
 800592a:	d105      	bne.n	8005938 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	699a      	ldr	r2, [r3, #24]
 8005930:	4b06      	ldr	r3, [pc, #24]	@ (800594c <USB_DevInit+0x2b8>)
 8005932:	4313      	orrs	r3, r2
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005938:	7dfb      	ldrb	r3, [r7, #23]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005944:	b004      	add	sp, #16
 8005946:	4770      	bx	lr
 8005948:	803c3800 	.word	0x803c3800
 800594c:	40000004 	.word	0x40000004

08005950 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	3301      	adds	r3, #1
 8005962:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4a13      	ldr	r2, [pc, #76]	@ (80059b4 <USB_FlushTxFifo+0x64>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d901      	bls.n	8005970 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e01b      	b.n	80059a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	daf2      	bge.n	800595e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	019b      	lsls	r3, r3, #6
 8005980:	f043 0220 	orr.w	r2, r3, #32
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	3301      	adds	r3, #1
 800598c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4a08      	ldr	r2, [pc, #32]	@ (80059b4 <USB_FlushTxFifo+0x64>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d901      	bls.n	800599a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e006      	b.n	80059a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f003 0320 	and.w	r3, r3, #32
 80059a2:	2b20      	cmp	r3, #32
 80059a4:	d0f0      	beq.n	8005988 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	00030d40 	.word	0x00030d40

080059b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	3301      	adds	r3, #1
 80059c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	4a11      	ldr	r2, [pc, #68]	@ (8005a14 <USB_FlushRxFifo+0x5c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d901      	bls.n	80059d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e018      	b.n	8005a08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	daf2      	bge.n	80059c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2210      	movs	r2, #16
 80059e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	3301      	adds	r3, #1
 80059ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4a08      	ldr	r2, [pc, #32]	@ (8005a14 <USB_FlushRxFifo+0x5c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d901      	bls.n	80059fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e006      	b.n	8005a08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f003 0310 	and.w	r3, r3, #16
 8005a02:	2b10      	cmp	r3, #16
 8005a04:	d0f0      	beq.n	80059e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	00030d40 	.word	0x00030d40

08005a18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	460b      	mov	r3, r1
 8005a22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	78fb      	ldrb	r3, [r7, #3]
 8005a32:	68f9      	ldr	r1, [r7, #12]
 8005a34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b085      	sub	sp, #20
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005a64:	f023 0303 	bic.w	r3, r3, #3
 8005a68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a78:	f043 0302 	orr.w	r3, r3, #2
 8005a7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	f003 0301 	and.w	r3, r3, #1
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4a13      	ldr	r2, [pc, #76]	@ (8005b0c <USB_CoreReset+0x64>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d901      	bls.n	8005ac6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e01b      	b.n	8005afe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	daf2      	bge.n	8005ab4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f043 0201 	orr.w	r2, r3, #1
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4a09      	ldr	r2, [pc, #36]	@ (8005b0c <USB_CoreReset+0x64>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d901      	bls.n	8005af0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e006      	b.n	8005afe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d0f0      	beq.n	8005ade <USB_CoreReset+0x36>

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	00030d40 	.word	0x00030d40

08005b10 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005b16:	4b8d      	ldr	r3, [pc, #564]	@ (8005d4c <MX_LWIP_Init+0x23c>)
 8005b18:	22c0      	movs	r2, #192	@ 0xc0
 8005b1a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005b1c:	4b8b      	ldr	r3, [pc, #556]	@ (8005d4c <MX_LWIP_Init+0x23c>)
 8005b1e:	22a8      	movs	r2, #168	@ 0xa8
 8005b20:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8005b22:	4b8a      	ldr	r3, [pc, #552]	@ (8005d4c <MX_LWIP_Init+0x23c>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8005b28:	4b88      	ldr	r3, [pc, #544]	@ (8005d4c <MX_LWIP_Init+0x23c>)
 8005b2a:	220a      	movs	r2, #10
 8005b2c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005b2e:	4b88      	ldr	r3, [pc, #544]	@ (8005d50 <MX_LWIP_Init+0x240>)
 8005b30:	22ff      	movs	r2, #255	@ 0xff
 8005b32:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005b34:	4b86      	ldr	r3, [pc, #536]	@ (8005d50 <MX_LWIP_Init+0x240>)
 8005b36:	22ff      	movs	r2, #255	@ 0xff
 8005b38:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005b3a:	4b85      	ldr	r3, [pc, #532]	@ (8005d50 <MX_LWIP_Init+0x240>)
 8005b3c:	22ff      	movs	r2, #255	@ 0xff
 8005b3e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005b40:	4b83      	ldr	r3, [pc, #524]	@ (8005d50 <MX_LWIP_Init+0x240>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8005b46:	4b83      	ldr	r3, [pc, #524]	@ (8005d54 <MX_LWIP_Init+0x244>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8005b4c:	4b81      	ldr	r3, [pc, #516]	@ (8005d54 <MX_LWIP_Init+0x244>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005b52:	4b80      	ldr	r3, [pc, #512]	@ (8005d54 <MX_LWIP_Init+0x244>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8005b58:	4b7e      	ldr	r3, [pc, #504]	@ (8005d54 <MX_LWIP_Init+0x244>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8005b5e:	f000 fd2c 	bl	80065ba <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005b62:	4b7a      	ldr	r3, [pc, #488]	@ (8005d4c <MX_LWIP_Init+0x23c>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	061a      	lsls	r2, r3, #24
 8005b68:	4b78      	ldr	r3, [pc, #480]	@ (8005d4c <MX_LWIP_Init+0x23c>)
 8005b6a:	785b      	ldrb	r3, [r3, #1]
 8005b6c:	041b      	lsls	r3, r3, #16
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	4b76      	ldr	r3, [pc, #472]	@ (8005d4c <MX_LWIP_Init+0x23c>)
 8005b72:	789b      	ldrb	r3, [r3, #2]
 8005b74:	021b      	lsls	r3, r3, #8
 8005b76:	4313      	orrs	r3, r2
 8005b78:	4a74      	ldr	r2, [pc, #464]	@ (8005d4c <MX_LWIP_Init+0x23c>)
 8005b7a:	78d2      	ldrb	r2, [r2, #3]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	061a      	lsls	r2, r3, #24
 8005b80:	4b72      	ldr	r3, [pc, #456]	@ (8005d4c <MX_LWIP_Init+0x23c>)
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	0619      	lsls	r1, r3, #24
 8005b86:	4b71      	ldr	r3, [pc, #452]	@ (8005d4c <MX_LWIP_Init+0x23c>)
 8005b88:	785b      	ldrb	r3, [r3, #1]
 8005b8a:	041b      	lsls	r3, r3, #16
 8005b8c:	4319      	orrs	r1, r3
 8005b8e:	4b6f      	ldr	r3, [pc, #444]	@ (8005d4c <MX_LWIP_Init+0x23c>)
 8005b90:	789b      	ldrb	r3, [r3, #2]
 8005b92:	021b      	lsls	r3, r3, #8
 8005b94:	430b      	orrs	r3, r1
 8005b96:	496d      	ldr	r1, [pc, #436]	@ (8005d4c <MX_LWIP_Init+0x23c>)
 8005b98:	78c9      	ldrb	r1, [r1, #3]
 8005b9a:	430b      	orrs	r3, r1
 8005b9c:	021b      	lsls	r3, r3, #8
 8005b9e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	4b69      	ldr	r3, [pc, #420]	@ (8005d4c <MX_LWIP_Init+0x23c>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	0619      	lsls	r1, r3, #24
 8005baa:	4b68      	ldr	r3, [pc, #416]	@ (8005d4c <MX_LWIP_Init+0x23c>)
 8005bac:	785b      	ldrb	r3, [r3, #1]
 8005bae:	041b      	lsls	r3, r3, #16
 8005bb0:	4319      	orrs	r1, r3
 8005bb2:	4b66      	ldr	r3, [pc, #408]	@ (8005d4c <MX_LWIP_Init+0x23c>)
 8005bb4:	789b      	ldrb	r3, [r3, #2]
 8005bb6:	021b      	lsls	r3, r3, #8
 8005bb8:	430b      	orrs	r3, r1
 8005bba:	4964      	ldr	r1, [pc, #400]	@ (8005d4c <MX_LWIP_Init+0x23c>)
 8005bbc:	78c9      	ldrb	r1, [r1, #3]
 8005bbe:	430b      	orrs	r3, r1
 8005bc0:	0a1b      	lsrs	r3, r3, #8
 8005bc2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	4b60      	ldr	r3, [pc, #384]	@ (8005d4c <MX_LWIP_Init+0x23c>)
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	0619      	lsls	r1, r3, #24
 8005bce:	4b5f      	ldr	r3, [pc, #380]	@ (8005d4c <MX_LWIP_Init+0x23c>)
 8005bd0:	785b      	ldrb	r3, [r3, #1]
 8005bd2:	041b      	lsls	r3, r3, #16
 8005bd4:	4319      	orrs	r1, r3
 8005bd6:	4b5d      	ldr	r3, [pc, #372]	@ (8005d4c <MX_LWIP_Init+0x23c>)
 8005bd8:	789b      	ldrb	r3, [r3, #2]
 8005bda:	021b      	lsls	r3, r3, #8
 8005bdc:	430b      	orrs	r3, r1
 8005bde:	495b      	ldr	r1, [pc, #364]	@ (8005d4c <MX_LWIP_Init+0x23c>)
 8005be0:	78c9      	ldrb	r1, [r1, #3]
 8005be2:	430b      	orrs	r3, r1
 8005be4:	0e1b      	lsrs	r3, r3, #24
 8005be6:	4313      	orrs	r3, r2
 8005be8:	4a5b      	ldr	r2, [pc, #364]	@ (8005d58 <MX_LWIP_Init+0x248>)
 8005bea:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005bec:	4b58      	ldr	r3, [pc, #352]	@ (8005d50 <MX_LWIP_Init+0x240>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	061a      	lsls	r2, r3, #24
 8005bf2:	4b57      	ldr	r3, [pc, #348]	@ (8005d50 <MX_LWIP_Init+0x240>)
 8005bf4:	785b      	ldrb	r3, [r3, #1]
 8005bf6:	041b      	lsls	r3, r3, #16
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	4b55      	ldr	r3, [pc, #340]	@ (8005d50 <MX_LWIP_Init+0x240>)
 8005bfc:	789b      	ldrb	r3, [r3, #2]
 8005bfe:	021b      	lsls	r3, r3, #8
 8005c00:	4313      	orrs	r3, r2
 8005c02:	4a53      	ldr	r2, [pc, #332]	@ (8005d50 <MX_LWIP_Init+0x240>)
 8005c04:	78d2      	ldrb	r2, [r2, #3]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	061a      	lsls	r2, r3, #24
 8005c0a:	4b51      	ldr	r3, [pc, #324]	@ (8005d50 <MX_LWIP_Init+0x240>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	0619      	lsls	r1, r3, #24
 8005c10:	4b4f      	ldr	r3, [pc, #316]	@ (8005d50 <MX_LWIP_Init+0x240>)
 8005c12:	785b      	ldrb	r3, [r3, #1]
 8005c14:	041b      	lsls	r3, r3, #16
 8005c16:	4319      	orrs	r1, r3
 8005c18:	4b4d      	ldr	r3, [pc, #308]	@ (8005d50 <MX_LWIP_Init+0x240>)
 8005c1a:	789b      	ldrb	r3, [r3, #2]
 8005c1c:	021b      	lsls	r3, r3, #8
 8005c1e:	430b      	orrs	r3, r1
 8005c20:	494b      	ldr	r1, [pc, #300]	@ (8005d50 <MX_LWIP_Init+0x240>)
 8005c22:	78c9      	ldrb	r1, [r1, #3]
 8005c24:	430b      	orrs	r3, r1
 8005c26:	021b      	lsls	r3, r3, #8
 8005c28:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	4b48      	ldr	r3, [pc, #288]	@ (8005d50 <MX_LWIP_Init+0x240>)
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	0619      	lsls	r1, r3, #24
 8005c34:	4b46      	ldr	r3, [pc, #280]	@ (8005d50 <MX_LWIP_Init+0x240>)
 8005c36:	785b      	ldrb	r3, [r3, #1]
 8005c38:	041b      	lsls	r3, r3, #16
 8005c3a:	4319      	orrs	r1, r3
 8005c3c:	4b44      	ldr	r3, [pc, #272]	@ (8005d50 <MX_LWIP_Init+0x240>)
 8005c3e:	789b      	ldrb	r3, [r3, #2]
 8005c40:	021b      	lsls	r3, r3, #8
 8005c42:	430b      	orrs	r3, r1
 8005c44:	4942      	ldr	r1, [pc, #264]	@ (8005d50 <MX_LWIP_Init+0x240>)
 8005c46:	78c9      	ldrb	r1, [r1, #3]
 8005c48:	430b      	orrs	r3, r1
 8005c4a:	0a1b      	lsrs	r3, r3, #8
 8005c4c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005c50:	431a      	orrs	r2, r3
 8005c52:	4b3f      	ldr	r3, [pc, #252]	@ (8005d50 <MX_LWIP_Init+0x240>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	0619      	lsls	r1, r3, #24
 8005c58:	4b3d      	ldr	r3, [pc, #244]	@ (8005d50 <MX_LWIP_Init+0x240>)
 8005c5a:	785b      	ldrb	r3, [r3, #1]
 8005c5c:	041b      	lsls	r3, r3, #16
 8005c5e:	4319      	orrs	r1, r3
 8005c60:	4b3b      	ldr	r3, [pc, #236]	@ (8005d50 <MX_LWIP_Init+0x240>)
 8005c62:	789b      	ldrb	r3, [r3, #2]
 8005c64:	021b      	lsls	r3, r3, #8
 8005c66:	430b      	orrs	r3, r1
 8005c68:	4939      	ldr	r1, [pc, #228]	@ (8005d50 <MX_LWIP_Init+0x240>)
 8005c6a:	78c9      	ldrb	r1, [r1, #3]
 8005c6c:	430b      	orrs	r3, r1
 8005c6e:	0e1b      	lsrs	r3, r3, #24
 8005c70:	4313      	orrs	r3, r2
 8005c72:	4a3a      	ldr	r2, [pc, #232]	@ (8005d5c <MX_LWIP_Init+0x24c>)
 8005c74:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005c76:	4b37      	ldr	r3, [pc, #220]	@ (8005d54 <MX_LWIP_Init+0x244>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	061a      	lsls	r2, r3, #24
 8005c7c:	4b35      	ldr	r3, [pc, #212]	@ (8005d54 <MX_LWIP_Init+0x244>)
 8005c7e:	785b      	ldrb	r3, [r3, #1]
 8005c80:	041b      	lsls	r3, r3, #16
 8005c82:	431a      	orrs	r2, r3
 8005c84:	4b33      	ldr	r3, [pc, #204]	@ (8005d54 <MX_LWIP_Init+0x244>)
 8005c86:	789b      	ldrb	r3, [r3, #2]
 8005c88:	021b      	lsls	r3, r3, #8
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	4a31      	ldr	r2, [pc, #196]	@ (8005d54 <MX_LWIP_Init+0x244>)
 8005c8e:	78d2      	ldrb	r2, [r2, #3]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	061a      	lsls	r2, r3, #24
 8005c94:	4b2f      	ldr	r3, [pc, #188]	@ (8005d54 <MX_LWIP_Init+0x244>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	0619      	lsls	r1, r3, #24
 8005c9a:	4b2e      	ldr	r3, [pc, #184]	@ (8005d54 <MX_LWIP_Init+0x244>)
 8005c9c:	785b      	ldrb	r3, [r3, #1]
 8005c9e:	041b      	lsls	r3, r3, #16
 8005ca0:	4319      	orrs	r1, r3
 8005ca2:	4b2c      	ldr	r3, [pc, #176]	@ (8005d54 <MX_LWIP_Init+0x244>)
 8005ca4:	789b      	ldrb	r3, [r3, #2]
 8005ca6:	021b      	lsls	r3, r3, #8
 8005ca8:	430b      	orrs	r3, r1
 8005caa:	492a      	ldr	r1, [pc, #168]	@ (8005d54 <MX_LWIP_Init+0x244>)
 8005cac:	78c9      	ldrb	r1, [r1, #3]
 8005cae:	430b      	orrs	r3, r1
 8005cb0:	021b      	lsls	r3, r3, #8
 8005cb2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	4b26      	ldr	r3, [pc, #152]	@ (8005d54 <MX_LWIP_Init+0x244>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	0619      	lsls	r1, r3, #24
 8005cbe:	4b25      	ldr	r3, [pc, #148]	@ (8005d54 <MX_LWIP_Init+0x244>)
 8005cc0:	785b      	ldrb	r3, [r3, #1]
 8005cc2:	041b      	lsls	r3, r3, #16
 8005cc4:	4319      	orrs	r1, r3
 8005cc6:	4b23      	ldr	r3, [pc, #140]	@ (8005d54 <MX_LWIP_Init+0x244>)
 8005cc8:	789b      	ldrb	r3, [r3, #2]
 8005cca:	021b      	lsls	r3, r3, #8
 8005ccc:	430b      	orrs	r3, r1
 8005cce:	4921      	ldr	r1, [pc, #132]	@ (8005d54 <MX_LWIP_Init+0x244>)
 8005cd0:	78c9      	ldrb	r1, [r1, #3]
 8005cd2:	430b      	orrs	r3, r1
 8005cd4:	0a1b      	lsrs	r3, r3, #8
 8005cd6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8005d54 <MX_LWIP_Init+0x244>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	0619      	lsls	r1, r3, #24
 8005ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8005d54 <MX_LWIP_Init+0x244>)
 8005ce4:	785b      	ldrb	r3, [r3, #1]
 8005ce6:	041b      	lsls	r3, r3, #16
 8005ce8:	4319      	orrs	r1, r3
 8005cea:	4b1a      	ldr	r3, [pc, #104]	@ (8005d54 <MX_LWIP_Init+0x244>)
 8005cec:	789b      	ldrb	r3, [r3, #2]
 8005cee:	021b      	lsls	r3, r3, #8
 8005cf0:	430b      	orrs	r3, r1
 8005cf2:	4918      	ldr	r1, [pc, #96]	@ (8005d54 <MX_LWIP_Init+0x244>)
 8005cf4:	78c9      	ldrb	r1, [r1, #3]
 8005cf6:	430b      	orrs	r3, r1
 8005cf8:	0e1b      	lsrs	r3, r3, #24
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	4a18      	ldr	r2, [pc, #96]	@ (8005d60 <MX_LWIP_Init+0x250>)
 8005cfe:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005d00:	4b18      	ldr	r3, [pc, #96]	@ (8005d64 <MX_LWIP_Init+0x254>)
 8005d02:	9302      	str	r3, [sp, #8]
 8005d04:	4b18      	ldr	r3, [pc, #96]	@ (8005d68 <MX_LWIP_Init+0x258>)
 8005d06:	9301      	str	r3, [sp, #4]
 8005d08:	2300      	movs	r3, #0
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	4b14      	ldr	r3, [pc, #80]	@ (8005d60 <MX_LWIP_Init+0x250>)
 8005d0e:	4a13      	ldr	r2, [pc, #76]	@ (8005d5c <MX_LWIP_Init+0x24c>)
 8005d10:	4911      	ldr	r1, [pc, #68]	@ (8005d58 <MX_LWIP_Init+0x248>)
 8005d12:	4816      	ldr	r0, [pc, #88]	@ (8005d6c <MX_LWIP_Init+0x25c>)
 8005d14:	f001 f93a 	bl	8006f8c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005d18:	4814      	ldr	r0, [pc, #80]	@ (8005d6c <MX_LWIP_Init+0x25c>)
 8005d1a:	f001 fae5 	bl	80072e8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005d1e:	4b13      	ldr	r3, [pc, #76]	@ (8005d6c <MX_LWIP_Init+0x25c>)
 8005d20:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005d24:	089b      	lsrs	r3, r3, #2
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d003      	beq.n	8005d38 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005d30:	480e      	ldr	r0, [pc, #56]	@ (8005d6c <MX_LWIP_Init+0x25c>)
 8005d32:	f001 fae9 	bl	8007308 <netif_set_up>
 8005d36:	e002      	b.n	8005d3e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005d38:	480c      	ldr	r0, [pc, #48]	@ (8005d6c <MX_LWIP_Init+0x25c>)
 8005d3a:	f001 fb51 	bl	80073e0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005d3e:	490c      	ldr	r1, [pc, #48]	@ (8005d70 <MX_LWIP_Init+0x260>)
 8005d40:	480a      	ldr	r0, [pc, #40]	@ (8005d6c <MX_LWIP_Init+0x25c>)
 8005d42:	f001 fbe3 	bl	800750c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005d46:	bf00      	nop
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	2000088c 	.word	0x2000088c
 8005d50:	20000890 	.word	0x20000890
 8005d54:	20000894 	.word	0x20000894
 8005d58:	20000880 	.word	0x20000880
 8005d5c:	20000884 	.word	0x20000884
 8005d60:	20000888 	.word	0x20000888
 8005d64:	0800b1d5 	.word	0x0800b1d5
 8005d68:	080060d9 	.word	0x080060d9
 8005d6c:	2000084c 	.word	0x2000084c
 8005d70:	08005dc5 	.word	0x08005dc5

08005d74 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8005d7c:	f7fb fb08 	bl	8001390 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	4b08      	ldr	r3, [pc, #32]	@ (8005da4 <Ethernet_Link_Periodic_Handle+0x30>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	2b63      	cmp	r3, #99	@ 0x63
 8005d8a:	d907      	bls.n	8005d9c <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8005d8c:	f7fb fb00 	bl	8001390 <HAL_GetTick>
 8005d90:	4603      	mov	r3, r0
 8005d92:	4a04      	ldr	r2, [pc, #16]	@ (8005da4 <Ethernet_Link_Periodic_Handle+0x30>)
 8005d94:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fafc 	bl	8006394 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8005d9c:	bf00      	nop
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	20000848 	.word	0x20000848

08005da8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005dac:	4804      	ldr	r0, [pc, #16]	@ (8005dc0 <MX_LWIP_Process+0x18>)
 8005dae:	f000 f973 	bl	8006098 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005db2:	f002 faa3 	bl	80082fc <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8005db6:	4802      	ldr	r0, [pc, #8]	@ (8005dc0 <MX_LWIP_Process+0x18>)
 8005db8:	f7ff ffdc 	bl	8005d74 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005dbc:	bf00      	nop
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	2000084c 	.word	0x2000084c

08005dc4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <SCB_InvalidateDCache_by_Addr>:
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8005dea:	2320      	movs	r3, #32
 8005dec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005dee:	f3bf 8f4f 	dsb	sy
}
 8005df2:	bf00      	nop
    while (op_size > 0) {
 8005df4:	e00b      	b.n	8005e0e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8005df6:	4a0d      	ldr	r2, [pc, #52]	@ (8005e2c <SCB_InvalidateDCache_by_Addr+0x54>)
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	4413      	add	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	dcf0      	bgt.n	8005df6 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005e14:	f3bf 8f4f 	dsb	sy
}
 8005e18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005e1a:	f3bf 8f6f 	isb	sy
}
 8005e1e:	bf00      	nop
}
 8005e20:	bf00      	nop
 8005e22:	371c      	adds	r7, #28
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	e000ed00 	.word	0xe000ed00

08005e30 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005e3c:	4b40      	ldr	r3, [pc, #256]	@ (8005f40 <low_level_init+0x110>)
 8005e3e:	4a41      	ldr	r2, [pc, #260]	@ (8005f44 <low_level_init+0x114>)
 8005e40:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005e42:	2300      	movs	r3, #0
 8005e44:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005e46:	2380      	movs	r3, #128	@ 0x80
 8005e48:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005e4a:	23e1      	movs	r3, #225	@ 0xe1
 8005e4c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005e52:	2300      	movs	r3, #0
 8005e54:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005e56:	2300      	movs	r3, #0
 8005e58:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005e5a:	4a39      	ldr	r2, [pc, #228]	@ (8005f40 <low_level_init+0x110>)
 8005e5c:	f107 0308 	add.w	r3, r7, #8
 8005e60:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005e62:	4b37      	ldr	r3, [pc, #220]	@ (8005f40 <low_level_init+0x110>)
 8005e64:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005e68:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005e6a:	4b35      	ldr	r3, [pc, #212]	@ (8005f40 <low_level_init+0x110>)
 8005e6c:	4a36      	ldr	r2, [pc, #216]	@ (8005f48 <low_level_init+0x118>)
 8005e6e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005e70:	4b33      	ldr	r3, [pc, #204]	@ (8005f40 <low_level_init+0x110>)
 8005e72:	4a36      	ldr	r2, [pc, #216]	@ (8005f4c <low_level_init+0x11c>)
 8005e74:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005e76:	4b32      	ldr	r3, [pc, #200]	@ (8005f40 <low_level_init+0x110>)
 8005e78:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005e7c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005e7e:	4830      	ldr	r0, [pc, #192]	@ (8005f40 <low_level_init+0x110>)
 8005e80:	f7fb fbc8 	bl	8001614 <HAL_ETH_Init>
 8005e84:	4603      	mov	r3, r0
 8005e86:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005e88:	2238      	movs	r2, #56	@ 0x38
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	4830      	ldr	r0, [pc, #192]	@ (8005f50 <low_level_init+0x120>)
 8005e8e:	f005 fbdc 	bl	800b64a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005e92:	4b2f      	ldr	r3, [pc, #188]	@ (8005f50 <low_level_init+0x120>)
 8005e94:	2221      	movs	r2, #33	@ 0x21
 8005e96:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005e98:	4b2d      	ldr	r3, [pc, #180]	@ (8005f50 <low_level_init+0x120>)
 8005e9a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8005e9e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005ea0:	4b2b      	ldr	r3, [pc, #172]	@ (8005f50 <low_level_init+0x120>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005ea6:	482b      	ldr	r0, [pc, #172]	@ (8005f54 <low_level_init+0x124>)
 8005ea8:	f000 ff38 	bl	8006d1c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2206      	movs	r2, #6
 8005eb0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005eb4:	4b22      	ldr	r3, [pc, #136]	@ (8005f40 <low_level_init+0x110>)
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	781a      	ldrb	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8005f40 <low_level_init+0x110>)
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	785a      	ldrb	r2, [r3, #1]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8005f40 <low_level_init+0x110>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	789a      	ldrb	r2, [r3, #2]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005ed8:	4b19      	ldr	r3, [pc, #100]	@ (8005f40 <low_level_init+0x110>)
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	78da      	ldrb	r2, [r3, #3]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005ee4:	4b16      	ldr	r3, [pc, #88]	@ (8005f40 <low_level_init+0x110>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	791a      	ldrb	r2, [r3, #4]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005ef0:	4b13      	ldr	r3, [pc, #76]	@ (8005f40 <low_level_init+0x110>)
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	795a      	ldrb	r2, [r3, #5]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005f02:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005f0a:	f043 030a 	orr.w	r3, r3, #10
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005f16:	4910      	ldr	r1, [pc, #64]	@ (8005f58 <low_level_init+0x128>)
 8005f18:	4810      	ldr	r0, [pc, #64]	@ (8005f5c <low_level_init+0x12c>)
 8005f1a:	f7fb f886 	bl	800102a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8005f1e:	480f      	ldr	r0, [pc, #60]	@ (8005f5c <low_level_init+0x12c>)
 8005f20:	f7fb f8b5 	bl	800108e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d103      	bne.n	8005f32 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fa32 	bl	8006394 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005f30:	e001      	b.n	8005f36 <low_level_init+0x106>
    Error_Handler();
 8005f32:	f7fa fd53 	bl	80009dc <Error_Handler>
}
 8005f36:	bf00      	nop
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	20005224 	.word	0x20005224
 8005f44:	40028000 	.word	0x40028000
 8005f48:	20000120 	.word	0x20000120
 8005f4c:	20000080 	.word	0x20000080
 8005f50:	200052d4 	.word	0x200052d4
 8005f54:	0800d954 	.word	0x0800d954
 8005f58:	2000000c 	.word	0x2000000c
 8005f5c:	2000530c 	.word	0x2000530c

08005f60 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b092      	sub	sp, #72	@ 0x48
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8005f72:	2300      	movs	r3, #0
 8005f74:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005f78:	f107 030c 	add.w	r3, r7, #12
 8005f7c:	2230      	movs	r2, #48	@ 0x30
 8005f7e:	2100      	movs	r1, #0
 8005f80:	4618      	mov	r0, r3
 8005f82:	f005 fb62 	bl	800b64a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005f86:	f107 030c 	add.w	r3, r7, #12
 8005f8a:	2230      	movs	r2, #48	@ 0x30
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f005 fb5b 	bl	800b64a <memset>

  for(q = p; q != NULL; q = q->next)
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f98:	e045      	b.n	8006026 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005f9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f9c:	2b03      	cmp	r3, #3
 8005f9e:	d902      	bls.n	8005fa6 <low_level_output+0x46>
      return ERR_IF;
 8005fa0:	f06f 030b 	mvn.w	r3, #11
 8005fa4:	e055      	b.n	8006052 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8005fa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fa8:	6859      	ldr	r1, [r3, #4]
 8005faa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fac:	4613      	mov	r3, r2
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	4413      	add	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	3348      	adds	r3, #72	@ 0x48
 8005fb6:	443b      	add	r3, r7
 8005fb8:	3b3c      	subs	r3, #60	@ 0x3c
 8005fba:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005fbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fbe:	895b      	ldrh	r3, [r3, #10]
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	005b      	lsls	r3, r3, #1
 8005fc8:	4413      	add	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	3348      	adds	r3, #72	@ 0x48
 8005fce:	443b      	add	r3, r7
 8005fd0:	3b38      	subs	r3, #56	@ 0x38
 8005fd2:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005fd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d011      	beq.n	8005ffe <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005fda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fdc:	1e5a      	subs	r2, r3, #1
 8005fde:	f107 000c 	add.w	r0, r7, #12
 8005fe2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	440b      	add	r3, r1
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	18c1      	adds	r1, r0, r3
 8005fee:	4613      	mov	r3, r2
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	4413      	add	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	3348      	adds	r3, #72	@ 0x48
 8005ff8:	443b      	add	r3, r7
 8005ffa:	3b34      	subs	r3, #52	@ 0x34
 8005ffc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005ffe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d109      	bne.n	800601a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8006006:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006008:	4613      	mov	r3, r2
 800600a:	005b      	lsls	r3, r3, #1
 800600c:	4413      	add	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	3348      	adds	r3, #72	@ 0x48
 8006012:	443b      	add	r3, r7
 8006014:	3b34      	subs	r3, #52	@ 0x34
 8006016:	2200      	movs	r2, #0
 8006018:	601a      	str	r2, [r3, #0]
    }

    i++;
 800601a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800601c:	3301      	adds	r3, #1
 800601e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8006020:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	643b      	str	r3, [r7, #64]	@ 0x40
 8006026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1b6      	bne.n	8005f9a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	891b      	ldrh	r3, [r3, #8]
 8006030:	461a      	mov	r2, r3
 8006032:	4b0a      	ldr	r3, [pc, #40]	@ (800605c <low_level_output+0xfc>)
 8006034:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006036:	4a09      	ldr	r2, [pc, #36]	@ (800605c <low_level_output+0xfc>)
 8006038:	f107 030c 	add.w	r3, r7, #12
 800603c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800603e:	4a07      	ldr	r2, [pc, #28]	@ (800605c <low_level_output+0xfc>)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8006044:	2214      	movs	r2, #20
 8006046:	4905      	ldr	r1, [pc, #20]	@ (800605c <low_level_output+0xfc>)
 8006048:	4805      	ldr	r0, [pc, #20]	@ (8006060 <low_level_output+0x100>)
 800604a:	f7fb fc17 	bl	800187c <HAL_ETH_Transmit>

  return errval;
 800604e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8006052:	4618      	mov	r0, r3
 8006054:	3748      	adds	r7, #72	@ 0x48
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	200052d4 	.word	0x200052d4
 8006060:	20005224 	.word	0x20005224

08006064 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800606c:	2300      	movs	r3, #0
 800606e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006070:	4b07      	ldr	r3, [pc, #28]	@ (8006090 <low_level_input+0x2c>)
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d105      	bne.n	8006084 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006078:	f107 030c 	add.w	r3, r7, #12
 800607c:	4619      	mov	r1, r3
 800607e:	4805      	ldr	r0, [pc, #20]	@ (8006094 <low_level_input+0x30>)
 8006080:	f7fb fc90 	bl	80019a4 <HAL_ETH_ReadData>
  }

  return p;
 8006084:	68fb      	ldr	r3, [r7, #12]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	20005220 	.word	0x20005220
 8006094:	20005224 	.word	0x20005224

08006098 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80060a0:	2300      	movs	r3, #0
 80060a2:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7ff ffdd 	bl	8006064 <low_level_input>
 80060aa:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00a      	beq.n	80060c8 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	6879      	ldr	r1, [r7, #4]
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	4798      	blx	r3
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d002      	beq.n	80060c8 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f001 fd74 	bl	8007bb0 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1ea      	bne.n	80060a4 <ethernetif_input+0xc>
}
 80060ce:	bf00      	nop
 80060d0:	bf00      	nop
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d106      	bne.n	80060f4 <ethernetif_init+0x1c>
 80060e6:	4b0e      	ldr	r3, [pc, #56]	@ (8006120 <ethernetif_init+0x48>)
 80060e8:	f44f 72bd 	mov.w	r2, #378	@ 0x17a
 80060ec:	490d      	ldr	r1, [pc, #52]	@ (8006124 <ethernetif_init+0x4c>)
 80060ee:	480e      	ldr	r0, [pc, #56]	@ (8006128 <ethernetif_init+0x50>)
 80060f0:	f005 fa46 	bl	800b580 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2273      	movs	r2, #115	@ 0x73
 80060f8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2274      	movs	r2, #116	@ 0x74
 8006100:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a09      	ldr	r2, [pc, #36]	@ (800612c <ethernetif_init+0x54>)
 8006108:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a08      	ldr	r2, [pc, #32]	@ (8006130 <ethernetif_init+0x58>)
 800610e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7ff fe8d 	bl	8005e30 <low_level_init>

  return ERR_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	0800c3d8 	.word	0x0800c3d8
 8006124:	0800c3f4 	.word	0x0800c3f4
 8006128:	0800c404 	.word	0x0800c404
 800612c:	080096a1 	.word	0x080096a1
 8006130:	08005f61 	.word	0x08005f61

08006134 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006140:	68f9      	ldr	r1, [r7, #12]
 8006142:	4807      	ldr	r0, [pc, #28]	@ (8006160 <pbuf_free_custom+0x2c>)
 8006144:	f000 fecc 	bl	8006ee0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006148:	4b06      	ldr	r3, [pc, #24]	@ (8006164 <pbuf_free_custom+0x30>)
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d102      	bne.n	8006156 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006150:	4b04      	ldr	r3, [pc, #16]	@ (8006164 <pbuf_free_custom+0x30>)
 8006152:	2200      	movs	r2, #0
 8006154:	701a      	strb	r2, [r3, #0]
  }
}
 8006156:	bf00      	nop
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	0800d954 	.word	0x0800d954
 8006164:	20005220 	.word	0x20005220

08006168 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800616c:	f7fb f910 	bl	8001390 <HAL_GetTick>
 8006170:	4603      	mov	r3, r0
}
 8006172:	4618      	mov	r0, r3
 8006174:	bd80      	pop	{r7, pc}
	...

08006178 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b08e      	sub	sp, #56	@ 0x38
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006180:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006184:	2200      	movs	r2, #0
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	605a      	str	r2, [r3, #4]
 800618a:	609a      	str	r2, [r3, #8]
 800618c:	60da      	str	r2, [r3, #12]
 800618e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a52      	ldr	r2, [pc, #328]	@ (80062e0 <HAL_ETH_MspInit+0x168>)
 8006196:	4293      	cmp	r3, r2
 8006198:	f040 809e 	bne.w	80062d8 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800619c:	4b51      	ldr	r3, [pc, #324]	@ (80062e4 <HAL_ETH_MspInit+0x16c>)
 800619e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a0:	4a50      	ldr	r2, [pc, #320]	@ (80062e4 <HAL_ETH_MspInit+0x16c>)
 80061a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80061a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80061a8:	4b4e      	ldr	r3, [pc, #312]	@ (80062e4 <HAL_ETH_MspInit+0x16c>)
 80061aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061b0:	623b      	str	r3, [r7, #32]
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	4b4b      	ldr	r3, [pc, #300]	@ (80062e4 <HAL_ETH_MspInit+0x16c>)
 80061b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b8:	4a4a      	ldr	r2, [pc, #296]	@ (80062e4 <HAL_ETH_MspInit+0x16c>)
 80061ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80061be:	6313      	str	r3, [r2, #48]	@ 0x30
 80061c0:	4b48      	ldr	r3, [pc, #288]	@ (80062e4 <HAL_ETH_MspInit+0x16c>)
 80061c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80061c8:	61fb      	str	r3, [r7, #28]
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	4b45      	ldr	r3, [pc, #276]	@ (80062e4 <HAL_ETH_MspInit+0x16c>)
 80061ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061d0:	4a44      	ldr	r2, [pc, #272]	@ (80062e4 <HAL_ETH_MspInit+0x16c>)
 80061d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80061d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80061d8:	4b42      	ldr	r3, [pc, #264]	@ (80062e4 <HAL_ETH_MspInit+0x16c>)
 80061da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061e0:	61bb      	str	r3, [r7, #24]
 80061e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061e4:	4b3f      	ldr	r3, [pc, #252]	@ (80062e4 <HAL_ETH_MspInit+0x16c>)
 80061e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061e8:	4a3e      	ldr	r2, [pc, #248]	@ (80062e4 <HAL_ETH_MspInit+0x16c>)
 80061ea:	f043 0304 	orr.w	r3, r3, #4
 80061ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80061f0:	4b3c      	ldr	r3, [pc, #240]	@ (80062e4 <HAL_ETH_MspInit+0x16c>)
 80061f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061f4:	f003 0304 	and.w	r3, r3, #4
 80061f8:	617b      	str	r3, [r7, #20]
 80061fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061fc:	4b39      	ldr	r3, [pc, #228]	@ (80062e4 <HAL_ETH_MspInit+0x16c>)
 80061fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006200:	4a38      	ldr	r2, [pc, #224]	@ (80062e4 <HAL_ETH_MspInit+0x16c>)
 8006202:	f043 0301 	orr.w	r3, r3, #1
 8006206:	6313      	str	r3, [r2, #48]	@ 0x30
 8006208:	4b36      	ldr	r3, [pc, #216]	@ (80062e4 <HAL_ETH_MspInit+0x16c>)
 800620a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	613b      	str	r3, [r7, #16]
 8006212:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006214:	4b33      	ldr	r3, [pc, #204]	@ (80062e4 <HAL_ETH_MspInit+0x16c>)
 8006216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006218:	4a32      	ldr	r2, [pc, #200]	@ (80062e4 <HAL_ETH_MspInit+0x16c>)
 800621a:	f043 0302 	orr.w	r3, r3, #2
 800621e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006220:	4b30      	ldr	r3, [pc, #192]	@ (80062e4 <HAL_ETH_MspInit+0x16c>)
 8006222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	60fb      	str	r3, [r7, #12]
 800622a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800622c:	4b2d      	ldr	r3, [pc, #180]	@ (80062e4 <HAL_ETH_MspInit+0x16c>)
 800622e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006230:	4a2c      	ldr	r2, [pc, #176]	@ (80062e4 <HAL_ETH_MspInit+0x16c>)
 8006232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006236:	6313      	str	r3, [r2, #48]	@ 0x30
 8006238:	4b2a      	ldr	r3, [pc, #168]	@ (80062e4 <HAL_ETH_MspInit+0x16c>)
 800623a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006240:	60bb      	str	r3, [r7, #8]
 8006242:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006244:	2332      	movs	r3, #50	@ 0x32
 8006246:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006248:	2302      	movs	r3, #2
 800624a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800624c:	2300      	movs	r3, #0
 800624e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006250:	2303      	movs	r3, #3
 8006252:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006254:	230b      	movs	r3, #11
 8006256:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006258:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800625c:	4619      	mov	r1, r3
 800625e:	4822      	ldr	r0, [pc, #136]	@ (80062e8 <HAL_ETH_MspInit+0x170>)
 8006260:	f7fc fbbe 	bl	80029e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006264:	2386      	movs	r3, #134	@ 0x86
 8006266:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006268:	2302      	movs	r3, #2
 800626a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800626c:	2300      	movs	r3, #0
 800626e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006270:	2303      	movs	r3, #3
 8006272:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006274:	230b      	movs	r3, #11
 8006276:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006278:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800627c:	4619      	mov	r1, r3
 800627e:	481b      	ldr	r0, [pc, #108]	@ (80062ec <HAL_ETH_MspInit+0x174>)
 8006280:	f7fc fbae 	bl	80029e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006284:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006288:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800628a:	2302      	movs	r3, #2
 800628c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800628e:	2300      	movs	r3, #0
 8006290:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006292:	2303      	movs	r3, #3
 8006294:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006296:	230b      	movs	r3, #11
 8006298:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800629a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800629e:	4619      	mov	r1, r3
 80062a0:	4813      	ldr	r0, [pc, #76]	@ (80062f0 <HAL_ETH_MspInit+0x178>)
 80062a2:	f7fc fb9d 	bl	80029e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80062a6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80062aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062ac:	2302      	movs	r3, #2
 80062ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062b0:	2300      	movs	r3, #0
 80062b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062b4:	2303      	movs	r3, #3
 80062b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80062b8:	230b      	movs	r3, #11
 80062ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80062bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062c0:	4619      	mov	r1, r3
 80062c2:	480c      	ldr	r0, [pc, #48]	@ (80062f4 <HAL_ETH_MspInit+0x17c>)
 80062c4:	f7fc fb8c 	bl	80029e0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80062c8:	2200      	movs	r2, #0
 80062ca:	2100      	movs	r1, #0
 80062cc:	203d      	movs	r0, #61	@ 0x3d
 80062ce:	f7fb f96a 	bl	80015a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80062d2:	203d      	movs	r0, #61	@ 0x3d
 80062d4:	f7fb f983 	bl	80015de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80062d8:	bf00      	nop
 80062da:	3738      	adds	r7, #56	@ 0x38
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	40028000 	.word	0x40028000
 80062e4:	40023800 	.word	0x40023800
 80062e8:	40020800 	.word	0x40020800
 80062ec:	40020000 	.word	0x40020000
 80062f0:	40020400 	.word	0x40020400
 80062f4:	40021800 	.word	0x40021800

080062f8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80062fc:	4802      	ldr	r0, [pc, #8]	@ (8006308 <ETH_PHY_IO_Init+0x10>)
 80062fe:	f7fb ff15 	bl	800212c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	bd80      	pop	{r7, pc}
 8006308:	20005224 	.word	0x20005224

0800630c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
  return 0;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	68f9      	ldr	r1, [r7, #12]
 800632e:	4807      	ldr	r0, [pc, #28]	@ (800634c <ETH_PHY_IO_ReadReg+0x30>)
 8006330:	f7fb fd64 	bl	8001dfc <HAL_ETH_ReadPHYRegister>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d002      	beq.n	8006340 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800633a:	f04f 33ff 	mov.w	r3, #4294967295
 800633e:	e000      	b.n	8006342 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	20005224 	.word	0x20005224

08006350 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	68f9      	ldr	r1, [r7, #12]
 8006362:	4807      	ldr	r0, [pc, #28]	@ (8006380 <ETH_PHY_IO_WriteReg+0x30>)
 8006364:	f7fb fd95 	bl	8001e92 <HAL_ETH_WritePHYRegister>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800636e:	f04f 33ff 	mov.w	r3, #4294967295
 8006372:	e000      	b.n	8006376 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	20005224 	.word	0x20005224

08006384 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006388:	f7fb f802 	bl	8001390 <HAL_GetTick>
 800638c:	4603      	mov	r3, r0
}
 800638e:	4618      	mov	r0, r3
 8006390:	bd80      	pop	{r7, pc}
	...

08006394 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b0a0      	sub	sp, #128	@ 0x80
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800639c:	f107 030c 	add.w	r3, r7, #12
 80063a0:	2264      	movs	r2, #100	@ 0x64
 80063a2:	2100      	movs	r1, #0
 80063a4:	4618      	mov	r0, r3
 80063a6:	f005 f950 	bl	800b64a <memset>
  int32_t PHYLinkState = 0;
 80063aa:	2300      	movs	r3, #0
 80063ac:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80063ae:	2300      	movs	r3, #0
 80063b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80063b2:	2300      	movs	r3, #0
 80063b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063b6:	2300      	movs	r3, #0
 80063b8:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80063ba:	483a      	ldr	r0, [pc, #232]	@ (80064a4 <ethernet_link_check_state+0x110>)
 80063bc:	f7fa ff0f 	bl	80011de <LAN8742_GetLinkState>
 80063c0:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80063c8:	089b      	lsrs	r3, r3, #2
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00c      	beq.n	80063ee <ethernet_link_check_state+0x5a>
 80063d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	dc09      	bgt.n	80063ee <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80063da:	4833      	ldr	r0, [pc, #204]	@ (80064a8 <ethernet_link_check_state+0x114>)
 80063dc:	f7fb f9f5 	bl	80017ca <HAL_ETH_Stop>
    netif_set_down(netif);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fffd 	bl	80073e0 <netif_set_down>
    netif_set_link_down(netif);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f001 f860 	bl	80074ac <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80063ec:	e055      	b.n	800649a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80063f4:	f003 0304 	and.w	r3, r3, #4
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d14e      	bne.n	800649a <ethernet_link_check_state+0x106>
 80063fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80063fe:	2b01      	cmp	r3, #1
 8006400:	dd4b      	ble.n	800649a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8006402:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006404:	3b02      	subs	r3, #2
 8006406:	2b03      	cmp	r3, #3
 8006408:	d82a      	bhi.n	8006460 <ethernet_link_check_state+0xcc>
 800640a:	a201      	add	r2, pc, #4	@ (adr r2, 8006410 <ethernet_link_check_state+0x7c>)
 800640c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006410:	08006421 	.word	0x08006421
 8006414:	08006433 	.word	0x08006433
 8006418:	08006443 	.word	0x08006443
 800641c:	08006453 	.word	0x08006453
      duplex = ETH_FULLDUPLEX_MODE;
 8006420:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006424:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8006426:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800642a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800642c:	2301      	movs	r3, #1
 800642e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006430:	e017      	b.n	8006462 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8006432:	2300      	movs	r3, #0
 8006434:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8006436:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800643a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800643c:	2301      	movs	r3, #1
 800643e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006440:	e00f      	b.n	8006462 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8006442:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006446:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006448:	2300      	movs	r3, #0
 800644a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800644c:	2301      	movs	r3, #1
 800644e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006450:	e007      	b.n	8006462 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8006452:	2300      	movs	r3, #0
 8006454:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006456:	2300      	movs	r3, #0
 8006458:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800645a:	2301      	movs	r3, #1
 800645c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800645e:	e000      	b.n	8006462 <ethernet_link_check_state+0xce>
      break;
 8006460:	bf00      	nop
    if(linkchanged)
 8006462:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006464:	2b00      	cmp	r3, #0
 8006466:	d018      	beq.n	800649a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006468:	f107 030c 	add.w	r3, r7, #12
 800646c:	4619      	mov	r1, r3
 800646e:	480e      	ldr	r0, [pc, #56]	@ (80064a8 <ethernet_link_check_state+0x114>)
 8006470:	f7fb fd58 	bl	8001f24 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006474:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006476:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8006478:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800647a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800647c:	f107 030c 	add.w	r3, r7, #12
 8006480:	4619      	mov	r1, r3
 8006482:	4809      	ldr	r0, [pc, #36]	@ (80064a8 <ethernet_link_check_state+0x114>)
 8006484:	f7fb fe38 	bl	80020f8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8006488:	4807      	ldr	r0, [pc, #28]	@ (80064a8 <ethernet_link_check_state+0x114>)
 800648a:	f7fb f93f 	bl	800170c <HAL_ETH_Start>
      netif_set_up(netif);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 ff3a 	bl	8007308 <netif_set_up>
      netif_set_link_up(netif);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 ffd5 	bl	8007444 <netif_set_link_up>
}
 800649a:	bf00      	nop
 800649c:	3780      	adds	r7, #128	@ 0x80
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	2000530c 	.word	0x2000530c
 80064a8:	20005224 	.word	0x20005224

080064ac <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af02      	add	r7, sp, #8
 80064b2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80064b4:	4812      	ldr	r0, [pc, #72]	@ (8006500 <HAL_ETH_RxAllocateCallback+0x54>)
 80064b6:	f000 fca5 	bl	8006e04 <memp_malloc_pool>
 80064ba:	60f8      	str	r0, [r7, #12]
  if (p)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d014      	beq.n	80064ec <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f103 0220 	add.w	r2, r3, #32
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	4a0d      	ldr	r2, [pc, #52]	@ (8006504 <HAL_ETH_RxAllocateCallback+0x58>)
 80064d0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80064da:	9201      	str	r2, [sp, #4]
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2241      	movs	r2, #65	@ 0x41
 80064e2:	2100      	movs	r1, #0
 80064e4:	2000      	movs	r0, #0
 80064e6:	f001 f9a9 	bl	800783c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80064ea:	e005      	b.n	80064f8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80064ec:	4b06      	ldr	r3, [pc, #24]	@ (8006508 <HAL_ETH_RxAllocateCallback+0x5c>)
 80064ee:	2201      	movs	r2, #1
 80064f0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	601a      	str	r2, [r3, #0]
}
 80064f8:	bf00      	nop
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	0800d954 	.word	0x0800d954
 8006504:	08006135 	.word	0x08006135
 8006508:	20005220 	.word	0x20005220

0800650c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b088      	sub	sp, #32
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
 8006518:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8006522:	2300      	movs	r3, #0
 8006524:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	3b20      	subs	r3, #32
 800652a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	2200      	movs	r2, #0
 8006530:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	2200      	movs	r2, #0
 8006536:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	887a      	ldrh	r2, [r7, #2]
 800653c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d103      	bne.n	800654e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	69fa      	ldr	r2, [r7, #28]
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	e003      	b.n	8006556 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	69fa      	ldr	r2, [r7, #28]
 8006554:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	69fa      	ldr	r2, [r7, #28]
 800655a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	61fb      	str	r3, [r7, #28]
 8006562:	e009      	b.n	8006578 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	891a      	ldrh	r2, [r3, #8]
 8006568:	887b      	ldrh	r3, [r7, #2]
 800656a:	4413      	add	r3, r2
 800656c:	b29a      	uxth	r2, r3
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	61fb      	str	r3, [r7, #28]
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1f2      	bne.n	8006564 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800657e:	887b      	ldrh	r3, [r7, #2]
 8006580:	4619      	mov	r1, r3
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7ff fc28 	bl	8005dd8 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006588:	bf00      	nop
 800658a:	3720      	adds	r7, #32
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	4603      	mov	r3, r0
 8006598:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800659a:	88fb      	ldrh	r3, [r7, #6]
 800659c:	021b      	lsls	r3, r3, #8
 800659e:	b21a      	sxth	r2, r3
 80065a0:	88fb      	ldrh	r3, [r7, #6]
 80065a2:	0a1b      	lsrs	r3, r3, #8
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	b21b      	sxth	r3, r3
 80065a8:	4313      	orrs	r3, r2
 80065aa:	b21b      	sxth	r3, r3
 80065ac:	b29b      	uxth	r3, r3
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b082      	sub	sp, #8
 80065be:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80065c0:	2300      	movs	r3, #0
 80065c2:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80065c4:	f000 f8d2 	bl	800676c <mem_init>
  memp_init();
 80065c8:	f000 fbd8 	bl	8006d7c <memp_init>
  pbuf_init();
  netif_init();
 80065cc:	f000 fcd6 	bl	8006f7c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80065d0:	f001 fece 	bl	8008370 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80065d4:	f001 fe4a 	bl	800826c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80065d8:	bf00      	nop
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	4603      	mov	r3, r0
 80065e8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80065ea:	4b05      	ldr	r3, [pc, #20]	@ (8006600 <ptr_to_mem+0x20>)
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	88fb      	ldrh	r3, [r7, #6]
 80065f0:	4413      	add	r3, r2
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	20005998 	.word	0x20005998

08006604 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800660c:	4b05      	ldr	r3, [pc, #20]	@ (8006624 <mem_to_ptr+0x20>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	b29b      	uxth	r3, r3
}
 8006616:	4618      	mov	r0, r3
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	20005998 	.word	0x20005998

08006628 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006628:	b590      	push	{r4, r7, lr}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006630:	4b45      	ldr	r3, [pc, #276]	@ (8006748 <plug_holes+0x120>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	429a      	cmp	r2, r3
 8006638:	d206      	bcs.n	8006648 <plug_holes+0x20>
 800663a:	4b44      	ldr	r3, [pc, #272]	@ (800674c <plug_holes+0x124>)
 800663c:	f240 12df 	movw	r2, #479	@ 0x1df
 8006640:	4943      	ldr	r1, [pc, #268]	@ (8006750 <plug_holes+0x128>)
 8006642:	4844      	ldr	r0, [pc, #272]	@ (8006754 <plug_holes+0x12c>)
 8006644:	f004 ff9c 	bl	800b580 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006648:	4b43      	ldr	r3, [pc, #268]	@ (8006758 <plug_holes+0x130>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	429a      	cmp	r2, r3
 8006650:	d306      	bcc.n	8006660 <plug_holes+0x38>
 8006652:	4b3e      	ldr	r3, [pc, #248]	@ (800674c <plug_holes+0x124>)
 8006654:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8006658:	4940      	ldr	r1, [pc, #256]	@ (800675c <plug_holes+0x134>)
 800665a:	483e      	ldr	r0, [pc, #248]	@ (8006754 <plug_holes+0x12c>)
 800665c:	f004 ff90 	bl	800b580 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	791b      	ldrb	r3, [r3, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d006      	beq.n	8006676 <plug_holes+0x4e>
 8006668:	4b38      	ldr	r3, [pc, #224]	@ (800674c <plug_holes+0x124>)
 800666a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800666e:	493c      	ldr	r1, [pc, #240]	@ (8006760 <plug_holes+0x138>)
 8006670:	4838      	ldr	r0, [pc, #224]	@ (8006754 <plug_holes+0x12c>)
 8006672:	f004 ff85 	bl	800b580 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800667e:	d906      	bls.n	800668e <plug_holes+0x66>
 8006680:	4b32      	ldr	r3, [pc, #200]	@ (800674c <plug_holes+0x124>)
 8006682:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8006686:	4937      	ldr	r1, [pc, #220]	@ (8006764 <plug_holes+0x13c>)
 8006688:	4832      	ldr	r0, [pc, #200]	@ (8006754 <plug_holes+0x12c>)
 800668a:	f004 ff79 	bl	800b580 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	881b      	ldrh	r3, [r3, #0]
 8006692:	4618      	mov	r0, r3
 8006694:	f7ff ffa4 	bl	80065e0 <ptr_to_mem>
 8006698:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d024      	beq.n	80066ec <plug_holes+0xc4>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	791b      	ldrb	r3, [r3, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d120      	bne.n	80066ec <plug_holes+0xc4>
 80066aa:	4b2b      	ldr	r3, [pc, #172]	@ (8006758 <plug_holes+0x130>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d01b      	beq.n	80066ec <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80066b4:	4b2c      	ldr	r3, [pc, #176]	@ (8006768 <plug_holes+0x140>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d102      	bne.n	80066c4 <plug_holes+0x9c>
      lfree = mem;
 80066be:	4a2a      	ldr	r2, [pc, #168]	@ (8006768 <plug_holes+0x140>)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	881a      	ldrh	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	881b      	ldrh	r3, [r3, #0]
 80066d0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80066d4:	d00a      	beq.n	80066ec <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	4618      	mov	r0, r3
 80066dc:	f7ff ff80 	bl	80065e0 <ptr_to_mem>
 80066e0:	4604      	mov	r4, r0
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7ff ff8e 	bl	8006604 <mem_to_ptr>
 80066e8:	4603      	mov	r3, r0
 80066ea:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	885b      	ldrh	r3, [r3, #2]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7ff ff75 	bl	80065e0 <ptr_to_mem>
 80066f6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d01f      	beq.n	8006740 <plug_holes+0x118>
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	791b      	ldrb	r3, [r3, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d11b      	bne.n	8006740 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006708:	4b17      	ldr	r3, [pc, #92]	@ (8006768 <plug_holes+0x140>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	429a      	cmp	r2, r3
 8006710:	d102      	bne.n	8006718 <plug_holes+0xf0>
      lfree = pmem;
 8006712:	4a15      	ldr	r2, [pc, #84]	@ (8006768 <plug_holes+0x140>)
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	881a      	ldrh	r2, [r3, #0]
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	881b      	ldrh	r3, [r3, #0]
 8006724:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006728:	d00a      	beq.n	8006740 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	4618      	mov	r0, r3
 8006730:	f7ff ff56 	bl	80065e0 <ptr_to_mem>
 8006734:	4604      	mov	r4, r0
 8006736:	68b8      	ldr	r0, [r7, #8]
 8006738:	f7ff ff64 	bl	8006604 <mem_to_ptr>
 800673c:	4603      	mov	r3, r0
 800673e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006740:	bf00      	nop
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	bd90      	pop	{r4, r7, pc}
 8006748:	20005998 	.word	0x20005998
 800674c:	0800c42c 	.word	0x0800c42c
 8006750:	0800c45c 	.word	0x0800c45c
 8006754:	0800c474 	.word	0x0800c474
 8006758:	2000599c 	.word	0x2000599c
 800675c:	0800c49c 	.word	0x0800c49c
 8006760:	0800c4b8 	.word	0x0800c4b8
 8006764:	0800c4d4 	.word	0x0800c4d4
 8006768:	200059a0 	.word	0x200059a0

0800676c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006772:	4b18      	ldr	r3, [pc, #96]	@ (80067d4 <mem_init+0x68>)
 8006774:	3303      	adds	r3, #3
 8006776:	f023 0303 	bic.w	r3, r3, #3
 800677a:	461a      	mov	r2, r3
 800677c:	4b16      	ldr	r3, [pc, #88]	@ (80067d8 <mem_init+0x6c>)
 800677e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006780:	4b15      	ldr	r3, [pc, #84]	@ (80067d8 <mem_init+0x6c>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800678c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800679a:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800679e:	f7ff ff1f 	bl	80065e0 <ptr_to_mem>
 80067a2:	4603      	mov	r3, r0
 80067a4:	4a0d      	ldr	r2, [pc, #52]	@ (80067dc <mem_init+0x70>)
 80067a6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80067a8:	4b0c      	ldr	r3, [pc, #48]	@ (80067dc <mem_init+0x70>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2201      	movs	r2, #1
 80067ae:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80067b0:	4b0a      	ldr	r3, [pc, #40]	@ (80067dc <mem_init+0x70>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80067b8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80067ba:	4b08      	ldr	r3, [pc, #32]	@ (80067dc <mem_init+0x70>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80067c2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80067c4:	4b04      	ldr	r3, [pc, #16]	@ (80067d8 <mem_init+0x6c>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a05      	ldr	r2, [pc, #20]	@ (80067e0 <mem_init+0x74>)
 80067ca:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80067cc:	bf00      	nop
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	20005344 	.word	0x20005344
 80067d8:	20005998 	.word	0x20005998
 80067dc:	2000599c 	.word	0x2000599c
 80067e0:	200059a0 	.word	0x200059a0

080067e4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f7ff ff09 	bl	8006604 <mem_to_ptr>
 80067f2:	4603      	mov	r3, r0
 80067f4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7ff fef0 	bl	80065e0 <ptr_to_mem>
 8006800:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	885b      	ldrh	r3, [r3, #2]
 8006806:	4618      	mov	r0, r3
 8006808:	f7ff feea 	bl	80065e0 <ptr_to_mem>
 800680c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006816:	d818      	bhi.n	800684a <mem_link_valid+0x66>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	885b      	ldrh	r3, [r3, #2]
 800681c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006820:	d813      	bhi.n	800684a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006826:	8afa      	ldrh	r2, [r7, #22]
 8006828:	429a      	cmp	r2, r3
 800682a:	d004      	beq.n	8006836 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	8afa      	ldrh	r2, [r7, #22]
 8006832:	429a      	cmp	r2, r3
 8006834:	d109      	bne.n	800684a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006836:	4b08      	ldr	r3, [pc, #32]	@ (8006858 <mem_link_valid+0x74>)
 8006838:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	429a      	cmp	r2, r3
 800683e:	d006      	beq.n	800684e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	885b      	ldrh	r3, [r3, #2]
 8006844:	8afa      	ldrh	r2, [r7, #22]
 8006846:	429a      	cmp	r2, r3
 8006848:	d001      	beq.n	800684e <mem_link_valid+0x6a>
    return 0;
 800684a:	2300      	movs	r3, #0
 800684c:	e000      	b.n	8006850 <mem_link_valid+0x6c>
  }
  return 1;
 800684e:	2301      	movs	r3, #1
}
 8006850:	4618      	mov	r0, r3
 8006852:	3718      	adds	r7, #24
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	2000599c 	.word	0x2000599c

0800685c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d04c      	beq.n	8006904 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f003 0303 	and.w	r3, r3, #3
 8006870:	2b00      	cmp	r3, #0
 8006872:	d007      	beq.n	8006884 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006874:	4b25      	ldr	r3, [pc, #148]	@ (800690c <mem_free+0xb0>)
 8006876:	f240 2273 	movw	r2, #627	@ 0x273
 800687a:	4925      	ldr	r1, [pc, #148]	@ (8006910 <mem_free+0xb4>)
 800687c:	4825      	ldr	r0, [pc, #148]	@ (8006914 <mem_free+0xb8>)
 800687e:	f004 fe7f 	bl	800b580 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006882:	e040      	b.n	8006906 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	3b08      	subs	r3, #8
 8006888:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800688a:	4b23      	ldr	r3, [pc, #140]	@ (8006918 <mem_free+0xbc>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	429a      	cmp	r2, r3
 8006892:	d306      	bcc.n	80068a2 <mem_free+0x46>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f103 020c 	add.w	r2, r3, #12
 800689a:	4b20      	ldr	r3, [pc, #128]	@ (800691c <mem_free+0xc0>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d907      	bls.n	80068b2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80068a2:	4b1a      	ldr	r3, [pc, #104]	@ (800690c <mem_free+0xb0>)
 80068a4:	f240 227f 	movw	r2, #639	@ 0x27f
 80068a8:	491d      	ldr	r1, [pc, #116]	@ (8006920 <mem_free+0xc4>)
 80068aa:	481a      	ldr	r0, [pc, #104]	@ (8006914 <mem_free+0xb8>)
 80068ac:	f004 fe68 	bl	800b580 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80068b0:	e029      	b.n	8006906 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	791b      	ldrb	r3, [r3, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d107      	bne.n	80068ca <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80068ba:	4b14      	ldr	r3, [pc, #80]	@ (800690c <mem_free+0xb0>)
 80068bc:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80068c0:	4918      	ldr	r1, [pc, #96]	@ (8006924 <mem_free+0xc8>)
 80068c2:	4814      	ldr	r0, [pc, #80]	@ (8006914 <mem_free+0xb8>)
 80068c4:	f004 fe5c 	bl	800b580 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80068c8:	e01d      	b.n	8006906 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f7ff ff8a 	bl	80067e4 <mem_link_valid>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d107      	bne.n	80068e6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80068d6:	4b0d      	ldr	r3, [pc, #52]	@ (800690c <mem_free+0xb0>)
 80068d8:	f240 2295 	movw	r2, #661	@ 0x295
 80068dc:	4912      	ldr	r1, [pc, #72]	@ (8006928 <mem_free+0xcc>)
 80068de:	480d      	ldr	r0, [pc, #52]	@ (8006914 <mem_free+0xb8>)
 80068e0:	f004 fe4e 	bl	800b580 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80068e4:	e00f      	b.n	8006906 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80068ec:	4b0f      	ldr	r3, [pc, #60]	@ (800692c <mem_free+0xd0>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d202      	bcs.n	80068fc <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80068f6:	4a0d      	ldr	r2, [pc, #52]	@ (800692c <mem_free+0xd0>)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f7ff fe93 	bl	8006628 <plug_holes>
 8006902:	e000      	b.n	8006906 <mem_free+0xaa>
    return;
 8006904:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	0800c42c 	.word	0x0800c42c
 8006910:	0800c500 	.word	0x0800c500
 8006914:	0800c474 	.word	0x0800c474
 8006918:	20005998 	.word	0x20005998
 800691c:	2000599c 	.word	0x2000599c
 8006920:	0800c524 	.word	0x0800c524
 8006924:	0800c540 	.word	0x0800c540
 8006928:	0800c568 	.word	0x0800c568
 800692c:	200059a0 	.word	0x200059a0

08006930 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	460b      	mov	r3, r1
 800693a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800693c:	887b      	ldrh	r3, [r7, #2]
 800693e:	3303      	adds	r3, #3
 8006940:	b29b      	uxth	r3, r3
 8006942:	f023 0303 	bic.w	r3, r3, #3
 8006946:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8006948:	8bfb      	ldrh	r3, [r7, #30]
 800694a:	2b0b      	cmp	r3, #11
 800694c:	d801      	bhi.n	8006952 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800694e:	230c      	movs	r3, #12
 8006950:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006952:	8bfb      	ldrh	r3, [r7, #30]
 8006954:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006958:	d803      	bhi.n	8006962 <mem_trim+0x32>
 800695a:	8bfa      	ldrh	r2, [r7, #30]
 800695c:	887b      	ldrh	r3, [r7, #2]
 800695e:	429a      	cmp	r2, r3
 8006960:	d201      	bcs.n	8006966 <mem_trim+0x36>
    return NULL;
 8006962:	2300      	movs	r3, #0
 8006964:	e0cc      	b.n	8006b00 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006966:	4b68      	ldr	r3, [pc, #416]	@ (8006b08 <mem_trim+0x1d8>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	429a      	cmp	r2, r3
 800696e:	d304      	bcc.n	800697a <mem_trim+0x4a>
 8006970:	4b66      	ldr	r3, [pc, #408]	@ (8006b0c <mem_trim+0x1dc>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	429a      	cmp	r2, r3
 8006978:	d306      	bcc.n	8006988 <mem_trim+0x58>
 800697a:	4b65      	ldr	r3, [pc, #404]	@ (8006b10 <mem_trim+0x1e0>)
 800697c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8006980:	4964      	ldr	r1, [pc, #400]	@ (8006b14 <mem_trim+0x1e4>)
 8006982:	4865      	ldr	r0, [pc, #404]	@ (8006b18 <mem_trim+0x1e8>)
 8006984:	f004 fdfc 	bl	800b580 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006988:	4b5f      	ldr	r3, [pc, #380]	@ (8006b08 <mem_trim+0x1d8>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	429a      	cmp	r2, r3
 8006990:	d304      	bcc.n	800699c <mem_trim+0x6c>
 8006992:	4b5e      	ldr	r3, [pc, #376]	@ (8006b0c <mem_trim+0x1dc>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	429a      	cmp	r2, r3
 800699a:	d301      	bcc.n	80069a0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	e0af      	b.n	8006b00 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	3b08      	subs	r3, #8
 80069a4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80069a6:	69b8      	ldr	r0, [r7, #24]
 80069a8:	f7ff fe2c 	bl	8006604 <mem_to_ptr>
 80069ac:	4603      	mov	r3, r0
 80069ae:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	881a      	ldrh	r2, [r3, #0]
 80069b4:	8afb      	ldrh	r3, [r7, #22]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	3b08      	subs	r3, #8
 80069bc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80069be:	8bfa      	ldrh	r2, [r7, #30]
 80069c0:	8abb      	ldrh	r3, [r7, #20]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d906      	bls.n	80069d4 <mem_trim+0xa4>
 80069c6:	4b52      	ldr	r3, [pc, #328]	@ (8006b10 <mem_trim+0x1e0>)
 80069c8:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80069cc:	4953      	ldr	r1, [pc, #332]	@ (8006b1c <mem_trim+0x1ec>)
 80069ce:	4852      	ldr	r0, [pc, #328]	@ (8006b18 <mem_trim+0x1e8>)
 80069d0:	f004 fdd6 	bl	800b580 <iprintf>
  if (newsize > size) {
 80069d4:	8bfa      	ldrh	r2, [r7, #30]
 80069d6:	8abb      	ldrh	r3, [r7, #20]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d901      	bls.n	80069e0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80069dc:	2300      	movs	r3, #0
 80069de:	e08f      	b.n	8006b00 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80069e0:	8bfa      	ldrh	r2, [r7, #30]
 80069e2:	8abb      	ldrh	r3, [r7, #20]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d101      	bne.n	80069ec <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	e089      	b.n	8006b00 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7ff fdf5 	bl	80065e0 <ptr_to_mem>
 80069f6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	791b      	ldrb	r3, [r3, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d13f      	bne.n	8006a80 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006a08:	d106      	bne.n	8006a18 <mem_trim+0xe8>
 8006a0a:	4b41      	ldr	r3, [pc, #260]	@ (8006b10 <mem_trim+0x1e0>)
 8006a0c:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8006a10:	4943      	ldr	r1, [pc, #268]	@ (8006b20 <mem_trim+0x1f0>)
 8006a12:	4841      	ldr	r0, [pc, #260]	@ (8006b18 <mem_trim+0x1e8>)
 8006a14:	f004 fdb4 	bl	800b580 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006a1e:	8afa      	ldrh	r2, [r7, #22]
 8006a20:	8bfb      	ldrh	r3, [r7, #30]
 8006a22:	4413      	add	r3, r2
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	3308      	adds	r3, #8
 8006a28:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8006a2a:	4b3e      	ldr	r3, [pc, #248]	@ (8006b24 <mem_trim+0x1f4>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d106      	bne.n	8006a42 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8006a34:	89fb      	ldrh	r3, [r7, #14]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7ff fdd2 	bl	80065e0 <ptr_to_mem>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	4a39      	ldr	r2, [pc, #228]	@ (8006b24 <mem_trim+0x1f4>)
 8006a40:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8006a42:	89fb      	ldrh	r3, [r7, #14]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7ff fdcb 	bl	80065e0 <ptr_to_mem>
 8006a4a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	89ba      	ldrh	r2, [r7, #12]
 8006a56:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	8afa      	ldrh	r2, [r7, #22]
 8006a5c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	89fa      	ldrh	r2, [r7, #14]
 8006a62:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	881b      	ldrh	r3, [r3, #0]
 8006a68:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006a6c:	d047      	beq.n	8006afe <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7ff fdb4 	bl	80065e0 <ptr_to_mem>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	89fb      	ldrh	r3, [r7, #14]
 8006a7c:	8053      	strh	r3, [r2, #2]
 8006a7e:	e03e      	b.n	8006afe <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006a80:	8bfb      	ldrh	r3, [r7, #30]
 8006a82:	f103 0214 	add.w	r2, r3, #20
 8006a86:	8abb      	ldrh	r3, [r7, #20]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d838      	bhi.n	8006afe <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006a8c:	8afa      	ldrh	r2, [r7, #22]
 8006a8e:	8bfb      	ldrh	r3, [r7, #30]
 8006a90:	4413      	add	r3, r2
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	3308      	adds	r3, #8
 8006a96:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006aa0:	d106      	bne.n	8006ab0 <mem_trim+0x180>
 8006aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8006b10 <mem_trim+0x1e0>)
 8006aa4:	f240 3216 	movw	r2, #790	@ 0x316
 8006aa8:	491d      	ldr	r1, [pc, #116]	@ (8006b20 <mem_trim+0x1f0>)
 8006aaa:	481b      	ldr	r0, [pc, #108]	@ (8006b18 <mem_trim+0x1e8>)
 8006aac:	f004 fd68 	bl	800b580 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006ab0:	89fb      	ldrh	r3, [r7, #14]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7ff fd94 	bl	80065e0 <ptr_to_mem>
 8006ab8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8006aba:	4b1a      	ldr	r3, [pc, #104]	@ (8006b24 <mem_trim+0x1f4>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d202      	bcs.n	8006aca <mem_trim+0x19a>
      lfree = mem2;
 8006ac4:	4a17      	ldr	r2, [pc, #92]	@ (8006b24 <mem_trim+0x1f4>)
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	2200      	movs	r2, #0
 8006ace:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	881a      	ldrh	r2, [r3, #0]
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	8afa      	ldrh	r2, [r7, #22]
 8006adc:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	89fa      	ldrh	r2, [r7, #14]
 8006ae2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006aec:	d007      	beq.n	8006afe <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7ff fd74 	bl	80065e0 <ptr_to_mem>
 8006af8:	4602      	mov	r2, r0
 8006afa:	89fb      	ldrh	r3, [r7, #14]
 8006afc:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006afe:	687b      	ldr	r3, [r7, #4]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3720      	adds	r7, #32
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	20005998 	.word	0x20005998
 8006b0c:	2000599c 	.word	0x2000599c
 8006b10:	0800c42c 	.word	0x0800c42c
 8006b14:	0800c59c 	.word	0x0800c59c
 8006b18:	0800c474 	.word	0x0800c474
 8006b1c:	0800c5b4 	.word	0x0800c5b4
 8006b20:	0800c5d4 	.word	0x0800c5d4
 8006b24:	200059a0 	.word	0x200059a0

08006b28 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	4603      	mov	r3, r0
 8006b30:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006b32:	88fb      	ldrh	r3, [r7, #6]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <mem_malloc+0x14>
    return NULL;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	e0d9      	b.n	8006cf0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006b3c:	88fb      	ldrh	r3, [r7, #6]
 8006b3e:	3303      	adds	r3, #3
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	f023 0303 	bic.w	r3, r3, #3
 8006b46:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006b48:	8bbb      	ldrh	r3, [r7, #28]
 8006b4a:	2b0b      	cmp	r3, #11
 8006b4c:	d801      	bhi.n	8006b52 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006b4e:	230c      	movs	r3, #12
 8006b50:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006b52:	8bbb      	ldrh	r3, [r7, #28]
 8006b54:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006b58:	d803      	bhi.n	8006b62 <mem_malloc+0x3a>
 8006b5a:	8bba      	ldrh	r2, [r7, #28]
 8006b5c:	88fb      	ldrh	r3, [r7, #6]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d201      	bcs.n	8006b66 <mem_malloc+0x3e>
    return NULL;
 8006b62:	2300      	movs	r3, #0
 8006b64:	e0c4      	b.n	8006cf0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006b66:	4b64      	ldr	r3, [pc, #400]	@ (8006cf8 <mem_malloc+0x1d0>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7ff fd4a 	bl	8006604 <mem_to_ptr>
 8006b70:	4603      	mov	r3, r0
 8006b72:	83fb      	strh	r3, [r7, #30]
 8006b74:	e0b4      	b.n	8006ce0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006b76:	8bfb      	ldrh	r3, [r7, #30]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7ff fd31 	bl	80065e0 <ptr_to_mem>
 8006b7e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	791b      	ldrb	r3, [r3, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f040 80a4 	bne.w	8006cd2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	8bfb      	ldrh	r3, [r7, #30]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	f1a3 0208 	sub.w	r2, r3, #8
 8006b98:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	f0c0 8099 	bcc.w	8006cd2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	881b      	ldrh	r3, [r3, #0]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	8bfb      	ldrh	r3, [r7, #30]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	f1a3 0208 	sub.w	r2, r3, #8
 8006bae:	8bbb      	ldrh	r3, [r7, #28]
 8006bb0:	3314      	adds	r3, #20
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d333      	bcc.n	8006c1e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006bb6:	8bfa      	ldrh	r2, [r7, #30]
 8006bb8:	8bbb      	ldrh	r3, [r7, #28]
 8006bba:	4413      	add	r3, r2
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	3308      	adds	r3, #8
 8006bc0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006bc2:	8a7b      	ldrh	r3, [r7, #18]
 8006bc4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006bc8:	d106      	bne.n	8006bd8 <mem_malloc+0xb0>
 8006bca:	4b4c      	ldr	r3, [pc, #304]	@ (8006cfc <mem_malloc+0x1d4>)
 8006bcc:	f240 3287 	movw	r2, #903	@ 0x387
 8006bd0:	494b      	ldr	r1, [pc, #300]	@ (8006d00 <mem_malloc+0x1d8>)
 8006bd2:	484c      	ldr	r0, [pc, #304]	@ (8006d04 <mem_malloc+0x1dc>)
 8006bd4:	f004 fcd4 	bl	800b580 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006bd8:	8a7b      	ldrh	r3, [r7, #18]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7ff fd00 	bl	80065e0 <ptr_to_mem>
 8006be0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	881a      	ldrh	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8bfa      	ldrh	r2, [r7, #30]
 8006bf4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	8a7a      	ldrh	r2, [r7, #18]
 8006bfa:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006c0a:	d00b      	beq.n	8006c24 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	881b      	ldrh	r3, [r3, #0]
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7ff fce5 	bl	80065e0 <ptr_to_mem>
 8006c16:	4602      	mov	r2, r0
 8006c18:	8a7b      	ldrh	r3, [r7, #18]
 8006c1a:	8053      	strh	r3, [r2, #2]
 8006c1c:	e002      	b.n	8006c24 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	2201      	movs	r2, #1
 8006c22:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006c24:	4b34      	ldr	r3, [pc, #208]	@ (8006cf8 <mem_malloc+0x1d0>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d127      	bne.n	8006c7e <mem_malloc+0x156>
          struct mem *cur = lfree;
 8006c2e:	4b32      	ldr	r3, [pc, #200]	@ (8006cf8 <mem_malloc+0x1d0>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006c34:	e005      	b.n	8006c42 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7ff fcd0 	bl	80065e0 <ptr_to_mem>
 8006c40:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	791b      	ldrb	r3, [r3, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d004      	beq.n	8006c54 <mem_malloc+0x12c>
 8006c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8006d08 <mem_malloc+0x1e0>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	69ba      	ldr	r2, [r7, #24]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d1f0      	bne.n	8006c36 <mem_malloc+0x10e>
          }
          lfree = cur;
 8006c54:	4a28      	ldr	r2, [pc, #160]	@ (8006cf8 <mem_malloc+0x1d0>)
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006c5a:	4b27      	ldr	r3, [pc, #156]	@ (8006cf8 <mem_malloc+0x1d0>)
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8006d08 <mem_malloc+0x1e0>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d00b      	beq.n	8006c7e <mem_malloc+0x156>
 8006c66:	4b24      	ldr	r3, [pc, #144]	@ (8006cf8 <mem_malloc+0x1d0>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	791b      	ldrb	r3, [r3, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d006      	beq.n	8006c7e <mem_malloc+0x156>
 8006c70:	4b22      	ldr	r3, [pc, #136]	@ (8006cfc <mem_malloc+0x1d4>)
 8006c72:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8006c76:	4925      	ldr	r1, [pc, #148]	@ (8006d0c <mem_malloc+0x1e4>)
 8006c78:	4822      	ldr	r0, [pc, #136]	@ (8006d04 <mem_malloc+0x1dc>)
 8006c7a:	f004 fc81 	bl	800b580 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006c7e:	8bba      	ldrh	r2, [r7, #28]
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	4413      	add	r3, r2
 8006c84:	3308      	adds	r3, #8
 8006c86:	4a20      	ldr	r2, [pc, #128]	@ (8006d08 <mem_malloc+0x1e0>)
 8006c88:	6812      	ldr	r2, [r2, #0]
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d906      	bls.n	8006c9c <mem_malloc+0x174>
 8006c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8006cfc <mem_malloc+0x1d4>)
 8006c90:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8006c94:	491e      	ldr	r1, [pc, #120]	@ (8006d10 <mem_malloc+0x1e8>)
 8006c96:	481b      	ldr	r0, [pc, #108]	@ (8006d04 <mem_malloc+0x1dc>)
 8006c98:	f004 fc72 	bl	800b580 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f003 0303 	and.w	r3, r3, #3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d006      	beq.n	8006cb4 <mem_malloc+0x18c>
 8006ca6:	4b15      	ldr	r3, [pc, #84]	@ (8006cfc <mem_malloc+0x1d4>)
 8006ca8:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8006cac:	4919      	ldr	r1, [pc, #100]	@ (8006d14 <mem_malloc+0x1ec>)
 8006cae:	4815      	ldr	r0, [pc, #84]	@ (8006d04 <mem_malloc+0x1dc>)
 8006cb0:	f004 fc66 	bl	800b580 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f003 0303 	and.w	r3, r3, #3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d006      	beq.n	8006ccc <mem_malloc+0x1a4>
 8006cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8006cfc <mem_malloc+0x1d4>)
 8006cc0:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8006cc4:	4914      	ldr	r1, [pc, #80]	@ (8006d18 <mem_malloc+0x1f0>)
 8006cc6:	480f      	ldr	r0, [pc, #60]	@ (8006d04 <mem_malloc+0x1dc>)
 8006cc8:	f004 fc5a 	bl	800b580 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	3308      	adds	r3, #8
 8006cd0:	e00e      	b.n	8006cf0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006cd2:	8bfb      	ldrh	r3, [r7, #30]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7ff fc83 	bl	80065e0 <ptr_to_mem>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006ce0:	8bfa      	ldrh	r2, [r7, #30]
 8006ce2:	8bbb      	ldrh	r3, [r7, #28]
 8006ce4:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	f4ff af44 	bcc.w	8006b76 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3720      	adds	r7, #32
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	200059a0 	.word	0x200059a0
 8006cfc:	0800c42c 	.word	0x0800c42c
 8006d00:	0800c5d4 	.word	0x0800c5d4
 8006d04:	0800c474 	.word	0x0800c474
 8006d08:	2000599c 	.word	0x2000599c
 8006d0c:	0800c5e8 	.word	0x0800c5e8
 8006d10:	0800c604 	.word	0x0800c604
 8006d14:	0800c634 	.word	0x0800c634
 8006d18:	0800c664 	.word	0x0800c664

08006d1c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	3303      	adds	r3, #3
 8006d32:	f023 0303 	bic.w	r3, r3, #3
 8006d36:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006d38:	2300      	movs	r3, #0
 8006d3a:	60fb      	str	r3, [r7, #12]
 8006d3c:	e011      	b.n	8006d62 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	881b      	ldrh	r3, [r3, #0]
 8006d54:	461a      	mov	r2, r3
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	4413      	add	r3, r2
 8006d5a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	60fb      	str	r3, [r7, #12]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	885b      	ldrh	r3, [r3, #2]
 8006d66:	461a      	mov	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	dbe7      	blt.n	8006d3e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006d6e:	bf00      	nop
 8006d70:	bf00      	nop
 8006d72:	3714      	adds	r7, #20
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006d82:	2300      	movs	r3, #0
 8006d84:	80fb      	strh	r3, [r7, #6]
 8006d86:	e009      	b.n	8006d9c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006d88:	88fb      	ldrh	r3, [r7, #6]
 8006d8a:	4a08      	ldr	r2, [pc, #32]	@ (8006dac <memp_init+0x30>)
 8006d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7ff ffc3 	bl	8006d1c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006d96:	88fb      	ldrh	r3, [r7, #6]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	80fb      	strh	r3, [r7, #6]
 8006d9c:	88fb      	ldrh	r3, [r7, #6]
 8006d9e:	2b05      	cmp	r3, #5
 8006da0:	d9f2      	bls.n	8006d88 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006da2:	bf00      	nop
 8006da4:	bf00      	nop
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	0800d9a8 	.word	0x0800d9a8

08006db0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d012      	beq.n	8006dec <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	6812      	ldr	r2, [r2, #0]
 8006dce:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f003 0303 	and.w	r3, r3, #3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d006      	beq.n	8006de8 <do_memp_malloc_pool+0x38>
 8006dda:	4b07      	ldr	r3, [pc, #28]	@ (8006df8 <do_memp_malloc_pool+0x48>)
 8006ddc:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8006de0:	4906      	ldr	r1, [pc, #24]	@ (8006dfc <do_memp_malloc_pool+0x4c>)
 8006de2:	4807      	ldr	r0, [pc, #28]	@ (8006e00 <do_memp_malloc_pool+0x50>)
 8006de4:	f004 fbcc 	bl	800b580 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	e000      	b.n	8006dee <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	0800c688 	.word	0x0800c688
 8006dfc:	0800c6b8 	.word	0x0800c6b8
 8006e00:	0800c6dc 	.word	0x0800c6dc

08006e04 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d106      	bne.n	8006e20 <memp_malloc_pool+0x1c>
 8006e12:	4b0a      	ldr	r3, [pc, #40]	@ (8006e3c <memp_malloc_pool+0x38>)
 8006e14:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8006e18:	4909      	ldr	r1, [pc, #36]	@ (8006e40 <memp_malloc_pool+0x3c>)
 8006e1a:	480a      	ldr	r0, [pc, #40]	@ (8006e44 <memp_malloc_pool+0x40>)
 8006e1c:	f004 fbb0 	bl	800b580 <iprintf>
  if (desc == NULL) {
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <memp_malloc_pool+0x26>
    return NULL;
 8006e26:	2300      	movs	r3, #0
 8006e28:	e003      	b.n	8006e32 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7ff ffc0 	bl	8006db0 <do_memp_malloc_pool>
 8006e30:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	0800c688 	.word	0x0800c688
 8006e40:	0800c704 	.word	0x0800c704
 8006e44:	0800c6dc 	.word	0x0800c6dc

08006e48 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	4603      	mov	r3, r0
 8006e50:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006e52:	79fb      	ldrb	r3, [r7, #7]
 8006e54:	2b05      	cmp	r3, #5
 8006e56:	d908      	bls.n	8006e6a <memp_malloc+0x22>
 8006e58:	4b0a      	ldr	r3, [pc, #40]	@ (8006e84 <memp_malloc+0x3c>)
 8006e5a:	f240 1257 	movw	r2, #343	@ 0x157
 8006e5e:	490a      	ldr	r1, [pc, #40]	@ (8006e88 <memp_malloc+0x40>)
 8006e60:	480a      	ldr	r0, [pc, #40]	@ (8006e8c <memp_malloc+0x44>)
 8006e62:	f004 fb8d 	bl	800b580 <iprintf>
 8006e66:	2300      	movs	r3, #0
 8006e68:	e008      	b.n	8006e7c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006e6a:	79fb      	ldrb	r3, [r7, #7]
 8006e6c:	4a08      	ldr	r2, [pc, #32]	@ (8006e90 <memp_malloc+0x48>)
 8006e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7ff ff9c 	bl	8006db0 <do_memp_malloc_pool>
 8006e78:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	0800c688 	.word	0x0800c688
 8006e88:	0800c718 	.word	0x0800c718
 8006e8c:	0800c6dc 	.word	0x0800c6dc
 8006e90:	0800d9a8 	.word	0x0800d9a8

08006e94 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	f003 0303 	and.w	r3, r3, #3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d006      	beq.n	8006eb6 <do_memp_free_pool+0x22>
 8006ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8006ed4 <do_memp_free_pool+0x40>)
 8006eaa:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8006eae:	490a      	ldr	r1, [pc, #40]	@ (8006ed8 <do_memp_free_pool+0x44>)
 8006eb0:	480a      	ldr	r0, [pc, #40]	@ (8006edc <do_memp_free_pool+0x48>)
 8006eb2:	f004 fb65 	bl	800b580 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006ecc:	bf00      	nop
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	0800c688 	.word	0x0800c688
 8006ed8:	0800c738 	.word	0x0800c738
 8006edc:	0800c6dc 	.word	0x0800c6dc

08006ee0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d106      	bne.n	8006efe <memp_free_pool+0x1e>
 8006ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8006f1c <memp_free_pool+0x3c>)
 8006ef2:	f240 1295 	movw	r2, #405	@ 0x195
 8006ef6:	490a      	ldr	r1, [pc, #40]	@ (8006f20 <memp_free_pool+0x40>)
 8006ef8:	480a      	ldr	r0, [pc, #40]	@ (8006f24 <memp_free_pool+0x44>)
 8006efa:	f004 fb41 	bl	800b580 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d007      	beq.n	8006f14 <memp_free_pool+0x34>
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d004      	beq.n	8006f14 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8006f0a:	6839      	ldr	r1, [r7, #0]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f7ff ffc1 	bl	8006e94 <do_memp_free_pool>
 8006f12:	e000      	b.n	8006f16 <memp_free_pool+0x36>
    return;
 8006f14:	bf00      	nop
}
 8006f16:	3708      	adds	r7, #8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	0800c688 	.word	0x0800c688
 8006f20:	0800c704 	.word	0x0800c704
 8006f24:	0800c6dc 	.word	0x0800c6dc

08006f28 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	4603      	mov	r3, r0
 8006f30:	6039      	str	r1, [r7, #0]
 8006f32:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006f34:	79fb      	ldrb	r3, [r7, #7]
 8006f36:	2b05      	cmp	r3, #5
 8006f38:	d907      	bls.n	8006f4a <memp_free+0x22>
 8006f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8006f6c <memp_free+0x44>)
 8006f3c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8006f40:	490b      	ldr	r1, [pc, #44]	@ (8006f70 <memp_free+0x48>)
 8006f42:	480c      	ldr	r0, [pc, #48]	@ (8006f74 <memp_free+0x4c>)
 8006f44:	f004 fb1c 	bl	800b580 <iprintf>
 8006f48:	e00c      	b.n	8006f64 <memp_free+0x3c>

  if (mem == NULL) {
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d008      	beq.n	8006f62 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006f50:	79fb      	ldrb	r3, [r7, #7]
 8006f52:	4a09      	ldr	r2, [pc, #36]	@ (8006f78 <memp_free+0x50>)
 8006f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7ff ff9a 	bl	8006e94 <do_memp_free_pool>
 8006f60:	e000      	b.n	8006f64 <memp_free+0x3c>
    return;
 8006f62:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	0800c688 	.word	0x0800c688
 8006f70:	0800c758 	.word	0x0800c758
 8006f74:	0800c6dc 	.word	0x0800c6dc
 8006f78:	0800d9a8 	.word	0x0800d9a8

08006f7c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006f80:	bf00      	nop
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
	...

08006f8c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	607a      	str	r2, [r7, #4]
 8006f98:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d108      	bne.n	8006fb2 <netif_add+0x26>
 8006fa0:	4b57      	ldr	r3, [pc, #348]	@ (8007100 <netif_add+0x174>)
 8006fa2:	f240 1227 	movw	r2, #295	@ 0x127
 8006fa6:	4957      	ldr	r1, [pc, #348]	@ (8007104 <netif_add+0x178>)
 8006fa8:	4857      	ldr	r0, [pc, #348]	@ (8007108 <netif_add+0x17c>)
 8006faa:	f004 fae9 	bl	800b580 <iprintf>
 8006fae:	2300      	movs	r3, #0
 8006fb0:	e0a2      	b.n	80070f8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d108      	bne.n	8006fca <netif_add+0x3e>
 8006fb8:	4b51      	ldr	r3, [pc, #324]	@ (8007100 <netif_add+0x174>)
 8006fba:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006fbe:	4953      	ldr	r1, [pc, #332]	@ (800710c <netif_add+0x180>)
 8006fc0:	4851      	ldr	r0, [pc, #324]	@ (8007108 <netif_add+0x17c>)
 8006fc2:	f004 fadd 	bl	800b580 <iprintf>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	e096      	b.n	80070f8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006fd0:	4b4f      	ldr	r3, [pc, #316]	@ (8007110 <netif_add+0x184>)
 8006fd2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006fda:	4b4d      	ldr	r3, [pc, #308]	@ (8007110 <netif_add+0x184>)
 8006fdc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006fe4:	4b4a      	ldr	r3, [pc, #296]	@ (8007110 <netif_add+0x184>)
 8006fe6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	4a45      	ldr	r2, [pc, #276]	@ (8007114 <netif_add+0x188>)
 8006ffe:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6a3a      	ldr	r2, [r7, #32]
 8007018:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800701a:	4b3f      	ldr	r3, [pc, #252]	@ (8007118 <netif_add+0x18c>)
 800701c:	781a      	ldrb	r2, [r3, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007028:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	68b9      	ldr	r1, [r7, #8]
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f000 f90f 	bl	8007254 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	4798      	blx	r3
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <netif_add+0xba>
    return NULL;
 8007042:	2300      	movs	r3, #0
 8007044:	e058      	b.n	80070f8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800704c:	2bff      	cmp	r3, #255	@ 0xff
 800704e:	d103      	bne.n	8007058 <netif_add+0xcc>
        netif->num = 0;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8007058:	2300      	movs	r3, #0
 800705a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800705c:	4b2f      	ldr	r3, [pc, #188]	@ (800711c <netif_add+0x190>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	617b      	str	r3, [r7, #20]
 8007062:	e02b      	b.n	80070bc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	429a      	cmp	r2, r3
 800706a:	d106      	bne.n	800707a <netif_add+0xee>
 800706c:	4b24      	ldr	r3, [pc, #144]	@ (8007100 <netif_add+0x174>)
 800706e:	f240 128b 	movw	r2, #395	@ 0x18b
 8007072:	492b      	ldr	r1, [pc, #172]	@ (8007120 <netif_add+0x194>)
 8007074:	4824      	ldr	r0, [pc, #144]	@ (8007108 <netif_add+0x17c>)
 8007076:	f004 fa83 	bl	800b580 <iprintf>
        num_netifs++;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	3301      	adds	r3, #1
 800707e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	2bff      	cmp	r3, #255	@ 0xff
 8007084:	dd06      	ble.n	8007094 <netif_add+0x108>
 8007086:	4b1e      	ldr	r3, [pc, #120]	@ (8007100 <netif_add+0x174>)
 8007088:	f240 128d 	movw	r2, #397	@ 0x18d
 800708c:	4925      	ldr	r1, [pc, #148]	@ (8007124 <netif_add+0x198>)
 800708e:	481e      	ldr	r0, [pc, #120]	@ (8007108 <netif_add+0x17c>)
 8007090:	f004 fa76 	bl	800b580 <iprintf>
        if (netif2->num == netif->num) {
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d108      	bne.n	80070b6 <netif_add+0x12a>
          netif->num++;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80070aa:	3301      	adds	r3, #1
 80070ac:	b2da      	uxtb	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 80070b4:	e005      	b.n	80070c2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	617b      	str	r3, [r7, #20]
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1d0      	bne.n	8007064 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1be      	bne.n	8007046 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80070ce:	2bfe      	cmp	r3, #254	@ 0xfe
 80070d0:	d103      	bne.n	80070da <netif_add+0x14e>
    netif_num = 0;
 80070d2:	4b11      	ldr	r3, [pc, #68]	@ (8007118 <netif_add+0x18c>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	701a      	strb	r2, [r3, #0]
 80070d8:	e006      	b.n	80070e8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80070e0:	3301      	adds	r3, #1
 80070e2:	b2da      	uxtb	r2, r3
 80070e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007118 <netif_add+0x18c>)
 80070e6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80070e8:	4b0c      	ldr	r3, [pc, #48]	@ (800711c <netif_add+0x190>)
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80070f0:	4a0a      	ldr	r2, [pc, #40]	@ (800711c <netif_add+0x190>)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80070f6:	68fb      	ldr	r3, [r7, #12]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3718      	adds	r7, #24
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	0800c774 	.word	0x0800c774
 8007104:	0800c808 	.word	0x0800c808
 8007108:	0800c7c4 	.word	0x0800c7c4
 800710c:	0800c824 	.word	0x0800c824
 8007110:	0800d9d0 	.word	0x0800d9d0
 8007114:	0800752f 	.word	0x0800752f
 8007118:	20008384 	.word	0x20008384
 800711c:	2000837c 	.word	0x2000837c
 8007120:	0800c848 	.word	0x0800c848
 8007124:	0800c85c 	.word	0x0800c85c

08007128 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007132:	6839      	ldr	r1, [r7, #0]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f001 fe37 	bl	8008da8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800713a:	bf00      	nop
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
	...

08007144 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d106      	bne.n	8007164 <netif_do_set_ipaddr+0x20>
 8007156:	4b1d      	ldr	r3, [pc, #116]	@ (80071cc <netif_do_set_ipaddr+0x88>)
 8007158:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800715c:	491c      	ldr	r1, [pc, #112]	@ (80071d0 <netif_do_set_ipaddr+0x8c>)
 800715e:	481d      	ldr	r0, [pc, #116]	@ (80071d4 <netif_do_set_ipaddr+0x90>)
 8007160:	f004 fa0e 	bl	800b580 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d106      	bne.n	8007178 <netif_do_set_ipaddr+0x34>
 800716a:	4b18      	ldr	r3, [pc, #96]	@ (80071cc <netif_do_set_ipaddr+0x88>)
 800716c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8007170:	4917      	ldr	r1, [pc, #92]	@ (80071d0 <netif_do_set_ipaddr+0x8c>)
 8007172:	4818      	ldr	r0, [pc, #96]	@ (80071d4 <netif_do_set_ipaddr+0x90>)
 8007174:	f004 fa04 	bl	800b580 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	3304      	adds	r3, #4
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	429a      	cmp	r2, r3
 8007184:	d01c      	beq.n	80071c0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	3304      	adds	r3, #4
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007196:	f107 0314 	add.w	r3, r7, #20
 800719a:	4619      	mov	r1, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7ff ffc3 	bl	8007128 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d002      	beq.n	80071ae <netif_do_set_ipaddr+0x6a>
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	e000      	b.n	80071b0 <netif_do_set_ipaddr+0x6c>
 80071ae:	2300      	movs	r3, #0
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80071b4:	2101      	movs	r1, #1
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f000 f8d2 	bl	8007360 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80071bc:	2301      	movs	r3, #1
 80071be:	e000      	b.n	80071c2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3718      	adds	r7, #24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	0800c774 	.word	0x0800c774
 80071d0:	0800c88c 	.word	0x0800c88c
 80071d4:	0800c7c4 	.word	0x0800c7c4

080071d8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	3308      	adds	r3, #8
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d00a      	beq.n	8007208 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d002      	beq.n	80071fe <netif_do_set_netmask+0x26>
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	e000      	b.n	8007200 <netif_do_set_netmask+0x28>
 80071fe:	2300      	movs	r3, #0
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007204:	2301      	movs	r3, #1
 8007206:	e000      	b.n	800720a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007216:	b480      	push	{r7}
 8007218:	b085      	sub	sp, #20
 800721a:	af00      	add	r7, sp, #0
 800721c:	60f8      	str	r0, [r7, #12]
 800721e:	60b9      	str	r1, [r7, #8]
 8007220:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	330c      	adds	r3, #12
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	429a      	cmp	r2, r3
 800722e:	d00a      	beq.n	8007246 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d002      	beq.n	800723c <netif_do_set_gw+0x26>
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	e000      	b.n	800723e <netif_do_set_gw+0x28>
 800723c:	2300      	movs	r3, #0
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007242:	2301      	movs	r3, #1
 8007244:	e000      	b.n	8007248 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b088      	sub	sp, #32
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
 8007260:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007262:	2300      	movs	r3, #0
 8007264:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007266:	2300      	movs	r3, #0
 8007268:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d101      	bne.n	8007274 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007270:	4b1c      	ldr	r3, [pc, #112]	@ (80072e4 <netif_set_addr+0x90>)
 8007272:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800727a:	4b1a      	ldr	r3, [pc, #104]	@ (80072e4 <netif_set_addr+0x90>)
 800727c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007284:	4b17      	ldr	r3, [pc, #92]	@ (80072e4 <netif_set_addr+0x90>)
 8007286:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <netif_set_addr+0x42>
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <netif_set_addr+0x46>
 8007296:	2301      	movs	r3, #1
 8007298:	e000      	b.n	800729c <netif_set_addr+0x48>
 800729a:	2300      	movs	r3, #0
 800729c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d006      	beq.n	80072b2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80072a4:	f107 0310 	add.w	r3, r7, #16
 80072a8:	461a      	mov	r2, r3
 80072aa:	68b9      	ldr	r1, [r7, #8]
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f7ff ff49 	bl	8007144 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80072b2:	69fa      	ldr	r2, [r7, #28]
 80072b4:	6879      	ldr	r1, [r7, #4]
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f7ff ff8e 	bl	80071d8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80072bc:	69ba      	ldr	r2, [r7, #24]
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f7ff ffa8 	bl	8007216 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d106      	bne.n	80072da <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80072cc:	f107 0310 	add.w	r3, r7, #16
 80072d0:	461a      	mov	r2, r3
 80072d2:	68b9      	ldr	r1, [r7, #8]
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f7ff ff35 	bl	8007144 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80072da:	bf00      	nop
 80072dc:	3720      	adds	r7, #32
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	0800d9d0 	.word	0x0800d9d0

080072e8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80072f0:	4a04      	ldr	r2, [pc, #16]	@ (8007304 <netif_set_default+0x1c>)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80072f6:	bf00      	nop
 80072f8:	370c      	adds	r7, #12
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	20008380 	.word	0x20008380

08007308 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d107      	bne.n	8007326 <netif_set_up+0x1e>
 8007316:	4b0f      	ldr	r3, [pc, #60]	@ (8007354 <netif_set_up+0x4c>)
 8007318:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800731c:	490e      	ldr	r1, [pc, #56]	@ (8007358 <netif_set_up+0x50>)
 800731e:	480f      	ldr	r0, [pc, #60]	@ (800735c <netif_set_up+0x54>)
 8007320:	f004 f92e 	bl	800b580 <iprintf>
 8007324:	e013      	b.n	800734e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10c      	bne.n	800734e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800733a:	f043 0301 	orr.w	r3, r3, #1
 800733e:	b2da      	uxtb	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007346:	2103      	movs	r1, #3
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f809 	bl	8007360 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	0800c774 	.word	0x0800c774
 8007358:	0800c8fc 	.word	0x0800c8fc
 800735c:	0800c7c4 	.word	0x0800c7c4

08007360 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	460b      	mov	r3, r1
 800736a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d106      	bne.n	8007380 <netif_issue_reports+0x20>
 8007372:	4b18      	ldr	r3, [pc, #96]	@ (80073d4 <netif_issue_reports+0x74>)
 8007374:	f240 326d 	movw	r2, #877	@ 0x36d
 8007378:	4917      	ldr	r1, [pc, #92]	@ (80073d8 <netif_issue_reports+0x78>)
 800737a:	4818      	ldr	r0, [pc, #96]	@ (80073dc <netif_issue_reports+0x7c>)
 800737c:	f004 f900 	bl	800b580 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007386:	f003 0304 	and.w	r3, r3, #4
 800738a:	2b00      	cmp	r3, #0
 800738c:	d01e      	beq.n	80073cc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007394:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007398:	2b00      	cmp	r3, #0
 800739a:	d017      	beq.n	80073cc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800739c:	78fb      	ldrb	r3, [r7, #3]
 800739e:	f003 0301 	and.w	r3, r3, #1
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d013      	beq.n	80073ce <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	3304      	adds	r3, #4
 80073aa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00e      	beq.n	80073ce <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80073b6:	f003 0308 	and.w	r3, r3, #8
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d007      	beq.n	80073ce <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	3304      	adds	r3, #4
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f002 fc59 	bl	8009c7c <etharp_request>
 80073ca:	e000      	b.n	80073ce <netif_issue_reports+0x6e>
    return;
 80073cc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	0800c774 	.word	0x0800c774
 80073d8:	0800c918 	.word	0x0800c918
 80073dc:	0800c7c4 	.word	0x0800c7c4

080073e0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d107      	bne.n	80073fe <netif_set_down+0x1e>
 80073ee:	4b12      	ldr	r3, [pc, #72]	@ (8007438 <netif_set_down+0x58>)
 80073f0:	f240 329b 	movw	r2, #923	@ 0x39b
 80073f4:	4911      	ldr	r1, [pc, #68]	@ (800743c <netif_set_down+0x5c>)
 80073f6:	4812      	ldr	r0, [pc, #72]	@ (8007440 <netif_set_down+0x60>)
 80073f8:	f004 f8c2 	bl	800b580 <iprintf>
 80073fc:	e019      	b.n	8007432 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	2b00      	cmp	r3, #0
 800740a:	d012      	beq.n	8007432 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007412:	f023 0301 	bic.w	r3, r3, #1
 8007416:	b2da      	uxtb	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007424:	f003 0308 	and.w	r3, r3, #8
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f001 ffe3 	bl	80093f8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	0800c774 	.word	0x0800c774
 800743c:	0800c93c 	.word	0x0800c93c
 8007440:	0800c7c4 	.word	0x0800c7c4

08007444 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d107      	bne.n	8007462 <netif_set_link_up+0x1e>
 8007452:	4b13      	ldr	r3, [pc, #76]	@ (80074a0 <netif_set_link_up+0x5c>)
 8007454:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8007458:	4912      	ldr	r1, [pc, #72]	@ (80074a4 <netif_set_link_up+0x60>)
 800745a:	4813      	ldr	r0, [pc, #76]	@ (80074a8 <netif_set_link_up+0x64>)
 800745c:	f004 f890 	bl	800b580 <iprintf>
 8007460:	e01b      	b.n	800749a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007468:	f003 0304 	and.w	r3, r3, #4
 800746c:	2b00      	cmp	r3, #0
 800746e:	d114      	bne.n	800749a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007476:	f043 0304 	orr.w	r3, r3, #4
 800747a:	b2da      	uxtb	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007482:	2103      	movs	r1, #3
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f7ff ff6b 	bl	8007360 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	69db      	ldr	r3, [r3, #28]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d003      	beq.n	800749a <netif_set_link_up+0x56>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	69db      	ldr	r3, [r3, #28]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	0800c774 	.word	0x0800c774
 80074a4:	0800c95c 	.word	0x0800c95c
 80074a8:	0800c7c4 	.word	0x0800c7c4

080074ac <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d107      	bne.n	80074ca <netif_set_link_down+0x1e>
 80074ba:	4b11      	ldr	r3, [pc, #68]	@ (8007500 <netif_set_link_down+0x54>)
 80074bc:	f240 4206 	movw	r2, #1030	@ 0x406
 80074c0:	4910      	ldr	r1, [pc, #64]	@ (8007504 <netif_set_link_down+0x58>)
 80074c2:	4811      	ldr	r0, [pc, #68]	@ (8007508 <netif_set_link_down+0x5c>)
 80074c4:	f004 f85c 	bl	800b580 <iprintf>
 80074c8:	e017      	b.n	80074fa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d010      	beq.n	80074fa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80074de:	f023 0304 	bic.w	r3, r3, #4
 80074e2:	b2da      	uxtb	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <netif_set_link_down+0x4e>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	0800c774 	.word	0x0800c774
 8007504:	0800c980 	.word	0x0800c980
 8007508:	0800c7c4 	.word	0x0800c7c4

0800750c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d002      	beq.n	8007522 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	61da      	str	r2, [r3, #28]
  }
}
 8007522:	bf00      	nop
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800752e:	b480      	push	{r7}
 8007530:	b085      	sub	sp, #20
 8007532:	af00      	add	r7, sp, #0
 8007534:	60f8      	str	r0, [r7, #12]
 8007536:	60b9      	str	r1, [r7, #8]
 8007538:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800753a:	f06f 030b 	mvn.w	r3, #11
}
 800753e:	4618      	mov	r0, r3
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
	...

0800754c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	4603      	mov	r3, r0
 8007554:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007556:	79fb      	ldrb	r3, [r7, #7]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d013      	beq.n	8007584 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800755c:	4b0d      	ldr	r3, [pc, #52]	@ (8007594 <netif_get_by_index+0x48>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	60fb      	str	r3, [r7, #12]
 8007562:	e00c      	b.n	800757e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800756a:	3301      	adds	r3, #1
 800756c:	b2db      	uxtb	r3, r3
 800756e:	79fa      	ldrb	r2, [r7, #7]
 8007570:	429a      	cmp	r2, r3
 8007572:	d101      	bne.n	8007578 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	e006      	b.n	8007586 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	60fb      	str	r3, [r7, #12]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1ef      	bne.n	8007564 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	2000837c 	.word	0x2000837c

08007598 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	4611      	mov	r1, r2
 80075a4:	461a      	mov	r2, r3
 80075a6:	460b      	mov	r3, r1
 80075a8:	80fb      	strh	r3, [r7, #6]
 80075aa:	4613      	mov	r3, r2
 80075ac:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	88fa      	ldrh	r2, [r7, #6]
 80075be:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	88ba      	ldrh	r2, [r7, #4]
 80075c4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80075c6:	8b3b      	ldrh	r3, [r7, #24]
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	7f3a      	ldrb	r2, [r7, #28]
 80075d2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2201      	movs	r2, #1
 80075d8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	73da      	strb	r2, [r3, #15]
}
 80075e0:	bf00      	nop
 80075e2:	3714      	adds	r7, #20
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b08c      	sub	sp, #48	@ 0x30
 80075f0:	af02      	add	r7, sp, #8
 80075f2:	4603      	mov	r3, r0
 80075f4:	71fb      	strb	r3, [r7, #7]
 80075f6:	460b      	mov	r3, r1
 80075f8:	80bb      	strh	r3, [r7, #4]
 80075fa:	4613      	mov	r3, r2
 80075fc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80075fe:	79fb      	ldrb	r3, [r7, #7]
 8007600:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007602:	887b      	ldrh	r3, [r7, #2]
 8007604:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8007608:	d07d      	beq.n	8007706 <pbuf_alloc+0x11a>
 800760a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800760e:	f300 80c6 	bgt.w	800779e <pbuf_alloc+0x1b2>
 8007612:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8007616:	d010      	beq.n	800763a <pbuf_alloc+0x4e>
 8007618:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800761c:	f300 80bf 	bgt.w	800779e <pbuf_alloc+0x1b2>
 8007620:	2b01      	cmp	r3, #1
 8007622:	d002      	beq.n	800762a <pbuf_alloc+0x3e>
 8007624:	2b41      	cmp	r3, #65	@ 0x41
 8007626:	f040 80ba 	bne.w	800779e <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800762a:	887a      	ldrh	r2, [r7, #2]
 800762c:	88bb      	ldrh	r3, [r7, #4]
 800762e:	4619      	mov	r1, r3
 8007630:	2000      	movs	r0, #0
 8007632:	f000 f8cf 	bl	80077d4 <pbuf_alloc_reference>
 8007636:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8007638:	e0bb      	b.n	80077b2 <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800763a:	2300      	movs	r3, #0
 800763c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800763e:	2300      	movs	r3, #0
 8007640:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007642:	88bb      	ldrh	r3, [r7, #4]
 8007644:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007646:	2005      	movs	r0, #5
 8007648:	f7ff fbfe 	bl	8006e48 <memp_malloc>
 800764c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d107      	bne.n	8007664 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 8007654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007656:	2b00      	cmp	r3, #0
 8007658:	d002      	beq.n	8007660 <pbuf_alloc+0x74>
            pbuf_free(p);
 800765a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800765c:	f000 faa8 	bl	8007bb0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007660:	2300      	movs	r3, #0
 8007662:	e0a7      	b.n	80077b4 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007664:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007666:	3303      	adds	r3, #3
 8007668:	b29b      	uxth	r3, r3
 800766a:	f023 0303 	bic.w	r3, r3, #3
 800766e:	b29b      	uxth	r3, r3
 8007670:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8007674:	b29b      	uxth	r3, r3
 8007676:	8b7a      	ldrh	r2, [r7, #26]
 8007678:	4293      	cmp	r3, r2
 800767a:	bf28      	it	cs
 800767c:	4613      	movcs	r3, r2
 800767e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007680:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007682:	3310      	adds	r3, #16
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	4413      	add	r3, r2
 8007688:	3303      	adds	r3, #3
 800768a:	f023 0303 	bic.w	r3, r3, #3
 800768e:	4618      	mov	r0, r3
 8007690:	89f9      	ldrh	r1, [r7, #14]
 8007692:	8b7a      	ldrh	r2, [r7, #26]
 8007694:	2300      	movs	r3, #0
 8007696:	9301      	str	r3, [sp, #4]
 8007698:	887b      	ldrh	r3, [r7, #2]
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	460b      	mov	r3, r1
 800769e:	4601      	mov	r1, r0
 80076a0:	6938      	ldr	r0, [r7, #16]
 80076a2:	f7ff ff79 	bl	8007598 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f003 0303 	and.w	r3, r3, #3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d006      	beq.n	80076c0 <pbuf_alloc+0xd4>
 80076b2:	4b42      	ldr	r3, [pc, #264]	@ (80077bc <pbuf_alloc+0x1d0>)
 80076b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80076b8:	4941      	ldr	r1, [pc, #260]	@ (80077c0 <pbuf_alloc+0x1d4>)
 80076ba:	4842      	ldr	r0, [pc, #264]	@ (80077c4 <pbuf_alloc+0x1d8>)
 80076bc:	f003 ff60 	bl	800b580 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80076c0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80076c2:	3303      	adds	r3, #3
 80076c4:	f023 0303 	bic.w	r3, r3, #3
 80076c8:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80076cc:	d106      	bne.n	80076dc <pbuf_alloc+0xf0>
 80076ce:	4b3b      	ldr	r3, [pc, #236]	@ (80077bc <pbuf_alloc+0x1d0>)
 80076d0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80076d4:	493c      	ldr	r1, [pc, #240]	@ (80077c8 <pbuf_alloc+0x1dc>)
 80076d6:	483b      	ldr	r0, [pc, #236]	@ (80077c4 <pbuf_alloc+0x1d8>)
 80076d8:	f003 ff52 	bl	800b580 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80076dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d102      	bne.n	80076e8 <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80076e6:	e002      	b.n	80076ee <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80076f2:	8b7a      	ldrh	r2, [r7, #26]
 80076f4:	89fb      	ldrh	r3, [r7, #14]
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80076fa:	2300      	movs	r3, #0
 80076fc:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80076fe:	8b7b      	ldrh	r3, [r7, #26]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1a0      	bne.n	8007646 <pbuf_alloc+0x5a>
      break;
 8007704:	e055      	b.n	80077b2 <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007706:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007708:	3303      	adds	r3, #3
 800770a:	b29b      	uxth	r3, r3
 800770c:	f023 0303 	bic.w	r3, r3, #3
 8007710:	b29a      	uxth	r2, r3
 8007712:	88bb      	ldrh	r3, [r7, #4]
 8007714:	3303      	adds	r3, #3
 8007716:	b29b      	uxth	r3, r3
 8007718:	f023 0303 	bic.w	r3, r3, #3
 800771c:	b29b      	uxth	r3, r3
 800771e:	4413      	add	r3, r2
 8007720:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007722:	8b3b      	ldrh	r3, [r7, #24]
 8007724:	3310      	adds	r3, #16
 8007726:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007728:	8b3a      	ldrh	r2, [r7, #24]
 800772a:	88bb      	ldrh	r3, [r7, #4]
 800772c:	3303      	adds	r3, #3
 800772e:	f023 0303 	bic.w	r3, r3, #3
 8007732:	429a      	cmp	r2, r3
 8007734:	d306      	bcc.n	8007744 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8007736:	8afa      	ldrh	r2, [r7, #22]
 8007738:	88bb      	ldrh	r3, [r7, #4]
 800773a:	3303      	adds	r3, #3
 800773c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007740:	429a      	cmp	r2, r3
 8007742:	d201      	bcs.n	8007748 <pbuf_alloc+0x15c>
        return NULL;
 8007744:	2300      	movs	r3, #0
 8007746:	e035      	b.n	80077b4 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007748:	8afb      	ldrh	r3, [r7, #22]
 800774a:	4618      	mov	r0, r3
 800774c:	f7ff f9ec 	bl	8006b28 <mem_malloc>
 8007750:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8007752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007754:	2b00      	cmp	r3, #0
 8007756:	d101      	bne.n	800775c <pbuf_alloc+0x170>
        return NULL;
 8007758:	2300      	movs	r3, #0
 800775a:	e02b      	b.n	80077b4 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800775c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800775e:	3310      	adds	r3, #16
 8007760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007762:	4413      	add	r3, r2
 8007764:	3303      	adds	r3, #3
 8007766:	f023 0303 	bic.w	r3, r3, #3
 800776a:	4618      	mov	r0, r3
 800776c:	88b9      	ldrh	r1, [r7, #4]
 800776e:	88ba      	ldrh	r2, [r7, #4]
 8007770:	2300      	movs	r3, #0
 8007772:	9301      	str	r3, [sp, #4]
 8007774:	887b      	ldrh	r3, [r7, #2]
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	460b      	mov	r3, r1
 800777a:	4601      	mov	r1, r0
 800777c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800777e:	f7ff ff0b 	bl	8007598 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f003 0303 	and.w	r3, r3, #3
 800778a:	2b00      	cmp	r3, #0
 800778c:	d010      	beq.n	80077b0 <pbuf_alloc+0x1c4>
 800778e:	4b0b      	ldr	r3, [pc, #44]	@ (80077bc <pbuf_alloc+0x1d0>)
 8007790:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8007794:	490d      	ldr	r1, [pc, #52]	@ (80077cc <pbuf_alloc+0x1e0>)
 8007796:	480b      	ldr	r0, [pc, #44]	@ (80077c4 <pbuf_alloc+0x1d8>)
 8007798:	f003 fef2 	bl	800b580 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800779c:	e008      	b.n	80077b0 <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800779e:	4b07      	ldr	r3, [pc, #28]	@ (80077bc <pbuf_alloc+0x1d0>)
 80077a0:	f240 1227 	movw	r2, #295	@ 0x127
 80077a4:	490a      	ldr	r1, [pc, #40]	@ (80077d0 <pbuf_alloc+0x1e4>)
 80077a6:	4807      	ldr	r0, [pc, #28]	@ (80077c4 <pbuf_alloc+0x1d8>)
 80077a8:	f003 feea 	bl	800b580 <iprintf>
      return NULL;
 80077ac:	2300      	movs	r3, #0
 80077ae:	e001      	b.n	80077b4 <pbuf_alloc+0x1c8>
      break;
 80077b0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80077b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3728      	adds	r7, #40	@ 0x28
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	0800c9a4 	.word	0x0800c9a4
 80077c0:	0800c9d4 	.word	0x0800c9d4
 80077c4:	0800ca04 	.word	0x0800ca04
 80077c8:	0800ca2c 	.word	0x0800ca2c
 80077cc:	0800ca60 	.word	0x0800ca60
 80077d0:	0800ca8c 	.word	0x0800ca8c

080077d4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af02      	add	r7, sp, #8
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	460b      	mov	r3, r1
 80077de:	807b      	strh	r3, [r7, #2]
 80077e0:	4613      	mov	r3, r2
 80077e2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80077e4:	883b      	ldrh	r3, [r7, #0]
 80077e6:	2b41      	cmp	r3, #65	@ 0x41
 80077e8:	d009      	beq.n	80077fe <pbuf_alloc_reference+0x2a>
 80077ea:	883b      	ldrh	r3, [r7, #0]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d006      	beq.n	80077fe <pbuf_alloc_reference+0x2a>
 80077f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007830 <pbuf_alloc_reference+0x5c>)
 80077f2:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80077f6:	490f      	ldr	r1, [pc, #60]	@ (8007834 <pbuf_alloc_reference+0x60>)
 80077f8:	480f      	ldr	r0, [pc, #60]	@ (8007838 <pbuf_alloc_reference+0x64>)
 80077fa:	f003 fec1 	bl	800b580 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80077fe:	2004      	movs	r0, #4
 8007800:	f7ff fb22 	bl	8006e48 <memp_malloc>
 8007804:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d101      	bne.n	8007810 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800780c:	2300      	movs	r3, #0
 800780e:	e00b      	b.n	8007828 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007810:	8879      	ldrh	r1, [r7, #2]
 8007812:	887a      	ldrh	r2, [r7, #2]
 8007814:	2300      	movs	r3, #0
 8007816:	9301      	str	r3, [sp, #4]
 8007818:	883b      	ldrh	r3, [r7, #0]
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	460b      	mov	r3, r1
 800781e:	6879      	ldr	r1, [r7, #4]
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f7ff feb9 	bl	8007598 <pbuf_init_alloced_pbuf>
  return p;
 8007826:	68fb      	ldr	r3, [r7, #12]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	0800c9a4 	.word	0x0800c9a4
 8007834:	0800caa8 	.word	0x0800caa8
 8007838:	0800ca04 	.word	0x0800ca04

0800783c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b088      	sub	sp, #32
 8007840:	af02      	add	r7, sp, #8
 8007842:	607b      	str	r3, [r7, #4]
 8007844:	4603      	mov	r3, r0
 8007846:	73fb      	strb	r3, [r7, #15]
 8007848:	460b      	mov	r3, r1
 800784a:	81bb      	strh	r3, [r7, #12]
 800784c:	4613      	mov	r3, r2
 800784e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8007850:	7bfb      	ldrb	r3, [r7, #15]
 8007852:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007854:	8a7b      	ldrh	r3, [r7, #18]
 8007856:	3303      	adds	r3, #3
 8007858:	f023 0203 	bic.w	r2, r3, #3
 800785c:	89bb      	ldrh	r3, [r7, #12]
 800785e:	441a      	add	r2, r3
 8007860:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007862:	429a      	cmp	r2, r3
 8007864:	d901      	bls.n	800786a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8007866:	2300      	movs	r3, #0
 8007868:	e018      	b.n	800789c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d007      	beq.n	8007880 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007870:	8a7b      	ldrh	r3, [r7, #18]
 8007872:	3303      	adds	r3, #3
 8007874:	f023 0303 	bic.w	r3, r3, #3
 8007878:	6a3a      	ldr	r2, [r7, #32]
 800787a:	4413      	add	r3, r2
 800787c:	617b      	str	r3, [r7, #20]
 800787e:	e001      	b.n	8007884 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007880:	2300      	movs	r3, #0
 8007882:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	89b9      	ldrh	r1, [r7, #12]
 8007888:	89ba      	ldrh	r2, [r7, #12]
 800788a:	2302      	movs	r3, #2
 800788c:	9301      	str	r3, [sp, #4]
 800788e:	897b      	ldrh	r3, [r7, #10]
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	460b      	mov	r3, r1
 8007894:	6979      	ldr	r1, [r7, #20]
 8007896:	f7ff fe7f 	bl	8007598 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800789a:	687b      	ldr	r3, [r7, #4]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3718      	adds	r7, #24
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	460b      	mov	r3, r1
 80078ae:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d106      	bne.n	80078c4 <pbuf_realloc+0x20>
 80078b6:	4b3a      	ldr	r3, [pc, #232]	@ (80079a0 <pbuf_realloc+0xfc>)
 80078b8:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80078bc:	4939      	ldr	r1, [pc, #228]	@ (80079a4 <pbuf_realloc+0x100>)
 80078be:	483a      	ldr	r0, [pc, #232]	@ (80079a8 <pbuf_realloc+0x104>)
 80078c0:	f003 fe5e 	bl	800b580 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	891b      	ldrh	r3, [r3, #8]
 80078c8:	887a      	ldrh	r2, [r7, #2]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d263      	bcs.n	8007996 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	891a      	ldrh	r2, [r3, #8]
 80078d2:	887b      	ldrh	r3, [r7, #2]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80078d8:	887b      	ldrh	r3, [r7, #2]
 80078da:	817b      	strh	r3, [r7, #10]
  q = p;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80078e0:	e018      	b.n	8007914 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	895b      	ldrh	r3, [r3, #10]
 80078e6:	897a      	ldrh	r2, [r7, #10]
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	891a      	ldrh	r2, [r3, #8]
 80078f0:	893b      	ldrh	r3, [r7, #8]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d106      	bne.n	8007914 <pbuf_realloc+0x70>
 8007906:	4b26      	ldr	r3, [pc, #152]	@ (80079a0 <pbuf_realloc+0xfc>)
 8007908:	f240 12af 	movw	r2, #431	@ 0x1af
 800790c:	4927      	ldr	r1, [pc, #156]	@ (80079ac <pbuf_realloc+0x108>)
 800790e:	4826      	ldr	r0, [pc, #152]	@ (80079a8 <pbuf_realloc+0x104>)
 8007910:	f003 fe36 	bl	800b580 <iprintf>
  while (rem_len > q->len) {
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	895b      	ldrh	r3, [r3, #10]
 8007918:	897a      	ldrh	r2, [r7, #10]
 800791a:	429a      	cmp	r2, r3
 800791c:	d8e1      	bhi.n	80078e2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	7b1b      	ldrb	r3, [r3, #12]
 8007922:	f003 030f 	and.w	r3, r3, #15
 8007926:	2b00      	cmp	r3, #0
 8007928:	d121      	bne.n	800796e <pbuf_realloc+0xca>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	895b      	ldrh	r3, [r3, #10]
 800792e:	897a      	ldrh	r2, [r7, #10]
 8007930:	429a      	cmp	r2, r3
 8007932:	d01c      	beq.n	800796e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	7b5b      	ldrb	r3, [r3, #13]
 8007938:	f003 0302 	and.w	r3, r3, #2
 800793c:	2b00      	cmp	r3, #0
 800793e:	d116      	bne.n	800796e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	b29a      	uxth	r2, r3
 800794a:	897b      	ldrh	r3, [r7, #10]
 800794c:	4413      	add	r3, r2
 800794e:	b29b      	uxth	r3, r3
 8007950:	4619      	mov	r1, r3
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f7fe ffec 	bl	8006930 <mem_trim>
 8007958:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d106      	bne.n	800796e <pbuf_realloc+0xca>
 8007960:	4b0f      	ldr	r3, [pc, #60]	@ (80079a0 <pbuf_realloc+0xfc>)
 8007962:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8007966:	4912      	ldr	r1, [pc, #72]	@ (80079b0 <pbuf_realloc+0x10c>)
 8007968:	480f      	ldr	r0, [pc, #60]	@ (80079a8 <pbuf_realloc+0x104>)
 800796a:	f003 fe09 	bl	800b580 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	897a      	ldrh	r2, [r7, #10]
 8007972:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	895a      	ldrh	r2, [r3, #10]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d004      	beq.n	800798e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4618      	mov	r0, r3
 800798a:	f000 f911 	bl	8007bb0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	e000      	b.n	8007998 <pbuf_realloc+0xf4>
    return;
 8007996:	bf00      	nop

}
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	0800c9a4 	.word	0x0800c9a4
 80079a4:	0800cabc 	.word	0x0800cabc
 80079a8:	0800ca04 	.word	0x0800ca04
 80079ac:	0800cad4 	.word	0x0800cad4
 80079b0:	0800caec 	.word	0x0800caec

080079b4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	4613      	mov	r3, r2
 80079c0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d106      	bne.n	80079d6 <pbuf_add_header_impl+0x22>
 80079c8:	4b2b      	ldr	r3, [pc, #172]	@ (8007a78 <pbuf_add_header_impl+0xc4>)
 80079ca:	f240 12df 	movw	r2, #479	@ 0x1df
 80079ce:	492b      	ldr	r1, [pc, #172]	@ (8007a7c <pbuf_add_header_impl+0xc8>)
 80079d0:	482b      	ldr	r0, [pc, #172]	@ (8007a80 <pbuf_add_header_impl+0xcc>)
 80079d2:	f003 fdd5 	bl	800b580 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d003      	beq.n	80079e4 <pbuf_add_header_impl+0x30>
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079e2:	d301      	bcc.n	80079e8 <pbuf_add_header_impl+0x34>
    return 1;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e043      	b.n	8007a70 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d101      	bne.n	80079f2 <pbuf_add_header_impl+0x3e>
    return 0;
 80079ee:	2300      	movs	r3, #0
 80079f0:	e03e      	b.n	8007a70 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	891a      	ldrh	r2, [r3, #8]
 80079fa:	8a7b      	ldrh	r3, [r7, #18]
 80079fc:	4413      	add	r3, r2
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	8a7a      	ldrh	r2, [r7, #18]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d901      	bls.n	8007a0a <pbuf_add_header_impl+0x56>
    return 1;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e032      	b.n	8007a70 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	7b1b      	ldrb	r3, [r3, #12]
 8007a0e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007a10:	8a3b      	ldrh	r3, [r7, #16]
 8007a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00c      	beq.n	8007a34 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	425b      	negs	r3, r3
 8007a22:	4413      	add	r3, r2
 8007a24:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	3310      	adds	r3, #16
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d20d      	bcs.n	8007a4c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e01d      	b.n	8007a70 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007a34:	79fb      	ldrb	r3, [r7, #7]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d006      	beq.n	8007a48 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	425b      	negs	r3, r3
 8007a42:	4413      	add	r3, r2
 8007a44:	617b      	str	r3, [r7, #20]
 8007a46:	e001      	b.n	8007a4c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e011      	b.n	8007a70 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	895a      	ldrh	r2, [r3, #10]
 8007a56:	8a7b      	ldrh	r3, [r7, #18]
 8007a58:	4413      	add	r3, r2
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	891a      	ldrh	r2, [r3, #8]
 8007a64:	8a7b      	ldrh	r3, [r7, #18]
 8007a66:	4413      	add	r3, r2
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	811a      	strh	r2, [r3, #8]


  return 0;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3718      	adds	r7, #24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	0800c9a4 	.word	0x0800c9a4
 8007a7c:	0800cb08 	.word	0x0800cb08
 8007a80:	0800ca04 	.word	0x0800ca04

08007a84 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007a8e:	2200      	movs	r2, #0
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f7ff ff8e 	bl	80079b4 <pbuf_add_header_impl>
 8007a98:	4603      	mov	r3, r0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
	...

08007aa4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d106      	bne.n	8007ac2 <pbuf_remove_header+0x1e>
 8007ab4:	4b20      	ldr	r3, [pc, #128]	@ (8007b38 <pbuf_remove_header+0x94>)
 8007ab6:	f240 224b 	movw	r2, #587	@ 0x24b
 8007aba:	4920      	ldr	r1, [pc, #128]	@ (8007b3c <pbuf_remove_header+0x98>)
 8007abc:	4820      	ldr	r0, [pc, #128]	@ (8007b40 <pbuf_remove_header+0x9c>)
 8007abe:	f003 fd5f 	bl	800b580 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d003      	beq.n	8007ad0 <pbuf_remove_header+0x2c>
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ace:	d301      	bcc.n	8007ad4 <pbuf_remove_header+0x30>
    return 1;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e02c      	b.n	8007b2e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d101      	bne.n	8007ade <pbuf_remove_header+0x3a>
    return 0;
 8007ada:	2300      	movs	r3, #0
 8007adc:	e027      	b.n	8007b2e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	895b      	ldrh	r3, [r3, #10]
 8007ae6:	89fa      	ldrh	r2, [r7, #14]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d908      	bls.n	8007afe <pbuf_remove_header+0x5a>
 8007aec:	4b12      	ldr	r3, [pc, #72]	@ (8007b38 <pbuf_remove_header+0x94>)
 8007aee:	f240 2255 	movw	r2, #597	@ 0x255
 8007af2:	4914      	ldr	r1, [pc, #80]	@ (8007b44 <pbuf_remove_header+0xa0>)
 8007af4:	4812      	ldr	r0, [pc, #72]	@ (8007b40 <pbuf_remove_header+0x9c>)
 8007af6:	f003 fd43 	bl	800b580 <iprintf>
 8007afa:	2301      	movs	r3, #1
 8007afc:	e017      	b.n	8007b2e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685a      	ldr	r2, [r3, #4]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	441a      	add	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	895a      	ldrh	r2, [r3, #10]
 8007b14:	89fb      	ldrh	r3, [r7, #14]
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	891a      	ldrh	r2, [r3, #8]
 8007b22:	89fb      	ldrh	r3, [r7, #14]
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	0800c9a4 	.word	0x0800c9a4
 8007b3c:	0800cb08 	.word	0x0800cb08
 8007b40:	0800ca04 	.word	0x0800ca04
 8007b44:	0800cb14 	.word	0x0800cb14

08007b48 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	460b      	mov	r3, r1
 8007b52:	807b      	strh	r3, [r7, #2]
 8007b54:	4613      	mov	r3, r2
 8007b56:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007b58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	da08      	bge.n	8007b72 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007b60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b64:	425b      	negs	r3, r3
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7ff ff9b 	bl	8007aa4 <pbuf_remove_header>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	e007      	b.n	8007b82 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007b72:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b76:	787a      	ldrb	r2, [r7, #1]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7ff ff1a 	bl	80079b4 <pbuf_add_header_impl>
 8007b80:	4603      	mov	r3, r0
  }
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b082      	sub	sp, #8
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	460b      	mov	r3, r1
 8007b94:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007b96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7ff ffd2 	bl	8007b48 <pbuf_header_impl>
 8007ba4:	4603      	mov	r3, r0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
	...

08007bb0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10b      	bne.n	8007bd6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d106      	bne.n	8007bd2 <pbuf_free+0x22>
 8007bc4:	4b38      	ldr	r3, [pc, #224]	@ (8007ca8 <pbuf_free+0xf8>)
 8007bc6:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8007bca:	4938      	ldr	r1, [pc, #224]	@ (8007cac <pbuf_free+0xfc>)
 8007bcc:	4838      	ldr	r0, [pc, #224]	@ (8007cb0 <pbuf_free+0x100>)
 8007bce:	f003 fcd7 	bl	800b580 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	e063      	b.n	8007c9e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007bda:	e05c      	b.n	8007c96 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	7b9b      	ldrb	r3, [r3, #14]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d106      	bne.n	8007bf2 <pbuf_free+0x42>
 8007be4:	4b30      	ldr	r3, [pc, #192]	@ (8007ca8 <pbuf_free+0xf8>)
 8007be6:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8007bea:	4932      	ldr	r1, [pc, #200]	@ (8007cb4 <pbuf_free+0x104>)
 8007bec:	4830      	ldr	r0, [pc, #192]	@ (8007cb0 <pbuf_free+0x100>)
 8007bee:	f003 fcc7 	bl	800b580 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	7b9b      	ldrb	r3, [r3, #14]
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	739a      	strb	r2, [r3, #14]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	7b9b      	ldrb	r3, [r3, #14]
 8007c02:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007c04:	7dbb      	ldrb	r3, [r7, #22]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d143      	bne.n	8007c92 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	7b1b      	ldrb	r3, [r3, #12]
 8007c14:	f003 030f 	and.w	r3, r3, #15
 8007c18:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	7b5b      	ldrb	r3, [r3, #13]
 8007c1e:	f003 0302 	and.w	r3, r3, #2
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d011      	beq.n	8007c4a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d106      	bne.n	8007c40 <pbuf_free+0x90>
 8007c32:	4b1d      	ldr	r3, [pc, #116]	@ (8007ca8 <pbuf_free+0xf8>)
 8007c34:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8007c38:	491f      	ldr	r1, [pc, #124]	@ (8007cb8 <pbuf_free+0x108>)
 8007c3a:	481d      	ldr	r0, [pc, #116]	@ (8007cb0 <pbuf_free+0x100>)
 8007c3c:	f003 fca0 	bl	800b580 <iprintf>
        pc->custom_free_function(p);
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	4798      	blx	r3
 8007c48:	e01d      	b.n	8007c86 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d104      	bne.n	8007c5a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007c50:	6879      	ldr	r1, [r7, #4]
 8007c52:	2005      	movs	r0, #5
 8007c54:	f7ff f968 	bl	8006f28 <memp_free>
 8007c58:	e015      	b.n	8007c86 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007c5a:	7bfb      	ldrb	r3, [r7, #15]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d104      	bne.n	8007c6a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007c60:	6879      	ldr	r1, [r7, #4]
 8007c62:	2004      	movs	r0, #4
 8007c64:	f7ff f960 	bl	8006f28 <memp_free>
 8007c68:	e00d      	b.n	8007c86 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d103      	bne.n	8007c78 <pbuf_free+0xc8>
          mem_free(p);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f7fe fdf3 	bl	800685c <mem_free>
 8007c76:	e006      	b.n	8007c86 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007c78:	4b0b      	ldr	r3, [pc, #44]	@ (8007ca8 <pbuf_free+0xf8>)
 8007c7a:	f240 320f 	movw	r2, #783	@ 0x30f
 8007c7e:	490f      	ldr	r1, [pc, #60]	@ (8007cbc <pbuf_free+0x10c>)
 8007c80:	480b      	ldr	r0, [pc, #44]	@ (8007cb0 <pbuf_free+0x100>)
 8007c82:	f003 fc7d 	bl	800b580 <iprintf>
        }
      }
      count++;
 8007c86:	7dfb      	ldrb	r3, [r7, #23]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	607b      	str	r3, [r7, #4]
 8007c90:	e001      	b.n	8007c96 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007c92:	2300      	movs	r3, #0
 8007c94:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d19f      	bne.n	8007bdc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3718      	adds	r7, #24
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	0800c9a4 	.word	0x0800c9a4
 8007cac:	0800cb08 	.word	0x0800cb08
 8007cb0:	0800ca04 	.word	0x0800ca04
 8007cb4:	0800cb34 	.word	0x0800cb34
 8007cb8:	0800cb4c 	.word	0x0800cb4c
 8007cbc:	0800cb70 	.word	0x0800cb70

08007cc0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007ccc:	e005      	b.n	8007cda <pbuf_clen+0x1a>
    ++len;
 8007cce:	89fb      	ldrh	r3, [r7, #14]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1f6      	bne.n	8007cce <pbuf_clen+0xe>
  }
  return len;
 8007ce0:	89fb      	ldrh	r3, [r7, #14]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3714      	adds	r7, #20
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
	...

08007cf0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d010      	beq.n	8007d20 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	7b9b      	ldrb	r3, [r3, #14]
 8007d02:	3301      	adds	r3, #1
 8007d04:	b2da      	uxtb	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	7b9b      	ldrb	r3, [r3, #14]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d106      	bne.n	8007d20 <pbuf_ref+0x30>
 8007d12:	4b05      	ldr	r3, [pc, #20]	@ (8007d28 <pbuf_ref+0x38>)
 8007d14:	f240 3242 	movw	r2, #834	@ 0x342
 8007d18:	4904      	ldr	r1, [pc, #16]	@ (8007d2c <pbuf_ref+0x3c>)
 8007d1a:	4805      	ldr	r0, [pc, #20]	@ (8007d30 <pbuf_ref+0x40>)
 8007d1c:	f003 fc30 	bl	800b580 <iprintf>
  }
}
 8007d20:	bf00      	nop
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	0800c9a4 	.word	0x0800c9a4
 8007d2c:	0800cb84 	.word	0x0800cb84
 8007d30:	0800ca04 	.word	0x0800ca04

08007d34 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d002      	beq.n	8007d4a <pbuf_cat+0x16>
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d107      	bne.n	8007d5a <pbuf_cat+0x26>
 8007d4a:	4b20      	ldr	r3, [pc, #128]	@ (8007dcc <pbuf_cat+0x98>)
 8007d4c:	f240 3259 	movw	r2, #857	@ 0x359
 8007d50:	491f      	ldr	r1, [pc, #124]	@ (8007dd0 <pbuf_cat+0x9c>)
 8007d52:	4820      	ldr	r0, [pc, #128]	@ (8007dd4 <pbuf_cat+0xa0>)
 8007d54:	f003 fc14 	bl	800b580 <iprintf>
 8007d58:	e034      	b.n	8007dc4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	60fb      	str	r3, [r7, #12]
 8007d5e:	e00a      	b.n	8007d76 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	891a      	ldrh	r2, [r3, #8]
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	891b      	ldrh	r3, [r3, #8]
 8007d68:	4413      	add	r3, r2
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	60fb      	str	r3, [r7, #12]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1f0      	bne.n	8007d60 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	891a      	ldrh	r2, [r3, #8]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	895b      	ldrh	r3, [r3, #10]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d006      	beq.n	8007d98 <pbuf_cat+0x64>
 8007d8a:	4b10      	ldr	r3, [pc, #64]	@ (8007dcc <pbuf_cat+0x98>)
 8007d8c:	f240 3262 	movw	r2, #866	@ 0x362
 8007d90:	4911      	ldr	r1, [pc, #68]	@ (8007dd8 <pbuf_cat+0xa4>)
 8007d92:	4810      	ldr	r0, [pc, #64]	@ (8007dd4 <pbuf_cat+0xa0>)
 8007d94:	f003 fbf4 	bl	800b580 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d006      	beq.n	8007dae <pbuf_cat+0x7a>
 8007da0:	4b0a      	ldr	r3, [pc, #40]	@ (8007dcc <pbuf_cat+0x98>)
 8007da2:	f240 3263 	movw	r2, #867	@ 0x363
 8007da6:	490d      	ldr	r1, [pc, #52]	@ (8007ddc <pbuf_cat+0xa8>)
 8007da8:	480a      	ldr	r0, [pc, #40]	@ (8007dd4 <pbuf_cat+0xa0>)
 8007daa:	f003 fbe9 	bl	800b580 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	891a      	ldrh	r2, [r3, #8]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	891b      	ldrh	r3, [r3, #8]
 8007db6:	4413      	add	r3, r2
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	683a      	ldr	r2, [r7, #0]
 8007dc2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	0800c9a4 	.word	0x0800c9a4
 8007dd0:	0800cb98 	.word	0x0800cb98
 8007dd4:	0800ca04 	.word	0x0800ca04
 8007dd8:	0800cbd0 	.word	0x0800cbd0
 8007ddc:	0800cc00 	.word	0x0800cc00

08007de0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f7ff ffa1 	bl	8007d34 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8007df2:	6838      	ldr	r0, [r7, #0]
 8007df4:	f7ff ff7c 	bl	8007cf0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007df8:	bf00      	nop
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	617b      	str	r3, [r7, #20]
 8007e0e:	2300      	movs	r3, #0
 8007e10:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d008      	beq.n	8007e2a <pbuf_copy+0x2a>
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d005      	beq.n	8007e2a <pbuf_copy+0x2a>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	891a      	ldrh	r2, [r3, #8]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	891b      	ldrh	r3, [r3, #8]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d209      	bcs.n	8007e3e <pbuf_copy+0x3e>
 8007e2a:	4b57      	ldr	r3, [pc, #348]	@ (8007f88 <pbuf_copy+0x188>)
 8007e2c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8007e30:	4956      	ldr	r1, [pc, #344]	@ (8007f8c <pbuf_copy+0x18c>)
 8007e32:	4857      	ldr	r0, [pc, #348]	@ (8007f90 <pbuf_copy+0x190>)
 8007e34:	f003 fba4 	bl	800b580 <iprintf>
 8007e38:	f06f 030f 	mvn.w	r3, #15
 8007e3c:	e09f      	b.n	8007f7e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	895b      	ldrh	r3, [r3, #10]
 8007e42:	461a      	mov	r2, r3
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	1ad2      	subs	r2, r2, r3
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	895b      	ldrh	r3, [r3, #10]
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	1acb      	subs	r3, r1, r3
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d306      	bcc.n	8007e64 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	895b      	ldrh	r3, [r3, #10]
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	60fb      	str	r3, [r7, #12]
 8007e62:	e005      	b.n	8007e70 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	895b      	ldrh	r3, [r3, #10]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	1ad3      	subs	r3, r2, r3
 8007e6e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	18d0      	adds	r0, r2, r3
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	4413      	add	r3, r2
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	4619      	mov	r1, r3
 8007e84:	f003 fc69 	bl	800b75a <memcpy>
    offset_to += len;
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	4413      	add	r3, r2
 8007e96:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	895b      	ldrh	r3, [r3, #10]
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d906      	bls.n	8007eb2 <pbuf_copy+0xb2>
 8007ea4:	4b38      	ldr	r3, [pc, #224]	@ (8007f88 <pbuf_copy+0x188>)
 8007ea6:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8007eaa:	493a      	ldr	r1, [pc, #232]	@ (8007f94 <pbuf_copy+0x194>)
 8007eac:	4838      	ldr	r0, [pc, #224]	@ (8007f90 <pbuf_copy+0x190>)
 8007eae:	f003 fb67 	bl	800b580 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	895b      	ldrh	r3, [r3, #10]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d906      	bls.n	8007ecc <pbuf_copy+0xcc>
 8007ebe:	4b32      	ldr	r3, [pc, #200]	@ (8007f88 <pbuf_copy+0x188>)
 8007ec0:	f240 32da 	movw	r2, #986	@ 0x3da
 8007ec4:	4934      	ldr	r1, [pc, #208]	@ (8007f98 <pbuf_copy+0x198>)
 8007ec6:	4832      	ldr	r0, [pc, #200]	@ (8007f90 <pbuf_copy+0x190>)
 8007ec8:	f003 fb5a 	bl	800b580 <iprintf>
    if (offset_from >= p_from->len) {
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	895b      	ldrh	r3, [r3, #10]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d304      	bcc.n	8007ee2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	895b      	ldrh	r3, [r3, #10]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d114      	bne.n	8007f18 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10c      	bne.n	8007f18 <pbuf_copy+0x118>
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d009      	beq.n	8007f18 <pbuf_copy+0x118>
 8007f04:	4b20      	ldr	r3, [pc, #128]	@ (8007f88 <pbuf_copy+0x188>)
 8007f06:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8007f0a:	4924      	ldr	r1, [pc, #144]	@ (8007f9c <pbuf_copy+0x19c>)
 8007f0c:	4820      	ldr	r0, [pc, #128]	@ (8007f90 <pbuf_copy+0x190>)
 8007f0e:	f003 fb37 	bl	800b580 <iprintf>
 8007f12:	f06f 030f 	mvn.w	r3, #15
 8007f16:	e032      	b.n	8007f7e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d013      	beq.n	8007f46 <pbuf_copy+0x146>
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	895a      	ldrh	r2, [r3, #10]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	891b      	ldrh	r3, [r3, #8]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d10d      	bne.n	8007f46 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d009      	beq.n	8007f46 <pbuf_copy+0x146>
 8007f32:	4b15      	ldr	r3, [pc, #84]	@ (8007f88 <pbuf_copy+0x188>)
 8007f34:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8007f38:	4919      	ldr	r1, [pc, #100]	@ (8007fa0 <pbuf_copy+0x1a0>)
 8007f3a:	4815      	ldr	r0, [pc, #84]	@ (8007f90 <pbuf_copy+0x190>)
 8007f3c:	f003 fb20 	bl	800b580 <iprintf>
 8007f40:	f06f 0305 	mvn.w	r3, #5
 8007f44:	e01b      	b.n	8007f7e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d013      	beq.n	8007f74 <pbuf_copy+0x174>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	895a      	ldrh	r2, [r3, #10]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	891b      	ldrh	r3, [r3, #8]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d10d      	bne.n	8007f74 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d009      	beq.n	8007f74 <pbuf_copy+0x174>
 8007f60:	4b09      	ldr	r3, [pc, #36]	@ (8007f88 <pbuf_copy+0x188>)
 8007f62:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8007f66:	490e      	ldr	r1, [pc, #56]	@ (8007fa0 <pbuf_copy+0x1a0>)
 8007f68:	4809      	ldr	r0, [pc, #36]	@ (8007f90 <pbuf_copy+0x190>)
 8007f6a:	f003 fb09 	bl	800b580 <iprintf>
 8007f6e:	f06f 0305 	mvn.w	r3, #5
 8007f72:	e004      	b.n	8007f7e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f47f af61 	bne.w	8007e3e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3718      	adds	r7, #24
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	0800c9a4 	.word	0x0800c9a4
 8007f8c:	0800cc4c 	.word	0x0800cc4c
 8007f90:	0800ca04 	.word	0x0800ca04
 8007f94:	0800cc7c 	.word	0x0800cc7c
 8007f98:	0800cc94 	.word	0x0800cc94
 8007f9c:	0800ccb0 	.word	0x0800ccb0
 8007fa0:	0800ccc0 	.word	0x0800ccc0

08007fa4 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b088      	sub	sp, #32
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8007fb2:	88fb      	ldrh	r3, [r7, #6]
 8007fb4:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d109      	bne.n	8007fd4 <pbuf_take+0x30>
 8007fc0:	4b3a      	ldr	r3, [pc, #232]	@ (80080ac <pbuf_take+0x108>)
 8007fc2:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 8007fc6:	493a      	ldr	r1, [pc, #232]	@ (80080b0 <pbuf_take+0x10c>)
 8007fc8:	483a      	ldr	r0, [pc, #232]	@ (80080b4 <pbuf_take+0x110>)
 8007fca:	f003 fad9 	bl	800b580 <iprintf>
 8007fce:	f06f 030f 	mvn.w	r3, #15
 8007fd2:	e067      	b.n	80080a4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d109      	bne.n	8007fee <pbuf_take+0x4a>
 8007fda:	4b34      	ldr	r3, [pc, #208]	@ (80080ac <pbuf_take+0x108>)
 8007fdc:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 8007fe0:	4935      	ldr	r1, [pc, #212]	@ (80080b8 <pbuf_take+0x114>)
 8007fe2:	4834      	ldr	r0, [pc, #208]	@ (80080b4 <pbuf_take+0x110>)
 8007fe4:	f003 facc 	bl	800b580 <iprintf>
 8007fe8:	f06f 030f 	mvn.w	r3, #15
 8007fec:	e05a      	b.n	80080a4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	891b      	ldrh	r3, [r3, #8]
 8007ff2:	88fa      	ldrh	r2, [r7, #6]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d909      	bls.n	800800c <pbuf_take+0x68>
 8007ff8:	4b2c      	ldr	r3, [pc, #176]	@ (80080ac <pbuf_take+0x108>)
 8007ffa:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 8007ffe:	492f      	ldr	r1, [pc, #188]	@ (80080bc <pbuf_take+0x118>)
 8008000:	482c      	ldr	r0, [pc, #176]	@ (80080b4 <pbuf_take+0x110>)
 8008002:	f003 fabd 	bl	800b580 <iprintf>
 8008006:	f04f 33ff 	mov.w	r3, #4294967295
 800800a:	e04b      	b.n	80080a4 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d007      	beq.n	8008022 <pbuf_take+0x7e>
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d004      	beq.n	8008022 <pbuf_take+0x7e>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	891b      	ldrh	r3, [r3, #8]
 800801c:	88fa      	ldrh	r2, [r7, #6]
 800801e:	429a      	cmp	r2, r3
 8008020:	d902      	bls.n	8008028 <pbuf_take+0x84>
    return ERR_ARG;
 8008022:	f06f 030f 	mvn.w	r3, #15
 8008026:	e03d      	b.n	80080a4 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	61fb      	str	r3, [r7, #28]
 800802c:	e028      	b.n	8008080 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d106      	bne.n	8008042 <pbuf_take+0x9e>
 8008034:	4b1d      	ldr	r3, [pc, #116]	@ (80080ac <pbuf_take+0x108>)
 8008036:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 800803a:	4921      	ldr	r1, [pc, #132]	@ (80080c0 <pbuf_take+0x11c>)
 800803c:	481d      	ldr	r0, [pc, #116]	@ (80080b4 <pbuf_take+0x110>)
 800803e:	f003 fa9f 	bl	800b580 <iprintf>
    buf_copy_len = total_copy_len;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	895b      	ldrh	r3, [r3, #10]
 800804a:	461a      	mov	r2, r3
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	4293      	cmp	r3, r2
 8008050:	d902      	bls.n	8008058 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	895b      	ldrh	r3, [r3, #10]
 8008056:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	6858      	ldr	r0, [r3, #4]
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	4413      	add	r3, r2
 8008062:	69ba      	ldr	r2, [r7, #24]
 8008064:	4619      	mov	r1, r3
 8008066:	f003 fb78 	bl	800b75a <memcpy>
    total_copy_len -= buf_copy_len;
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	4413      	add	r3, r2
 8008078:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	61fb      	str	r3, [r7, #28]
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1d3      	bne.n	800802e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d103      	bne.n	8008094 <pbuf_take+0xf0>
 800808c:	88fb      	ldrh	r3, [r7, #6]
 800808e:	693a      	ldr	r2, [r7, #16]
 8008090:	429a      	cmp	r2, r3
 8008092:	d006      	beq.n	80080a2 <pbuf_take+0xfe>
 8008094:	4b05      	ldr	r3, [pc, #20]	@ (80080ac <pbuf_take+0x108>)
 8008096:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 800809a:	490a      	ldr	r1, [pc, #40]	@ (80080c4 <pbuf_take+0x120>)
 800809c:	4805      	ldr	r0, [pc, #20]	@ (80080b4 <pbuf_take+0x110>)
 800809e:	f003 fa6f 	bl	800b580 <iprintf>
  return ERR_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3720      	adds	r7, #32
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	0800c9a4 	.word	0x0800c9a4
 80080b0:	0800cd7c 	.word	0x0800cd7c
 80080b4:	0800ca04 	.word	0x0800ca04
 80080b8:	0800cd94 	.word	0x0800cd94
 80080bc:	0800cdb0 	.word	0x0800cdb0
 80080c0:	0800cdd0 	.word	0x0800cdd0
 80080c4:	0800cde8 	.word	0x0800cde8

080080c8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	4603      	mov	r3, r0
 80080d0:	603a      	str	r2, [r7, #0]
 80080d2:	71fb      	strb	r3, [r7, #7]
 80080d4:	460b      	mov	r3, r1
 80080d6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	8919      	ldrh	r1, [r3, #8]
 80080dc:	88ba      	ldrh	r2, [r7, #4]
 80080de:	79fb      	ldrb	r3, [r7, #7]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7ff fa83 	bl	80075ec <pbuf_alloc>
 80080e6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d101      	bne.n	80080f2 <pbuf_clone+0x2a>
    return NULL;
 80080ee:	2300      	movs	r3, #0
 80080f0:	e011      	b.n	8008116 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80080f2:	6839      	ldr	r1, [r7, #0]
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f7ff fe83 	bl	8007e00 <pbuf_copy>
 80080fa:	4603      	mov	r3, r0
 80080fc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80080fe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d006      	beq.n	8008114 <pbuf_clone+0x4c>
 8008106:	4b06      	ldr	r3, [pc, #24]	@ (8008120 <pbuf_clone+0x58>)
 8008108:	f240 5224 	movw	r2, #1316	@ 0x524
 800810c:	4905      	ldr	r1, [pc, #20]	@ (8008124 <pbuf_clone+0x5c>)
 800810e:	4806      	ldr	r0, [pc, #24]	@ (8008128 <pbuf_clone+0x60>)
 8008110:	f003 fa36 	bl	800b580 <iprintf>
  return q;
 8008114:	68fb      	ldr	r3, [r7, #12]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	0800c9a4 	.word	0x0800c9a4
 8008124:	0800ce18 	.word	0x0800ce18
 8008128:	0800ca04 	.word	0x0800ca04

0800812c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8008138:	2003      	movs	r0, #3
 800813a:	f7fe fe85 	bl	8006e48 <memp_malloc>
 800813e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d109      	bne.n	800815a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d151      	bne.n	80081f0 <sys_timeout_abs+0xc4>
 800814c:	4b2a      	ldr	r3, [pc, #168]	@ (80081f8 <sys_timeout_abs+0xcc>)
 800814e:	22be      	movs	r2, #190	@ 0xbe
 8008150:	492a      	ldr	r1, [pc, #168]	@ (80081fc <sys_timeout_abs+0xd0>)
 8008152:	482b      	ldr	r0, [pc, #172]	@ (8008200 <sys_timeout_abs+0xd4>)
 8008154:	f003 fa14 	bl	800b580 <iprintf>
    return;
 8008158:	e04a      	b.n	80081f0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	2200      	movs	r2, #0
 800815e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8008172:	4b24      	ldr	r3, [pc, #144]	@ (8008204 <sys_timeout_abs+0xd8>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d103      	bne.n	8008182 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800817a:	4a22      	ldr	r2, [pc, #136]	@ (8008204 <sys_timeout_abs+0xd8>)
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	6013      	str	r3, [r2, #0]
    return;
 8008180:	e037      	b.n	80081f2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	685a      	ldr	r2, [r3, #4]
 8008186:	4b1f      	ldr	r3, [pc, #124]	@ (8008204 <sys_timeout_abs+0xd8>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	1ad3      	subs	r3, r2, r3
 800818e:	0fdb      	lsrs	r3, r3, #31
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b00      	cmp	r3, #0
 8008198:	d007      	beq.n	80081aa <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800819a:	4b1a      	ldr	r3, [pc, #104]	@ (8008204 <sys_timeout_abs+0xd8>)
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80081a2:	4a18      	ldr	r2, [pc, #96]	@ (8008204 <sys_timeout_abs+0xd8>)
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	6013      	str	r3, [r2, #0]
 80081a8:	e023      	b.n	80081f2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80081aa:	4b16      	ldr	r3, [pc, #88]	@ (8008204 <sys_timeout_abs+0xd8>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	617b      	str	r3, [r7, #20]
 80081b0:	e01a      	b.n	80081e8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00b      	beq.n	80081d2 <sys_timeout_abs+0xa6>
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	685a      	ldr	r2, [r3, #4]
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	0fdb      	lsrs	r3, r3, #31
 80081c8:	f003 0301 	and.w	r3, r3, #1
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d007      	beq.n	80081e2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	693a      	ldr	r2, [r7, #16]
 80081de:	601a      	str	r2, [r3, #0]
        break;
 80081e0:	e007      	b.n	80081f2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	617b      	str	r3, [r7, #20]
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1e1      	bne.n	80081b2 <sys_timeout_abs+0x86>
 80081ee:	e000      	b.n	80081f2 <sys_timeout_abs+0xc6>
    return;
 80081f0:	bf00      	nop
      }
    }
  }
}
 80081f2:	3718      	adds	r7, #24
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	0800ce2c 	.word	0x0800ce2c
 80081fc:	0800ce60 	.word	0x0800ce60
 8008200:	0800cea0 	.word	0x0800cea0
 8008204:	20008388 	.word	0x20008388

08008208 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	4798      	blx	r3

  now = sys_now();
 800821a:	f7fd ffa5 	bl	8006168 <sys_now>
 800821e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	4b0f      	ldr	r3, [pc, #60]	@ (8008264 <lwip_cyclic_timer+0x5c>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4413      	add	r3, r2
 800822a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	0fdb      	lsrs	r3, r3, #31
 8008234:	f003 0301 	and.w	r3, r3, #1
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b00      	cmp	r3, #0
 800823c:	d009      	beq.n	8008252 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	4413      	add	r3, r2
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	4907      	ldr	r1, [pc, #28]	@ (8008268 <lwip_cyclic_timer+0x60>)
 800824a:	4618      	mov	r0, r3
 800824c:	f7ff ff6e 	bl	800812c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8008250:	e004      	b.n	800825c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	4904      	ldr	r1, [pc, #16]	@ (8008268 <lwip_cyclic_timer+0x60>)
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f7ff ff68 	bl	800812c <sys_timeout_abs>
}
 800825c:	bf00      	nop
 800825e:	3718      	adds	r7, #24
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	2000838c 	.word	0x2000838c
 8008268:	08008209 	.word	0x08008209

0800826c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8008272:	2300      	movs	r3, #0
 8008274:	607b      	str	r3, [r7, #4]
 8008276:	e00e      	b.n	8008296 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8008278:	4a0b      	ldr	r2, [pc, #44]	@ (80082a8 <sys_timeouts_init+0x3c>)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	00db      	lsls	r3, r3, #3
 8008284:	4a08      	ldr	r2, [pc, #32]	@ (80082a8 <sys_timeouts_init+0x3c>)
 8008286:	4413      	add	r3, r2
 8008288:	461a      	mov	r2, r3
 800828a:	4908      	ldr	r1, [pc, #32]	@ (80082ac <sys_timeouts_init+0x40>)
 800828c:	f000 f810 	bl	80082b0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	3301      	adds	r3, #1
 8008294:	607b      	str	r3, [r7, #4]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d9ed      	bls.n	8008278 <sys_timeouts_init+0xc>
  }
}
 800829c:	bf00      	nop
 800829e:	bf00      	nop
 80082a0:	3708      	adds	r7, #8
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	0800d9c0 	.word	0x0800d9c0
 80082ac:	08008209 	.word	0x08008209

080082b0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082c2:	d306      	bcc.n	80082d2 <sys_timeout+0x22>
 80082c4:	4b0a      	ldr	r3, [pc, #40]	@ (80082f0 <sys_timeout+0x40>)
 80082c6:	f240 1229 	movw	r2, #297	@ 0x129
 80082ca:	490a      	ldr	r1, [pc, #40]	@ (80082f4 <sys_timeout+0x44>)
 80082cc:	480a      	ldr	r0, [pc, #40]	@ (80082f8 <sys_timeout+0x48>)
 80082ce:	f003 f957 	bl	800b580 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80082d2:	f7fd ff49 	bl	8006168 <sys_now>
 80082d6:	4602      	mov	r2, r0
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	4413      	add	r3, r2
 80082dc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	68b9      	ldr	r1, [r7, #8]
 80082e2:	6978      	ldr	r0, [r7, #20]
 80082e4:	f7ff ff22 	bl	800812c <sys_timeout_abs>
#endif
}
 80082e8:	bf00      	nop
 80082ea:	3718      	adds	r7, #24
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	0800ce2c 	.word	0x0800ce2c
 80082f4:	0800cec8 	.word	0x0800cec8
 80082f8:	0800cea0 	.word	0x0800cea0

080082fc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8008302:	f7fd ff31 	bl	8006168 <sys_now>
 8008306:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8008308:	4b17      	ldr	r3, [pc, #92]	@ (8008368 <sys_check_timeouts+0x6c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d022      	beq.n	800835a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	0fdb      	lsrs	r3, r3, #31
 800831e:	f003 0301 	and.w	r3, r3, #1
 8008322:	b2db      	uxtb	r3, r3
 8008324:	2b00      	cmp	r3, #0
 8008326:	d11a      	bne.n	800835e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a0e      	ldr	r2, [pc, #56]	@ (8008368 <sys_check_timeouts+0x6c>)
 800832e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	4a0a      	ldr	r2, [pc, #40]	@ (800836c <sys_check_timeouts+0x70>)
 8008342:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8008344:	68b9      	ldr	r1, [r7, #8]
 8008346:	2003      	movs	r0, #3
 8008348:	f7fe fdee 	bl	8006f28 <memp_free>
    if (handler != NULL) {
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d0da      	beq.n	8008308 <sys_check_timeouts+0xc>
      handler(arg);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6838      	ldr	r0, [r7, #0]
 8008356:	4798      	blx	r3
  do {
 8008358:	e7d6      	b.n	8008308 <sys_check_timeouts+0xc>
      return;
 800835a:	bf00      	nop
 800835c:	e000      	b.n	8008360 <sys_check_timeouts+0x64>
      return;
 800835e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	20008388 	.word	0x20008388
 800836c:	2000838c 	.word	0x2000838c

08008370 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008374:	f003 f804 	bl	800b380 <rand>
 8008378:	4603      	mov	r3, r0
 800837a:	b29b      	uxth	r3, r3
 800837c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008380:	b29b      	uxth	r3, r3
 8008382:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8008386:	b29a      	uxth	r2, r3
 8008388:	4b01      	ldr	r3, [pc, #4]	@ (8008390 <udp_init+0x20>)
 800838a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800838c:	bf00      	nop
 800838e:	bd80      	pop	{r7, pc}
 8008390:	20000020 	.word	0x20000020

08008394 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800839a:	2300      	movs	r3, #0
 800839c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800839e:	4b17      	ldr	r3, [pc, #92]	@ (80083fc <udp_new_port+0x68>)
 80083a0:	881b      	ldrh	r3, [r3, #0]
 80083a2:	1c5a      	adds	r2, r3, #1
 80083a4:	b291      	uxth	r1, r2
 80083a6:	4a15      	ldr	r2, [pc, #84]	@ (80083fc <udp_new_port+0x68>)
 80083a8:	8011      	strh	r1, [r2, #0]
 80083aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d103      	bne.n	80083ba <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80083b2:	4b12      	ldr	r3, [pc, #72]	@ (80083fc <udp_new_port+0x68>)
 80083b4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80083b8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80083ba:	4b11      	ldr	r3, [pc, #68]	@ (8008400 <udp_new_port+0x6c>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	603b      	str	r3, [r7, #0]
 80083c0:	e011      	b.n	80083e6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	8a5a      	ldrh	r2, [r3, #18]
 80083c6:	4b0d      	ldr	r3, [pc, #52]	@ (80083fc <udp_new_port+0x68>)
 80083c8:	881b      	ldrh	r3, [r3, #0]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d108      	bne.n	80083e0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80083ce:	88fb      	ldrh	r3, [r7, #6]
 80083d0:	3301      	adds	r3, #1
 80083d2:	80fb      	strh	r3, [r7, #6]
 80083d4:	88fb      	ldrh	r3, [r7, #6]
 80083d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80083da:	d3e0      	bcc.n	800839e <udp_new_port+0xa>
        return 0;
 80083dc:	2300      	movs	r3, #0
 80083de:	e007      	b.n	80083f0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	603b      	str	r3, [r7, #0]
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1ea      	bne.n	80083c2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80083ec:	4b03      	ldr	r3, [pc, #12]	@ (80083fc <udp_new_port+0x68>)
 80083ee:	881b      	ldrh	r3, [r3, #0]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	20000020 	.word	0x20000020
 8008400:	20008390 	.word	0x20008390

08008404 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	4613      	mov	r3, r2
 8008410:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d105      	bne.n	8008424 <udp_input_local_match+0x20>
 8008418:	4b27      	ldr	r3, [pc, #156]	@ (80084b8 <udp_input_local_match+0xb4>)
 800841a:	2287      	movs	r2, #135	@ 0x87
 800841c:	4927      	ldr	r1, [pc, #156]	@ (80084bc <udp_input_local_match+0xb8>)
 800841e:	4828      	ldr	r0, [pc, #160]	@ (80084c0 <udp_input_local_match+0xbc>)
 8008420:	f003 f8ae 	bl	800b580 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d105      	bne.n	8008436 <udp_input_local_match+0x32>
 800842a:	4b23      	ldr	r3, [pc, #140]	@ (80084b8 <udp_input_local_match+0xb4>)
 800842c:	2288      	movs	r2, #136	@ 0x88
 800842e:	4925      	ldr	r1, [pc, #148]	@ (80084c4 <udp_input_local_match+0xc0>)
 8008430:	4823      	ldr	r0, [pc, #140]	@ (80084c0 <udp_input_local_match+0xbc>)
 8008432:	f003 f8a5 	bl	800b580 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	7a1b      	ldrb	r3, [r3, #8]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00b      	beq.n	8008456 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	7a1a      	ldrb	r2, [r3, #8]
 8008442:	4b21      	ldr	r3, [pc, #132]	@ (80084c8 <udp_input_local_match+0xc4>)
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800844a:	3301      	adds	r3, #1
 800844c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800844e:	429a      	cmp	r2, r3
 8008450:	d001      	beq.n	8008456 <udp_input_local_match+0x52>
    return 0;
 8008452:	2300      	movs	r3, #0
 8008454:	e02b      	b.n	80084ae <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8008456:	79fb      	ldrb	r3, [r7, #7]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d018      	beq.n	800848e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d013      	beq.n	800848a <udp_input_local_match+0x86>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00f      	beq.n	800848a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800846a:	4b17      	ldr	r3, [pc, #92]	@ (80084c8 <udp_input_local_match+0xc4>)
 800846c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800846e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008472:	d00a      	beq.n	800848a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	4b13      	ldr	r3, [pc, #76]	@ (80084c8 <udp_input_local_match+0xc4>)
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	405a      	eors	r2, r3
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	3308      	adds	r3, #8
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8008486:	2b00      	cmp	r3, #0
 8008488:	d110      	bne.n	80084ac <udp_input_local_match+0xa8>
          return 1;
 800848a:	2301      	movs	r3, #1
 800848c:	e00f      	b.n	80084ae <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d009      	beq.n	80084a8 <udp_input_local_match+0xa4>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d005      	beq.n	80084a8 <udp_input_local_match+0xa4>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	4b09      	ldr	r3, [pc, #36]	@ (80084c8 <udp_input_local_match+0xc4>)
 80084a2:	695b      	ldr	r3, [r3, #20]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d101      	bne.n	80084ac <udp_input_local_match+0xa8>
        return 1;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e000      	b.n	80084ae <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	0800cf14 	.word	0x0800cf14
 80084bc:	0800cf44 	.word	0x0800cf44
 80084c0:	0800cf68 	.word	0x0800cf68
 80084c4:	0800cf90 	.word	0x0800cf90
 80084c8:	2000532c 	.word	0x2000532c

080084cc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80084cc:	b590      	push	{r4, r7, lr}
 80084ce:	b08d      	sub	sp, #52	@ 0x34
 80084d0:	af02      	add	r7, sp, #8
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80084d6:	2300      	movs	r3, #0
 80084d8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d105      	bne.n	80084ec <udp_input+0x20>
 80084e0:	4b7c      	ldr	r3, [pc, #496]	@ (80086d4 <udp_input+0x208>)
 80084e2:	22cf      	movs	r2, #207	@ 0xcf
 80084e4:	497c      	ldr	r1, [pc, #496]	@ (80086d8 <udp_input+0x20c>)
 80084e6:	487d      	ldr	r0, [pc, #500]	@ (80086dc <udp_input+0x210>)
 80084e8:	f003 f84a 	bl	800b580 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d105      	bne.n	80084fe <udp_input+0x32>
 80084f2:	4b78      	ldr	r3, [pc, #480]	@ (80086d4 <udp_input+0x208>)
 80084f4:	22d0      	movs	r2, #208	@ 0xd0
 80084f6:	497a      	ldr	r1, [pc, #488]	@ (80086e0 <udp_input+0x214>)
 80084f8:	4878      	ldr	r0, [pc, #480]	@ (80086dc <udp_input+0x210>)
 80084fa:	f003 f841 	bl	800b580 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	895b      	ldrh	r3, [r3, #10]
 8008502:	2b07      	cmp	r3, #7
 8008504:	d803      	bhi.n	800850e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7ff fb52 	bl	8007bb0 <pbuf_free>
    goto end;
 800850c:	e0de      	b.n	80086cc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8008514:	4b73      	ldr	r3, [pc, #460]	@ (80086e4 <udp_input+0x218>)
 8008516:	695b      	ldr	r3, [r3, #20]
 8008518:	4a72      	ldr	r2, [pc, #456]	@ (80086e4 <udp_input+0x218>)
 800851a:	6812      	ldr	r2, [r2, #0]
 800851c:	4611      	mov	r1, r2
 800851e:	4618      	mov	r0, r3
 8008520:	f001 ffd8 	bl	800a4d4 <ip4_addr_isbroadcast_u32>
 8008524:	4603      	mov	r3, r0
 8008526:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	881b      	ldrh	r3, [r3, #0]
 800852c:	b29b      	uxth	r3, r3
 800852e:	4618      	mov	r0, r3
 8008530:	f7fe f82e 	bl	8006590 <lwip_htons>
 8008534:	4603      	mov	r3, r0
 8008536:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	885b      	ldrh	r3, [r3, #2]
 800853c:	b29b      	uxth	r3, r3
 800853e:	4618      	mov	r0, r3
 8008540:	f7fe f826 	bl	8006590 <lwip_htons>
 8008544:	4603      	mov	r3, r0
 8008546:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8008548:	2300      	movs	r3, #0
 800854a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800854c:	2300      	movs	r3, #0
 800854e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8008550:	2300      	movs	r3, #0
 8008552:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008554:	4b64      	ldr	r3, [pc, #400]	@ (80086e8 <udp_input+0x21c>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	627b      	str	r3, [r7, #36]	@ 0x24
 800855a:	e054      	b.n	8008606 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800855c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855e:	8a5b      	ldrh	r3, [r3, #18]
 8008560:	89fa      	ldrh	r2, [r7, #14]
 8008562:	429a      	cmp	r2, r3
 8008564:	d14a      	bne.n	80085fc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8008566:	7cfb      	ldrb	r3, [r7, #19]
 8008568:	461a      	mov	r2, r3
 800856a:	6839      	ldr	r1, [r7, #0]
 800856c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800856e:	f7ff ff49 	bl	8008404 <udp_input_local_match>
 8008572:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8008574:	2b00      	cmp	r3, #0
 8008576:	d041      	beq.n	80085fc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8008578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800857a:	7c1b      	ldrb	r3, [r3, #16]
 800857c:	f003 0304 	and.w	r3, r3, #4
 8008580:	2b00      	cmp	r3, #0
 8008582:	d11d      	bne.n	80085c0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d102      	bne.n	8008590 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800858a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800858c:	61fb      	str	r3, [r7, #28]
 800858e:	e017      	b.n	80085c0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8008590:	7cfb      	ldrb	r3, [r7, #19]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d014      	beq.n	80085c0 <udp_input+0xf4>
 8008596:	4b53      	ldr	r3, [pc, #332]	@ (80086e4 <udp_input+0x218>)
 8008598:	695b      	ldr	r3, [r3, #20]
 800859a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859e:	d10f      	bne.n	80085c0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	3304      	adds	r3, #4
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d008      	beq.n	80085c0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80085ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	3304      	adds	r3, #4
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d101      	bne.n	80085c0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80085bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085be:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80085c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c2:	8a9b      	ldrh	r3, [r3, #20]
 80085c4:	8a3a      	ldrh	r2, [r7, #16]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d118      	bne.n	80085fc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80085ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085cc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d005      	beq.n	80085de <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80085d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d4:	685a      	ldr	r2, [r3, #4]
 80085d6:	4b43      	ldr	r3, [pc, #268]	@ (80086e4 <udp_input+0x218>)
 80085d8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80085da:	429a      	cmp	r2, r3
 80085dc:	d10e      	bne.n	80085fc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80085de:	6a3b      	ldr	r3, [r7, #32]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d014      	beq.n	800860e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80085e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e6:	68da      	ldr	r2, [r3, #12]
 80085e8:	6a3b      	ldr	r3, [r7, #32]
 80085ea:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80085ec:	4b3e      	ldr	r3, [pc, #248]	@ (80086e8 <udp_input+0x21c>)
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80085f4:	4a3c      	ldr	r2, [pc, #240]	@ (80086e8 <udp_input+0x21c>)
 80085f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80085fa:	e008      	b.n	800860e <udp_input+0x142>
      }
    }

    prev = pcb;
 80085fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fe:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	627b      	str	r3, [r7, #36]	@ 0x24
 8008606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1a7      	bne.n	800855c <udp_input+0x90>
 800860c:	e000      	b.n	8008610 <udp_input+0x144>
        break;
 800860e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8008610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008612:	2b00      	cmp	r3, #0
 8008614:	d101      	bne.n	800861a <udp_input+0x14e>
    pcb = uncon_pcb;
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800861a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800861c:	2b00      	cmp	r3, #0
 800861e:	d002      	beq.n	8008626 <udp_input+0x15a>
    for_us = 1;
 8008620:	2301      	movs	r3, #1
 8008622:	76fb      	strb	r3, [r7, #27]
 8008624:	e00a      	b.n	800863c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	3304      	adds	r3, #4
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	4b2d      	ldr	r3, [pc, #180]	@ (80086e4 <udp_input+0x218>)
 800862e:	695b      	ldr	r3, [r3, #20]
 8008630:	429a      	cmp	r2, r3
 8008632:	bf0c      	ite	eq
 8008634:	2301      	moveq	r3, #1
 8008636:	2300      	movne	r3, #0
 8008638:	b2db      	uxtb	r3, r3
 800863a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800863c:	7efb      	ldrb	r3, [r7, #27]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d041      	beq.n	80086c6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8008642:	2108      	movs	r1, #8
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f7ff fa2d 	bl	8007aa4 <pbuf_remove_header>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00a      	beq.n	8008666 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8008650:	4b20      	ldr	r3, [pc, #128]	@ (80086d4 <udp_input+0x208>)
 8008652:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8008656:	4925      	ldr	r1, [pc, #148]	@ (80086ec <udp_input+0x220>)
 8008658:	4820      	ldr	r0, [pc, #128]	@ (80086dc <udp_input+0x210>)
 800865a:	f002 ff91 	bl	800b580 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f7ff faa6 	bl	8007bb0 <pbuf_free>
      goto end;
 8008664:	e032      	b.n	80086cc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8008666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008668:	2b00      	cmp	r3, #0
 800866a:	d012      	beq.n	8008692 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800866c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866e:	699b      	ldr	r3, [r3, #24]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00a      	beq.n	800868a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8008674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008676:	699c      	ldr	r4, [r3, #24]
 8008678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867a:	69d8      	ldr	r0, [r3, #28]
 800867c:	8a3b      	ldrh	r3, [r7, #16]
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	4b1b      	ldr	r3, [pc, #108]	@ (80086f0 <udp_input+0x224>)
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008686:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8008688:	e021      	b.n	80086ce <udp_input+0x202>
        pbuf_free(p);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7ff fa90 	bl	8007bb0 <pbuf_free>
        goto end;
 8008690:	e01c      	b.n	80086cc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8008692:	7cfb      	ldrb	r3, [r7, #19]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d112      	bne.n	80086be <udp_input+0x1f2>
 8008698:	4b12      	ldr	r3, [pc, #72]	@ (80086e4 <udp_input+0x218>)
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80086a0:	2be0      	cmp	r3, #224	@ 0xe0
 80086a2:	d00c      	beq.n	80086be <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80086a4:	4b0f      	ldr	r3, [pc, #60]	@ (80086e4 <udp_input+0x218>)
 80086a6:	899b      	ldrh	r3, [r3, #12]
 80086a8:	3308      	adds	r3, #8
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	b21b      	sxth	r3, r3
 80086ae:	4619      	mov	r1, r3
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7ff fa6a 	bl	8007b8a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80086b6:	2103      	movs	r1, #3
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f001 fbf5 	bl	8009ea8 <icmp_dest_unreach>
      pbuf_free(p);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7ff fa76 	bl	8007bb0 <pbuf_free>
  return;
 80086c4:	e003      	b.n	80086ce <udp_input+0x202>
    pbuf_free(p);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f7ff fa72 	bl	8007bb0 <pbuf_free>
  return;
 80086cc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80086ce:	372c      	adds	r7, #44	@ 0x2c
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd90      	pop	{r4, r7, pc}
 80086d4:	0800cf14 	.word	0x0800cf14
 80086d8:	0800cfb8 	.word	0x0800cfb8
 80086dc:	0800cf68 	.word	0x0800cf68
 80086e0:	0800cfd0 	.word	0x0800cfd0
 80086e4:	2000532c 	.word	0x2000532c
 80086e8:	20008390 	.word	0x20008390
 80086ec:	0800cfec 	.word	0x0800cfec
 80086f0:	2000533c 	.word	0x2000533c

080086f4 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d109      	bne.n	8008718 <udp_send+0x24>
 8008704:	4b11      	ldr	r3, [pc, #68]	@ (800874c <udp_send+0x58>)
 8008706:	f240 12d5 	movw	r2, #469	@ 0x1d5
 800870a:	4911      	ldr	r1, [pc, #68]	@ (8008750 <udp_send+0x5c>)
 800870c:	4811      	ldr	r0, [pc, #68]	@ (8008754 <udp_send+0x60>)
 800870e:	f002 ff37 	bl	800b580 <iprintf>
 8008712:	f06f 030f 	mvn.w	r3, #15
 8008716:	e015      	b.n	8008744 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d109      	bne.n	8008732 <udp_send+0x3e>
 800871e:	4b0b      	ldr	r3, [pc, #44]	@ (800874c <udp_send+0x58>)
 8008720:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8008724:	490c      	ldr	r1, [pc, #48]	@ (8008758 <udp_send+0x64>)
 8008726:	480b      	ldr	r0, [pc, #44]	@ (8008754 <udp_send+0x60>)
 8008728:	f002 ff2a 	bl	800b580 <iprintf>
 800872c:	f06f 030f 	mvn.w	r3, #15
 8008730:	e008      	b.n	8008744 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	1d1a      	adds	r2, r3, #4
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	8a9b      	ldrh	r3, [r3, #20]
 800873a:	6839      	ldr	r1, [r7, #0]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f80d 	bl	800875c <udp_sendto>
 8008742:	4603      	mov	r3, r0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	0800cf14 	.word	0x0800cf14
 8008750:	0800d008 	.word	0x0800d008
 8008754:	0800cf68 	.word	0x0800cf68
 8008758:	0800d020 	.word	0x0800d020

0800875c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b088      	sub	sp, #32
 8008760:	af02      	add	r7, sp, #8
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	607a      	str	r2, [r7, #4]
 8008768:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d109      	bne.n	8008784 <udp_sendto+0x28>
 8008770:	4b23      	ldr	r3, [pc, #140]	@ (8008800 <udp_sendto+0xa4>)
 8008772:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8008776:	4923      	ldr	r1, [pc, #140]	@ (8008804 <udp_sendto+0xa8>)
 8008778:	4823      	ldr	r0, [pc, #140]	@ (8008808 <udp_sendto+0xac>)
 800877a:	f002 ff01 	bl	800b580 <iprintf>
 800877e:	f06f 030f 	mvn.w	r3, #15
 8008782:	e038      	b.n	80087f6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d109      	bne.n	800879e <udp_sendto+0x42>
 800878a:	4b1d      	ldr	r3, [pc, #116]	@ (8008800 <udp_sendto+0xa4>)
 800878c:	f240 2219 	movw	r2, #537	@ 0x219
 8008790:	491e      	ldr	r1, [pc, #120]	@ (800880c <udp_sendto+0xb0>)
 8008792:	481d      	ldr	r0, [pc, #116]	@ (8008808 <udp_sendto+0xac>)
 8008794:	f002 fef4 	bl	800b580 <iprintf>
 8008798:	f06f 030f 	mvn.w	r3, #15
 800879c:	e02b      	b.n	80087f6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d109      	bne.n	80087b8 <udp_sendto+0x5c>
 80087a4:	4b16      	ldr	r3, [pc, #88]	@ (8008800 <udp_sendto+0xa4>)
 80087a6:	f240 221a 	movw	r2, #538	@ 0x21a
 80087aa:	4919      	ldr	r1, [pc, #100]	@ (8008810 <udp_sendto+0xb4>)
 80087ac:	4816      	ldr	r0, [pc, #88]	@ (8008808 <udp_sendto+0xac>)
 80087ae:	f002 fee7 	bl	800b580 <iprintf>
 80087b2:	f06f 030f 	mvn.w	r3, #15
 80087b6:	e01e      	b.n	80087f6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	7a1b      	ldrb	r3, [r3, #8]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d006      	beq.n	80087ce <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	7a1b      	ldrb	r3, [r3, #8]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7fe fec1 	bl	800754c <netif_get_by_index>
 80087ca:	6178      	str	r0, [r7, #20]
 80087cc:	e003      	b.n	80087d6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f001 fbf4 	bl	8009fbc <ip4_route>
 80087d4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d102      	bne.n	80087e2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80087dc:	f06f 0303 	mvn.w	r3, #3
 80087e0:	e009      	b.n	80087f6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80087e2:	887a      	ldrh	r2, [r7, #2]
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	4613      	mov	r3, r2
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	68b9      	ldr	r1, [r7, #8]
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f000 f810 	bl	8008814 <udp_sendto_if>
 80087f4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3718      	adds	r7, #24
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	0800cf14 	.word	0x0800cf14
 8008804:	0800d038 	.word	0x0800d038
 8008808:	0800cf68 	.word	0x0800cf68
 800880c:	0800d050 	.word	0x0800d050
 8008810:	0800d06c 	.word	0x0800d06c

08008814 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b088      	sub	sp, #32
 8008818:	af02      	add	r7, sp, #8
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
 8008820:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d109      	bne.n	800883c <udp_sendto_if+0x28>
 8008828:	4b2e      	ldr	r3, [pc, #184]	@ (80088e4 <udp_sendto_if+0xd0>)
 800882a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800882e:	492e      	ldr	r1, [pc, #184]	@ (80088e8 <udp_sendto_if+0xd4>)
 8008830:	482e      	ldr	r0, [pc, #184]	@ (80088ec <udp_sendto_if+0xd8>)
 8008832:	f002 fea5 	bl	800b580 <iprintf>
 8008836:	f06f 030f 	mvn.w	r3, #15
 800883a:	e04f      	b.n	80088dc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d109      	bne.n	8008856 <udp_sendto_if+0x42>
 8008842:	4b28      	ldr	r3, [pc, #160]	@ (80088e4 <udp_sendto_if+0xd0>)
 8008844:	f240 2281 	movw	r2, #641	@ 0x281
 8008848:	4929      	ldr	r1, [pc, #164]	@ (80088f0 <udp_sendto_if+0xdc>)
 800884a:	4828      	ldr	r0, [pc, #160]	@ (80088ec <udp_sendto_if+0xd8>)
 800884c:	f002 fe98 	bl	800b580 <iprintf>
 8008850:	f06f 030f 	mvn.w	r3, #15
 8008854:	e042      	b.n	80088dc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d109      	bne.n	8008870 <udp_sendto_if+0x5c>
 800885c:	4b21      	ldr	r3, [pc, #132]	@ (80088e4 <udp_sendto_if+0xd0>)
 800885e:	f240 2282 	movw	r2, #642	@ 0x282
 8008862:	4924      	ldr	r1, [pc, #144]	@ (80088f4 <udp_sendto_if+0xe0>)
 8008864:	4821      	ldr	r0, [pc, #132]	@ (80088ec <udp_sendto_if+0xd8>)
 8008866:	f002 fe8b 	bl	800b580 <iprintf>
 800886a:	f06f 030f 	mvn.w	r3, #15
 800886e:	e035      	b.n	80088dc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8008870:	6a3b      	ldr	r3, [r7, #32]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d109      	bne.n	800888a <udp_sendto_if+0x76>
 8008876:	4b1b      	ldr	r3, [pc, #108]	@ (80088e4 <udp_sendto_if+0xd0>)
 8008878:	f240 2283 	movw	r2, #643	@ 0x283
 800887c:	491e      	ldr	r1, [pc, #120]	@ (80088f8 <udp_sendto_if+0xe4>)
 800887e:	481b      	ldr	r0, [pc, #108]	@ (80088ec <udp_sendto_if+0xd8>)
 8008880:	f002 fe7e 	bl	800b580 <iprintf>
 8008884:	f06f 030f 	mvn.w	r3, #15
 8008888:	e028      	b.n	80088dc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d009      	beq.n	80088a4 <udp_sendto_if+0x90>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d005      	beq.n	80088a4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80088a0:	2be0      	cmp	r3, #224	@ 0xe0
 80088a2:	d103      	bne.n	80088ac <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	3304      	adds	r3, #4
 80088a8:	617b      	str	r3, [r7, #20]
 80088aa:	e00b      	b.n	80088c4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	6a3b      	ldr	r3, [r7, #32]
 80088b2:	3304      	adds	r3, #4
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d002      	beq.n	80088c0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80088ba:	f06f 0303 	mvn.w	r3, #3
 80088be:	e00d      	b.n	80088dc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80088c4:	887a      	ldrh	r2, [r7, #2]
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	9301      	str	r3, [sp, #4]
 80088ca:	6a3b      	ldr	r3, [r7, #32]
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	4613      	mov	r3, r2
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	68b9      	ldr	r1, [r7, #8]
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f000 f811 	bl	80088fc <udp_sendto_if_src>
 80088da:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3718      	adds	r7, #24
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	0800cf14 	.word	0x0800cf14
 80088e8:	0800d088 	.word	0x0800d088
 80088ec:	0800cf68 	.word	0x0800cf68
 80088f0:	0800d0a4 	.word	0x0800d0a4
 80088f4:	0800d0c0 	.word	0x0800d0c0
 80088f8:	0800d0e0 	.word	0x0800d0e0

080088fc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b08c      	sub	sp, #48	@ 0x30
 8008900:	af04      	add	r7, sp, #16
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
 8008908:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d109      	bne.n	8008924 <udp_sendto_if_src+0x28>
 8008910:	4b65      	ldr	r3, [pc, #404]	@ (8008aa8 <udp_sendto_if_src+0x1ac>)
 8008912:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8008916:	4965      	ldr	r1, [pc, #404]	@ (8008aac <udp_sendto_if_src+0x1b0>)
 8008918:	4865      	ldr	r0, [pc, #404]	@ (8008ab0 <udp_sendto_if_src+0x1b4>)
 800891a:	f002 fe31 	bl	800b580 <iprintf>
 800891e:	f06f 030f 	mvn.w	r3, #15
 8008922:	e0bc      	b.n	8008a9e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d109      	bne.n	800893e <udp_sendto_if_src+0x42>
 800892a:	4b5f      	ldr	r3, [pc, #380]	@ (8008aa8 <udp_sendto_if_src+0x1ac>)
 800892c:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8008930:	4960      	ldr	r1, [pc, #384]	@ (8008ab4 <udp_sendto_if_src+0x1b8>)
 8008932:	485f      	ldr	r0, [pc, #380]	@ (8008ab0 <udp_sendto_if_src+0x1b4>)
 8008934:	f002 fe24 	bl	800b580 <iprintf>
 8008938:	f06f 030f 	mvn.w	r3, #15
 800893c:	e0af      	b.n	8008a9e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d109      	bne.n	8008958 <udp_sendto_if_src+0x5c>
 8008944:	4b58      	ldr	r3, [pc, #352]	@ (8008aa8 <udp_sendto_if_src+0x1ac>)
 8008946:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800894a:	495b      	ldr	r1, [pc, #364]	@ (8008ab8 <udp_sendto_if_src+0x1bc>)
 800894c:	4858      	ldr	r0, [pc, #352]	@ (8008ab0 <udp_sendto_if_src+0x1b4>)
 800894e:	f002 fe17 	bl	800b580 <iprintf>
 8008952:	f06f 030f 	mvn.w	r3, #15
 8008956:	e0a2      	b.n	8008a9e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8008958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800895a:	2b00      	cmp	r3, #0
 800895c:	d109      	bne.n	8008972 <udp_sendto_if_src+0x76>
 800895e:	4b52      	ldr	r3, [pc, #328]	@ (8008aa8 <udp_sendto_if_src+0x1ac>)
 8008960:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8008964:	4955      	ldr	r1, [pc, #340]	@ (8008abc <udp_sendto_if_src+0x1c0>)
 8008966:	4852      	ldr	r0, [pc, #328]	@ (8008ab0 <udp_sendto_if_src+0x1b4>)
 8008968:	f002 fe0a 	bl	800b580 <iprintf>
 800896c:	f06f 030f 	mvn.w	r3, #15
 8008970:	e095      	b.n	8008a9e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8008972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008974:	2b00      	cmp	r3, #0
 8008976:	d109      	bne.n	800898c <udp_sendto_if_src+0x90>
 8008978:	4b4b      	ldr	r3, [pc, #300]	@ (8008aa8 <udp_sendto_if_src+0x1ac>)
 800897a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800897e:	4950      	ldr	r1, [pc, #320]	@ (8008ac0 <udp_sendto_if_src+0x1c4>)
 8008980:	484b      	ldr	r0, [pc, #300]	@ (8008ab0 <udp_sendto_if_src+0x1b4>)
 8008982:	f002 fdfd 	bl	800b580 <iprintf>
 8008986:	f06f 030f 	mvn.w	r3, #15
 800898a:	e088      	b.n	8008a9e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	8a5b      	ldrh	r3, [r3, #18]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10f      	bne.n	80089b4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8008994:	68f9      	ldr	r1, [r7, #12]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	8a5b      	ldrh	r3, [r3, #18]
 800899a:	461a      	mov	r2, r3
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f000 f893 	bl	8008ac8 <udp_bind>
 80089a2:	4603      	mov	r3, r0
 80089a4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80089a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d002      	beq.n	80089b4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80089ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80089b2:	e074      	b.n	8008a9e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	891b      	ldrh	r3, [r3, #8]
 80089b8:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80089bc:	4293      	cmp	r3, r2
 80089be:	d902      	bls.n	80089c6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80089c0:	f04f 33ff 	mov.w	r3, #4294967295
 80089c4:	e06b      	b.n	8008a9e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80089c6:	2108      	movs	r1, #8
 80089c8:	68b8      	ldr	r0, [r7, #8]
 80089ca:	f7ff f85b 	bl	8007a84 <pbuf_add_header>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d015      	beq.n	8008a00 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80089d4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80089d8:	2108      	movs	r1, #8
 80089da:	2022      	movs	r0, #34	@ 0x22
 80089dc:	f7fe fe06 	bl	80075ec <pbuf_alloc>
 80089e0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d102      	bne.n	80089ee <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80089e8:	f04f 33ff 	mov.w	r3, #4294967295
 80089ec:	e057      	b.n	8008a9e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	891b      	ldrh	r3, [r3, #8]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d006      	beq.n	8008a04 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80089f6:	68b9      	ldr	r1, [r7, #8]
 80089f8:	69f8      	ldr	r0, [r7, #28]
 80089fa:	f7ff f9f1 	bl	8007de0 <pbuf_chain>
 80089fe:	e001      	b.n	8008a04 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	895b      	ldrh	r3, [r3, #10]
 8008a08:	2b07      	cmp	r3, #7
 8008a0a:	d806      	bhi.n	8008a1a <udp_sendto_if_src+0x11e>
 8008a0c:	4b26      	ldr	r3, [pc, #152]	@ (8008aa8 <udp_sendto_if_src+0x1ac>)
 8008a0e:	f240 320d 	movw	r2, #781	@ 0x30d
 8008a12:	492c      	ldr	r1, [pc, #176]	@ (8008ac4 <udp_sendto_if_src+0x1c8>)
 8008a14:	4826      	ldr	r0, [pc, #152]	@ (8008ab0 <udp_sendto_if_src+0x1b4>)
 8008a16:	f002 fdb3 	bl	800b580 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	8a5b      	ldrh	r3, [r3, #18]
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7fd fdb3 	bl	8006590 <lwip_htons>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8008a32:	887b      	ldrh	r3, [r7, #2]
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7fd fdab 	bl	8006590 <lwip_htons>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	2200      	movs	r2, #0
 8008a46:	719a      	strb	r2, [r3, #6]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	891b      	ldrh	r3, [r3, #8]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7fd fd9d 	bl	8006590 <lwip_htons>
 8008a56:	4603      	mov	r3, r0
 8008a58:	461a      	mov	r2, r3
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8008a5e:	2311      	movs	r3, #17
 8008a60:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	7adb      	ldrb	r3, [r3, #11]
 8008a66:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	7a9b      	ldrb	r3, [r3, #10]
 8008a6c:	7cb9      	ldrb	r1, [r7, #18]
 8008a6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a70:	9202      	str	r2, [sp, #8]
 8008a72:	7cfa      	ldrb	r2, [r7, #19]
 8008a74:	9201      	str	r2, [sp, #4]
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a7e:	69f8      	ldr	r0, [r7, #28]
 8008a80:	f001 fc7a 	bl	800a378 <ip4_output_if_src>
 8008a84:	4603      	mov	r3, r0
 8008a86:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8008a88:	69fa      	ldr	r2, [r7, #28]
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d004      	beq.n	8008a9a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8008a90:	69f8      	ldr	r0, [r7, #28]
 8008a92:	f7ff f88d 	bl	8007bb0 <pbuf_free>
    q = NULL;
 8008a96:	2300      	movs	r3, #0
 8008a98:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8008a9a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3720      	adds	r7, #32
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	0800cf14 	.word	0x0800cf14
 8008aac:	0800d100 	.word	0x0800d100
 8008ab0:	0800cf68 	.word	0x0800cf68
 8008ab4:	0800d120 	.word	0x0800d120
 8008ab8:	0800d140 	.word	0x0800d140
 8008abc:	0800d164 	.word	0x0800d164
 8008ac0:	0800d188 	.word	0x0800d188
 8008ac4:	0800d1ac 	.word	0x0800d1ac

08008ac8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b086      	sub	sp, #24
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d101      	bne.n	8008ae0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8008adc:	4b39      	ldr	r3, [pc, #228]	@ (8008bc4 <udp_bind+0xfc>)
 8008ade:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d109      	bne.n	8008afa <udp_bind+0x32>
 8008ae6:	4b38      	ldr	r3, [pc, #224]	@ (8008bc8 <udp_bind+0x100>)
 8008ae8:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8008aec:	4937      	ldr	r1, [pc, #220]	@ (8008bcc <udp_bind+0x104>)
 8008aee:	4838      	ldr	r0, [pc, #224]	@ (8008bd0 <udp_bind+0x108>)
 8008af0:	f002 fd46 	bl	800b580 <iprintf>
 8008af4:	f06f 030f 	mvn.w	r3, #15
 8008af8:	e060      	b.n	8008bbc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8008afa:	2300      	movs	r3, #0
 8008afc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008afe:	4b35      	ldr	r3, [pc, #212]	@ (8008bd4 <udp_bind+0x10c>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	617b      	str	r3, [r7, #20]
 8008b04:	e009      	b.n	8008b1a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d102      	bne.n	8008b14 <udp_bind+0x4c>
      rebind = 1;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	74fb      	strb	r3, [r7, #19]
      break;
 8008b12:	e005      	b.n	8008b20 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	617b      	str	r3, [r7, #20]
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1f2      	bne.n	8008b06 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8008b20:	88fb      	ldrh	r3, [r7, #6]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d109      	bne.n	8008b3a <udp_bind+0x72>
    port = udp_new_port();
 8008b26:	f7ff fc35 	bl	8008394 <udp_new_port>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8008b2e:	88fb      	ldrh	r3, [r7, #6]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d12c      	bne.n	8008b8e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8008b34:	f06f 0307 	mvn.w	r3, #7
 8008b38:	e040      	b.n	8008bbc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008b3a:	4b26      	ldr	r3, [pc, #152]	@ (8008bd4 <udp_bind+0x10c>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	617b      	str	r3, [r7, #20]
 8008b40:	e022      	b.n	8008b88 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d01b      	beq.n	8008b82 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	8a5b      	ldrh	r3, [r3, #18]
 8008b4e:	88fa      	ldrh	r2, [r7, #6]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d116      	bne.n	8008b82 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d00d      	beq.n	8008b7c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00a      	beq.n	8008b7c <udp_bind+0xb4>
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d006      	beq.n	8008b7c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8008b6e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d003      	beq.n	8008b7c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d102      	bne.n	8008b82 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8008b7c:	f06f 0307 	mvn.w	r3, #7
 8008b80:	e01c      	b.n	8008bbc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	617b      	str	r3, [r7, #20]
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1d9      	bne.n	8008b42 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <udp_bind+0xd2>
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	e000      	b.n	8008b9c <udp_bind+0xd4>
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	88fa      	ldrh	r2, [r7, #6]
 8008ba4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8008ba6:	7cfb      	ldrb	r3, [r7, #19]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d106      	bne.n	8008bba <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8008bac:	4b09      	ldr	r3, [pc, #36]	@ (8008bd4 <udp_bind+0x10c>)
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8008bb4:	4a07      	ldr	r2, [pc, #28]	@ (8008bd4 <udp_bind+0x10c>)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3718      	adds	r7, #24
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	0800d9d0 	.word	0x0800d9d0
 8008bc8:	0800cf14 	.word	0x0800cf14
 8008bcc:	0800d1dc 	.word	0x0800d1dc
 8008bd0:	0800cf68 	.word	0x0800cf68
 8008bd4:	20008390 	.word	0x20008390

08008bd8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b086      	sub	sp, #24
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	4613      	mov	r3, r2
 8008be4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d109      	bne.n	8008c00 <udp_connect+0x28>
 8008bec:	4b2c      	ldr	r3, [pc, #176]	@ (8008ca0 <udp_connect+0xc8>)
 8008bee:	f240 4235 	movw	r2, #1077	@ 0x435
 8008bf2:	492c      	ldr	r1, [pc, #176]	@ (8008ca4 <udp_connect+0xcc>)
 8008bf4:	482c      	ldr	r0, [pc, #176]	@ (8008ca8 <udp_connect+0xd0>)
 8008bf6:	f002 fcc3 	bl	800b580 <iprintf>
 8008bfa:	f06f 030f 	mvn.w	r3, #15
 8008bfe:	e04b      	b.n	8008c98 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d109      	bne.n	8008c1a <udp_connect+0x42>
 8008c06:	4b26      	ldr	r3, [pc, #152]	@ (8008ca0 <udp_connect+0xc8>)
 8008c08:	f240 4236 	movw	r2, #1078	@ 0x436
 8008c0c:	4927      	ldr	r1, [pc, #156]	@ (8008cac <udp_connect+0xd4>)
 8008c0e:	4826      	ldr	r0, [pc, #152]	@ (8008ca8 <udp_connect+0xd0>)
 8008c10:	f002 fcb6 	bl	800b580 <iprintf>
 8008c14:	f06f 030f 	mvn.w	r3, #15
 8008c18:	e03e      	b.n	8008c98 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	8a5b      	ldrh	r3, [r3, #18]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10f      	bne.n	8008c42 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8008c22:	68f9      	ldr	r1, [r7, #12]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	8a5b      	ldrh	r3, [r3, #18]
 8008c28:	461a      	mov	r2, r3
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	f7ff ff4c 	bl	8008ac8 <udp_bind>
 8008c30:	4603      	mov	r3, r0
 8008c32:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008c34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d002      	beq.n	8008c42 <udp_connect+0x6a>
      return err;
 8008c3c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008c40:	e02a      	b.n	8008c98 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d002      	beq.n	8008c4e <udp_connect+0x76>
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	e000      	b.n	8008c50 <udp_connect+0x78>
 8008c4e:	2300      	movs	r3, #0
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	88fa      	ldrh	r2, [r7, #6]
 8008c58:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	7c1b      	ldrb	r3, [r3, #16]
 8008c5e:	f043 0304 	orr.w	r3, r3, #4
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008c68:	4b11      	ldr	r3, [pc, #68]	@ (8008cb0 <udp_connect+0xd8>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	617b      	str	r3, [r7, #20]
 8008c6e:	e008      	b.n	8008c82 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d101      	bne.n	8008c7c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	e00d      	b.n	8008c98 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	617b      	str	r3, [r7, #20]
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d1f3      	bne.n	8008c70 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8008c88:	4b09      	ldr	r3, [pc, #36]	@ (8008cb0 <udp_connect+0xd8>)
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8008c90:	4a07      	ldr	r2, [pc, #28]	@ (8008cb0 <udp_connect+0xd8>)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3718      	adds	r7, #24
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	0800cf14 	.word	0x0800cf14
 8008ca4:	0800d1f4 	.word	0x0800d1f4
 8008ca8:	0800cf68 	.word	0x0800cf68
 8008cac:	0800d210 	.word	0x0800d210
 8008cb0:	20008390 	.word	0x20008390

08008cb4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d107      	bne.n	8008cd6 <udp_recv+0x22>
 8008cc6:	4b08      	ldr	r3, [pc, #32]	@ (8008ce8 <udp_recv+0x34>)
 8008cc8:	f240 428a 	movw	r2, #1162	@ 0x48a
 8008ccc:	4907      	ldr	r1, [pc, #28]	@ (8008cec <udp_recv+0x38>)
 8008cce:	4808      	ldr	r0, [pc, #32]	@ (8008cf0 <udp_recv+0x3c>)
 8008cd0:	f002 fc56 	bl	800b580 <iprintf>
 8008cd4:	e005      	b.n	8008ce2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	61da      	str	r2, [r3, #28]
}
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	0800cf14 	.word	0x0800cf14
 8008cec:	0800d248 	.word	0x0800d248
 8008cf0:	0800cf68 	.word	0x0800cf68

08008cf4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d107      	bne.n	8008d12 <udp_remove+0x1e>
 8008d02:	4b19      	ldr	r3, [pc, #100]	@ (8008d68 <udp_remove+0x74>)
 8008d04:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8008d08:	4918      	ldr	r1, [pc, #96]	@ (8008d6c <udp_remove+0x78>)
 8008d0a:	4819      	ldr	r0, [pc, #100]	@ (8008d70 <udp_remove+0x7c>)
 8008d0c:	f002 fc38 	bl	800b580 <iprintf>
 8008d10:	e026      	b.n	8008d60 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8008d12:	4b18      	ldr	r3, [pc, #96]	@ (8008d74 <udp_remove+0x80>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d105      	bne.n	8008d28 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8008d1c:	4b15      	ldr	r3, [pc, #84]	@ (8008d74 <udp_remove+0x80>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	4a14      	ldr	r2, [pc, #80]	@ (8008d74 <udp_remove+0x80>)
 8008d24:	6013      	str	r3, [r2, #0]
 8008d26:	e017      	b.n	8008d58 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8008d28:	4b12      	ldr	r3, [pc, #72]	@ (8008d74 <udp_remove+0x80>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	60fb      	str	r3, [r7, #12]
 8008d2e:	e010      	b.n	8008d52 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d009      	beq.n	8008d4c <udp_remove+0x58>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d104      	bne.n	8008d4c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	68da      	ldr	r2, [r3, #12]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	60da      	str	r2, [r3, #12]
        break;
 8008d4a:	e005      	b.n	8008d58 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	60fb      	str	r3, [r7, #12]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1eb      	bne.n	8008d30 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8008d58:	6879      	ldr	r1, [r7, #4]
 8008d5a:	2000      	movs	r0, #0
 8008d5c:	f7fe f8e4 	bl	8006f28 <memp_free>
}
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	0800cf14 	.word	0x0800cf14
 8008d6c:	0800d260 	.word	0x0800d260
 8008d70:	0800cf68 	.word	0x0800cf68
 8008d74:	20008390 	.word	0x20008390

08008d78 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8008d7e:	2000      	movs	r0, #0
 8008d80:	f7fe f862 	bl	8006e48 <memp_malloc>
 8008d84:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d007      	beq.n	8008d9c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8008d8c:	2220      	movs	r2, #32
 8008d8e:	2100      	movs	r1, #0
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f002 fc5a 	bl	800b64a <memset>
    pcb->ttl = UDP_TTL;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	22ff      	movs	r2, #255	@ 0xff
 8008d9a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8008d9c:	687b      	ldr	r3, [r7, #4]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d01e      	beq.n	8008df6 <udp_netif_ip_addr_changed+0x4e>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d01a      	beq.n	8008df6 <udp_netif_ip_addr_changed+0x4e>
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d017      	beq.n	8008df6 <udp_netif_ip_addr_changed+0x4e>
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d013      	beq.n	8008df6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8008dce:	4b0d      	ldr	r3, [pc, #52]	@ (8008e04 <udp_netif_ip_addr_changed+0x5c>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	60fb      	str	r3, [r7, #12]
 8008dd4:	e00c      	b.n	8008df0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d103      	bne.n	8008dea <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	60fb      	str	r3, [r7, #12]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1ef      	bne.n	8008dd6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8008df6:	bf00      	nop
 8008df8:	3714      	adds	r7, #20
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	20008390 	.word	0x20008390

08008e08 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8008e10:	4915      	ldr	r1, [pc, #84]	@ (8008e68 <etharp_free_entry+0x60>)
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	4613      	mov	r3, r2
 8008e16:	005b      	lsls	r3, r3, #1
 8008e18:	4413      	add	r3, r2
 8008e1a:	00db      	lsls	r3, r3, #3
 8008e1c:	440b      	add	r3, r1
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d013      	beq.n	8008e4c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8008e24:	4910      	ldr	r1, [pc, #64]	@ (8008e68 <etharp_free_entry+0x60>)
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	005b      	lsls	r3, r3, #1
 8008e2c:	4413      	add	r3, r2
 8008e2e:	00db      	lsls	r3, r3, #3
 8008e30:	440b      	add	r3, r1
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7fe febb 	bl	8007bb0 <pbuf_free>
    arp_table[i].q = NULL;
 8008e3a:	490b      	ldr	r1, [pc, #44]	@ (8008e68 <etharp_free_entry+0x60>)
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	4613      	mov	r3, r2
 8008e40:	005b      	lsls	r3, r3, #1
 8008e42:	4413      	add	r3, r2
 8008e44:	00db      	lsls	r3, r3, #3
 8008e46:	440b      	add	r3, r1
 8008e48:	2200      	movs	r2, #0
 8008e4a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8008e4c:	4906      	ldr	r1, [pc, #24]	@ (8008e68 <etharp_free_entry+0x60>)
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	4613      	mov	r3, r2
 8008e52:	005b      	lsls	r3, r3, #1
 8008e54:	4413      	add	r3, r2
 8008e56:	00db      	lsls	r3, r3, #3
 8008e58:	440b      	add	r3, r1
 8008e5a:	3314      	adds	r3, #20
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8008e60:	bf00      	nop
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	20008394 	.word	0x20008394

08008e6c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008e72:	2300      	movs	r3, #0
 8008e74:	607b      	str	r3, [r7, #4]
 8008e76:	e096      	b.n	8008fa6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8008e78:	494f      	ldr	r1, [pc, #316]	@ (8008fb8 <etharp_tmr+0x14c>)
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	005b      	lsls	r3, r3, #1
 8008e80:	4413      	add	r3, r2
 8008e82:	00db      	lsls	r3, r3, #3
 8008e84:	440b      	add	r3, r1
 8008e86:	3314      	adds	r3, #20
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8008e8c:	78fb      	ldrb	r3, [r7, #3]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f000 8086 	beq.w	8008fa0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8008e94:	4948      	ldr	r1, [pc, #288]	@ (8008fb8 <etharp_tmr+0x14c>)
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	005b      	lsls	r3, r3, #1
 8008e9c:	4413      	add	r3, r2
 8008e9e:	00db      	lsls	r3, r3, #3
 8008ea0:	440b      	add	r3, r1
 8008ea2:	3312      	adds	r3, #18
 8008ea4:	881b      	ldrh	r3, [r3, #0]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	b298      	uxth	r0, r3
 8008eaa:	4943      	ldr	r1, [pc, #268]	@ (8008fb8 <etharp_tmr+0x14c>)
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	4613      	mov	r3, r2
 8008eb0:	005b      	lsls	r3, r3, #1
 8008eb2:	4413      	add	r3, r2
 8008eb4:	00db      	lsls	r3, r3, #3
 8008eb6:	440b      	add	r3, r1
 8008eb8:	3312      	adds	r3, #18
 8008eba:	4602      	mov	r2, r0
 8008ebc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8008ebe:	493e      	ldr	r1, [pc, #248]	@ (8008fb8 <etharp_tmr+0x14c>)
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	005b      	lsls	r3, r3, #1
 8008ec6:	4413      	add	r3, r2
 8008ec8:	00db      	lsls	r3, r3, #3
 8008eca:	440b      	add	r3, r1
 8008ecc:	3312      	adds	r3, #18
 8008ece:	881b      	ldrh	r3, [r3, #0]
 8008ed0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8008ed4:	d215      	bcs.n	8008f02 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8008ed6:	4938      	ldr	r1, [pc, #224]	@ (8008fb8 <etharp_tmr+0x14c>)
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	4613      	mov	r3, r2
 8008edc:	005b      	lsls	r3, r3, #1
 8008ede:	4413      	add	r3, r2
 8008ee0:	00db      	lsls	r3, r3, #3
 8008ee2:	440b      	add	r3, r1
 8008ee4:	3314      	adds	r3, #20
 8008ee6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d10e      	bne.n	8008f0a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8008eec:	4932      	ldr	r1, [pc, #200]	@ (8008fb8 <etharp_tmr+0x14c>)
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	005b      	lsls	r3, r3, #1
 8008ef4:	4413      	add	r3, r2
 8008ef6:	00db      	lsls	r3, r3, #3
 8008ef8:	440b      	add	r3, r1
 8008efa:	3312      	adds	r3, #18
 8008efc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8008efe:	2b04      	cmp	r3, #4
 8008f00:	d903      	bls.n	8008f0a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f7ff ff80 	bl	8008e08 <etharp_free_entry>
 8008f08:	e04a      	b.n	8008fa0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8008f0a:	492b      	ldr	r1, [pc, #172]	@ (8008fb8 <etharp_tmr+0x14c>)
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	005b      	lsls	r3, r3, #1
 8008f12:	4413      	add	r3, r2
 8008f14:	00db      	lsls	r3, r3, #3
 8008f16:	440b      	add	r3, r1
 8008f18:	3314      	adds	r3, #20
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	2b03      	cmp	r3, #3
 8008f1e:	d10a      	bne.n	8008f36 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8008f20:	4925      	ldr	r1, [pc, #148]	@ (8008fb8 <etharp_tmr+0x14c>)
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	4613      	mov	r3, r2
 8008f26:	005b      	lsls	r3, r3, #1
 8008f28:	4413      	add	r3, r2
 8008f2a:	00db      	lsls	r3, r3, #3
 8008f2c:	440b      	add	r3, r1
 8008f2e:	3314      	adds	r3, #20
 8008f30:	2204      	movs	r2, #4
 8008f32:	701a      	strb	r2, [r3, #0]
 8008f34:	e034      	b.n	8008fa0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8008f36:	4920      	ldr	r1, [pc, #128]	@ (8008fb8 <etharp_tmr+0x14c>)
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	005b      	lsls	r3, r3, #1
 8008f3e:	4413      	add	r3, r2
 8008f40:	00db      	lsls	r3, r3, #3
 8008f42:	440b      	add	r3, r1
 8008f44:	3314      	adds	r3, #20
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	2b04      	cmp	r3, #4
 8008f4a:	d10a      	bne.n	8008f62 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8008f4c:	491a      	ldr	r1, [pc, #104]	@ (8008fb8 <etharp_tmr+0x14c>)
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	4613      	mov	r3, r2
 8008f52:	005b      	lsls	r3, r3, #1
 8008f54:	4413      	add	r3, r2
 8008f56:	00db      	lsls	r3, r3, #3
 8008f58:	440b      	add	r3, r1
 8008f5a:	3314      	adds	r3, #20
 8008f5c:	2202      	movs	r2, #2
 8008f5e:	701a      	strb	r2, [r3, #0]
 8008f60:	e01e      	b.n	8008fa0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8008f62:	4915      	ldr	r1, [pc, #84]	@ (8008fb8 <etharp_tmr+0x14c>)
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	4613      	mov	r3, r2
 8008f68:	005b      	lsls	r3, r3, #1
 8008f6a:	4413      	add	r3, r2
 8008f6c:	00db      	lsls	r3, r3, #3
 8008f6e:	440b      	add	r3, r1
 8008f70:	3314      	adds	r3, #20
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d113      	bne.n	8008fa0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8008f78:	490f      	ldr	r1, [pc, #60]	@ (8008fb8 <etharp_tmr+0x14c>)
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	005b      	lsls	r3, r3, #1
 8008f80:	4413      	add	r3, r2
 8008f82:	00db      	lsls	r3, r3, #3
 8008f84:	440b      	add	r3, r1
 8008f86:	3308      	adds	r3, #8
 8008f88:	6818      	ldr	r0, [r3, #0]
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	005b      	lsls	r3, r3, #1
 8008f90:	4413      	add	r3, r2
 8008f92:	00db      	lsls	r3, r3, #3
 8008f94:	4a08      	ldr	r2, [pc, #32]	@ (8008fb8 <etharp_tmr+0x14c>)
 8008f96:	4413      	add	r3, r2
 8008f98:	3304      	adds	r3, #4
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	f000 fe6e 	bl	8009c7c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	607b      	str	r3, [r7, #4]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2b09      	cmp	r3, #9
 8008faa:	f77f af65 	ble.w	8008e78 <etharp_tmr+0xc>
      }
    }
  }
}
 8008fae:	bf00      	nop
 8008fb0:	bf00      	nop
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	20008394 	.word	0x20008394

08008fbc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b08a      	sub	sp, #40	@ 0x28
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	607a      	str	r2, [r7, #4]
 8008fc8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8008fca:	230a      	movs	r3, #10
 8008fcc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008fce:	230a      	movs	r3, #10
 8008fd0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8008fd2:	230a      	movs	r3, #10
 8008fd4:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8008fda:	230a      	movs	r3, #10
 8008fdc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	83bb      	strh	r3, [r7, #28]
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	837b      	strh	r3, [r7, #26]
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008fea:	2300      	movs	r3, #0
 8008fec:	843b      	strh	r3, [r7, #32]
 8008fee:	e0ae      	b.n	800914e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8008ff0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008ff4:	49a6      	ldr	r1, [pc, #664]	@ (8009290 <etharp_find_entry+0x2d4>)
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	005b      	lsls	r3, r3, #1
 8008ffa:	4413      	add	r3, r2
 8008ffc:	00db      	lsls	r3, r3, #3
 8008ffe:	440b      	add	r3, r1
 8009000:	3314      	adds	r3, #20
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8009006:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800900a:	2b0a      	cmp	r3, #10
 800900c:	d105      	bne.n	800901a <etharp_find_entry+0x5e>
 800900e:	7dfb      	ldrb	r3, [r7, #23]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d102      	bne.n	800901a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8009014:	8c3b      	ldrh	r3, [r7, #32]
 8009016:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009018:	e095      	b.n	8009146 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800901a:	7dfb      	ldrb	r3, [r7, #23]
 800901c:	2b00      	cmp	r3, #0
 800901e:	f000 8092 	beq.w	8009146 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8009022:	7dfb      	ldrb	r3, [r7, #23]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d009      	beq.n	800903c <etharp_find_entry+0x80>
 8009028:	7dfb      	ldrb	r3, [r7, #23]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d806      	bhi.n	800903c <etharp_find_entry+0x80>
 800902e:	4b99      	ldr	r3, [pc, #612]	@ (8009294 <etharp_find_entry+0x2d8>)
 8009030:	f240 1223 	movw	r2, #291	@ 0x123
 8009034:	4998      	ldr	r1, [pc, #608]	@ (8009298 <etharp_find_entry+0x2dc>)
 8009036:	4899      	ldr	r0, [pc, #612]	@ (800929c <etharp_find_entry+0x2e0>)
 8009038:	f002 faa2 	bl	800b580 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d020      	beq.n	8009084 <etharp_find_entry+0xc8>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6819      	ldr	r1, [r3, #0]
 8009046:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800904a:	4891      	ldr	r0, [pc, #580]	@ (8009290 <etharp_find_entry+0x2d4>)
 800904c:	4613      	mov	r3, r2
 800904e:	005b      	lsls	r3, r3, #1
 8009050:	4413      	add	r3, r2
 8009052:	00db      	lsls	r3, r3, #3
 8009054:	4403      	add	r3, r0
 8009056:	3304      	adds	r3, #4
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4299      	cmp	r1, r3
 800905c:	d112      	bne.n	8009084 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00c      	beq.n	800907e <etharp_find_entry+0xc2>
 8009064:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009068:	4989      	ldr	r1, [pc, #548]	@ (8009290 <etharp_find_entry+0x2d4>)
 800906a:	4613      	mov	r3, r2
 800906c:	005b      	lsls	r3, r3, #1
 800906e:	4413      	add	r3, r2
 8009070:	00db      	lsls	r3, r3, #3
 8009072:	440b      	add	r3, r1
 8009074:	3308      	adds	r3, #8
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	429a      	cmp	r2, r3
 800907c:	d102      	bne.n	8009084 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800907e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009082:	e100      	b.n	8009286 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8009084:	7dfb      	ldrb	r3, [r7, #23]
 8009086:	2b01      	cmp	r3, #1
 8009088:	d140      	bne.n	800910c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800908a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800908e:	4980      	ldr	r1, [pc, #512]	@ (8009290 <etharp_find_entry+0x2d4>)
 8009090:	4613      	mov	r3, r2
 8009092:	005b      	lsls	r3, r3, #1
 8009094:	4413      	add	r3, r2
 8009096:	00db      	lsls	r3, r3, #3
 8009098:	440b      	add	r3, r1
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d01a      	beq.n	80090d6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80090a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80090a4:	497a      	ldr	r1, [pc, #488]	@ (8009290 <etharp_find_entry+0x2d4>)
 80090a6:	4613      	mov	r3, r2
 80090a8:	005b      	lsls	r3, r3, #1
 80090aa:	4413      	add	r3, r2
 80090ac:	00db      	lsls	r3, r3, #3
 80090ae:	440b      	add	r3, r1
 80090b0:	3312      	adds	r3, #18
 80090b2:	881b      	ldrh	r3, [r3, #0]
 80090b4:	8bba      	ldrh	r2, [r7, #28]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d845      	bhi.n	8009146 <etharp_find_entry+0x18a>
            old_queue = i;
 80090ba:	8c3b      	ldrh	r3, [r7, #32]
 80090bc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80090be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80090c2:	4973      	ldr	r1, [pc, #460]	@ (8009290 <etharp_find_entry+0x2d4>)
 80090c4:	4613      	mov	r3, r2
 80090c6:	005b      	lsls	r3, r3, #1
 80090c8:	4413      	add	r3, r2
 80090ca:	00db      	lsls	r3, r3, #3
 80090cc:	440b      	add	r3, r1
 80090ce:	3312      	adds	r3, #18
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	83bb      	strh	r3, [r7, #28]
 80090d4:	e037      	b.n	8009146 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80090d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80090da:	496d      	ldr	r1, [pc, #436]	@ (8009290 <etharp_find_entry+0x2d4>)
 80090dc:	4613      	mov	r3, r2
 80090de:	005b      	lsls	r3, r3, #1
 80090e0:	4413      	add	r3, r2
 80090e2:	00db      	lsls	r3, r3, #3
 80090e4:	440b      	add	r3, r1
 80090e6:	3312      	adds	r3, #18
 80090e8:	881b      	ldrh	r3, [r3, #0]
 80090ea:	8b7a      	ldrh	r2, [r7, #26]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d82a      	bhi.n	8009146 <etharp_find_entry+0x18a>
            old_pending = i;
 80090f0:	8c3b      	ldrh	r3, [r7, #32]
 80090f2:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80090f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80090f8:	4965      	ldr	r1, [pc, #404]	@ (8009290 <etharp_find_entry+0x2d4>)
 80090fa:	4613      	mov	r3, r2
 80090fc:	005b      	lsls	r3, r3, #1
 80090fe:	4413      	add	r3, r2
 8009100:	00db      	lsls	r3, r3, #3
 8009102:	440b      	add	r3, r1
 8009104:	3312      	adds	r3, #18
 8009106:	881b      	ldrh	r3, [r3, #0]
 8009108:	837b      	strh	r3, [r7, #26]
 800910a:	e01c      	b.n	8009146 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800910c:	7dfb      	ldrb	r3, [r7, #23]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d919      	bls.n	8009146 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8009112:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009116:	495e      	ldr	r1, [pc, #376]	@ (8009290 <etharp_find_entry+0x2d4>)
 8009118:	4613      	mov	r3, r2
 800911a:	005b      	lsls	r3, r3, #1
 800911c:	4413      	add	r3, r2
 800911e:	00db      	lsls	r3, r3, #3
 8009120:	440b      	add	r3, r1
 8009122:	3312      	adds	r3, #18
 8009124:	881b      	ldrh	r3, [r3, #0]
 8009126:	8b3a      	ldrh	r2, [r7, #24]
 8009128:	429a      	cmp	r2, r3
 800912a:	d80c      	bhi.n	8009146 <etharp_find_entry+0x18a>
            old_stable = i;
 800912c:	8c3b      	ldrh	r3, [r7, #32]
 800912e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8009130:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009134:	4956      	ldr	r1, [pc, #344]	@ (8009290 <etharp_find_entry+0x2d4>)
 8009136:	4613      	mov	r3, r2
 8009138:	005b      	lsls	r3, r3, #1
 800913a:	4413      	add	r3, r2
 800913c:	00db      	lsls	r3, r3, #3
 800913e:	440b      	add	r3, r1
 8009140:	3312      	adds	r3, #18
 8009142:	881b      	ldrh	r3, [r3, #0]
 8009144:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009146:	8c3b      	ldrh	r3, [r7, #32]
 8009148:	3301      	adds	r3, #1
 800914a:	b29b      	uxth	r3, r3
 800914c:	843b      	strh	r3, [r7, #32]
 800914e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009152:	2b09      	cmp	r3, #9
 8009154:	f77f af4c 	ble.w	8008ff0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8009158:	7afb      	ldrb	r3, [r7, #11]
 800915a:	f003 0302 	and.w	r3, r3, #2
 800915e:	2b00      	cmp	r3, #0
 8009160:	d108      	bne.n	8009174 <etharp_find_entry+0x1b8>
 8009162:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8009166:	2b0a      	cmp	r3, #10
 8009168:	d107      	bne.n	800917a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800916a:	7afb      	ldrb	r3, [r7, #11]
 800916c:	f003 0301 	and.w	r3, r3, #1
 8009170:	2b00      	cmp	r3, #0
 8009172:	d102      	bne.n	800917a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8009174:	f04f 33ff 	mov.w	r3, #4294967295
 8009178:	e085      	b.n	8009286 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800917a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800917e:	2b09      	cmp	r3, #9
 8009180:	dc02      	bgt.n	8009188 <etharp_find_entry+0x1cc>
    i = empty;
 8009182:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009184:	843b      	strh	r3, [r7, #32]
 8009186:	e039      	b.n	80091fc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8009188:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800918c:	2b09      	cmp	r3, #9
 800918e:	dc14      	bgt.n	80091ba <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8009190:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009192:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8009194:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009198:	493d      	ldr	r1, [pc, #244]	@ (8009290 <etharp_find_entry+0x2d4>)
 800919a:	4613      	mov	r3, r2
 800919c:	005b      	lsls	r3, r3, #1
 800919e:	4413      	add	r3, r2
 80091a0:	00db      	lsls	r3, r3, #3
 80091a2:	440b      	add	r3, r1
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d018      	beq.n	80091dc <etharp_find_entry+0x220>
 80091aa:	4b3a      	ldr	r3, [pc, #232]	@ (8009294 <etharp_find_entry+0x2d8>)
 80091ac:	f240 126d 	movw	r2, #365	@ 0x16d
 80091b0:	493b      	ldr	r1, [pc, #236]	@ (80092a0 <etharp_find_entry+0x2e4>)
 80091b2:	483a      	ldr	r0, [pc, #232]	@ (800929c <etharp_find_entry+0x2e0>)
 80091b4:	f002 f9e4 	bl	800b580 <iprintf>
 80091b8:	e010      	b.n	80091dc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80091ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80091be:	2b09      	cmp	r3, #9
 80091c0:	dc02      	bgt.n	80091c8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80091c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80091c4:	843b      	strh	r3, [r7, #32]
 80091c6:	e009      	b.n	80091dc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80091c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80091cc:	2b09      	cmp	r3, #9
 80091ce:	dc02      	bgt.n	80091d6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80091d0:	8bfb      	ldrh	r3, [r7, #30]
 80091d2:	843b      	strh	r3, [r7, #32]
 80091d4:	e002      	b.n	80091dc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80091d6:	f04f 33ff 	mov.w	r3, #4294967295
 80091da:	e054      	b.n	8009286 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80091dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80091e0:	2b09      	cmp	r3, #9
 80091e2:	dd06      	ble.n	80091f2 <etharp_find_entry+0x236>
 80091e4:	4b2b      	ldr	r3, [pc, #172]	@ (8009294 <etharp_find_entry+0x2d8>)
 80091e6:	f240 127f 	movw	r2, #383	@ 0x17f
 80091ea:	492e      	ldr	r1, [pc, #184]	@ (80092a4 <etharp_find_entry+0x2e8>)
 80091ec:	482b      	ldr	r0, [pc, #172]	@ (800929c <etharp_find_entry+0x2e0>)
 80091ee:	f002 f9c7 	bl	800b580 <iprintf>
    etharp_free_entry(i);
 80091f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7ff fe06 	bl	8008e08 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80091fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009200:	2b09      	cmp	r3, #9
 8009202:	dd06      	ble.n	8009212 <etharp_find_entry+0x256>
 8009204:	4b23      	ldr	r3, [pc, #140]	@ (8009294 <etharp_find_entry+0x2d8>)
 8009206:	f240 1283 	movw	r2, #387	@ 0x183
 800920a:	4926      	ldr	r1, [pc, #152]	@ (80092a4 <etharp_find_entry+0x2e8>)
 800920c:	4823      	ldr	r0, [pc, #140]	@ (800929c <etharp_find_entry+0x2e0>)
 800920e:	f002 f9b7 	bl	800b580 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8009212:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009216:	491e      	ldr	r1, [pc, #120]	@ (8009290 <etharp_find_entry+0x2d4>)
 8009218:	4613      	mov	r3, r2
 800921a:	005b      	lsls	r3, r3, #1
 800921c:	4413      	add	r3, r2
 800921e:	00db      	lsls	r3, r3, #3
 8009220:	440b      	add	r3, r1
 8009222:	3314      	adds	r3, #20
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d006      	beq.n	8009238 <etharp_find_entry+0x27c>
 800922a:	4b1a      	ldr	r3, [pc, #104]	@ (8009294 <etharp_find_entry+0x2d8>)
 800922c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8009230:	491d      	ldr	r1, [pc, #116]	@ (80092a8 <etharp_find_entry+0x2ec>)
 8009232:	481a      	ldr	r0, [pc, #104]	@ (800929c <etharp_find_entry+0x2e0>)
 8009234:	f002 f9a4 	bl	800b580 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00b      	beq.n	8009256 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800923e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6819      	ldr	r1, [r3, #0]
 8009246:	4812      	ldr	r0, [pc, #72]	@ (8009290 <etharp_find_entry+0x2d4>)
 8009248:	4613      	mov	r3, r2
 800924a:	005b      	lsls	r3, r3, #1
 800924c:	4413      	add	r3, r2
 800924e:	00db      	lsls	r3, r3, #3
 8009250:	4403      	add	r3, r0
 8009252:	3304      	adds	r3, #4
 8009254:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8009256:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800925a:	490d      	ldr	r1, [pc, #52]	@ (8009290 <etharp_find_entry+0x2d4>)
 800925c:	4613      	mov	r3, r2
 800925e:	005b      	lsls	r3, r3, #1
 8009260:	4413      	add	r3, r2
 8009262:	00db      	lsls	r3, r3, #3
 8009264:	440b      	add	r3, r1
 8009266:	3312      	adds	r3, #18
 8009268:	2200      	movs	r2, #0
 800926a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800926c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009270:	4907      	ldr	r1, [pc, #28]	@ (8009290 <etharp_find_entry+0x2d4>)
 8009272:	4613      	mov	r3, r2
 8009274:	005b      	lsls	r3, r3, #1
 8009276:	4413      	add	r3, r2
 8009278:	00db      	lsls	r3, r3, #3
 800927a:	440b      	add	r3, r1
 800927c:	3308      	adds	r3, #8
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8009282:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8009286:	4618      	mov	r0, r3
 8009288:	3728      	adds	r7, #40	@ 0x28
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	20008394 	.word	0x20008394
 8009294:	0800d278 	.word	0x0800d278
 8009298:	0800d2b0 	.word	0x0800d2b0
 800929c:	0800d2f0 	.word	0x0800d2f0
 80092a0:	0800d318 	.word	0x0800d318
 80092a4:	0800d330 	.word	0x0800d330
 80092a8:	0800d344 	.word	0x0800d344

080092ac <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b088      	sub	sp, #32
 80092b0:	af02      	add	r7, sp, #8
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]
 80092b8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80092c0:	2b06      	cmp	r3, #6
 80092c2:	d006      	beq.n	80092d2 <etharp_update_arp_entry+0x26>
 80092c4:	4b48      	ldr	r3, [pc, #288]	@ (80093e8 <etharp_update_arp_entry+0x13c>)
 80092c6:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80092ca:	4948      	ldr	r1, [pc, #288]	@ (80093ec <etharp_update_arp_entry+0x140>)
 80092cc:	4848      	ldr	r0, [pc, #288]	@ (80093f0 <etharp_update_arp_entry+0x144>)
 80092ce:	f002 f957 	bl	800b580 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d012      	beq.n	80092fe <etharp_update_arp_entry+0x52>
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00e      	beq.n	80092fe <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	68f9      	ldr	r1, [r7, #12]
 80092e6:	4618      	mov	r0, r3
 80092e8:	f001 f8f4 	bl	800a4d4 <ip4_addr_isbroadcast_u32>
 80092ec:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d105      	bne.n	80092fe <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80092fa:	2be0      	cmp	r3, #224	@ 0xe0
 80092fc:	d102      	bne.n	8009304 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80092fe:	f06f 030f 	mvn.w	r3, #15
 8009302:	e06c      	b.n	80093de <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8009304:	78fb      	ldrb	r3, [r7, #3]
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	4619      	mov	r1, r3
 800930a:	68b8      	ldr	r0, [r7, #8]
 800930c:	f7ff fe56 	bl	8008fbc <etharp_find_entry>
 8009310:	4603      	mov	r3, r0
 8009312:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8009314:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009318:	2b00      	cmp	r3, #0
 800931a:	da02      	bge.n	8009322 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800931c:	8afb      	ldrh	r3, [r7, #22]
 800931e:	b25b      	sxtb	r3, r3
 8009320:	e05d      	b.n	80093de <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8009322:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009326:	4933      	ldr	r1, [pc, #204]	@ (80093f4 <etharp_update_arp_entry+0x148>)
 8009328:	4613      	mov	r3, r2
 800932a:	005b      	lsls	r3, r3, #1
 800932c:	4413      	add	r3, r2
 800932e:	00db      	lsls	r3, r3, #3
 8009330:	440b      	add	r3, r1
 8009332:	3314      	adds	r3, #20
 8009334:	2202      	movs	r2, #2
 8009336:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8009338:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800933c:	492d      	ldr	r1, [pc, #180]	@ (80093f4 <etharp_update_arp_entry+0x148>)
 800933e:	4613      	mov	r3, r2
 8009340:	005b      	lsls	r3, r3, #1
 8009342:	4413      	add	r3, r2
 8009344:	00db      	lsls	r3, r3, #3
 8009346:	440b      	add	r3, r1
 8009348:	3308      	adds	r3, #8
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800934e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009352:	4613      	mov	r3, r2
 8009354:	005b      	lsls	r3, r3, #1
 8009356:	4413      	add	r3, r2
 8009358:	00db      	lsls	r3, r3, #3
 800935a:	3308      	adds	r3, #8
 800935c:	4a25      	ldr	r2, [pc, #148]	@ (80093f4 <etharp_update_arp_entry+0x148>)
 800935e:	4413      	add	r3, r2
 8009360:	3304      	adds	r3, #4
 8009362:	2206      	movs	r2, #6
 8009364:	6879      	ldr	r1, [r7, #4]
 8009366:	4618      	mov	r0, r3
 8009368:	f002 f9f7 	bl	800b75a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800936c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009370:	4920      	ldr	r1, [pc, #128]	@ (80093f4 <etharp_update_arp_entry+0x148>)
 8009372:	4613      	mov	r3, r2
 8009374:	005b      	lsls	r3, r3, #1
 8009376:	4413      	add	r3, r2
 8009378:	00db      	lsls	r3, r3, #3
 800937a:	440b      	add	r3, r1
 800937c:	3312      	adds	r3, #18
 800937e:	2200      	movs	r2, #0
 8009380:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8009382:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009386:	491b      	ldr	r1, [pc, #108]	@ (80093f4 <etharp_update_arp_entry+0x148>)
 8009388:	4613      	mov	r3, r2
 800938a:	005b      	lsls	r3, r3, #1
 800938c:	4413      	add	r3, r2
 800938e:	00db      	lsls	r3, r3, #3
 8009390:	440b      	add	r3, r1
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d021      	beq.n	80093dc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8009398:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800939c:	4915      	ldr	r1, [pc, #84]	@ (80093f4 <etharp_update_arp_entry+0x148>)
 800939e:	4613      	mov	r3, r2
 80093a0:	005b      	lsls	r3, r3, #1
 80093a2:	4413      	add	r3, r2
 80093a4:	00db      	lsls	r3, r3, #3
 80093a6:	440b      	add	r3, r1
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80093ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80093b0:	4910      	ldr	r1, [pc, #64]	@ (80093f4 <etharp_update_arp_entry+0x148>)
 80093b2:	4613      	mov	r3, r2
 80093b4:	005b      	lsls	r3, r3, #1
 80093b6:	4413      	add	r3, r2
 80093b8:	00db      	lsls	r3, r3, #3
 80093ba:	440b      	add	r3, r1
 80093bc:	2200      	movs	r2, #0
 80093be:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80093c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6939      	ldr	r1, [r7, #16]
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f001 ff8d 	bl	800b2f0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80093d6:	6938      	ldr	r0, [r7, #16]
 80093d8:	f7fe fbea 	bl	8007bb0 <pbuf_free>
  }
  return ERR_OK;
 80093dc:	2300      	movs	r3, #0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3718      	adds	r7, #24
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	0800d278 	.word	0x0800d278
 80093ec:	0800d370 	.word	0x0800d370
 80093f0:	0800d2f0 	.word	0x0800d2f0
 80093f4:	20008394 	.word	0x20008394

080093f8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009400:	2300      	movs	r3, #0
 8009402:	60fb      	str	r3, [r7, #12]
 8009404:	e01e      	b.n	8009444 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8009406:	4913      	ldr	r1, [pc, #76]	@ (8009454 <etharp_cleanup_netif+0x5c>)
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	4613      	mov	r3, r2
 800940c:	005b      	lsls	r3, r3, #1
 800940e:	4413      	add	r3, r2
 8009410:	00db      	lsls	r3, r3, #3
 8009412:	440b      	add	r3, r1
 8009414:	3314      	adds	r3, #20
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800941a:	7afb      	ldrb	r3, [r7, #11]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00e      	beq.n	800943e <etharp_cleanup_netif+0x46>
 8009420:	490c      	ldr	r1, [pc, #48]	@ (8009454 <etharp_cleanup_netif+0x5c>)
 8009422:	68fa      	ldr	r2, [r7, #12]
 8009424:	4613      	mov	r3, r2
 8009426:	005b      	lsls	r3, r3, #1
 8009428:	4413      	add	r3, r2
 800942a:	00db      	lsls	r3, r3, #3
 800942c:	440b      	add	r3, r1
 800942e:	3308      	adds	r3, #8
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	429a      	cmp	r2, r3
 8009436:	d102      	bne.n	800943e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f7ff fce5 	bl	8008e08 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	3301      	adds	r3, #1
 8009442:	60fb      	str	r3, [r7, #12]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2b09      	cmp	r3, #9
 8009448:	dddd      	ble.n	8009406 <etharp_cleanup_netif+0xe>
    }
  }
}
 800944a:	bf00      	nop
 800944c:	bf00      	nop
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	20008394 	.word	0x20008394

08009458 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8009458:	b5b0      	push	{r4, r5, r7, lr}
 800945a:	b08a      	sub	sp, #40	@ 0x28
 800945c:	af04      	add	r7, sp, #16
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d107      	bne.n	8009478 <etharp_input+0x20>
 8009468:	4b3d      	ldr	r3, [pc, #244]	@ (8009560 <etharp_input+0x108>)
 800946a:	f240 228a 	movw	r2, #650	@ 0x28a
 800946e:	493d      	ldr	r1, [pc, #244]	@ (8009564 <etharp_input+0x10c>)
 8009470:	483d      	ldr	r0, [pc, #244]	@ (8009568 <etharp_input+0x110>)
 8009472:	f002 f885 	bl	800b580 <iprintf>
 8009476:	e06f      	b.n	8009558 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	881b      	ldrh	r3, [r3, #0]
 8009482:	b29b      	uxth	r3, r3
 8009484:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009488:	d10c      	bne.n	80094a4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800948e:	2b06      	cmp	r3, #6
 8009490:	d108      	bne.n	80094a4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8009496:	2b04      	cmp	r3, #4
 8009498:	d104      	bne.n	80094a4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	885b      	ldrh	r3, [r3, #2]
 800949e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80094a0:	2b08      	cmp	r3, #8
 80094a2:	d003      	beq.n	80094ac <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f7fe fb83 	bl	8007bb0 <pbuf_free>
    return;
 80094aa:	e055      	b.n	8009558 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	330e      	adds	r3, #14
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	3318      	adds	r3, #24
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	3304      	adds	r3, #4
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d102      	bne.n	80094cc <etharp_input+0x74>
    for_us = 0;
 80094c6:	2300      	movs	r3, #0
 80094c8:	75fb      	strb	r3, [r7, #23]
 80094ca:	e009      	b.n	80094e0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80094cc:	68ba      	ldr	r2, [r7, #8]
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	3304      	adds	r3, #4
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	bf0c      	ite	eq
 80094d8:	2301      	moveq	r3, #1
 80094da:	2300      	movne	r3, #0
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	f103 0208 	add.w	r2, r3, #8
 80094e6:	7dfb      	ldrb	r3, [r7, #23]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d001      	beq.n	80094f0 <etharp_input+0x98>
 80094ec:	2301      	movs	r3, #1
 80094ee:	e000      	b.n	80094f2 <etharp_input+0x9a>
 80094f0:	2302      	movs	r3, #2
 80094f2:	f107 010c 	add.w	r1, r7, #12
 80094f6:	6838      	ldr	r0, [r7, #0]
 80094f8:	f7ff fed8 	bl	80092ac <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	88db      	ldrh	r3, [r3, #6]
 8009500:	b29b      	uxth	r3, r3
 8009502:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009506:	d003      	beq.n	8009510 <etharp_input+0xb8>
 8009508:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800950c:	d01e      	beq.n	800954c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800950e:	e020      	b.n	8009552 <etharp_input+0xfa>
      if (for_us) {
 8009510:	7dfb      	ldrb	r3, [r7, #23]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d01c      	beq.n	8009550 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800952c:	693a      	ldr	r2, [r7, #16]
 800952e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8009530:	2102      	movs	r1, #2
 8009532:	9103      	str	r1, [sp, #12]
 8009534:	f107 010c 	add.w	r1, r7, #12
 8009538:	9102      	str	r1, [sp, #8]
 800953a:	9201      	str	r2, [sp, #4]
 800953c:	9300      	str	r3, [sp, #0]
 800953e:	462b      	mov	r3, r5
 8009540:	4622      	mov	r2, r4
 8009542:	4601      	mov	r1, r0
 8009544:	6838      	ldr	r0, [r7, #0]
 8009546:	f000 faeb 	bl	8009b20 <etharp_raw>
      break;
 800954a:	e001      	b.n	8009550 <etharp_input+0xf8>
      break;
 800954c:	bf00      	nop
 800954e:	e000      	b.n	8009552 <etharp_input+0xfa>
      break;
 8009550:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f7fe fb2c 	bl	8007bb0 <pbuf_free>
}
 8009558:	3718      	adds	r7, #24
 800955a:	46bd      	mov	sp, r7
 800955c:	bdb0      	pop	{r4, r5, r7, pc}
 800955e:	bf00      	nop
 8009560:	0800d278 	.word	0x0800d278
 8009564:	0800d3c8 	.word	0x0800d3c8
 8009568:	0800d2f0 	.word	0x0800d2f0

0800956c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af02      	add	r7, sp, #8
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	4613      	mov	r3, r2
 8009578:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800957a:	79fa      	ldrb	r2, [r7, #7]
 800957c:	4944      	ldr	r1, [pc, #272]	@ (8009690 <etharp_output_to_arp_index+0x124>)
 800957e:	4613      	mov	r3, r2
 8009580:	005b      	lsls	r3, r3, #1
 8009582:	4413      	add	r3, r2
 8009584:	00db      	lsls	r3, r3, #3
 8009586:	440b      	add	r3, r1
 8009588:	3314      	adds	r3, #20
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	2b01      	cmp	r3, #1
 800958e:	d806      	bhi.n	800959e <etharp_output_to_arp_index+0x32>
 8009590:	4b40      	ldr	r3, [pc, #256]	@ (8009694 <etharp_output_to_arp_index+0x128>)
 8009592:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8009596:	4940      	ldr	r1, [pc, #256]	@ (8009698 <etharp_output_to_arp_index+0x12c>)
 8009598:	4840      	ldr	r0, [pc, #256]	@ (800969c <etharp_output_to_arp_index+0x130>)
 800959a:	f001 fff1 	bl	800b580 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800959e:	79fa      	ldrb	r2, [r7, #7]
 80095a0:	493b      	ldr	r1, [pc, #236]	@ (8009690 <etharp_output_to_arp_index+0x124>)
 80095a2:	4613      	mov	r3, r2
 80095a4:	005b      	lsls	r3, r3, #1
 80095a6:	4413      	add	r3, r2
 80095a8:	00db      	lsls	r3, r3, #3
 80095aa:	440b      	add	r3, r1
 80095ac:	3314      	adds	r3, #20
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d153      	bne.n	800965c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80095b4:	79fa      	ldrb	r2, [r7, #7]
 80095b6:	4936      	ldr	r1, [pc, #216]	@ (8009690 <etharp_output_to_arp_index+0x124>)
 80095b8:	4613      	mov	r3, r2
 80095ba:	005b      	lsls	r3, r3, #1
 80095bc:	4413      	add	r3, r2
 80095be:	00db      	lsls	r3, r3, #3
 80095c0:	440b      	add	r3, r1
 80095c2:	3312      	adds	r3, #18
 80095c4:	881b      	ldrh	r3, [r3, #0]
 80095c6:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80095ca:	d919      	bls.n	8009600 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80095cc:	79fa      	ldrb	r2, [r7, #7]
 80095ce:	4613      	mov	r3, r2
 80095d0:	005b      	lsls	r3, r3, #1
 80095d2:	4413      	add	r3, r2
 80095d4:	00db      	lsls	r3, r3, #3
 80095d6:	4a2e      	ldr	r2, [pc, #184]	@ (8009690 <etharp_output_to_arp_index+0x124>)
 80095d8:	4413      	add	r3, r2
 80095da:	3304      	adds	r3, #4
 80095dc:	4619      	mov	r1, r3
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f000 fb4c 	bl	8009c7c <etharp_request>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d138      	bne.n	800965c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80095ea:	79fa      	ldrb	r2, [r7, #7]
 80095ec:	4928      	ldr	r1, [pc, #160]	@ (8009690 <etharp_output_to_arp_index+0x124>)
 80095ee:	4613      	mov	r3, r2
 80095f0:	005b      	lsls	r3, r3, #1
 80095f2:	4413      	add	r3, r2
 80095f4:	00db      	lsls	r3, r3, #3
 80095f6:	440b      	add	r3, r1
 80095f8:	3314      	adds	r3, #20
 80095fa:	2203      	movs	r2, #3
 80095fc:	701a      	strb	r2, [r3, #0]
 80095fe:	e02d      	b.n	800965c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8009600:	79fa      	ldrb	r2, [r7, #7]
 8009602:	4923      	ldr	r1, [pc, #140]	@ (8009690 <etharp_output_to_arp_index+0x124>)
 8009604:	4613      	mov	r3, r2
 8009606:	005b      	lsls	r3, r3, #1
 8009608:	4413      	add	r3, r2
 800960a:	00db      	lsls	r3, r3, #3
 800960c:	440b      	add	r3, r1
 800960e:	3312      	adds	r3, #18
 8009610:	881b      	ldrh	r3, [r3, #0]
 8009612:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8009616:	d321      	bcc.n	800965c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8009618:	79fa      	ldrb	r2, [r7, #7]
 800961a:	4613      	mov	r3, r2
 800961c:	005b      	lsls	r3, r3, #1
 800961e:	4413      	add	r3, r2
 8009620:	00db      	lsls	r3, r3, #3
 8009622:	4a1b      	ldr	r2, [pc, #108]	@ (8009690 <etharp_output_to_arp_index+0x124>)
 8009624:	4413      	add	r3, r2
 8009626:	1d19      	adds	r1, r3, #4
 8009628:	79fa      	ldrb	r2, [r7, #7]
 800962a:	4613      	mov	r3, r2
 800962c:	005b      	lsls	r3, r3, #1
 800962e:	4413      	add	r3, r2
 8009630:	00db      	lsls	r3, r3, #3
 8009632:	3308      	adds	r3, #8
 8009634:	4a16      	ldr	r2, [pc, #88]	@ (8009690 <etharp_output_to_arp_index+0x124>)
 8009636:	4413      	add	r3, r2
 8009638:	3304      	adds	r3, #4
 800963a:	461a      	mov	r2, r3
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f000 fafb 	bl	8009c38 <etharp_request_dst>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d109      	bne.n	800965c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8009648:	79fa      	ldrb	r2, [r7, #7]
 800964a:	4911      	ldr	r1, [pc, #68]	@ (8009690 <etharp_output_to_arp_index+0x124>)
 800964c:	4613      	mov	r3, r2
 800964e:	005b      	lsls	r3, r3, #1
 8009650:	4413      	add	r3, r2
 8009652:	00db      	lsls	r3, r3, #3
 8009654:	440b      	add	r3, r1
 8009656:	3314      	adds	r3, #20
 8009658:	2203      	movs	r2, #3
 800965a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8009662:	79fa      	ldrb	r2, [r7, #7]
 8009664:	4613      	mov	r3, r2
 8009666:	005b      	lsls	r3, r3, #1
 8009668:	4413      	add	r3, r2
 800966a:	00db      	lsls	r3, r3, #3
 800966c:	3308      	adds	r3, #8
 800966e:	4a08      	ldr	r2, [pc, #32]	@ (8009690 <etharp_output_to_arp_index+0x124>)
 8009670:	4413      	add	r3, r2
 8009672:	3304      	adds	r3, #4
 8009674:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009678:	9200      	str	r2, [sp, #0]
 800967a:	460a      	mov	r2, r1
 800967c:	68b9      	ldr	r1, [r7, #8]
 800967e:	68f8      	ldr	r0, [r7, #12]
 8009680:	f001 fe36 	bl	800b2f0 <ethernet_output>
 8009684:	4603      	mov	r3, r0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	20008394 	.word	0x20008394
 8009694:	0800d278 	.word	0x0800d278
 8009698:	0800d3e8 	.word	0x0800d3e8
 800969c:	0800d2f0 	.word	0x0800d2f0

080096a0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b08a      	sub	sp, #40	@ 0x28
 80096a4:	af02      	add	r7, sp, #8
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d106      	bne.n	80096c4 <etharp_output+0x24>
 80096b6:	4b73      	ldr	r3, [pc, #460]	@ (8009884 <etharp_output+0x1e4>)
 80096b8:	f240 321e 	movw	r2, #798	@ 0x31e
 80096bc:	4972      	ldr	r1, [pc, #456]	@ (8009888 <etharp_output+0x1e8>)
 80096be:	4873      	ldr	r0, [pc, #460]	@ (800988c <etharp_output+0x1ec>)
 80096c0:	f001 ff5e 	bl	800b580 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d106      	bne.n	80096d8 <etharp_output+0x38>
 80096ca:	4b6e      	ldr	r3, [pc, #440]	@ (8009884 <etharp_output+0x1e4>)
 80096cc:	f240 321f 	movw	r2, #799	@ 0x31f
 80096d0:	496f      	ldr	r1, [pc, #444]	@ (8009890 <etharp_output+0x1f0>)
 80096d2:	486e      	ldr	r0, [pc, #440]	@ (800988c <etharp_output+0x1ec>)
 80096d4:	f001 ff54 	bl	800b580 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d106      	bne.n	80096ec <etharp_output+0x4c>
 80096de:	4b69      	ldr	r3, [pc, #420]	@ (8009884 <etharp_output+0x1e4>)
 80096e0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80096e4:	496b      	ldr	r1, [pc, #428]	@ (8009894 <etharp_output+0x1f4>)
 80096e6:	4869      	ldr	r0, [pc, #420]	@ (800988c <etharp_output+0x1ec>)
 80096e8:	f001 ff4a 	bl	800b580 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	68f9      	ldr	r1, [r7, #12]
 80096f2:	4618      	mov	r0, r3
 80096f4:	f000 feee 	bl	800a4d4 <ip4_addr_isbroadcast_u32>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d002      	beq.n	8009704 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80096fe:	4b66      	ldr	r3, [pc, #408]	@ (8009898 <etharp_output+0x1f8>)
 8009700:	61fb      	str	r3, [r7, #28]
 8009702:	e0af      	b.n	8009864 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800970c:	2be0      	cmp	r3, #224	@ 0xe0
 800970e:	d118      	bne.n	8009742 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8009710:	2301      	movs	r3, #1
 8009712:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8009714:	2300      	movs	r3, #0
 8009716:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8009718:	235e      	movs	r3, #94	@ 0x5e
 800971a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	3301      	adds	r3, #1
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009726:	b2db      	uxtb	r3, r3
 8009728:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	3302      	adds	r3, #2
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	3303      	adds	r3, #3
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800973a:	f107 0310 	add.w	r3, r7, #16
 800973e:	61fb      	str	r3, [r7, #28]
 8009740:	e090      	b.n	8009864 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	3304      	adds	r3, #4
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	405a      	eors	r2, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	3308      	adds	r3, #8
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4013      	ands	r3, r2
 8009756:	2b00      	cmp	r3, #0
 8009758:	d012      	beq.n	8009780 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8009760:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8009764:	4293      	cmp	r3, r2
 8009766:	d00b      	beq.n	8009780 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	330c      	adds	r3, #12
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d003      	beq.n	800977a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	330c      	adds	r3, #12
 8009776:	61bb      	str	r3, [r7, #24]
 8009778:	e002      	b.n	8009780 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800977a:	f06f 0303 	mvn.w	r3, #3
 800977e:	e07d      	b.n	800987c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8009780:	4b46      	ldr	r3, [pc, #280]	@ (800989c <etharp_output+0x1fc>)
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	4619      	mov	r1, r3
 8009786:	4a46      	ldr	r2, [pc, #280]	@ (80098a0 <etharp_output+0x200>)
 8009788:	460b      	mov	r3, r1
 800978a:	005b      	lsls	r3, r3, #1
 800978c:	440b      	add	r3, r1
 800978e:	00db      	lsls	r3, r3, #3
 8009790:	4413      	add	r3, r2
 8009792:	3314      	adds	r3, #20
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	2b01      	cmp	r3, #1
 8009798:	d925      	bls.n	80097e6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800979a:	4b40      	ldr	r3, [pc, #256]	@ (800989c <etharp_output+0x1fc>)
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	4619      	mov	r1, r3
 80097a0:	4a3f      	ldr	r2, [pc, #252]	@ (80098a0 <etharp_output+0x200>)
 80097a2:	460b      	mov	r3, r1
 80097a4:	005b      	lsls	r3, r3, #1
 80097a6:	440b      	add	r3, r1
 80097a8:	00db      	lsls	r3, r3, #3
 80097aa:	4413      	add	r3, r2
 80097ac:	3308      	adds	r3, #8
 80097ae:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d117      	bne.n	80097e6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	4b38      	ldr	r3, [pc, #224]	@ (800989c <etharp_output+0x1fc>)
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	4618      	mov	r0, r3
 80097c0:	4937      	ldr	r1, [pc, #220]	@ (80098a0 <etharp_output+0x200>)
 80097c2:	4603      	mov	r3, r0
 80097c4:	005b      	lsls	r3, r3, #1
 80097c6:	4403      	add	r3, r0
 80097c8:	00db      	lsls	r3, r3, #3
 80097ca:	440b      	add	r3, r1
 80097cc:	3304      	adds	r3, #4
 80097ce:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d108      	bne.n	80097e6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80097d4:	4b31      	ldr	r3, [pc, #196]	@ (800989c <etharp_output+0x1fc>)
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	461a      	mov	r2, r3
 80097da:	68b9      	ldr	r1, [r7, #8]
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f7ff fec5 	bl	800956c <etharp_output_to_arp_index>
 80097e2:	4603      	mov	r3, r0
 80097e4:	e04a      	b.n	800987c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80097e6:	2300      	movs	r3, #0
 80097e8:	75fb      	strb	r3, [r7, #23]
 80097ea:	e031      	b.n	8009850 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80097ec:	7dfa      	ldrb	r2, [r7, #23]
 80097ee:	492c      	ldr	r1, [pc, #176]	@ (80098a0 <etharp_output+0x200>)
 80097f0:	4613      	mov	r3, r2
 80097f2:	005b      	lsls	r3, r3, #1
 80097f4:	4413      	add	r3, r2
 80097f6:	00db      	lsls	r3, r3, #3
 80097f8:	440b      	add	r3, r1
 80097fa:	3314      	adds	r3, #20
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d923      	bls.n	800984a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8009802:	7dfa      	ldrb	r2, [r7, #23]
 8009804:	4926      	ldr	r1, [pc, #152]	@ (80098a0 <etharp_output+0x200>)
 8009806:	4613      	mov	r3, r2
 8009808:	005b      	lsls	r3, r3, #1
 800980a:	4413      	add	r3, r2
 800980c:	00db      	lsls	r3, r3, #3
 800980e:	440b      	add	r3, r1
 8009810:	3308      	adds	r3, #8
 8009812:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	429a      	cmp	r2, r3
 8009818:	d117      	bne.n	800984a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	6819      	ldr	r1, [r3, #0]
 800981e:	7dfa      	ldrb	r2, [r7, #23]
 8009820:	481f      	ldr	r0, [pc, #124]	@ (80098a0 <etharp_output+0x200>)
 8009822:	4613      	mov	r3, r2
 8009824:	005b      	lsls	r3, r3, #1
 8009826:	4413      	add	r3, r2
 8009828:	00db      	lsls	r3, r3, #3
 800982a:	4403      	add	r3, r0
 800982c:	3304      	adds	r3, #4
 800982e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8009830:	4299      	cmp	r1, r3
 8009832:	d10a      	bne.n	800984a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8009834:	4a19      	ldr	r2, [pc, #100]	@ (800989c <etharp_output+0x1fc>)
 8009836:	7dfb      	ldrb	r3, [r7, #23]
 8009838:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800983a:	7dfb      	ldrb	r3, [r7, #23]
 800983c:	461a      	mov	r2, r3
 800983e:	68b9      	ldr	r1, [r7, #8]
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f7ff fe93 	bl	800956c <etharp_output_to_arp_index>
 8009846:	4603      	mov	r3, r0
 8009848:	e018      	b.n	800987c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800984a:	7dfb      	ldrb	r3, [r7, #23]
 800984c:	3301      	adds	r3, #1
 800984e:	75fb      	strb	r3, [r7, #23]
 8009850:	7dfb      	ldrb	r3, [r7, #23]
 8009852:	2b09      	cmp	r3, #9
 8009854:	d9ca      	bls.n	80097ec <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8009856:	68ba      	ldr	r2, [r7, #8]
 8009858:	69b9      	ldr	r1, [r7, #24]
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	f000 f822 	bl	80098a4 <etharp_query>
 8009860:	4603      	mov	r3, r0
 8009862:	e00b      	b.n	800987c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800986a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	68b9      	ldr	r1, [r7, #8]
 8009874:	68f8      	ldr	r0, [r7, #12]
 8009876:	f001 fd3b 	bl	800b2f0 <ethernet_output>
 800987a:	4603      	mov	r3, r0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3720      	adds	r7, #32
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	0800d278 	.word	0x0800d278
 8009888:	0800d3c8 	.word	0x0800d3c8
 800988c:	0800d2f0 	.word	0x0800d2f0
 8009890:	0800d418 	.word	0x0800d418
 8009894:	0800d3b8 	.word	0x0800d3b8
 8009898:	0800d9d4 	.word	0x0800d9d4
 800989c:	20008484 	.word	0x20008484
 80098a0:	20008394 	.word	0x20008394

080098a4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b08c      	sub	sp, #48	@ 0x30
 80098a8:	af02      	add	r7, sp, #8
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	3326      	adds	r3, #38	@ 0x26
 80098b4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80098b6:	23ff      	movs	r3, #255	@ 0xff
 80098b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80098bc:	2300      	movs	r3, #0
 80098be:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68f9      	ldr	r1, [r7, #12]
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 fe04 	bl	800a4d4 <ip4_addr_isbroadcast_u32>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d10c      	bne.n	80098ec <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80098da:	2be0      	cmp	r3, #224	@ 0xe0
 80098dc:	d006      	beq.n	80098ec <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d003      	beq.n	80098ec <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d102      	bne.n	80098f2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80098ec:	f06f 030f 	mvn.w	r3, #15
 80098f0:	e101      	b.n	8009af6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	2101      	movs	r1, #1
 80098f6:	68b8      	ldr	r0, [r7, #8]
 80098f8:	f7ff fb60 	bl	8008fbc <etharp_find_entry>
 80098fc:	4603      	mov	r3, r0
 80098fe:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8009900:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009904:	2b00      	cmp	r3, #0
 8009906:	da02      	bge.n	800990e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8009908:	8a7b      	ldrh	r3, [r7, #18]
 800990a:	b25b      	sxtb	r3, r3
 800990c:	e0f3      	b.n	8009af6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800990e:	8a7b      	ldrh	r3, [r7, #18]
 8009910:	2b7e      	cmp	r3, #126	@ 0x7e
 8009912:	d906      	bls.n	8009922 <etharp_query+0x7e>
 8009914:	4b7a      	ldr	r3, [pc, #488]	@ (8009b00 <etharp_query+0x25c>)
 8009916:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800991a:	497a      	ldr	r1, [pc, #488]	@ (8009b04 <etharp_query+0x260>)
 800991c:	487a      	ldr	r0, [pc, #488]	@ (8009b08 <etharp_query+0x264>)
 800991e:	f001 fe2f 	bl	800b580 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8009922:	8a7b      	ldrh	r3, [r7, #18]
 8009924:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8009926:	7c7a      	ldrb	r2, [r7, #17]
 8009928:	4978      	ldr	r1, [pc, #480]	@ (8009b0c <etharp_query+0x268>)
 800992a:	4613      	mov	r3, r2
 800992c:	005b      	lsls	r3, r3, #1
 800992e:	4413      	add	r3, r2
 8009930:	00db      	lsls	r3, r3, #3
 8009932:	440b      	add	r3, r1
 8009934:	3314      	adds	r3, #20
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d115      	bne.n	8009968 <etharp_query+0xc4>
    is_new_entry = 1;
 800993c:	2301      	movs	r3, #1
 800993e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8009940:	7c7a      	ldrb	r2, [r7, #17]
 8009942:	4972      	ldr	r1, [pc, #456]	@ (8009b0c <etharp_query+0x268>)
 8009944:	4613      	mov	r3, r2
 8009946:	005b      	lsls	r3, r3, #1
 8009948:	4413      	add	r3, r2
 800994a:	00db      	lsls	r3, r3, #3
 800994c:	440b      	add	r3, r1
 800994e:	3314      	adds	r3, #20
 8009950:	2201      	movs	r2, #1
 8009952:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8009954:	7c7a      	ldrb	r2, [r7, #17]
 8009956:	496d      	ldr	r1, [pc, #436]	@ (8009b0c <etharp_query+0x268>)
 8009958:	4613      	mov	r3, r2
 800995a:	005b      	lsls	r3, r3, #1
 800995c:	4413      	add	r3, r2
 800995e:	00db      	lsls	r3, r3, #3
 8009960:	440b      	add	r3, r1
 8009962:	3308      	adds	r3, #8
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8009968:	7c7a      	ldrb	r2, [r7, #17]
 800996a:	4968      	ldr	r1, [pc, #416]	@ (8009b0c <etharp_query+0x268>)
 800996c:	4613      	mov	r3, r2
 800996e:	005b      	lsls	r3, r3, #1
 8009970:	4413      	add	r3, r2
 8009972:	00db      	lsls	r3, r3, #3
 8009974:	440b      	add	r3, r1
 8009976:	3314      	adds	r3, #20
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	2b01      	cmp	r3, #1
 800997c:	d011      	beq.n	80099a2 <etharp_query+0xfe>
 800997e:	7c7a      	ldrb	r2, [r7, #17]
 8009980:	4962      	ldr	r1, [pc, #392]	@ (8009b0c <etharp_query+0x268>)
 8009982:	4613      	mov	r3, r2
 8009984:	005b      	lsls	r3, r3, #1
 8009986:	4413      	add	r3, r2
 8009988:	00db      	lsls	r3, r3, #3
 800998a:	440b      	add	r3, r1
 800998c:	3314      	adds	r3, #20
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	2b01      	cmp	r3, #1
 8009992:	d806      	bhi.n	80099a2 <etharp_query+0xfe>
 8009994:	4b5a      	ldr	r3, [pc, #360]	@ (8009b00 <etharp_query+0x25c>)
 8009996:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800999a:	495d      	ldr	r1, [pc, #372]	@ (8009b10 <etharp_query+0x26c>)
 800999c:	485a      	ldr	r0, [pc, #360]	@ (8009b08 <etharp_query+0x264>)
 800999e:	f001 fdef 	bl	800b580 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80099a2:	6a3b      	ldr	r3, [r7, #32]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d102      	bne.n	80099ae <etharp_query+0x10a>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10c      	bne.n	80099c8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80099ae:	68b9      	ldr	r1, [r7, #8]
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f000 f963 	bl	8009c7c <etharp_request>
 80099b6:	4603      	mov	r3, r0
 80099b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d102      	bne.n	80099c8 <etharp_query+0x124>
      return result;
 80099c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80099c6:	e096      	b.n	8009af6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d106      	bne.n	80099dc <etharp_query+0x138>
 80099ce:	4b4c      	ldr	r3, [pc, #304]	@ (8009b00 <etharp_query+0x25c>)
 80099d0:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80099d4:	494f      	ldr	r1, [pc, #316]	@ (8009b14 <etharp_query+0x270>)
 80099d6:	484c      	ldr	r0, [pc, #304]	@ (8009b08 <etharp_query+0x264>)
 80099d8:	f001 fdd2 	bl	800b580 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80099dc:	7c7a      	ldrb	r2, [r7, #17]
 80099de:	494b      	ldr	r1, [pc, #300]	@ (8009b0c <etharp_query+0x268>)
 80099e0:	4613      	mov	r3, r2
 80099e2:	005b      	lsls	r3, r3, #1
 80099e4:	4413      	add	r3, r2
 80099e6:	00db      	lsls	r3, r3, #3
 80099e8:	440b      	add	r3, r1
 80099ea:	3314      	adds	r3, #20
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d917      	bls.n	8009a22 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80099f2:	4a49      	ldr	r2, [pc, #292]	@ (8009b18 <etharp_query+0x274>)
 80099f4:	7c7b      	ldrb	r3, [r7, #17]
 80099f6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80099f8:	7c7a      	ldrb	r2, [r7, #17]
 80099fa:	4613      	mov	r3, r2
 80099fc:	005b      	lsls	r3, r3, #1
 80099fe:	4413      	add	r3, r2
 8009a00:	00db      	lsls	r3, r3, #3
 8009a02:	3308      	adds	r3, #8
 8009a04:	4a41      	ldr	r2, [pc, #260]	@ (8009b0c <etharp_query+0x268>)
 8009a06:	4413      	add	r3, r2
 8009a08:	3304      	adds	r3, #4
 8009a0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a0e:	9200      	str	r2, [sp, #0]
 8009a10:	697a      	ldr	r2, [r7, #20]
 8009a12:	6879      	ldr	r1, [r7, #4]
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f001 fc6b 	bl	800b2f0 <ethernet_output>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009a20:	e067      	b.n	8009af2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8009a22:	7c7a      	ldrb	r2, [r7, #17]
 8009a24:	4939      	ldr	r1, [pc, #228]	@ (8009b0c <etharp_query+0x268>)
 8009a26:	4613      	mov	r3, r2
 8009a28:	005b      	lsls	r3, r3, #1
 8009a2a:	4413      	add	r3, r2
 8009a2c:	00db      	lsls	r3, r3, #3
 8009a2e:	440b      	add	r3, r1
 8009a30:	3314      	adds	r3, #20
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d15c      	bne.n	8009af2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8009a40:	e01c      	b.n	8009a7c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	895a      	ldrh	r2, [r3, #10]
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	891b      	ldrh	r3, [r3, #8]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d10a      	bne.n	8009a64 <etharp_query+0x1c0>
 8009a4e:	69fb      	ldr	r3, [r7, #28]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d006      	beq.n	8009a64 <etharp_query+0x1c0>
 8009a56:	4b2a      	ldr	r3, [pc, #168]	@ (8009b00 <etharp_query+0x25c>)
 8009a58:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8009a5c:	492f      	ldr	r1, [pc, #188]	@ (8009b1c <etharp_query+0x278>)
 8009a5e:	482a      	ldr	r0, [pc, #168]	@ (8009b08 <etharp_query+0x264>)
 8009a60:	f001 fd8e 	bl	800b580 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	7b1b      	ldrb	r3, [r3, #12]
 8009a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d002      	beq.n	8009a76 <etharp_query+0x1d2>
        copy_needed = 1;
 8009a70:	2301      	movs	r3, #1
 8009a72:	61bb      	str	r3, [r7, #24]
        break;
 8009a74:	e005      	b.n	8009a82 <etharp_query+0x1de>
      }
      p = p->next;
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1df      	bne.n	8009a42 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d007      	beq.n	8009a98 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8009a8e:	200e      	movs	r0, #14
 8009a90:	f7fe fb1a 	bl	80080c8 <pbuf_clone>
 8009a94:	61f8      	str	r0, [r7, #28]
 8009a96:	e004      	b.n	8009aa2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8009a9c:	69f8      	ldr	r0, [r7, #28]
 8009a9e:	f7fe f927 	bl	8007cf0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d021      	beq.n	8009aec <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8009aa8:	7c7a      	ldrb	r2, [r7, #17]
 8009aaa:	4918      	ldr	r1, [pc, #96]	@ (8009b0c <etharp_query+0x268>)
 8009aac:	4613      	mov	r3, r2
 8009aae:	005b      	lsls	r3, r3, #1
 8009ab0:	4413      	add	r3, r2
 8009ab2:	00db      	lsls	r3, r3, #3
 8009ab4:	440b      	add	r3, r1
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00a      	beq.n	8009ad2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8009abc:	7c7a      	ldrb	r2, [r7, #17]
 8009abe:	4913      	ldr	r1, [pc, #76]	@ (8009b0c <etharp_query+0x268>)
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	005b      	lsls	r3, r3, #1
 8009ac4:	4413      	add	r3, r2
 8009ac6:	00db      	lsls	r3, r3, #3
 8009ac8:	440b      	add	r3, r1
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7fe f86f 	bl	8007bb0 <pbuf_free>
      }
      arp_table[i].q = p;
 8009ad2:	7c7a      	ldrb	r2, [r7, #17]
 8009ad4:	490d      	ldr	r1, [pc, #52]	@ (8009b0c <etharp_query+0x268>)
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	005b      	lsls	r3, r3, #1
 8009ada:	4413      	add	r3, r2
 8009adc:	00db      	lsls	r3, r3, #3
 8009ade:	440b      	add	r3, r1
 8009ae0:	69fa      	ldr	r2, [r7, #28]
 8009ae2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009aea:	e002      	b.n	8009af2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8009aec:	23ff      	movs	r3, #255	@ 0xff
 8009aee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8009af2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3728      	adds	r7, #40	@ 0x28
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	0800d278 	.word	0x0800d278
 8009b04:	0800d424 	.word	0x0800d424
 8009b08:	0800d2f0 	.word	0x0800d2f0
 8009b0c:	20008394 	.word	0x20008394
 8009b10:	0800d434 	.word	0x0800d434
 8009b14:	0800d418 	.word	0x0800d418
 8009b18:	20008484 	.word	0x20008484
 8009b1c:	0800d45c 	.word	0x0800d45c

08009b20 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b08a      	sub	sp, #40	@ 0x28
 8009b24:	af02      	add	r7, sp, #8
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	607a      	str	r2, [r7, #4]
 8009b2c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d106      	bne.n	8009b46 <etharp_raw+0x26>
 8009b38:	4b3a      	ldr	r3, [pc, #232]	@ (8009c24 <etharp_raw+0x104>)
 8009b3a:	f240 4257 	movw	r2, #1111	@ 0x457
 8009b3e:	493a      	ldr	r1, [pc, #232]	@ (8009c28 <etharp_raw+0x108>)
 8009b40:	483a      	ldr	r0, [pc, #232]	@ (8009c2c <etharp_raw+0x10c>)
 8009b42:	f001 fd1d 	bl	800b580 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8009b46:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8009b4a:	211c      	movs	r1, #28
 8009b4c:	200e      	movs	r0, #14
 8009b4e:	f7fd fd4d 	bl	80075ec <pbuf_alloc>
 8009b52:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d102      	bne.n	8009b60 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8009b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b5e:	e05d      	b.n	8009c1c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	895b      	ldrh	r3, [r3, #10]
 8009b64:	2b1b      	cmp	r3, #27
 8009b66:	d806      	bhi.n	8009b76 <etharp_raw+0x56>
 8009b68:	4b2e      	ldr	r3, [pc, #184]	@ (8009c24 <etharp_raw+0x104>)
 8009b6a:	f240 4262 	movw	r2, #1122	@ 0x462
 8009b6e:	4930      	ldr	r1, [pc, #192]	@ (8009c30 <etharp_raw+0x110>)
 8009b70:	482e      	ldr	r0, [pc, #184]	@ (8009c2c <etharp_raw+0x10c>)
 8009b72:	f001 fd05 	bl	800b580 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8009b7c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7fc fd06 	bl	8006590 <lwip_htons>
 8009b84:	4603      	mov	r3, r0
 8009b86:	461a      	mov	r2, r3
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009b92:	2b06      	cmp	r3, #6
 8009b94:	d006      	beq.n	8009ba4 <etharp_raw+0x84>
 8009b96:	4b23      	ldr	r3, [pc, #140]	@ (8009c24 <etharp_raw+0x104>)
 8009b98:	f240 4269 	movw	r2, #1129	@ 0x469
 8009b9c:	4925      	ldr	r1, [pc, #148]	@ (8009c34 <etharp_raw+0x114>)
 8009b9e:	4823      	ldr	r0, [pc, #140]	@ (8009c2c <etharp_raw+0x10c>)
 8009ba0:	f001 fcee 	bl	800b580 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	3308      	adds	r3, #8
 8009ba8:	2206      	movs	r2, #6
 8009baa:	6839      	ldr	r1, [r7, #0]
 8009bac:	4618      	mov	r0, r3
 8009bae:	f001 fdd4 	bl	800b75a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	3312      	adds	r3, #18
 8009bb6:	2206      	movs	r2, #6
 8009bb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f001 fdcd 	bl	800b75a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	330e      	adds	r3, #14
 8009bc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009bc6:	6812      	ldr	r2, [r2, #0]
 8009bc8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	3318      	adds	r3, #24
 8009bce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bd0:	6812      	ldr	r2, [r2, #0]
 8009bd2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	701a      	strb	r2, [r3, #0]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f042 0201 	orr.w	r2, r2, #1
 8009be0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f042 0208 	orr.w	r2, r2, #8
 8009bea:	709a      	strb	r2, [r3, #2]
 8009bec:	2200      	movs	r2, #0
 8009bee:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	2206      	movs	r2, #6
 8009bf4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	2204      	movs	r2, #4
 8009bfa:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8009bfc:	f640 0306 	movw	r3, #2054	@ 0x806
 8009c00:	9300      	str	r3, [sp, #0]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	68ba      	ldr	r2, [r7, #8]
 8009c06:	69b9      	ldr	r1, [r7, #24]
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f001 fb71 	bl	800b2f0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8009c0e:	69b8      	ldr	r0, [r7, #24]
 8009c10:	f7fd ffce 	bl	8007bb0 <pbuf_free>
  p = NULL;
 8009c14:	2300      	movs	r3, #0
 8009c16:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8009c18:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3720      	adds	r7, #32
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	0800d278 	.word	0x0800d278
 8009c28:	0800d3c8 	.word	0x0800d3c8
 8009c2c:	0800d2f0 	.word	0x0800d2f0
 8009c30:	0800d478 	.word	0x0800d478
 8009c34:	0800d4ac 	.word	0x0800d4ac

08009c38 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b088      	sub	sp, #32
 8009c3c:	af04      	add	r7, sp, #16
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009c54:	2201      	movs	r2, #1
 8009c56:	9203      	str	r2, [sp, #12]
 8009c58:	68ba      	ldr	r2, [r7, #8]
 8009c5a:	9202      	str	r2, [sp, #8]
 8009c5c:	4a06      	ldr	r2, [pc, #24]	@ (8009c78 <etharp_request_dst+0x40>)
 8009c5e:	9201      	str	r2, [sp, #4]
 8009c60:	9300      	str	r3, [sp, #0]
 8009c62:	4603      	mov	r3, r0
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f7ff ff5a 	bl	8009b20 <etharp_raw>
 8009c6c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	0800d9dc 	.word	0x0800d9dc

08009c7c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8009c86:	4a05      	ldr	r2, [pc, #20]	@ (8009c9c <etharp_request+0x20>)
 8009c88:	6839      	ldr	r1, [r7, #0]
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f7ff ffd4 	bl	8009c38 <etharp_request_dst>
 8009c90:	4603      	mov	r3, r0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3708      	adds	r7, #8
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	0800d9d4 	.word	0x0800d9d4

08009ca0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b08e      	sub	sp, #56	@ 0x38
 8009ca4:	af04      	add	r7, sp, #16
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8009caa:	4b79      	ldr	r3, [pc, #484]	@ (8009e90 <icmp_input+0x1f0>)
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	f003 030f 	and.w	r3, r3, #15
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8009cc0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009cc2:	2b13      	cmp	r3, #19
 8009cc4:	f240 80cd 	bls.w	8009e62 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	895b      	ldrh	r3, [r3, #10]
 8009ccc:	2b03      	cmp	r3, #3
 8009cce:	f240 80ca 	bls.w	8009e66 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8009cdc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f000 80b7 	beq.w	8009e54 <icmp_input+0x1b4>
 8009ce6:	2b08      	cmp	r3, #8
 8009ce8:	f040 80b7 	bne.w	8009e5a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8009cec:	4b69      	ldr	r3, [pc, #420]	@ (8009e94 <icmp_input+0x1f4>)
 8009cee:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009cf0:	4b67      	ldr	r3, [pc, #412]	@ (8009e90 <icmp_input+0x1f0>)
 8009cf2:	695b      	ldr	r3, [r3, #20]
 8009cf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009cf8:	2be0      	cmp	r3, #224	@ 0xe0
 8009cfa:	f000 80bb 	beq.w	8009e74 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8009cfe:	4b64      	ldr	r3, [pc, #400]	@ (8009e90 <icmp_input+0x1f0>)
 8009d00:	695b      	ldr	r3, [r3, #20]
 8009d02:	4a63      	ldr	r2, [pc, #396]	@ (8009e90 <icmp_input+0x1f0>)
 8009d04:	6812      	ldr	r2, [r2, #0]
 8009d06:	4611      	mov	r1, r2
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f000 fbe3 	bl	800a4d4 <ip4_addr_isbroadcast_u32>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	f040 80b1 	bne.w	8009e78 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	891b      	ldrh	r3, [r3, #8]
 8009d1a:	2b07      	cmp	r3, #7
 8009d1c:	f240 80a5 	bls.w	8009e6a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8009d20:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009d22:	330e      	adds	r3, #14
 8009d24:	4619      	mov	r1, r3
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f7fd feac 	bl	8007a84 <pbuf_add_header>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d04b      	beq.n	8009dca <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	891a      	ldrh	r2, [r3, #8]
 8009d36:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009d38:	4413      	add	r3, r2
 8009d3a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	891b      	ldrh	r3, [r3, #8]
 8009d40:	8b7a      	ldrh	r2, [r7, #26]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	f0c0 809a 	bcc.w	8009e7c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8009d48:	8b7b      	ldrh	r3, [r7, #26]
 8009d4a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8009d4e:	4619      	mov	r1, r3
 8009d50:	200e      	movs	r0, #14
 8009d52:	f7fd fc4b 	bl	80075ec <pbuf_alloc>
 8009d56:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	f000 8090 	beq.w	8009e80 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	895b      	ldrh	r3, [r3, #10]
 8009d64:	461a      	mov	r2, r3
 8009d66:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009d68:	3308      	adds	r3, #8
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d203      	bcs.n	8009d76 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8009d6e:	6978      	ldr	r0, [r7, #20]
 8009d70:	f7fd ff1e 	bl	8007bb0 <pbuf_free>
          goto icmperr;
 8009d74:	e085      	b.n	8009e82 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8009d7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f001 fceb 	bl	800b75a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8009d84:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009d86:	4619      	mov	r1, r3
 8009d88:	6978      	ldr	r0, [r7, #20]
 8009d8a:	f7fd fe8b 	bl	8007aa4 <pbuf_remove_header>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d009      	beq.n	8009da8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8009d94:	4b40      	ldr	r3, [pc, #256]	@ (8009e98 <icmp_input+0x1f8>)
 8009d96:	22b6      	movs	r2, #182	@ 0xb6
 8009d98:	4940      	ldr	r1, [pc, #256]	@ (8009e9c <icmp_input+0x1fc>)
 8009d9a:	4841      	ldr	r0, [pc, #260]	@ (8009ea0 <icmp_input+0x200>)
 8009d9c:	f001 fbf0 	bl	800b580 <iprintf>
          pbuf_free(r);
 8009da0:	6978      	ldr	r0, [r7, #20]
 8009da2:	f7fd ff05 	bl	8007bb0 <pbuf_free>
          goto icmperr;
 8009da6:	e06c      	b.n	8009e82 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8009da8:	6879      	ldr	r1, [r7, #4]
 8009daa:	6978      	ldr	r0, [r7, #20]
 8009dac:	f7fe f828 	bl	8007e00 <pbuf_copy>
 8009db0:	4603      	mov	r3, r0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d003      	beq.n	8009dbe <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8009db6:	6978      	ldr	r0, [r7, #20]
 8009db8:	f7fd fefa 	bl	8007bb0 <pbuf_free>
          goto icmperr;
 8009dbc:	e061      	b.n	8009e82 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f7fd fef6 	bl	8007bb0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	607b      	str	r3, [r7, #4]
 8009dc8:	e00f      	b.n	8009dea <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8009dca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009dcc:	330e      	adds	r3, #14
 8009dce:	4619      	mov	r1, r3
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f7fd fe67 	bl	8007aa4 <pbuf_remove_header>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d006      	beq.n	8009dea <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8009ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8009e98 <icmp_input+0x1f8>)
 8009dde:	22c7      	movs	r2, #199	@ 0xc7
 8009de0:	4930      	ldr	r1, [pc, #192]	@ (8009ea4 <icmp_input+0x204>)
 8009de2:	482f      	ldr	r0, [pc, #188]	@ (8009ea0 <icmp_input+0x200>)
 8009de4:	f001 fbcc 	bl	800b580 <iprintf>
          goto icmperr;
 8009de8:	e04b      	b.n	8009e82 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8009df0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009df2:	4619      	mov	r1, r3
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f7fd fe45 	bl	8007a84 <pbuf_add_header>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d12b      	bne.n	8009e58 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8009e0e:	4b20      	ldr	r3, [pc, #128]	@ (8009e90 <icmp_input+0x1f0>)
 8009e10:	691a      	ldr	r2, [r3, #16]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	709a      	strb	r2, [r3, #2]
 8009e22:	2200      	movs	r2, #0
 8009e24:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	22ff      	movs	r2, #255	@ 0xff
 8009e2a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	729a      	strb	r2, [r3, #10]
 8009e32:	2200      	movs	r2, #0
 8009e34:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	9302      	str	r3, [sp, #8]
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	9301      	str	r3, [sp, #4]
 8009e3e:	2300      	movs	r3, #0
 8009e40:	9300      	str	r3, [sp, #0]
 8009e42:	23ff      	movs	r3, #255	@ 0xff
 8009e44:	2200      	movs	r2, #0
 8009e46:	69f9      	ldr	r1, [r7, #28]
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fa6b 	bl	800a324 <ip4_output_if>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8009e52:	e001      	b.n	8009e58 <icmp_input+0x1b8>
      break;
 8009e54:	bf00      	nop
 8009e56:	e000      	b.n	8009e5a <icmp_input+0x1ba>
      break;
 8009e58:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f7fd fea8 	bl	8007bb0 <pbuf_free>
  return;
 8009e60:	e013      	b.n	8009e8a <icmp_input+0x1ea>
    goto lenerr;
 8009e62:	bf00      	nop
 8009e64:	e002      	b.n	8009e6c <icmp_input+0x1cc>
    goto lenerr;
 8009e66:	bf00      	nop
 8009e68:	e000      	b.n	8009e6c <icmp_input+0x1cc>
        goto lenerr;
 8009e6a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f7fd fe9f 	bl	8007bb0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8009e72:	e00a      	b.n	8009e8a <icmp_input+0x1ea>
        goto icmperr;
 8009e74:	bf00      	nop
 8009e76:	e004      	b.n	8009e82 <icmp_input+0x1e2>
        goto icmperr;
 8009e78:	bf00      	nop
 8009e7a:	e002      	b.n	8009e82 <icmp_input+0x1e2>
          goto icmperr;
 8009e7c:	bf00      	nop
 8009e7e:	e000      	b.n	8009e82 <icmp_input+0x1e2>
          goto icmperr;
 8009e80:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f7fd fe94 	bl	8007bb0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8009e88:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8009e8a:	3728      	adds	r7, #40	@ 0x28
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}
 8009e90:	2000532c 	.word	0x2000532c
 8009e94:	20005340 	.word	0x20005340
 8009e98:	0800d4f0 	.word	0x0800d4f0
 8009e9c:	0800d528 	.word	0x0800d528
 8009ea0:	0800d560 	.word	0x0800d560
 8009ea4:	0800d588 	.word	0x0800d588

08009ea8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8009eb4:	78fb      	ldrb	r3, [r7, #3]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	2103      	movs	r1, #3
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 f814 	bl	8009ee8 <icmp_send_response>
}
 8009ec0:	bf00      	nop
 8009ec2:	3708      	adds	r7, #8
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8009ed4:	78fb      	ldrb	r3, [r7, #3]
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	210b      	movs	r1, #11
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f804 	bl	8009ee8 <icmp_send_response>
}
 8009ee0:	bf00      	nop
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b08c      	sub	sp, #48	@ 0x30
 8009eec:	af04      	add	r7, sp, #16
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	70fb      	strb	r3, [r7, #3]
 8009ef4:	4613      	mov	r3, r2
 8009ef6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8009ef8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8009efc:	2124      	movs	r1, #36	@ 0x24
 8009efe:	2022      	movs	r0, #34	@ 0x22
 8009f00:	f7fd fb74 	bl	80075ec <pbuf_alloc>
 8009f04:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d04c      	beq.n	8009fa6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	895b      	ldrh	r3, [r3, #10]
 8009f10:	2b23      	cmp	r3, #35	@ 0x23
 8009f12:	d806      	bhi.n	8009f22 <icmp_send_response+0x3a>
 8009f14:	4b26      	ldr	r3, [pc, #152]	@ (8009fb0 <icmp_send_response+0xc8>)
 8009f16:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8009f1a:	4926      	ldr	r1, [pc, #152]	@ (8009fb4 <icmp_send_response+0xcc>)
 8009f1c:	4826      	ldr	r0, [pc, #152]	@ (8009fb8 <icmp_send_response+0xd0>)
 8009f1e:	f001 fb2f 	bl	800b580 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	78fa      	ldrb	r2, [r7, #3]
 8009f32:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	78ba      	ldrb	r2, [r7, #2]
 8009f38:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	711a      	strb	r2, [r3, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	2200      	movs	r2, #0
 8009f48:	719a      	strb	r2, [r3, #6]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	f103 0008 	add.w	r0, r3, #8
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	221c      	movs	r2, #28
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	f001 fbfc 	bl	800b75a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8009f68:	f107 030c 	add.w	r3, r7, #12
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f000 f825 	bl	8009fbc <ip4_route>
 8009f72:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d011      	beq.n	8009f9e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	709a      	strb	r2, [r3, #2]
 8009f80:	2200      	movs	r2, #0
 8009f82:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8009f84:	f107 020c 	add.w	r2, r7, #12
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	9302      	str	r3, [sp, #8]
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	9301      	str	r3, [sp, #4]
 8009f90:	2300      	movs	r3, #0
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	23ff      	movs	r3, #255	@ 0xff
 8009f96:	2100      	movs	r1, #0
 8009f98:	69f8      	ldr	r0, [r7, #28]
 8009f9a:	f000 f9c3 	bl	800a324 <ip4_output_if>
  }
  pbuf_free(q);
 8009f9e:	69f8      	ldr	r0, [r7, #28]
 8009fa0:	f7fd fe06 	bl	8007bb0 <pbuf_free>
 8009fa4:	e000      	b.n	8009fa8 <icmp_send_response+0xc0>
    return;
 8009fa6:	bf00      	nop
}
 8009fa8:	3720      	adds	r7, #32
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	0800d4f0 	.word	0x0800d4f0
 8009fb4:	0800d5bc 	.word	0x0800d5bc
 8009fb8:	0800d560 	.word	0x0800d560

08009fbc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8009fc4:	4b33      	ldr	r3, [pc, #204]	@ (800a094 <ip4_route+0xd8>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	60fb      	str	r3, [r7, #12]
 8009fca:	e036      	b.n	800a03a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009fd2:	f003 0301 	and.w	r3, r3, #1
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d02b      	beq.n	800a034 <ip4_route+0x78>
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009fe2:	089b      	lsrs	r3, r3, #2
 8009fe4:	f003 0301 	and.w	r3, r3, #1
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d022      	beq.n	800a034 <ip4_route+0x78>
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	3304      	adds	r3, #4
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d01d      	beq.n	800a034 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	3304      	adds	r3, #4
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	405a      	eors	r2, r3
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	3308      	adds	r3, #8
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4013      	ands	r3, r2
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d101      	bne.n	800a014 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	e038      	b.n	800a086 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a01a:	f003 0302 	and.w	r3, r3, #2
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d108      	bne.n	800a034 <ip4_route+0x78>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	330c      	adds	r3, #12
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d101      	bne.n	800a034 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	e028      	b.n	800a086 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	60fb      	str	r3, [r7, #12]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d1c5      	bne.n	8009fcc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800a040:	4b15      	ldr	r3, [pc, #84]	@ (800a098 <ip4_route+0xdc>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d01a      	beq.n	800a07e <ip4_route+0xc2>
 800a048:	4b13      	ldr	r3, [pc, #76]	@ (800a098 <ip4_route+0xdc>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a050:	f003 0301 	and.w	r3, r3, #1
 800a054:	2b00      	cmp	r3, #0
 800a056:	d012      	beq.n	800a07e <ip4_route+0xc2>
 800a058:	4b0f      	ldr	r3, [pc, #60]	@ (800a098 <ip4_route+0xdc>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a060:	f003 0304 	and.w	r3, r3, #4
 800a064:	2b00      	cmp	r3, #0
 800a066:	d00a      	beq.n	800a07e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800a068:	4b0b      	ldr	r3, [pc, #44]	@ (800a098 <ip4_route+0xdc>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	3304      	adds	r3, #4
 800a06e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800a070:	2b00      	cmp	r3, #0
 800a072:	d004      	beq.n	800a07e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a07c:	d101      	bne.n	800a082 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800a07e:	2300      	movs	r3, #0
 800a080:	e001      	b.n	800a086 <ip4_route+0xca>
  }

  return netif_default;
 800a082:	4b05      	ldr	r3, [pc, #20]	@ (800a098 <ip4_route+0xdc>)
 800a084:	681b      	ldr	r3, [r3, #0]
}
 800a086:	4618      	mov	r0, r3
 800a088:	3714      	adds	r7, #20
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	2000837c 	.word	0x2000837c
 800a098:	20008380 	.word	0x20008380

0800a09c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a0aa:	f003 0301 	and.w	r3, r3, #1
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d016      	beq.n	800a0e2 <ip4_input_accept+0x46>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	3304      	adds	r3, #4
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d011      	beq.n	800a0e2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a0be:	4b0b      	ldr	r3, [pc, #44]	@ (800a0ec <ip4_input_accept+0x50>)
 800a0c0:	695a      	ldr	r2, [r3, #20]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	3304      	adds	r3, #4
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d008      	beq.n	800a0de <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800a0cc:	4b07      	ldr	r3, [pc, #28]	@ (800a0ec <ip4_input_accept+0x50>)
 800a0ce:	695b      	ldr	r3, [r3, #20]
 800a0d0:	6879      	ldr	r1, [r7, #4]
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f000 f9fe 	bl	800a4d4 <ip4_addr_isbroadcast_u32>
 800a0d8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d001      	beq.n	800a0e2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e000      	b.n	800a0e4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	2000532c 	.word	0x2000532c

0800a0f0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b086      	sub	sp, #24
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	091b      	lsrs	r3, r3, #4
 800a106:	b2db      	uxtb	r3, r3
 800a108:	2b04      	cmp	r3, #4
 800a10a:	d004      	beq.n	800a116 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f7fd fd4f 	bl	8007bb0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800a112:	2300      	movs	r3, #0
 800a114:	e0fd      	b.n	800a312 <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	f003 030f 	and.w	r3, r3, #15
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	b2db      	uxtb	r3, r3
 800a124:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	885b      	ldrh	r3, [r3, #2]
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7fc fa2f 	bl	8006590 <lwip_htons>
 800a132:	4603      	mov	r3, r0
 800a134:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	891b      	ldrh	r3, [r3, #8]
 800a13a:	89ba      	ldrh	r2, [r7, #12]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d204      	bcs.n	800a14a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800a140:	89bb      	ldrh	r3, [r7, #12]
 800a142:	4619      	mov	r1, r3
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f7fd fbad 	bl	80078a4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	895b      	ldrh	r3, [r3, #10]
 800a14e:	89fa      	ldrh	r2, [r7, #14]
 800a150:	429a      	cmp	r2, r3
 800a152:	d807      	bhi.n	800a164 <ip4_input+0x74>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	891b      	ldrh	r3, [r3, #8]
 800a158:	89ba      	ldrh	r2, [r7, #12]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d802      	bhi.n	800a164 <ip4_input+0x74>
 800a15e:	89fb      	ldrh	r3, [r7, #14]
 800a160:	2b13      	cmp	r3, #19
 800a162:	d804      	bhi.n	800a16e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f7fd fd23 	bl	8007bb0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800a16a:	2300      	movs	r3, #0
 800a16c:	e0d1      	b.n	800a312 <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	691b      	ldr	r3, [r3, #16]
 800a172:	4a6a      	ldr	r2, [pc, #424]	@ (800a31c <ip4_input+0x22c>)
 800a174:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	4a68      	ldr	r2, [pc, #416]	@ (800a31c <ip4_input+0x22c>)
 800a17c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a17e:	4b67      	ldr	r3, [pc, #412]	@ (800a31c <ip4_input+0x22c>)
 800a180:	695b      	ldr	r3, [r3, #20]
 800a182:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a186:	2be0      	cmp	r3, #224	@ 0xe0
 800a188:	d112      	bne.n	800a1b0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a190:	f003 0301 	and.w	r3, r3, #1
 800a194:	b2db      	uxtb	r3, r3
 800a196:	2b00      	cmp	r3, #0
 800a198:	d007      	beq.n	800a1aa <ip4_input+0xba>
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	3304      	adds	r3, #4
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d002      	beq.n	800a1aa <ip4_input+0xba>
      netif = inp;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	613b      	str	r3, [r7, #16]
 800a1a8:	e02a      	b.n	800a200 <ip4_input+0x110>
    } else {
      netif = NULL;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	613b      	str	r3, [r7, #16]
 800a1ae:	e027      	b.n	800a200 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800a1b0:	6838      	ldr	r0, [r7, #0]
 800a1b2:	f7ff ff73 	bl	800a09c <ip4_input_accept>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d002      	beq.n	800a1c2 <ip4_input+0xd2>
      netif = inp;
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	613b      	str	r3, [r7, #16]
 800a1c0:	e01e      	b.n	800a200 <ip4_input+0x110>
    } else {
      netif = NULL;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800a1c6:	4b55      	ldr	r3, [pc, #340]	@ (800a31c <ip4_input+0x22c>)
 800a1c8:	695b      	ldr	r3, [r3, #20]
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	2b7f      	cmp	r3, #127	@ 0x7f
 800a1ce:	d017      	beq.n	800a200 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800a1d0:	4b53      	ldr	r3, [pc, #332]	@ (800a320 <ip4_input+0x230>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	613b      	str	r3, [r7, #16]
 800a1d6:	e00e      	b.n	800a1f6 <ip4_input+0x106>
          if (netif == inp) {
 800a1d8:	693a      	ldr	r2, [r7, #16]
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d006      	beq.n	800a1ee <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800a1e0:	6938      	ldr	r0, [r7, #16]
 800a1e2:	f7ff ff5b 	bl	800a09c <ip4_input_accept>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d108      	bne.n	800a1fe <ip4_input+0x10e>
 800a1ec:	e000      	b.n	800a1f0 <ip4_input+0x100>
            continue;
 800a1ee:	bf00      	nop
        NETIF_FOREACH(netif) {
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	613b      	str	r3, [r7, #16]
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1ed      	bne.n	800a1d8 <ip4_input+0xe8>
 800a1fc:	e000      	b.n	800a200 <ip4_input+0x110>
            break;
 800a1fe:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800a200:	4b46      	ldr	r3, [pc, #280]	@ (800a31c <ip4_input+0x22c>)
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	6839      	ldr	r1, [r7, #0]
 800a206:	4618      	mov	r0, r3
 800a208:	f000 f964 	bl	800a4d4 <ip4_addr_isbroadcast_u32>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d105      	bne.n	800a21e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800a212:	4b42      	ldr	r3, [pc, #264]	@ (800a31c <ip4_input+0x22c>)
 800a214:	691b      	ldr	r3, [r3, #16]
 800a216:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800a21a:	2be0      	cmp	r3, #224	@ 0xe0
 800a21c:	d104      	bne.n	800a228 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f7fd fcc6 	bl	8007bb0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800a224:	2300      	movs	r3, #0
 800a226:	e074      	b.n	800a312 <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d104      	bne.n	800a238 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f7fd fcbe 	bl	8007bb0 <pbuf_free>
    return ERR_OK;
 800a234:	2300      	movs	r3, #0
 800a236:	e06c      	b.n	800a312 <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	88db      	ldrh	r3, [r3, #6]
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	461a      	mov	r2, r3
 800a240:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800a244:	4013      	ands	r3, r2
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00b      	beq.n	800a262 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 fc88 	bl	800ab60 <ip4_reass>
 800a250:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d101      	bne.n	800a25c <ip4_input+0x16c>
      return ERR_OK;
 800a258:	2300      	movs	r3, #0
 800a25a:	e05a      	b.n	800a312 <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800a262:	4a2e      	ldr	r2, [pc, #184]	@ (800a31c <ip4_input+0x22c>)
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800a268:	4a2c      	ldr	r2, [pc, #176]	@ (800a31c <ip4_input+0x22c>)
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800a26e:	4a2b      	ldr	r2, [pc, #172]	@ (800a31c <ip4_input+0x22c>)
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	f003 030f 	and.w	r3, r3, #15
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	b2db      	uxtb	r3, r3
 800a282:	461a      	mov	r2, r3
 800a284:	4b25      	ldr	r3, [pc, #148]	@ (800a31c <ip4_input+0x22c>)
 800a286:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800a288:	89fb      	ldrh	r3, [r7, #14]
 800a28a:	4619      	mov	r1, r3
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f7fd fc09 	bl	8007aa4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	7a5b      	ldrb	r3, [r3, #9]
 800a296:	2b01      	cmp	r3, #1
 800a298:	d006      	beq.n	800a2a8 <ip4_input+0x1b8>
 800a29a:	2b11      	cmp	r3, #17
 800a29c:	d109      	bne.n	800a2b2 <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800a29e:	6839      	ldr	r1, [r7, #0]
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f7fe f913 	bl	80084cc <udp_input>
        break;
 800a2a6:	e021      	b.n	800a2ec <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800a2a8:	6839      	ldr	r1, [r7, #0]
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f7ff fcf8 	bl	8009ca0 <icmp_input>
        break;
 800a2b0:	e01c      	b.n	800a2ec <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800a2b2:	4b1a      	ldr	r3, [pc, #104]	@ (800a31c <ip4_input+0x22c>)
 800a2b4:	695b      	ldr	r3, [r3, #20]
 800a2b6:	6939      	ldr	r1, [r7, #16]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f000 f90b 	bl	800a4d4 <ip4_addr_isbroadcast_u32>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d10f      	bne.n	800a2e4 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a2c4:	4b15      	ldr	r3, [pc, #84]	@ (800a31c <ip4_input+0x22c>)
 800a2c6:	695b      	ldr	r3, [r3, #20]
 800a2c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800a2cc:	2be0      	cmp	r3, #224	@ 0xe0
 800a2ce:	d009      	beq.n	800a2e4 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800a2d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f7fd fc57 	bl	8007b8a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800a2dc:	2102      	movs	r1, #2
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f7ff fde2 	bl	8009ea8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f7fd fc63 	bl	8007bb0 <pbuf_free>
        break;
 800a2ea:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800a2ec:	4b0b      	ldr	r3, [pc, #44]	@ (800a31c <ip4_input+0x22c>)
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800a2f2:	4b0a      	ldr	r3, [pc, #40]	@ (800a31c <ip4_input+0x22c>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800a2f8:	4b08      	ldr	r3, [pc, #32]	@ (800a31c <ip4_input+0x22c>)
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800a2fe:	4b07      	ldr	r3, [pc, #28]	@ (800a31c <ip4_input+0x22c>)
 800a300:	2200      	movs	r2, #0
 800a302:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800a304:	4b05      	ldr	r3, [pc, #20]	@ (800a31c <ip4_input+0x22c>)
 800a306:	2200      	movs	r2, #0
 800a308:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800a30a:	4b04      	ldr	r3, [pc, #16]	@ (800a31c <ip4_input+0x22c>)
 800a30c:	2200      	movs	r2, #0
 800a30e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3718      	adds	r7, #24
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	2000532c 	.word	0x2000532c
 800a320:	2000837c 	.word	0x2000837c

0800a324 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b08a      	sub	sp, #40	@ 0x28
 800a328:	af04      	add	r7, sp, #16
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	60b9      	str	r1, [r7, #8]
 800a32e:	607a      	str	r2, [r7, #4]
 800a330:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d009      	beq.n	800a350 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d003      	beq.n	800a34a <ip4_output_if+0x26>
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d102      	bne.n	800a350 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800a34a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a34c:	3304      	adds	r3, #4
 800a34e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800a350:	78fa      	ldrb	r2, [r7, #3]
 800a352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a354:	9302      	str	r3, [sp, #8]
 800a356:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a35a:	9301      	str	r3, [sp, #4]
 800a35c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	4613      	mov	r3, r2
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	6979      	ldr	r1, [r7, #20]
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f000 f805 	bl	800a378 <ip4_output_if_src>
 800a36e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800a370:	4618      	mov	r0, r3
 800a372:	3718      	adds	r7, #24
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b088      	sub	sp, #32
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]
 800a384:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	7b9b      	ldrb	r3, [r3, #14]
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d006      	beq.n	800a39c <ip4_output_if_src+0x24>
 800a38e:	4b4b      	ldr	r3, [pc, #300]	@ (800a4bc <ip4_output_if_src+0x144>)
 800a390:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800a394:	494a      	ldr	r1, [pc, #296]	@ (800a4c0 <ip4_output_if_src+0x148>)
 800a396:	484b      	ldr	r0, [pc, #300]	@ (800a4c4 <ip4_output_if_src+0x14c>)
 800a398:	f001 f8f2 	bl	800b580 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d060      	beq.n	800a464 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800a3a2:	2314      	movs	r3, #20
 800a3a4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800a3a6:	2114      	movs	r1, #20
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	f7fd fb6b 	bl	8007a84 <pbuf_add_header>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d002      	beq.n	800a3ba <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800a3b4:	f06f 0301 	mvn.w	r3, #1
 800a3b8:	e07c      	b.n	800a4b4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	895b      	ldrh	r3, [r3, #10]
 800a3c4:	2b13      	cmp	r3, #19
 800a3c6:	d806      	bhi.n	800a3d6 <ip4_output_if_src+0x5e>
 800a3c8:	4b3c      	ldr	r3, [pc, #240]	@ (800a4bc <ip4_output_if_src+0x144>)
 800a3ca:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800a3ce:	493e      	ldr	r1, [pc, #248]	@ (800a4c8 <ip4_output_if_src+0x150>)
 800a3d0:	483c      	ldr	r0, [pc, #240]	@ (800a4c4 <ip4_output_if_src+0x14c>)
 800a3d2:	f001 f8d5 	bl	800b580 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800a3d6:	69fb      	ldr	r3, [r7, #28]
 800a3d8:	78fa      	ldrb	r2, [r7, #3]
 800a3da:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800a3dc:	69fb      	ldr	r3, [r7, #28]
 800a3de:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800a3e2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800a3ec:	8b7b      	ldrh	r3, [r7, #26]
 800a3ee:	089b      	lsrs	r3, r3, #2
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3f8:	b2da      	uxtb	r2, r3
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800a404:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	891b      	ldrh	r3, [r3, #8]
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7fc f8c0 	bl	8006590 <lwip_htons>
 800a410:	4603      	mov	r3, r0
 800a412:	461a      	mov	r2, r3
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800a418:	69fb      	ldr	r3, [r7, #28]
 800a41a:	2200      	movs	r2, #0
 800a41c:	719a      	strb	r2, [r3, #6]
 800a41e:	2200      	movs	r2, #0
 800a420:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800a422:	4b2a      	ldr	r3, [pc, #168]	@ (800a4cc <ip4_output_if_src+0x154>)
 800a424:	881b      	ldrh	r3, [r3, #0]
 800a426:	4618      	mov	r0, r3
 800a428:	f7fc f8b2 	bl	8006590 <lwip_htons>
 800a42c:	4603      	mov	r3, r0
 800a42e:	461a      	mov	r2, r3
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800a434:	4b25      	ldr	r3, [pc, #148]	@ (800a4cc <ip4_output_if_src+0x154>)
 800a436:	881b      	ldrh	r3, [r3, #0]
 800a438:	3301      	adds	r3, #1
 800a43a:	b29a      	uxth	r2, r3
 800a43c:	4b23      	ldr	r3, [pc, #140]	@ (800a4cc <ip4_output_if_src+0x154>)
 800a43e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d104      	bne.n	800a450 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800a446:	4b22      	ldr	r3, [pc, #136]	@ (800a4d0 <ip4_output_if_src+0x158>)
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	69fb      	ldr	r3, [r7, #28]
 800a44c:	60da      	str	r2, [r3, #12]
 800a44e:	e003      	b.n	800a458 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	2200      	movs	r2, #0
 800a45c:	729a      	strb	r2, [r3, #10]
 800a45e:	2200      	movs	r2, #0
 800a460:	72da      	strb	r2, [r3, #11]
 800a462:	e00f      	b.n	800a484 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	895b      	ldrh	r3, [r3, #10]
 800a468:	2b13      	cmp	r3, #19
 800a46a:	d802      	bhi.n	800a472 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800a46c:	f06f 0301 	mvn.w	r3, #1
 800a470:	e020      	b.n	800a4b4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800a47e:	f107 0314 	add.w	r3, r7, #20
 800a482:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800a484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a486:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d00c      	beq.n	800a4a6 <ip4_output_if_src+0x12e>
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	891a      	ldrh	r2, [r3, #8]
 800a490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a492:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a494:	429a      	cmp	r2, r3
 800a496:	d906      	bls.n	800a4a6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f000 fd53 	bl	800af48 <ip4_frag>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	e006      	b.n	800a4b4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800a4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a8:	695b      	ldr	r3, [r3, #20]
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	68f9      	ldr	r1, [r7, #12]
 800a4ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4b0:	4798      	blx	r3
 800a4b2:	4603      	mov	r3, r0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3720      	adds	r7, #32
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}
 800a4bc:	0800d5e8 	.word	0x0800d5e8
 800a4c0:	0800d61c 	.word	0x0800d61c
 800a4c4:	0800d628 	.word	0x0800d628
 800a4c8:	0800d650 	.word	0x0800d650
 800a4cc:	20008486 	.word	0x20008486
 800a4d0:	0800d9d0 	.word	0x0800d9d0

0800a4d4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b085      	sub	sp, #20
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e8:	d002      	beq.n	800a4f0 <ip4_addr_isbroadcast_u32+0x1c>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d101      	bne.n	800a4f4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e02a      	b.n	800a54a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a4fa:	f003 0302 	and.w	r3, r3, #2
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d101      	bne.n	800a506 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800a502:	2300      	movs	r3, #0
 800a504:	e021      	b.n	800a54a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	3304      	adds	r3, #4
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d101      	bne.n	800a516 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800a512:	2300      	movs	r3, #0
 800a514:	e019      	b.n	800a54a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	3304      	adds	r3, #4
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	405a      	eors	r2, r3
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	3308      	adds	r3, #8
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4013      	ands	r3, r2
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d10d      	bne.n	800a548 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	3308      	adds	r3, #8
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	43da      	mvns	r2, r3
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	3308      	adds	r3, #8
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800a540:	429a      	cmp	r2, r3
 800a542:	d101      	bne.n	800a548 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800a544:	2301      	movs	r3, #1
 800a546:	e000      	b.n	800a54a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800a548:	2300      	movs	r3, #0
  }
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3714      	adds	r7, #20
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr
	...

0800a558 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800a55e:	2300      	movs	r3, #0
 800a560:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800a562:	4b12      	ldr	r3, [pc, #72]	@ (800a5ac <ip_reass_tmr+0x54>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800a568:	e018      	b.n	800a59c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	7fdb      	ldrb	r3, [r3, #31]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00b      	beq.n	800a58a <ip_reass_tmr+0x32>
      r->timer--;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	7fdb      	ldrb	r3, [r3, #31]
 800a576:	3b01      	subs	r3, #1
 800a578:	b2da      	uxtb	r2, r3
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	60fb      	str	r3, [r7, #12]
 800a588:	e008      	b.n	800a59c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800a594:	68b9      	ldr	r1, [r7, #8]
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 f80a 	bl	800a5b0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1e3      	bne.n	800a56a <ip_reass_tmr+0x12>
    }
  }
}
 800a5a2:	bf00      	nop
 800a5a4:	bf00      	nop
 800a5a6:	3710      	adds	r7, #16
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	20008488 	.word	0x20008488

0800a5b0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b088      	sub	sp, #32
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800a5be:	683a      	ldr	r2, [r7, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d105      	bne.n	800a5d2 <ip_reass_free_complete_datagram+0x22>
 800a5c6:	4b45      	ldr	r3, [pc, #276]	@ (800a6dc <ip_reass_free_complete_datagram+0x12c>)
 800a5c8:	22ab      	movs	r2, #171	@ 0xab
 800a5ca:	4945      	ldr	r1, [pc, #276]	@ (800a6e0 <ip_reass_free_complete_datagram+0x130>)
 800a5cc:	4845      	ldr	r0, [pc, #276]	@ (800a6e4 <ip_reass_free_complete_datagram+0x134>)
 800a5ce:	f000 ffd7 	bl	800b580 <iprintf>
  if (prev != NULL) {
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d00a      	beq.n	800a5ee <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d005      	beq.n	800a5ee <ip_reass_free_complete_datagram+0x3e>
 800a5e2:	4b3e      	ldr	r3, [pc, #248]	@ (800a6dc <ip_reass_free_complete_datagram+0x12c>)
 800a5e4:	22ad      	movs	r2, #173	@ 0xad
 800a5e6:	4940      	ldr	r1, [pc, #256]	@ (800a6e8 <ip_reass_free_complete_datagram+0x138>)
 800a5e8:	483e      	ldr	r0, [pc, #248]	@ (800a6e4 <ip_reass_free_complete_datagram+0x134>)
 800a5ea:	f000 ffc9 	bl	800b580 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	889b      	ldrh	r3, [r3, #4]
 800a5fa:	b29b      	uxth	r3, r3
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d12a      	bne.n	800a656 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	6858      	ldr	r0, [r3, #4]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	3308      	adds	r3, #8
 800a616:	2214      	movs	r2, #20
 800a618:	4619      	mov	r1, r3
 800a61a:	f001 f89e 	bl	800b75a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800a61e:	2101      	movs	r1, #1
 800a620:	69b8      	ldr	r0, [r7, #24]
 800a622:	f7ff fc51 	bl	8009ec8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800a626:	69b8      	ldr	r0, [r7, #24]
 800a628:	f7fd fb4a 	bl	8007cc0 <pbuf_clen>
 800a62c:	4603      	mov	r3, r0
 800a62e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800a630:	8bfa      	ldrh	r2, [r7, #30]
 800a632:	8a7b      	ldrh	r3, [r7, #18]
 800a634:	4413      	add	r3, r2
 800a636:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a63a:	db05      	blt.n	800a648 <ip_reass_free_complete_datagram+0x98>
 800a63c:	4b27      	ldr	r3, [pc, #156]	@ (800a6dc <ip_reass_free_complete_datagram+0x12c>)
 800a63e:	22bc      	movs	r2, #188	@ 0xbc
 800a640:	492a      	ldr	r1, [pc, #168]	@ (800a6ec <ip_reass_free_complete_datagram+0x13c>)
 800a642:	4828      	ldr	r0, [pc, #160]	@ (800a6e4 <ip_reass_free_complete_datagram+0x134>)
 800a644:	f000 ff9c 	bl	800b580 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800a648:	8bfa      	ldrh	r2, [r7, #30]
 800a64a:	8a7b      	ldrh	r3, [r7, #18]
 800a64c:	4413      	add	r3, r2
 800a64e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800a650:	69b8      	ldr	r0, [r7, #24]
 800a652:	f7fd faad 	bl	8007bb0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800a65c:	e01f      	b.n	800a69e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	617b      	str	r3, [r7, #20]
    pcur = p;
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f7fd fb26 	bl	8007cc0 <pbuf_clen>
 800a674:	4603      	mov	r3, r0
 800a676:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800a678:	8bfa      	ldrh	r2, [r7, #30]
 800a67a:	8a7b      	ldrh	r3, [r7, #18]
 800a67c:	4413      	add	r3, r2
 800a67e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a682:	db05      	blt.n	800a690 <ip_reass_free_complete_datagram+0xe0>
 800a684:	4b15      	ldr	r3, [pc, #84]	@ (800a6dc <ip_reass_free_complete_datagram+0x12c>)
 800a686:	22cc      	movs	r2, #204	@ 0xcc
 800a688:	4918      	ldr	r1, [pc, #96]	@ (800a6ec <ip_reass_free_complete_datagram+0x13c>)
 800a68a:	4816      	ldr	r0, [pc, #88]	@ (800a6e4 <ip_reass_free_complete_datagram+0x134>)
 800a68c:	f000 ff78 	bl	800b580 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800a690:	8bfa      	ldrh	r2, [r7, #30]
 800a692:	8a7b      	ldrh	r3, [r7, #18]
 800a694:	4413      	add	r3, r2
 800a696:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800a698:	68f8      	ldr	r0, [r7, #12]
 800a69a:	f7fd fa89 	bl	8007bb0 <pbuf_free>
  while (p != NULL) {
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d1dc      	bne.n	800a65e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800a6a4:	6839      	ldr	r1, [r7, #0]
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 f8c2 	bl	800a830 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800a6ac:	4b10      	ldr	r3, [pc, #64]	@ (800a6f0 <ip_reass_free_complete_datagram+0x140>)
 800a6ae:	881b      	ldrh	r3, [r3, #0]
 800a6b0:	8bfa      	ldrh	r2, [r7, #30]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d905      	bls.n	800a6c2 <ip_reass_free_complete_datagram+0x112>
 800a6b6:	4b09      	ldr	r3, [pc, #36]	@ (800a6dc <ip_reass_free_complete_datagram+0x12c>)
 800a6b8:	22d2      	movs	r2, #210	@ 0xd2
 800a6ba:	490e      	ldr	r1, [pc, #56]	@ (800a6f4 <ip_reass_free_complete_datagram+0x144>)
 800a6bc:	4809      	ldr	r0, [pc, #36]	@ (800a6e4 <ip_reass_free_complete_datagram+0x134>)
 800a6be:	f000 ff5f 	bl	800b580 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800a6c2:	4b0b      	ldr	r3, [pc, #44]	@ (800a6f0 <ip_reass_free_complete_datagram+0x140>)
 800a6c4:	881a      	ldrh	r2, [r3, #0]
 800a6c6:	8bfb      	ldrh	r3, [r7, #30]
 800a6c8:	1ad3      	subs	r3, r2, r3
 800a6ca:	b29a      	uxth	r2, r3
 800a6cc:	4b08      	ldr	r3, [pc, #32]	@ (800a6f0 <ip_reass_free_complete_datagram+0x140>)
 800a6ce:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800a6d0:	8bfb      	ldrh	r3, [r7, #30]
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3720      	adds	r7, #32
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	0800d680 	.word	0x0800d680
 800a6e0:	0800d6bc 	.word	0x0800d6bc
 800a6e4:	0800d6c8 	.word	0x0800d6c8
 800a6e8:	0800d6f0 	.word	0x0800d6f0
 800a6ec:	0800d704 	.word	0x0800d704
 800a6f0:	2000848c 	.word	0x2000848c
 800a6f4:	0800d724 	.word	0x0800d724

0800a6f8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b08a      	sub	sp, #40	@ 0x28
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800a702:	2300      	movs	r3, #0
 800a704:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800a706:	2300      	movs	r3, #0
 800a708:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800a70a:	2300      	movs	r3, #0
 800a70c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800a70e:	2300      	movs	r3, #0
 800a710:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800a712:	2300      	movs	r3, #0
 800a714:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800a716:	4b28      	ldr	r3, [pc, #160]	@ (800a7b8 <ip_reass_remove_oldest_datagram+0xc0>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800a71c:	e030      	b.n	800a780 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800a71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a720:	695a      	ldr	r2, [r3, #20]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	429a      	cmp	r2, r3
 800a728:	d10c      	bne.n	800a744 <ip_reass_remove_oldest_datagram+0x4c>
 800a72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a72c:	699a      	ldr	r2, [r3, #24]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	429a      	cmp	r2, r3
 800a734:	d106      	bne.n	800a744 <ip_reass_remove_oldest_datagram+0x4c>
 800a736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a738:	899a      	ldrh	r2, [r3, #12]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	889b      	ldrh	r3, [r3, #4]
 800a73e:	b29b      	uxth	r3, r3
 800a740:	429a      	cmp	r2, r3
 800a742:	d014      	beq.n	800a76e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	3301      	adds	r3, #1
 800a748:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800a74a:	6a3b      	ldr	r3, [r7, #32]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d104      	bne.n	800a75a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800a750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a752:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	61bb      	str	r3, [r7, #24]
 800a758:	e009      	b.n	800a76e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800a75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a75c:	7fda      	ldrb	r2, [r3, #31]
 800a75e:	6a3b      	ldr	r3, [r7, #32]
 800a760:	7fdb      	ldrb	r3, [r3, #31]
 800a762:	429a      	cmp	r2, r3
 800a764:	d803      	bhi.n	800a76e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800a766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a768:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800a76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d001      	beq.n	800a77a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800a776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a778:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800a77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800a780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a782:	2b00      	cmp	r3, #0
 800a784:	d1cb      	bne.n	800a71e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800a786:	6a3b      	ldr	r3, [r7, #32]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d008      	beq.n	800a79e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800a78c:	69b9      	ldr	r1, [r7, #24]
 800a78e:	6a38      	ldr	r0, [r7, #32]
 800a790:	f7ff ff0e 	bl	800a5b0 <ip_reass_free_complete_datagram>
 800a794:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800a796:	697a      	ldr	r2, [r7, #20]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	4413      	add	r3, r2
 800a79c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800a79e:	697a      	ldr	r2, [r7, #20]
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	da02      	bge.n	800a7ac <ip_reass_remove_oldest_datagram+0xb4>
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	dcac      	bgt.n	800a706 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800a7ac:	697b      	ldr	r3, [r7, #20]
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3728      	adds	r7, #40	@ 0x28
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	20008488 	.word	0x20008488

0800a7bc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a7c6:	2001      	movs	r0, #1
 800a7c8:	f7fc fb3e 	bl	8006e48 <memp_malloc>
 800a7cc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d110      	bne.n	800a7f6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800a7d4:	6839      	ldr	r1, [r7, #0]
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f7ff ff8e 	bl	800a6f8 <ip_reass_remove_oldest_datagram>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	dc03      	bgt.n	800a7ec <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a7e4:	2001      	movs	r0, #1
 800a7e6:	f7fc fb2f 	bl	8006e48 <memp_malloc>
 800a7ea:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d101      	bne.n	800a7f6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	e016      	b.n	800a824 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800a7f6:	2220      	movs	r2, #32
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	68f8      	ldr	r0, [r7, #12]
 800a7fc:	f000 ff25 	bl	800b64a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	220f      	movs	r2, #15
 800a804:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800a806:	4b09      	ldr	r3, [pc, #36]	@ (800a82c <ip_reass_enqueue_new_datagram+0x70>)
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800a80e:	4a07      	ldr	r2, [pc, #28]	@ (800a82c <ip_reass_enqueue_new_datagram+0x70>)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	3308      	adds	r3, #8
 800a818:	2214      	movs	r2, #20
 800a81a:	6879      	ldr	r1, [r7, #4]
 800a81c:	4618      	mov	r0, r3
 800a81e:	f000 ff9c 	bl	800b75a <memcpy>
  return ipr;
 800a822:	68fb      	ldr	r3, [r7, #12]
}
 800a824:	4618      	mov	r0, r3
 800a826:	3710      	adds	r7, #16
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}
 800a82c:	20008488 	.word	0x20008488

0800a830 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800a83a:	4b10      	ldr	r3, [pc, #64]	@ (800a87c <ip_reass_dequeue_datagram+0x4c>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	429a      	cmp	r2, r3
 800a842:	d104      	bne.n	800a84e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a0c      	ldr	r2, [pc, #48]	@ (800a87c <ip_reass_dequeue_datagram+0x4c>)
 800a84a:	6013      	str	r3, [r2, #0]
 800a84c:	e00d      	b.n	800a86a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d106      	bne.n	800a862 <ip_reass_dequeue_datagram+0x32>
 800a854:	4b0a      	ldr	r3, [pc, #40]	@ (800a880 <ip_reass_dequeue_datagram+0x50>)
 800a856:	f240 1245 	movw	r2, #325	@ 0x145
 800a85a:	490a      	ldr	r1, [pc, #40]	@ (800a884 <ip_reass_dequeue_datagram+0x54>)
 800a85c:	480a      	ldr	r0, [pc, #40]	@ (800a888 <ip_reass_dequeue_datagram+0x58>)
 800a85e:	f000 fe8f 	bl	800b580 <iprintf>
    prev->next = ipr->next;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800a86a:	6879      	ldr	r1, [r7, #4]
 800a86c:	2001      	movs	r0, #1
 800a86e:	f7fc fb5b 	bl	8006f28 <memp_free>
}
 800a872:	bf00      	nop
 800a874:	3708      	adds	r7, #8
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	20008488 	.word	0x20008488
 800a880:	0800d680 	.word	0x0800d680
 800a884:	0800d748 	.word	0x0800d748
 800a888:	0800d6c8 	.word	0x0800d6c8

0800a88c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b08c      	sub	sp, #48	@ 0x30
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800a898:	2300      	movs	r3, #0
 800a89a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800a89c:	2301      	movs	r3, #1
 800a89e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	885b      	ldrh	r3, [r3, #2]
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7fb fe6f 	bl	8006590 <lwip_htons>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	f003 030f 	and.w	r3, r3, #15
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	009b      	lsls	r3, r3, #2
 800a8c2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800a8c4:	7e7b      	ldrb	r3, [r7, #25]
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	8b7a      	ldrh	r2, [r7, #26]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d202      	bcs.n	800a8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a8ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a8d2:	e135      	b.n	800ab40 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800a8d4:	7e7b      	ldrb	r3, [r7, #25]
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	8b7a      	ldrh	r2, [r7, #26]
 800a8da:	1ad3      	subs	r3, r2, r3
 800a8dc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	88db      	ldrh	r3, [r3, #6]
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7fb fe53 	bl	8006590 <lwip_htons>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	00db      	lsls	r3, r3, #3
 800a8f4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800a8fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8fe:	2200      	movs	r2, #0
 800a900:	701a      	strb	r2, [r3, #0]
 800a902:	2200      	movs	r2, #0
 800a904:	705a      	strb	r2, [r3, #1]
 800a906:	2200      	movs	r2, #0
 800a908:	709a      	strb	r2, [r3, #2]
 800a90a:	2200      	movs	r2, #0
 800a90c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800a90e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a910:	8afa      	ldrh	r2, [r7, #22]
 800a912:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800a914:	8afa      	ldrh	r2, [r7, #22]
 800a916:	8b7b      	ldrh	r3, [r7, #26]
 800a918:	4413      	add	r3, r2
 800a91a:	b29a      	uxth	r2, r3
 800a91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a91e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800a920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a922:	88db      	ldrh	r3, [r3, #6]
 800a924:	b29b      	uxth	r3, r3
 800a926:	8afa      	ldrh	r2, [r7, #22]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d902      	bls.n	800a932 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a92c:	f04f 33ff 	mov.w	r3, #4294967295
 800a930:	e106      	b.n	800ab40 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	627b      	str	r3, [r7, #36]	@ 0x24
 800a938:	e068      	b.n	800aa0c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800a93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800a940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a942:	889b      	ldrh	r3, [r3, #4]
 800a944:	b29a      	uxth	r2, r3
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	889b      	ldrh	r3, [r3, #4]
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d235      	bcs.n	800a9bc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800a950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a954:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800a956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d020      	beq.n	800a99e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800a95c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a95e:	889b      	ldrh	r3, [r3, #4]
 800a960:	b29a      	uxth	r2, r3
 800a962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a964:	88db      	ldrh	r3, [r3, #6]
 800a966:	b29b      	uxth	r3, r3
 800a968:	429a      	cmp	r2, r3
 800a96a:	d307      	bcc.n	800a97c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800a96c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a96e:	88db      	ldrh	r3, [r3, #6]
 800a970:	b29a      	uxth	r2, r3
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	889b      	ldrh	r3, [r3, #4]
 800a976:	b29b      	uxth	r3, r3
 800a978:	429a      	cmp	r2, r3
 800a97a:	d902      	bls.n	800a982 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a97c:	f04f 33ff 	mov.w	r3, #4294967295
 800a980:	e0de      	b.n	800ab40 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800a982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a984:	68ba      	ldr	r2, [r7, #8]
 800a986:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800a988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a98a:	88db      	ldrh	r3, [r3, #6]
 800a98c:	b29a      	uxth	r2, r3
 800a98e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a990:	889b      	ldrh	r3, [r3, #4]
 800a992:	b29b      	uxth	r3, r3
 800a994:	429a      	cmp	r2, r3
 800a996:	d03d      	beq.n	800aa14 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800a998:	2300      	movs	r3, #0
 800a99a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800a99c:	e03a      	b.n	800aa14 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800a99e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9a0:	88db      	ldrh	r3, [r3, #6]
 800a9a2:	b29a      	uxth	r2, r3
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	889b      	ldrh	r3, [r3, #4]
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d902      	bls.n	800a9b4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a9ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a9b2:	e0c5      	b.n	800ab40 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	68ba      	ldr	r2, [r7, #8]
 800a9b8:	605a      	str	r2, [r3, #4]
      break;
 800a9ba:	e02b      	b.n	800aa14 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800a9bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9be:	889b      	ldrh	r3, [r3, #4]
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	889b      	ldrh	r3, [r3, #4]
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d102      	bne.n	800a9d2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a9cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a9d0:	e0b6      	b.n	800ab40 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800a9d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9d4:	889b      	ldrh	r3, [r3, #4]
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	88db      	ldrh	r3, [r3, #6]
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d202      	bcs.n	800a9e8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a9e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9e6:	e0ab      	b.n	800ab40 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800a9e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d009      	beq.n	800aa02 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800a9ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9f0:	88db      	ldrh	r3, [r3, #6]
 800a9f2:	b29a      	uxth	r2, r3
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	889b      	ldrh	r3, [r3, #4]
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d001      	beq.n	800aa02 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800aa0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d193      	bne.n	800a93a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800aa12:	e000      	b.n	800aa16 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800aa14:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800aa16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d12d      	bne.n	800aa78 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800aa1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d01c      	beq.n	800aa5c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800aa22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa24:	88db      	ldrh	r3, [r3, #6]
 800aa26:	b29a      	uxth	r2, r3
 800aa28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa2a:	889b      	ldrh	r3, [r3, #4]
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d906      	bls.n	800aa40 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800aa32:	4b45      	ldr	r3, [pc, #276]	@ (800ab48 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800aa34:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800aa38:	4944      	ldr	r1, [pc, #272]	@ (800ab4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800aa3a:	4845      	ldr	r0, [pc, #276]	@ (800ab50 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800aa3c:	f000 fda0 	bl	800b580 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800aa40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa42:	68ba      	ldr	r2, [r7, #8]
 800aa44:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800aa46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa48:	88db      	ldrh	r3, [r3, #6]
 800aa4a:	b29a      	uxth	r2, r3
 800aa4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa4e:	889b      	ldrh	r3, [r3, #4]
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d010      	beq.n	800aa78 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800aa56:	2300      	movs	r3, #0
 800aa58:	623b      	str	r3, [r7, #32]
 800aa5a:	e00d      	b.n	800aa78 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d006      	beq.n	800aa72 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800aa64:	4b38      	ldr	r3, [pc, #224]	@ (800ab48 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800aa66:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800aa6a:	493a      	ldr	r1, [pc, #232]	@ (800ab54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800aa6c:	4838      	ldr	r0, [pc, #224]	@ (800ab50 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800aa6e:	f000 fd87 	bl	800b580 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	68ba      	ldr	r2, [r7, #8]
 800aa76:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d105      	bne.n	800aa8a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	7f9b      	ldrb	r3, [r3, #30]
 800aa82:	f003 0301 	and.w	r3, r3, #1
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d059      	beq.n	800ab3e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800aa8a:	6a3b      	ldr	r3, [r7, #32]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d04f      	beq.n	800ab30 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d006      	beq.n	800aaa6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	889b      	ldrh	r3, [r3, #4]
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d002      	beq.n	800aaac <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	623b      	str	r3, [r7, #32]
 800aaaa:	e041      	b.n	800ab30 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800aaac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaae:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800aab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800aab6:	e012      	b.n	800aade <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800aab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800aabe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac0:	88db      	ldrh	r3, [r3, #6]
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aac6:	889b      	ldrh	r3, [r3, #4]
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d002      	beq.n	800aad4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800aace:	2300      	movs	r3, #0
 800aad0:	623b      	str	r3, [r7, #32]
            break;
 800aad2:	e007      	b.n	800aae4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800aad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aad6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800aad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800aade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d1e9      	bne.n	800aab8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800aae4:	6a3b      	ldr	r3, [r7, #32]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d022      	beq.n	800ab30 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d106      	bne.n	800ab00 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800aaf2:	4b15      	ldr	r3, [pc, #84]	@ (800ab48 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800aaf4:	f240 12df 	movw	r2, #479	@ 0x1df
 800aaf8:	4917      	ldr	r1, [pc, #92]	@ (800ab58 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800aafa:	4815      	ldr	r0, [pc, #84]	@ (800ab50 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800aafc:	f000 fd40 	bl	800b580 <iprintf>
          LWIP_ASSERT("sanity check",
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d106      	bne.n	800ab1a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800ab0c:	4b0e      	ldr	r3, [pc, #56]	@ (800ab48 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ab0e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800ab12:	4911      	ldr	r1, [pc, #68]	@ (800ab58 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ab14:	480e      	ldr	r0, [pc, #56]	@ (800ab50 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ab16:	f000 fd33 	bl	800b580 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800ab1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d006      	beq.n	800ab30 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800ab22:	4b09      	ldr	r3, [pc, #36]	@ (800ab48 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ab24:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800ab28:	490c      	ldr	r1, [pc, #48]	@ (800ab5c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800ab2a:	4809      	ldr	r0, [pc, #36]	@ (800ab50 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ab2c:	f000 fd28 	bl	800b580 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800ab30:	6a3b      	ldr	r3, [r7, #32]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	bf14      	ite	ne
 800ab36:	2301      	movne	r3, #1
 800ab38:	2300      	moveq	r3, #0
 800ab3a:	b2db      	uxtb	r3, r3
 800ab3c:	e000      	b.n	800ab40 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800ab3e:	2300      	movs	r3, #0
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3730      	adds	r7, #48	@ 0x30
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	0800d680 	.word	0x0800d680
 800ab4c:	0800d764 	.word	0x0800d764
 800ab50:	0800d6c8 	.word	0x0800d6c8
 800ab54:	0800d784 	.word	0x0800d784
 800ab58:	0800d7bc 	.word	0x0800d7bc
 800ab5c:	0800d7cc 	.word	0x0800d7cc

0800ab60 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b08e      	sub	sp, #56	@ 0x38
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800ab6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	f003 030f 	and.w	r3, r3, #15
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	2b14      	cmp	r3, #20
 800ab7e:	f040 8171 	bne.w	800ae64 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800ab82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab84:	88db      	ldrh	r3, [r3, #6]
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7fb fd01 	bl	8006590 <lwip_htons>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	00db      	lsls	r3, r3, #3
 800ab98:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ab9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab9c:	885b      	ldrh	r3, [r3, #2]
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7fb fcf5 	bl	8006590 <lwip_htons>
 800aba6:	4603      	mov	r3, r0
 800aba8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800abaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	f003 030f 	and.w	r3, r3, #15
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800abba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800abc2:	429a      	cmp	r2, r3
 800abc4:	f0c0 8150 	bcc.w	800ae68 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800abc8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800abcc:	b29b      	uxth	r3, r3
 800abce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800abd0:	1ad3      	subs	r3, r2, r3
 800abd2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f7fd f873 	bl	8007cc0 <pbuf_clen>
 800abda:	4603      	mov	r3, r0
 800abdc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800abde:	4b8c      	ldr	r3, [pc, #560]	@ (800ae10 <ip4_reass+0x2b0>)
 800abe0:	881b      	ldrh	r3, [r3, #0]
 800abe2:	461a      	mov	r2, r3
 800abe4:	8c3b      	ldrh	r3, [r7, #32]
 800abe6:	4413      	add	r3, r2
 800abe8:	2b0a      	cmp	r3, #10
 800abea:	dd10      	ble.n	800ac0e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800abec:	8c3b      	ldrh	r3, [r7, #32]
 800abee:	4619      	mov	r1, r3
 800abf0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abf2:	f7ff fd81 	bl	800a6f8 <ip_reass_remove_oldest_datagram>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	f000 8137 	beq.w	800ae6c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800abfe:	4b84      	ldr	r3, [pc, #528]	@ (800ae10 <ip4_reass+0x2b0>)
 800ac00:	881b      	ldrh	r3, [r3, #0]
 800ac02:	461a      	mov	r2, r3
 800ac04:	8c3b      	ldrh	r3, [r7, #32]
 800ac06:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ac08:	2b0a      	cmp	r3, #10
 800ac0a:	f300 812f 	bgt.w	800ae6c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ac0e:	4b81      	ldr	r3, [pc, #516]	@ (800ae14 <ip4_reass+0x2b4>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac14:	e015      	b.n	800ac42 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ac16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac18:	695a      	ldr	r2, [r3, #20]
 800ac1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d10c      	bne.n	800ac3c <ip4_reass+0xdc>
 800ac22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac24:	699a      	ldr	r2, [r3, #24]
 800ac26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac28:	691b      	ldr	r3, [r3, #16]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d106      	bne.n	800ac3c <ip4_reass+0xdc>
 800ac2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac30:	899a      	ldrh	r2, [r3, #12]
 800ac32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac34:	889b      	ldrh	r3, [r3, #4]
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d006      	beq.n	800ac4a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ac3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d1e6      	bne.n	800ac16 <ip4_reass+0xb6>
 800ac48:	e000      	b.n	800ac4c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800ac4a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800ac4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d109      	bne.n	800ac66 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800ac52:	8c3b      	ldrh	r3, [r7, #32]
 800ac54:	4619      	mov	r1, r3
 800ac56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac58:	f7ff fdb0 	bl	800a7bc <ip_reass_enqueue_new_datagram>
 800ac5c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800ac5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d11c      	bne.n	800ac9e <ip4_reass+0x13e>
      goto nullreturn;
 800ac64:	e105      	b.n	800ae72 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ac66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac68:	88db      	ldrh	r3, [r3, #6]
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7fb fc8f 	bl	8006590 <lwip_htons>
 800ac72:	4603      	mov	r3, r0
 800ac74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d110      	bne.n	800ac9e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ac7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac7e:	89db      	ldrh	r3, [r3, #14]
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7fb fc85 	bl	8006590 <lwip_htons>
 800ac86:	4603      	mov	r3, r0
 800ac88:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d006      	beq.n	800ac9e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ac90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac92:	3308      	adds	r3, #8
 800ac94:	2214      	movs	r2, #20
 800ac96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f000 fd5e 	bl	800b75a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ac9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca0:	88db      	ldrh	r3, [r3, #6]
 800aca2:	b29b      	uxth	r3, r3
 800aca4:	f003 0320 	and.w	r3, r3, #32
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	bf0c      	ite	eq
 800acac:	2301      	moveq	r3, #1
 800acae:	2300      	movne	r3, #0
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00e      	beq.n	800acd8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800acba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800acbc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800acbe:	4413      	add	r3, r2
 800acc0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800acc2:	8b7a      	ldrh	r2, [r7, #26]
 800acc4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800acc6:	429a      	cmp	r2, r3
 800acc8:	f0c0 80a0 	bcc.w	800ae0c <ip4_reass+0x2ac>
 800accc:	8b7b      	ldrh	r3, [r7, #26]
 800acce:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800acd2:	4293      	cmp	r3, r2
 800acd4:	f200 809a 	bhi.w	800ae0c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800acd8:	69fa      	ldr	r2, [r7, #28]
 800acda:	6879      	ldr	r1, [r7, #4]
 800acdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800acde:	f7ff fdd5 	bl	800a88c <ip_reass_chain_frag_into_datagram_and_validate>
 800ace2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acea:	f000 809b 	beq.w	800ae24 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800acee:	4b48      	ldr	r3, [pc, #288]	@ (800ae10 <ip4_reass+0x2b0>)
 800acf0:	881a      	ldrh	r2, [r3, #0]
 800acf2:	8c3b      	ldrh	r3, [r7, #32]
 800acf4:	4413      	add	r3, r2
 800acf6:	b29a      	uxth	r2, r3
 800acf8:	4b45      	ldr	r3, [pc, #276]	@ (800ae10 <ip4_reass+0x2b0>)
 800acfa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800acfc:	69fb      	ldr	r3, [r7, #28]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00d      	beq.n	800ad1e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ad02:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ad04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ad06:	4413      	add	r3, r2
 800ad08:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ad0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad0c:	8a7a      	ldrh	r2, [r7, #18]
 800ad0e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ad10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad12:	7f9b      	ldrb	r3, [r3, #30]
 800ad14:	f043 0301 	orr.w	r3, r3, #1
 800ad18:	b2da      	uxtb	r2, r3
 800ad1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad1c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d171      	bne.n	800ae08 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ad24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad26:	8b9b      	ldrh	r3, [r3, #28]
 800ad28:	3314      	adds	r3, #20
 800ad2a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ad2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ad36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ad3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad40:	3308      	adds	r3, #8
 800ad42:	2214      	movs	r2, #20
 800ad44:	4619      	mov	r1, r3
 800ad46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad48:	f000 fd07 	bl	800b75a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ad4c:	8a3b      	ldrh	r3, [r7, #16]
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7fb fc1e 	bl	8006590 <lwip_htons>
 800ad54:	4603      	mov	r3, r0
 800ad56:	461a      	mov	r2, r3
 800ad58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad5a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ad5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad5e:	2200      	movs	r2, #0
 800ad60:	719a      	strb	r2, [r3, #6]
 800ad62:	2200      	movs	r2, #0
 800ad64:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ad66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad68:	2200      	movs	r2, #0
 800ad6a:	729a      	strb	r2, [r3, #10]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800ad70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800ad76:	e00d      	b.n	800ad94 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800ad78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800ad7e:	2114      	movs	r1, #20
 800ad80:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ad82:	f7fc fe8f 	bl	8007aa4 <pbuf_remove_header>
      pbuf_cat(p, r);
 800ad86:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f7fc ffd3 	bl	8007d34 <pbuf_cat>
      r = iprh->next_pbuf;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800ad94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d1ee      	bne.n	800ad78 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800ad9a:	4b1e      	ldr	r3, [pc, #120]	@ (800ae14 <ip4_reass+0x2b4>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d102      	bne.n	800adaa <ip4_reass+0x24a>
      ipr_prev = NULL;
 800ada4:	2300      	movs	r3, #0
 800ada6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ada8:	e010      	b.n	800adcc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800adaa:	4b1a      	ldr	r3, [pc, #104]	@ (800ae14 <ip4_reass+0x2b4>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800adb0:	e007      	b.n	800adc2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800adb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adb8:	429a      	cmp	r2, r3
 800adba:	d006      	beq.n	800adca <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800adbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800adc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d1f4      	bne.n	800adb2 <ip4_reass+0x252>
 800adc8:	e000      	b.n	800adcc <ip4_reass+0x26c>
          break;
 800adca:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800adcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800adce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800add0:	f7ff fd2e 	bl	800a830 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f7fc ff73 	bl	8007cc0 <pbuf_clen>
 800adda:	4603      	mov	r3, r0
 800addc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800adde:	4b0c      	ldr	r3, [pc, #48]	@ (800ae10 <ip4_reass+0x2b0>)
 800ade0:	881b      	ldrh	r3, [r3, #0]
 800ade2:	8c3a      	ldrh	r2, [r7, #32]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d906      	bls.n	800adf6 <ip4_reass+0x296>
 800ade8:	4b0b      	ldr	r3, [pc, #44]	@ (800ae18 <ip4_reass+0x2b8>)
 800adea:	f240 229b 	movw	r2, #667	@ 0x29b
 800adee:	490b      	ldr	r1, [pc, #44]	@ (800ae1c <ip4_reass+0x2bc>)
 800adf0:	480b      	ldr	r0, [pc, #44]	@ (800ae20 <ip4_reass+0x2c0>)
 800adf2:	f000 fbc5 	bl	800b580 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800adf6:	4b06      	ldr	r3, [pc, #24]	@ (800ae10 <ip4_reass+0x2b0>)
 800adf8:	881a      	ldrh	r2, [r3, #0]
 800adfa:	8c3b      	ldrh	r3, [r7, #32]
 800adfc:	1ad3      	subs	r3, r2, r3
 800adfe:	b29a      	uxth	r2, r3
 800ae00:	4b03      	ldr	r3, [pc, #12]	@ (800ae10 <ip4_reass+0x2b0>)
 800ae02:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	e038      	b.n	800ae7a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	e036      	b.n	800ae7a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800ae0c:	bf00      	nop
 800ae0e:	e00a      	b.n	800ae26 <ip4_reass+0x2c6>
 800ae10:	2000848c 	.word	0x2000848c
 800ae14:	20008488 	.word	0x20008488
 800ae18:	0800d680 	.word	0x0800d680
 800ae1c:	0800d7f0 	.word	0x0800d7f0
 800ae20:	0800d6c8 	.word	0x0800d6c8
    goto nullreturn_ipr;
 800ae24:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800ae26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d106      	bne.n	800ae3a <ip4_reass+0x2da>
 800ae2c:	4b15      	ldr	r3, [pc, #84]	@ (800ae84 <ip4_reass+0x324>)
 800ae2e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800ae32:	4915      	ldr	r1, [pc, #84]	@ (800ae88 <ip4_reass+0x328>)
 800ae34:	4815      	ldr	r0, [pc, #84]	@ (800ae8c <ip4_reass+0x32c>)
 800ae36:	f000 fba3 	bl	800b580 <iprintf>
  if (ipr->p == NULL) {
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d116      	bne.n	800ae70 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ae42:	4b13      	ldr	r3, [pc, #76]	@ (800ae90 <ip4_reass+0x330>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d006      	beq.n	800ae5a <ip4_reass+0x2fa>
 800ae4c:	4b0d      	ldr	r3, [pc, #52]	@ (800ae84 <ip4_reass+0x324>)
 800ae4e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800ae52:	4910      	ldr	r1, [pc, #64]	@ (800ae94 <ip4_reass+0x334>)
 800ae54:	480d      	ldr	r0, [pc, #52]	@ (800ae8c <ip4_reass+0x32c>)
 800ae56:	f000 fb93 	bl	800b580 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ae5a:	2100      	movs	r1, #0
 800ae5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae5e:	f7ff fce7 	bl	800a830 <ip_reass_dequeue_datagram>
 800ae62:	e006      	b.n	800ae72 <ip4_reass+0x312>
    goto nullreturn;
 800ae64:	bf00      	nop
 800ae66:	e004      	b.n	800ae72 <ip4_reass+0x312>
    goto nullreturn;
 800ae68:	bf00      	nop
 800ae6a:	e002      	b.n	800ae72 <ip4_reass+0x312>
      goto nullreturn;
 800ae6c:	bf00      	nop
 800ae6e:	e000      	b.n	800ae72 <ip4_reass+0x312>
  }

nullreturn:
 800ae70:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f7fc fe9c 	bl	8007bb0 <pbuf_free>
  return NULL;
 800ae78:	2300      	movs	r3, #0
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3738      	adds	r7, #56	@ 0x38
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	0800d680 	.word	0x0800d680
 800ae88:	0800d80c 	.word	0x0800d80c
 800ae8c:	0800d6c8 	.word	0x0800d6c8
 800ae90:	20008488 	.word	0x20008488
 800ae94:	0800d818 	.word	0x0800d818

0800ae98 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ae9c:	2002      	movs	r0, #2
 800ae9e:	f7fb ffd3 	bl	8006e48 <memp_malloc>
 800aea2:	4603      	mov	r3, r0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d106      	bne.n	800aec4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800aeb6:	4b07      	ldr	r3, [pc, #28]	@ (800aed4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800aeb8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800aebc:	4906      	ldr	r1, [pc, #24]	@ (800aed8 <ip_frag_free_pbuf_custom_ref+0x30>)
 800aebe:	4807      	ldr	r0, [pc, #28]	@ (800aedc <ip_frag_free_pbuf_custom_ref+0x34>)
 800aec0:	f000 fb5e 	bl	800b580 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800aec4:	6879      	ldr	r1, [r7, #4]
 800aec6:	2002      	movs	r0, #2
 800aec8:	f7fc f82e 	bl	8006f28 <memp_free>
}
 800aecc:	bf00      	nop
 800aece:	3708      	adds	r7, #8
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	0800d680 	.word	0x0800d680
 800aed8:	0800d838 	.word	0x0800d838
 800aedc:	0800d6c8 	.word	0x0800d6c8

0800aee0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d106      	bne.n	800af00 <ipfrag_free_pbuf_custom+0x20>
 800aef2:	4b11      	ldr	r3, [pc, #68]	@ (800af38 <ipfrag_free_pbuf_custom+0x58>)
 800aef4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800aef8:	4910      	ldr	r1, [pc, #64]	@ (800af3c <ipfrag_free_pbuf_custom+0x5c>)
 800aefa:	4811      	ldr	r0, [pc, #68]	@ (800af40 <ipfrag_free_pbuf_custom+0x60>)
 800aefc:	f000 fb40 	bl	800b580 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800af00:	68fa      	ldr	r2, [r7, #12]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	429a      	cmp	r2, r3
 800af06:	d006      	beq.n	800af16 <ipfrag_free_pbuf_custom+0x36>
 800af08:	4b0b      	ldr	r3, [pc, #44]	@ (800af38 <ipfrag_free_pbuf_custom+0x58>)
 800af0a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800af0e:	490d      	ldr	r1, [pc, #52]	@ (800af44 <ipfrag_free_pbuf_custom+0x64>)
 800af10:	480b      	ldr	r0, [pc, #44]	@ (800af40 <ipfrag_free_pbuf_custom+0x60>)
 800af12:	f000 fb35 	bl	800b580 <iprintf>
  if (pcr->original != NULL) {
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	695b      	ldr	r3, [r3, #20]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d004      	beq.n	800af28 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	695b      	ldr	r3, [r3, #20]
 800af22:	4618      	mov	r0, r3
 800af24:	f7fc fe44 	bl	8007bb0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f7ff ffbd 	bl	800aea8 <ip_frag_free_pbuf_custom_ref>
}
 800af2e:	bf00      	nop
 800af30:	3710      	adds	r7, #16
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	0800d680 	.word	0x0800d680
 800af3c:	0800d844 	.word	0x0800d844
 800af40:	0800d6c8 	.word	0x0800d6c8
 800af44:	0800d850 	.word	0x0800d850

0800af48 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b094      	sub	sp, #80	@ 0x50
 800af4c:	af02      	add	r7, sp, #8
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800af54:	2300      	movs	r3, #0
 800af56:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800af5e:	3b14      	subs	r3, #20
 800af60:	2b00      	cmp	r3, #0
 800af62:	da00      	bge.n	800af66 <ip4_frag+0x1e>
 800af64:	3307      	adds	r3, #7
 800af66:	10db      	asrs	r3, r3, #3
 800af68:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800af6a:	2314      	movs	r3, #20
 800af6c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800af74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af76:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800af78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	f003 030f 	and.w	r3, r3, #15
 800af80:	b2db      	uxtb	r3, r3
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	b2db      	uxtb	r3, r3
 800af86:	2b14      	cmp	r3, #20
 800af88:	d002      	beq.n	800af90 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800af8a:	f06f 0305 	mvn.w	r3, #5
 800af8e:	e110      	b.n	800b1b2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	895b      	ldrh	r3, [r3, #10]
 800af94:	2b13      	cmp	r3, #19
 800af96:	d809      	bhi.n	800afac <ip4_frag+0x64>
 800af98:	4b88      	ldr	r3, [pc, #544]	@ (800b1bc <ip4_frag+0x274>)
 800af9a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800af9e:	4988      	ldr	r1, [pc, #544]	@ (800b1c0 <ip4_frag+0x278>)
 800afa0:	4888      	ldr	r0, [pc, #544]	@ (800b1c4 <ip4_frag+0x27c>)
 800afa2:	f000 faed 	bl	800b580 <iprintf>
 800afa6:	f06f 0305 	mvn.w	r3, #5
 800afaa:	e102      	b.n	800b1b2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800afac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afae:	88db      	ldrh	r3, [r3, #6]
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7fb faec 	bl	8006590 <lwip_htons>
 800afb8:	4603      	mov	r3, r0
 800afba:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800afbc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800afbe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800afc2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800afc6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800afc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800afcc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	891b      	ldrh	r3, [r3, #8]
 800afd2:	3b14      	subs	r3, #20
 800afd4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800afd8:	e0e1      	b.n	800b19e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800afda:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800afdc:	00db      	lsls	r3, r3, #3
 800afde:	b29b      	uxth	r3, r3
 800afe0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800afe4:	4293      	cmp	r3, r2
 800afe6:	bf28      	it	cs
 800afe8:	4613      	movcs	r3, r2
 800afea:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800afec:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800aff0:	2114      	movs	r1, #20
 800aff2:	200e      	movs	r0, #14
 800aff4:	f7fc fafa 	bl	80075ec <pbuf_alloc>
 800aff8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800affa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800affc:	2b00      	cmp	r3, #0
 800affe:	f000 80d5 	beq.w	800b1ac <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800b002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b004:	895b      	ldrh	r3, [r3, #10]
 800b006:	2b13      	cmp	r3, #19
 800b008:	d806      	bhi.n	800b018 <ip4_frag+0xd0>
 800b00a:	4b6c      	ldr	r3, [pc, #432]	@ (800b1bc <ip4_frag+0x274>)
 800b00c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800b010:	496d      	ldr	r1, [pc, #436]	@ (800b1c8 <ip4_frag+0x280>)
 800b012:	486c      	ldr	r0, [pc, #432]	@ (800b1c4 <ip4_frag+0x27c>)
 800b014:	f000 fab4 	bl	800b580 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800b018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	2214      	movs	r2, #20
 800b01e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b020:	4618      	mov	r0, r3
 800b022:	f000 fb9a 	bl	800b75a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800b026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800b02c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b02e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800b032:	e064      	b.n	800b0fe <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	895a      	ldrh	r2, [r3, #10]
 800b038:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b03a:	1ad3      	subs	r3, r2, r3
 800b03c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	895b      	ldrh	r3, [r3, #10]
 800b042:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800b044:	429a      	cmp	r2, r3
 800b046:	d906      	bls.n	800b056 <ip4_frag+0x10e>
 800b048:	4b5c      	ldr	r3, [pc, #368]	@ (800b1bc <ip4_frag+0x274>)
 800b04a:	f240 322d 	movw	r2, #813	@ 0x32d
 800b04e:	495f      	ldr	r1, [pc, #380]	@ (800b1cc <ip4_frag+0x284>)
 800b050:	485c      	ldr	r0, [pc, #368]	@ (800b1c4 <ip4_frag+0x27c>)
 800b052:	f000 fa95 	bl	800b580 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800b056:	8bfa      	ldrh	r2, [r7, #30]
 800b058:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800b05c:	4293      	cmp	r3, r2
 800b05e:	bf28      	it	cs
 800b060:	4613      	movcs	r3, r2
 800b062:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800b066:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d105      	bne.n	800b07a <ip4_frag+0x132>
        poff = 0;
 800b06e:	2300      	movs	r3, #0
 800b070:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	60fb      	str	r3, [r7, #12]
        continue;
 800b078:	e041      	b.n	800b0fe <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800b07a:	f7ff ff0d 	bl	800ae98 <ip_frag_alloc_pbuf_custom_ref>
 800b07e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800b080:	69bb      	ldr	r3, [r7, #24]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d103      	bne.n	800b08e <ip4_frag+0x146>
        pbuf_free(rambuf);
 800b086:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b088:	f7fc fd92 	bl	8007bb0 <pbuf_free>
        goto memerr;
 800b08c:	e08f      	b.n	800b1ae <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800b08e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800b094:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b096:	4413      	add	r3, r2
 800b098:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800b09c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800b0a0:	9201      	str	r2, [sp, #4]
 800b0a2:	9300      	str	r3, [sp, #0]
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2241      	movs	r2, #65	@ 0x41
 800b0a8:	2000      	movs	r0, #0
 800b0aa:	f7fc fbc7 	bl	800783c <pbuf_alloced_custom>
 800b0ae:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d106      	bne.n	800b0c4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800b0b6:	69b8      	ldr	r0, [r7, #24]
 800b0b8:	f7ff fef6 	bl	800aea8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800b0bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b0be:	f7fc fd77 	bl	8007bb0 <pbuf_free>
        goto memerr;
 800b0c2:	e074      	b.n	800b1ae <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	f7fc fe13 	bl	8007cf0 <pbuf_ref>
      pcr->original = p;
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	68fa      	ldr	r2, [r7, #12]
 800b0ce:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800b0d0:	69bb      	ldr	r3, [r7, #24]
 800b0d2:	4a3f      	ldr	r2, [pc, #252]	@ (800b1d0 <ip4_frag+0x288>)
 800b0d4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800b0d6:	6979      	ldr	r1, [r7, #20]
 800b0d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b0da:	f7fc fe2b 	bl	8007d34 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800b0de:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800b0e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b0e6:	1ad3      	subs	r3, r2, r3
 800b0e8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800b0ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d004      	beq.n	800b0fe <ip4_frag+0x1b6>
        poff = 0;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800b0fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800b102:	2b00      	cmp	r3, #0
 800b104:	d196      	bne.n	800b034 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800b106:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800b108:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b10c:	4413      	add	r3, r2
 800b10e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800b114:	f1a3 0213 	sub.w	r2, r3, #19
 800b118:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b11c:	429a      	cmp	r2, r3
 800b11e:	bfcc      	ite	gt
 800b120:	2301      	movgt	r3, #1
 800b122:	2300      	movle	r3, #0
 800b124:	b2db      	uxtb	r3, r3
 800b126:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800b128:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b12c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b130:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800b132:	6a3b      	ldr	r3, [r7, #32]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d002      	beq.n	800b13e <ip4_frag+0x1f6>
 800b138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d003      	beq.n	800b146 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800b13e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b140:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800b144:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800b146:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b148:	4618      	mov	r0, r3
 800b14a:	f7fb fa21 	bl	8006590 <lwip_htons>
 800b14e:	4603      	mov	r3, r0
 800b150:	461a      	mov	r2, r3
 800b152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b154:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800b156:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b158:	3314      	adds	r3, #20
 800b15a:	b29b      	uxth	r3, r3
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7fb fa17 	bl	8006590 <lwip_htons>
 800b162:	4603      	mov	r3, r0
 800b164:	461a      	mov	r2, r3
 800b166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b168:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800b16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b16c:	2200      	movs	r2, #0
 800b16e:	729a      	strb	r2, [r3, #10]
 800b170:	2200      	movs	r2, #0
 800b172:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	695b      	ldr	r3, [r3, #20]
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b17c:	68b8      	ldr	r0, [r7, #8]
 800b17e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800b180:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b182:	f7fc fd15 	bl	8007bb0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800b186:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b18a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b18c:	1ad3      	subs	r3, r2, r3
 800b18e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800b192:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800b196:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b198:	4413      	add	r3, r2
 800b19a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800b19e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	f47f af19 	bne.w	800afda <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	e002      	b.n	800b1b2 <ip4_frag+0x26a>
      goto memerr;
 800b1ac:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800b1ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3748      	adds	r7, #72	@ 0x48
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	0800d680 	.word	0x0800d680
 800b1c0:	0800d85c 	.word	0x0800d85c
 800b1c4:	0800d6c8 	.word	0x0800d6c8
 800b1c8:	0800d878 	.word	0x0800d878
 800b1cc:	0800d898 	.word	0x0800d898
 800b1d0:	0800aee1 	.word	0x0800aee1

0800b1d4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b086      	sub	sp, #24
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800b1de:	230e      	movs	r3, #14
 800b1e0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	895b      	ldrh	r3, [r3, #10]
 800b1e6:	2b0e      	cmp	r3, #14
 800b1e8:	d96e      	bls.n	800b2c8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	7bdb      	ldrb	r3, [r3, #15]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d106      	bne.n	800b200 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	b2da      	uxtb	r2, r3
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	7b1a      	ldrb	r2, [r3, #12]
 800b20a:	7b5b      	ldrb	r3, [r3, #13]
 800b20c:	021b      	lsls	r3, r3, #8
 800b20e:	4313      	orrs	r3, r2
 800b210:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	f003 0301 	and.w	r3, r3, #1
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d023      	beq.n	800b266 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	2b01      	cmp	r3, #1
 800b224:	d10f      	bne.n	800b246 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	785b      	ldrb	r3, [r3, #1]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d11b      	bne.n	800b266 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800b232:	2b5e      	cmp	r3, #94	@ 0x5e
 800b234:	d117      	bne.n	800b266 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	7b5b      	ldrb	r3, [r3, #13]
 800b23a:	f043 0310 	orr.w	r3, r3, #16
 800b23e:	b2da      	uxtb	r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	735a      	strb	r2, [r3, #13]
 800b244:	e00f      	b.n	800b266 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	2206      	movs	r2, #6
 800b24a:	4928      	ldr	r1, [pc, #160]	@ (800b2ec <ethernet_input+0x118>)
 800b24c:	4618      	mov	r0, r3
 800b24e:	f000 f9ec 	bl	800b62a <memcmp>
 800b252:	4603      	mov	r3, r0
 800b254:	2b00      	cmp	r3, #0
 800b256:	d106      	bne.n	800b266 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	7b5b      	ldrb	r3, [r3, #13]
 800b25c:	f043 0308 	orr.w	r3, r3, #8
 800b260:	b2da      	uxtb	r2, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800b266:	89fb      	ldrh	r3, [r7, #14]
 800b268:	2b08      	cmp	r3, #8
 800b26a:	d003      	beq.n	800b274 <ethernet_input+0xa0>
 800b26c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800b270:	d014      	beq.n	800b29c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800b272:	e032      	b.n	800b2da <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b27a:	f003 0308 	and.w	r3, r3, #8
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d024      	beq.n	800b2cc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800b282:	8afb      	ldrh	r3, [r7, #22]
 800b284:	4619      	mov	r1, r3
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f7fc fc0c 	bl	8007aa4 <pbuf_remove_header>
 800b28c:	4603      	mov	r3, r0
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d11e      	bne.n	800b2d0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800b292:	6839      	ldr	r1, [r7, #0]
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f7fe ff2b 	bl	800a0f0 <ip4_input>
      break;
 800b29a:	e013      	b.n	800b2c4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b2a2:	f003 0308 	and.w	r3, r3, #8
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d014      	beq.n	800b2d4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800b2aa:	8afb      	ldrh	r3, [r7, #22]
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f7fc fbf8 	bl	8007aa4 <pbuf_remove_header>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d10e      	bne.n	800b2d8 <ethernet_input+0x104>
        etharp_input(p, netif);
 800b2ba:	6839      	ldr	r1, [r7, #0]
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f7fe f8cb 	bl	8009458 <etharp_input>
      break;
 800b2c2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	e00c      	b.n	800b2e2 <ethernet_input+0x10e>
    goto free_and_return;
 800b2c8:	bf00      	nop
 800b2ca:	e006      	b.n	800b2da <ethernet_input+0x106>
        goto free_and_return;
 800b2cc:	bf00      	nop
 800b2ce:	e004      	b.n	800b2da <ethernet_input+0x106>
        goto free_and_return;
 800b2d0:	bf00      	nop
 800b2d2:	e002      	b.n	800b2da <ethernet_input+0x106>
        goto free_and_return;
 800b2d4:	bf00      	nop
 800b2d6:	e000      	b.n	800b2da <ethernet_input+0x106>
        goto free_and_return;
 800b2d8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f7fc fc68 	bl	8007bb0 <pbuf_free>
  return ERR_OK;
 800b2e0:	2300      	movs	r3, #0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3718      	adds	r7, #24
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	0800d9d4 	.word	0x0800d9d4

0800b2f0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b086      	sub	sp, #24
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	607a      	str	r2, [r7, #4]
 800b2fc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800b2fe:	8c3b      	ldrh	r3, [r7, #32]
 800b300:	4618      	mov	r0, r3
 800b302:	f7fb f945 	bl	8006590 <lwip_htons>
 800b306:	4603      	mov	r3, r0
 800b308:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800b30a:	210e      	movs	r1, #14
 800b30c:	68b8      	ldr	r0, [r7, #8]
 800b30e:	f7fc fbb9 	bl	8007a84 <pbuf_add_header>
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d125      	bne.n	800b364 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	8afa      	ldrh	r2, [r7, #22]
 800b322:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	2206      	movs	r2, #6
 800b328:	6839      	ldr	r1, [r7, #0]
 800b32a:	4618      	mov	r0, r3
 800b32c:	f000 fa15 	bl	800b75a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	3306      	adds	r3, #6
 800b334:	2206      	movs	r2, #6
 800b336:	6879      	ldr	r1, [r7, #4]
 800b338:	4618      	mov	r0, r3
 800b33a:	f000 fa0e 	bl	800b75a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b344:	2b06      	cmp	r3, #6
 800b346:	d006      	beq.n	800b356 <ethernet_output+0x66>
 800b348:	4b0a      	ldr	r3, [pc, #40]	@ (800b374 <ethernet_output+0x84>)
 800b34a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800b34e:	490a      	ldr	r1, [pc, #40]	@ (800b378 <ethernet_output+0x88>)
 800b350:	480a      	ldr	r0, [pc, #40]	@ (800b37c <ethernet_output+0x8c>)
 800b352:	f000 f915 	bl	800b580 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	699b      	ldr	r3, [r3, #24]
 800b35a:	68b9      	ldr	r1, [r7, #8]
 800b35c:	68f8      	ldr	r0, [r7, #12]
 800b35e:	4798      	blx	r3
 800b360:	4603      	mov	r3, r0
 800b362:	e002      	b.n	800b36a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800b364:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800b366:	f06f 0301 	mvn.w	r3, #1
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3718      	adds	r7, #24
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	0800d8a8 	.word	0x0800d8a8
 800b378:	0800d8e0 	.word	0x0800d8e0
 800b37c:	0800d914 	.word	0x0800d914

0800b380 <rand>:
 800b380:	4b16      	ldr	r3, [pc, #88]	@ (800b3dc <rand+0x5c>)
 800b382:	b510      	push	{r4, lr}
 800b384:	681c      	ldr	r4, [r3, #0]
 800b386:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b388:	b9b3      	cbnz	r3, 800b3b8 <rand+0x38>
 800b38a:	2018      	movs	r0, #24
 800b38c:	f000 fa5c 	bl	800b848 <malloc>
 800b390:	4602      	mov	r2, r0
 800b392:	6320      	str	r0, [r4, #48]	@ 0x30
 800b394:	b920      	cbnz	r0, 800b3a0 <rand+0x20>
 800b396:	4b12      	ldr	r3, [pc, #72]	@ (800b3e0 <rand+0x60>)
 800b398:	4812      	ldr	r0, [pc, #72]	@ (800b3e4 <rand+0x64>)
 800b39a:	2152      	movs	r1, #82	@ 0x52
 800b39c:	f000 f9ec 	bl	800b778 <__assert_func>
 800b3a0:	4911      	ldr	r1, [pc, #68]	@ (800b3e8 <rand+0x68>)
 800b3a2:	4b12      	ldr	r3, [pc, #72]	@ (800b3ec <rand+0x6c>)
 800b3a4:	e9c0 1300 	strd	r1, r3, [r0]
 800b3a8:	4b11      	ldr	r3, [pc, #68]	@ (800b3f0 <rand+0x70>)
 800b3aa:	6083      	str	r3, [r0, #8]
 800b3ac:	230b      	movs	r3, #11
 800b3ae:	8183      	strh	r3, [r0, #12]
 800b3b0:	2100      	movs	r1, #0
 800b3b2:	2001      	movs	r0, #1
 800b3b4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b3b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b3ba:	480e      	ldr	r0, [pc, #56]	@ (800b3f4 <rand+0x74>)
 800b3bc:	690b      	ldr	r3, [r1, #16]
 800b3be:	694c      	ldr	r4, [r1, #20]
 800b3c0:	4a0d      	ldr	r2, [pc, #52]	@ (800b3f8 <rand+0x78>)
 800b3c2:	4358      	muls	r0, r3
 800b3c4:	fb02 0004 	mla	r0, r2, r4, r0
 800b3c8:	fba3 3202 	umull	r3, r2, r3, r2
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	eb40 0002 	adc.w	r0, r0, r2
 800b3d2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800b3d6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800b3da:	bd10      	pop	{r4, pc}
 800b3dc:	20000030 	.word	0x20000030
 800b3e0:	0800d9e2 	.word	0x0800d9e2
 800b3e4:	0800d9f9 	.word	0x0800d9f9
 800b3e8:	abcd330e 	.word	0xabcd330e
 800b3ec:	e66d1234 	.word	0xe66d1234
 800b3f0:	0005deec 	.word	0x0005deec
 800b3f4:	5851f42d 	.word	0x5851f42d
 800b3f8:	4c957f2d 	.word	0x4c957f2d

0800b3fc <std>:
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	b510      	push	{r4, lr}
 800b400:	4604      	mov	r4, r0
 800b402:	e9c0 3300 	strd	r3, r3, [r0]
 800b406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b40a:	6083      	str	r3, [r0, #8]
 800b40c:	8181      	strh	r1, [r0, #12]
 800b40e:	6643      	str	r3, [r0, #100]	@ 0x64
 800b410:	81c2      	strh	r2, [r0, #14]
 800b412:	6183      	str	r3, [r0, #24]
 800b414:	4619      	mov	r1, r3
 800b416:	2208      	movs	r2, #8
 800b418:	305c      	adds	r0, #92	@ 0x5c
 800b41a:	f000 f916 	bl	800b64a <memset>
 800b41e:	4b0d      	ldr	r3, [pc, #52]	@ (800b454 <std+0x58>)
 800b420:	6263      	str	r3, [r4, #36]	@ 0x24
 800b422:	4b0d      	ldr	r3, [pc, #52]	@ (800b458 <std+0x5c>)
 800b424:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b426:	4b0d      	ldr	r3, [pc, #52]	@ (800b45c <std+0x60>)
 800b428:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b42a:	4b0d      	ldr	r3, [pc, #52]	@ (800b460 <std+0x64>)
 800b42c:	6323      	str	r3, [r4, #48]	@ 0x30
 800b42e:	4b0d      	ldr	r3, [pc, #52]	@ (800b464 <std+0x68>)
 800b430:	6224      	str	r4, [r4, #32]
 800b432:	429c      	cmp	r4, r3
 800b434:	d006      	beq.n	800b444 <std+0x48>
 800b436:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b43a:	4294      	cmp	r4, r2
 800b43c:	d002      	beq.n	800b444 <std+0x48>
 800b43e:	33d0      	adds	r3, #208	@ 0xd0
 800b440:	429c      	cmp	r4, r3
 800b442:	d105      	bne.n	800b450 <std+0x54>
 800b444:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b44c:	f000 b982 	b.w	800b754 <__retarget_lock_init_recursive>
 800b450:	bd10      	pop	{r4, pc}
 800b452:	bf00      	nop
 800b454:	0800b5a5 	.word	0x0800b5a5
 800b458:	0800b5c7 	.word	0x0800b5c7
 800b45c:	0800b5ff 	.word	0x0800b5ff
 800b460:	0800b623 	.word	0x0800b623
 800b464:	20008490 	.word	0x20008490

0800b468 <stdio_exit_handler>:
 800b468:	4a02      	ldr	r2, [pc, #8]	@ (800b474 <stdio_exit_handler+0xc>)
 800b46a:	4903      	ldr	r1, [pc, #12]	@ (800b478 <stdio_exit_handler+0x10>)
 800b46c:	4803      	ldr	r0, [pc, #12]	@ (800b47c <stdio_exit_handler+0x14>)
 800b46e:	f000 b869 	b.w	800b544 <_fwalk_sglue>
 800b472:	bf00      	nop
 800b474:	20000024 	.word	0x20000024
 800b478:	0800c05d 	.word	0x0800c05d
 800b47c:	20000034 	.word	0x20000034

0800b480 <cleanup_stdio>:
 800b480:	6841      	ldr	r1, [r0, #4]
 800b482:	4b0c      	ldr	r3, [pc, #48]	@ (800b4b4 <cleanup_stdio+0x34>)
 800b484:	4299      	cmp	r1, r3
 800b486:	b510      	push	{r4, lr}
 800b488:	4604      	mov	r4, r0
 800b48a:	d001      	beq.n	800b490 <cleanup_stdio+0x10>
 800b48c:	f000 fde6 	bl	800c05c <_fflush_r>
 800b490:	68a1      	ldr	r1, [r4, #8]
 800b492:	4b09      	ldr	r3, [pc, #36]	@ (800b4b8 <cleanup_stdio+0x38>)
 800b494:	4299      	cmp	r1, r3
 800b496:	d002      	beq.n	800b49e <cleanup_stdio+0x1e>
 800b498:	4620      	mov	r0, r4
 800b49a:	f000 fddf 	bl	800c05c <_fflush_r>
 800b49e:	68e1      	ldr	r1, [r4, #12]
 800b4a0:	4b06      	ldr	r3, [pc, #24]	@ (800b4bc <cleanup_stdio+0x3c>)
 800b4a2:	4299      	cmp	r1, r3
 800b4a4:	d004      	beq.n	800b4b0 <cleanup_stdio+0x30>
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4ac:	f000 bdd6 	b.w	800c05c <_fflush_r>
 800b4b0:	bd10      	pop	{r4, pc}
 800b4b2:	bf00      	nop
 800b4b4:	20008490 	.word	0x20008490
 800b4b8:	200084f8 	.word	0x200084f8
 800b4bc:	20008560 	.word	0x20008560

0800b4c0 <global_stdio_init.part.0>:
 800b4c0:	b510      	push	{r4, lr}
 800b4c2:	4b0b      	ldr	r3, [pc, #44]	@ (800b4f0 <global_stdio_init.part.0+0x30>)
 800b4c4:	4c0b      	ldr	r4, [pc, #44]	@ (800b4f4 <global_stdio_init.part.0+0x34>)
 800b4c6:	4a0c      	ldr	r2, [pc, #48]	@ (800b4f8 <global_stdio_init.part.0+0x38>)
 800b4c8:	601a      	str	r2, [r3, #0]
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	2104      	movs	r1, #4
 800b4d0:	f7ff ff94 	bl	800b3fc <std>
 800b4d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b4d8:	2201      	movs	r2, #1
 800b4da:	2109      	movs	r1, #9
 800b4dc:	f7ff ff8e 	bl	800b3fc <std>
 800b4e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b4e4:	2202      	movs	r2, #2
 800b4e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4ea:	2112      	movs	r1, #18
 800b4ec:	f7ff bf86 	b.w	800b3fc <std>
 800b4f0:	200085c8 	.word	0x200085c8
 800b4f4:	20008490 	.word	0x20008490
 800b4f8:	0800b469 	.word	0x0800b469

0800b4fc <__sfp_lock_acquire>:
 800b4fc:	4801      	ldr	r0, [pc, #4]	@ (800b504 <__sfp_lock_acquire+0x8>)
 800b4fe:	f000 b92a 	b.w	800b756 <__retarget_lock_acquire_recursive>
 800b502:	bf00      	nop
 800b504:	200085d1 	.word	0x200085d1

0800b508 <__sfp_lock_release>:
 800b508:	4801      	ldr	r0, [pc, #4]	@ (800b510 <__sfp_lock_release+0x8>)
 800b50a:	f000 b925 	b.w	800b758 <__retarget_lock_release_recursive>
 800b50e:	bf00      	nop
 800b510:	200085d1 	.word	0x200085d1

0800b514 <__sinit>:
 800b514:	b510      	push	{r4, lr}
 800b516:	4604      	mov	r4, r0
 800b518:	f7ff fff0 	bl	800b4fc <__sfp_lock_acquire>
 800b51c:	6a23      	ldr	r3, [r4, #32]
 800b51e:	b11b      	cbz	r3, 800b528 <__sinit+0x14>
 800b520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b524:	f7ff bff0 	b.w	800b508 <__sfp_lock_release>
 800b528:	4b04      	ldr	r3, [pc, #16]	@ (800b53c <__sinit+0x28>)
 800b52a:	6223      	str	r3, [r4, #32]
 800b52c:	4b04      	ldr	r3, [pc, #16]	@ (800b540 <__sinit+0x2c>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d1f5      	bne.n	800b520 <__sinit+0xc>
 800b534:	f7ff ffc4 	bl	800b4c0 <global_stdio_init.part.0>
 800b538:	e7f2      	b.n	800b520 <__sinit+0xc>
 800b53a:	bf00      	nop
 800b53c:	0800b481 	.word	0x0800b481
 800b540:	200085c8 	.word	0x200085c8

0800b544 <_fwalk_sglue>:
 800b544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b548:	4607      	mov	r7, r0
 800b54a:	4688      	mov	r8, r1
 800b54c:	4614      	mov	r4, r2
 800b54e:	2600      	movs	r6, #0
 800b550:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b554:	f1b9 0901 	subs.w	r9, r9, #1
 800b558:	d505      	bpl.n	800b566 <_fwalk_sglue+0x22>
 800b55a:	6824      	ldr	r4, [r4, #0]
 800b55c:	2c00      	cmp	r4, #0
 800b55e:	d1f7      	bne.n	800b550 <_fwalk_sglue+0xc>
 800b560:	4630      	mov	r0, r6
 800b562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b566:	89ab      	ldrh	r3, [r5, #12]
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d907      	bls.n	800b57c <_fwalk_sglue+0x38>
 800b56c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b570:	3301      	adds	r3, #1
 800b572:	d003      	beq.n	800b57c <_fwalk_sglue+0x38>
 800b574:	4629      	mov	r1, r5
 800b576:	4638      	mov	r0, r7
 800b578:	47c0      	blx	r8
 800b57a:	4306      	orrs	r6, r0
 800b57c:	3568      	adds	r5, #104	@ 0x68
 800b57e:	e7e9      	b.n	800b554 <_fwalk_sglue+0x10>

0800b580 <iprintf>:
 800b580:	b40f      	push	{r0, r1, r2, r3}
 800b582:	b507      	push	{r0, r1, r2, lr}
 800b584:	4906      	ldr	r1, [pc, #24]	@ (800b5a0 <iprintf+0x20>)
 800b586:	ab04      	add	r3, sp, #16
 800b588:	6808      	ldr	r0, [r1, #0]
 800b58a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b58e:	6881      	ldr	r1, [r0, #8]
 800b590:	9301      	str	r3, [sp, #4]
 800b592:	f000 fa39 	bl	800ba08 <_vfiprintf_r>
 800b596:	b003      	add	sp, #12
 800b598:	f85d eb04 	ldr.w	lr, [sp], #4
 800b59c:	b004      	add	sp, #16
 800b59e:	4770      	bx	lr
 800b5a0:	20000030 	.word	0x20000030

0800b5a4 <__sread>:
 800b5a4:	b510      	push	{r4, lr}
 800b5a6:	460c      	mov	r4, r1
 800b5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ac:	f000 f88a 	bl	800b6c4 <_read_r>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	bfab      	itete	ge
 800b5b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b5b6:	89a3      	ldrhlt	r3, [r4, #12]
 800b5b8:	181b      	addge	r3, r3, r0
 800b5ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b5be:	bfac      	ite	ge
 800b5c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b5c2:	81a3      	strhlt	r3, [r4, #12]
 800b5c4:	bd10      	pop	{r4, pc}

0800b5c6 <__swrite>:
 800b5c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ca:	461f      	mov	r7, r3
 800b5cc:	898b      	ldrh	r3, [r1, #12]
 800b5ce:	05db      	lsls	r3, r3, #23
 800b5d0:	4605      	mov	r5, r0
 800b5d2:	460c      	mov	r4, r1
 800b5d4:	4616      	mov	r6, r2
 800b5d6:	d505      	bpl.n	800b5e4 <__swrite+0x1e>
 800b5d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5dc:	2302      	movs	r3, #2
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f000 f85e 	bl	800b6a0 <_lseek_r>
 800b5e4:	89a3      	ldrh	r3, [r4, #12]
 800b5e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b5ee:	81a3      	strh	r3, [r4, #12]
 800b5f0:	4632      	mov	r2, r6
 800b5f2:	463b      	mov	r3, r7
 800b5f4:	4628      	mov	r0, r5
 800b5f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5fa:	f000 b875 	b.w	800b6e8 <_write_r>

0800b5fe <__sseek>:
 800b5fe:	b510      	push	{r4, lr}
 800b600:	460c      	mov	r4, r1
 800b602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b606:	f000 f84b 	bl	800b6a0 <_lseek_r>
 800b60a:	1c43      	adds	r3, r0, #1
 800b60c:	89a3      	ldrh	r3, [r4, #12]
 800b60e:	bf15      	itete	ne
 800b610:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b612:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b616:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b61a:	81a3      	strheq	r3, [r4, #12]
 800b61c:	bf18      	it	ne
 800b61e:	81a3      	strhne	r3, [r4, #12]
 800b620:	bd10      	pop	{r4, pc}

0800b622 <__sclose>:
 800b622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b626:	f000 b82b 	b.w	800b680 <_close_r>

0800b62a <memcmp>:
 800b62a:	b510      	push	{r4, lr}
 800b62c:	3901      	subs	r1, #1
 800b62e:	4402      	add	r2, r0
 800b630:	4290      	cmp	r0, r2
 800b632:	d101      	bne.n	800b638 <memcmp+0xe>
 800b634:	2000      	movs	r0, #0
 800b636:	e005      	b.n	800b644 <memcmp+0x1a>
 800b638:	7803      	ldrb	r3, [r0, #0]
 800b63a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b63e:	42a3      	cmp	r3, r4
 800b640:	d001      	beq.n	800b646 <memcmp+0x1c>
 800b642:	1b18      	subs	r0, r3, r4
 800b644:	bd10      	pop	{r4, pc}
 800b646:	3001      	adds	r0, #1
 800b648:	e7f2      	b.n	800b630 <memcmp+0x6>

0800b64a <memset>:
 800b64a:	4402      	add	r2, r0
 800b64c:	4603      	mov	r3, r0
 800b64e:	4293      	cmp	r3, r2
 800b650:	d100      	bne.n	800b654 <memset+0xa>
 800b652:	4770      	bx	lr
 800b654:	f803 1b01 	strb.w	r1, [r3], #1
 800b658:	e7f9      	b.n	800b64e <memset+0x4>

0800b65a <strncpy>:
 800b65a:	b510      	push	{r4, lr}
 800b65c:	3901      	subs	r1, #1
 800b65e:	4603      	mov	r3, r0
 800b660:	b132      	cbz	r2, 800b670 <strncpy+0x16>
 800b662:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b666:	f803 4b01 	strb.w	r4, [r3], #1
 800b66a:	3a01      	subs	r2, #1
 800b66c:	2c00      	cmp	r4, #0
 800b66e:	d1f7      	bne.n	800b660 <strncpy+0x6>
 800b670:	441a      	add	r2, r3
 800b672:	2100      	movs	r1, #0
 800b674:	4293      	cmp	r3, r2
 800b676:	d100      	bne.n	800b67a <strncpy+0x20>
 800b678:	bd10      	pop	{r4, pc}
 800b67a:	f803 1b01 	strb.w	r1, [r3], #1
 800b67e:	e7f9      	b.n	800b674 <strncpy+0x1a>

0800b680 <_close_r>:
 800b680:	b538      	push	{r3, r4, r5, lr}
 800b682:	4d06      	ldr	r5, [pc, #24]	@ (800b69c <_close_r+0x1c>)
 800b684:	2300      	movs	r3, #0
 800b686:	4604      	mov	r4, r0
 800b688:	4608      	mov	r0, r1
 800b68a:	602b      	str	r3, [r5, #0]
 800b68c:	f7f5 fb7e 	bl	8000d8c <_close>
 800b690:	1c43      	adds	r3, r0, #1
 800b692:	d102      	bne.n	800b69a <_close_r+0x1a>
 800b694:	682b      	ldr	r3, [r5, #0]
 800b696:	b103      	cbz	r3, 800b69a <_close_r+0x1a>
 800b698:	6023      	str	r3, [r4, #0]
 800b69a:	bd38      	pop	{r3, r4, r5, pc}
 800b69c:	200085cc 	.word	0x200085cc

0800b6a0 <_lseek_r>:
 800b6a0:	b538      	push	{r3, r4, r5, lr}
 800b6a2:	4d07      	ldr	r5, [pc, #28]	@ (800b6c0 <_lseek_r+0x20>)
 800b6a4:	4604      	mov	r4, r0
 800b6a6:	4608      	mov	r0, r1
 800b6a8:	4611      	mov	r1, r2
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	602a      	str	r2, [r5, #0]
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	f7f5 fb93 	bl	8000dda <_lseek>
 800b6b4:	1c43      	adds	r3, r0, #1
 800b6b6:	d102      	bne.n	800b6be <_lseek_r+0x1e>
 800b6b8:	682b      	ldr	r3, [r5, #0]
 800b6ba:	b103      	cbz	r3, 800b6be <_lseek_r+0x1e>
 800b6bc:	6023      	str	r3, [r4, #0]
 800b6be:	bd38      	pop	{r3, r4, r5, pc}
 800b6c0:	200085cc 	.word	0x200085cc

0800b6c4 <_read_r>:
 800b6c4:	b538      	push	{r3, r4, r5, lr}
 800b6c6:	4d07      	ldr	r5, [pc, #28]	@ (800b6e4 <_read_r+0x20>)
 800b6c8:	4604      	mov	r4, r0
 800b6ca:	4608      	mov	r0, r1
 800b6cc:	4611      	mov	r1, r2
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	602a      	str	r2, [r5, #0]
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	f7f5 fb21 	bl	8000d1a <_read>
 800b6d8:	1c43      	adds	r3, r0, #1
 800b6da:	d102      	bne.n	800b6e2 <_read_r+0x1e>
 800b6dc:	682b      	ldr	r3, [r5, #0]
 800b6de:	b103      	cbz	r3, 800b6e2 <_read_r+0x1e>
 800b6e0:	6023      	str	r3, [r4, #0]
 800b6e2:	bd38      	pop	{r3, r4, r5, pc}
 800b6e4:	200085cc 	.word	0x200085cc

0800b6e8 <_write_r>:
 800b6e8:	b538      	push	{r3, r4, r5, lr}
 800b6ea:	4d07      	ldr	r5, [pc, #28]	@ (800b708 <_write_r+0x20>)
 800b6ec:	4604      	mov	r4, r0
 800b6ee:	4608      	mov	r0, r1
 800b6f0:	4611      	mov	r1, r2
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	602a      	str	r2, [r5, #0]
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	f7f5 fb2c 	bl	8000d54 <_write>
 800b6fc:	1c43      	adds	r3, r0, #1
 800b6fe:	d102      	bne.n	800b706 <_write_r+0x1e>
 800b700:	682b      	ldr	r3, [r5, #0]
 800b702:	b103      	cbz	r3, 800b706 <_write_r+0x1e>
 800b704:	6023      	str	r3, [r4, #0]
 800b706:	bd38      	pop	{r3, r4, r5, pc}
 800b708:	200085cc 	.word	0x200085cc

0800b70c <__libc_init_array>:
 800b70c:	b570      	push	{r4, r5, r6, lr}
 800b70e:	4d0d      	ldr	r5, [pc, #52]	@ (800b744 <__libc_init_array+0x38>)
 800b710:	4c0d      	ldr	r4, [pc, #52]	@ (800b748 <__libc_init_array+0x3c>)
 800b712:	1b64      	subs	r4, r4, r5
 800b714:	10a4      	asrs	r4, r4, #2
 800b716:	2600      	movs	r6, #0
 800b718:	42a6      	cmp	r6, r4
 800b71a:	d109      	bne.n	800b730 <__libc_init_array+0x24>
 800b71c:	4d0b      	ldr	r5, [pc, #44]	@ (800b74c <__libc_init_array+0x40>)
 800b71e:	4c0c      	ldr	r4, [pc, #48]	@ (800b750 <__libc_init_array+0x44>)
 800b720:	f000 fe4a 	bl	800c3b8 <_init>
 800b724:	1b64      	subs	r4, r4, r5
 800b726:	10a4      	asrs	r4, r4, #2
 800b728:	2600      	movs	r6, #0
 800b72a:	42a6      	cmp	r6, r4
 800b72c:	d105      	bne.n	800b73a <__libc_init_array+0x2e>
 800b72e:	bd70      	pop	{r4, r5, r6, pc}
 800b730:	f855 3b04 	ldr.w	r3, [r5], #4
 800b734:	4798      	blx	r3
 800b736:	3601      	adds	r6, #1
 800b738:	e7ee      	b.n	800b718 <__libc_init_array+0xc>
 800b73a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b73e:	4798      	blx	r3
 800b740:	3601      	adds	r6, #1
 800b742:	e7f2      	b.n	800b72a <__libc_init_array+0x1e>
 800b744:	0800dac8 	.word	0x0800dac8
 800b748:	0800dac8 	.word	0x0800dac8
 800b74c:	0800dac8 	.word	0x0800dac8
 800b750:	0800dacc 	.word	0x0800dacc

0800b754 <__retarget_lock_init_recursive>:
 800b754:	4770      	bx	lr

0800b756 <__retarget_lock_acquire_recursive>:
 800b756:	4770      	bx	lr

0800b758 <__retarget_lock_release_recursive>:
 800b758:	4770      	bx	lr

0800b75a <memcpy>:
 800b75a:	440a      	add	r2, r1
 800b75c:	4291      	cmp	r1, r2
 800b75e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b762:	d100      	bne.n	800b766 <memcpy+0xc>
 800b764:	4770      	bx	lr
 800b766:	b510      	push	{r4, lr}
 800b768:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b76c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b770:	4291      	cmp	r1, r2
 800b772:	d1f9      	bne.n	800b768 <memcpy+0xe>
 800b774:	bd10      	pop	{r4, pc}
	...

0800b778 <__assert_func>:
 800b778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b77a:	4614      	mov	r4, r2
 800b77c:	461a      	mov	r2, r3
 800b77e:	4b09      	ldr	r3, [pc, #36]	@ (800b7a4 <__assert_func+0x2c>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	4605      	mov	r5, r0
 800b784:	68d8      	ldr	r0, [r3, #12]
 800b786:	b954      	cbnz	r4, 800b79e <__assert_func+0x26>
 800b788:	4b07      	ldr	r3, [pc, #28]	@ (800b7a8 <__assert_func+0x30>)
 800b78a:	461c      	mov	r4, r3
 800b78c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b790:	9100      	str	r1, [sp, #0]
 800b792:	462b      	mov	r3, r5
 800b794:	4905      	ldr	r1, [pc, #20]	@ (800b7ac <__assert_func+0x34>)
 800b796:	f000 fc89 	bl	800c0ac <fiprintf>
 800b79a:	f000 fd3d 	bl	800c218 <abort>
 800b79e:	4b04      	ldr	r3, [pc, #16]	@ (800b7b0 <__assert_func+0x38>)
 800b7a0:	e7f4      	b.n	800b78c <__assert_func+0x14>
 800b7a2:	bf00      	nop
 800b7a4:	20000030 	.word	0x20000030
 800b7a8:	0800da8c 	.word	0x0800da8c
 800b7ac:	0800da5e 	.word	0x0800da5e
 800b7b0:	0800da51 	.word	0x0800da51

0800b7b4 <_free_r>:
 800b7b4:	b538      	push	{r3, r4, r5, lr}
 800b7b6:	4605      	mov	r5, r0
 800b7b8:	2900      	cmp	r1, #0
 800b7ba:	d041      	beq.n	800b840 <_free_r+0x8c>
 800b7bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7c0:	1f0c      	subs	r4, r1, #4
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	bfb8      	it	lt
 800b7c6:	18e4      	addlt	r4, r4, r3
 800b7c8:	f000 f8e8 	bl	800b99c <__malloc_lock>
 800b7cc:	4a1d      	ldr	r2, [pc, #116]	@ (800b844 <_free_r+0x90>)
 800b7ce:	6813      	ldr	r3, [r2, #0]
 800b7d0:	b933      	cbnz	r3, 800b7e0 <_free_r+0x2c>
 800b7d2:	6063      	str	r3, [r4, #4]
 800b7d4:	6014      	str	r4, [r2, #0]
 800b7d6:	4628      	mov	r0, r5
 800b7d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7dc:	f000 b8e4 	b.w	800b9a8 <__malloc_unlock>
 800b7e0:	42a3      	cmp	r3, r4
 800b7e2:	d908      	bls.n	800b7f6 <_free_r+0x42>
 800b7e4:	6820      	ldr	r0, [r4, #0]
 800b7e6:	1821      	adds	r1, r4, r0
 800b7e8:	428b      	cmp	r3, r1
 800b7ea:	bf01      	itttt	eq
 800b7ec:	6819      	ldreq	r1, [r3, #0]
 800b7ee:	685b      	ldreq	r3, [r3, #4]
 800b7f0:	1809      	addeq	r1, r1, r0
 800b7f2:	6021      	streq	r1, [r4, #0]
 800b7f4:	e7ed      	b.n	800b7d2 <_free_r+0x1e>
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	b10b      	cbz	r3, 800b800 <_free_r+0x4c>
 800b7fc:	42a3      	cmp	r3, r4
 800b7fe:	d9fa      	bls.n	800b7f6 <_free_r+0x42>
 800b800:	6811      	ldr	r1, [r2, #0]
 800b802:	1850      	adds	r0, r2, r1
 800b804:	42a0      	cmp	r0, r4
 800b806:	d10b      	bne.n	800b820 <_free_r+0x6c>
 800b808:	6820      	ldr	r0, [r4, #0]
 800b80a:	4401      	add	r1, r0
 800b80c:	1850      	adds	r0, r2, r1
 800b80e:	4283      	cmp	r3, r0
 800b810:	6011      	str	r1, [r2, #0]
 800b812:	d1e0      	bne.n	800b7d6 <_free_r+0x22>
 800b814:	6818      	ldr	r0, [r3, #0]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	6053      	str	r3, [r2, #4]
 800b81a:	4408      	add	r0, r1
 800b81c:	6010      	str	r0, [r2, #0]
 800b81e:	e7da      	b.n	800b7d6 <_free_r+0x22>
 800b820:	d902      	bls.n	800b828 <_free_r+0x74>
 800b822:	230c      	movs	r3, #12
 800b824:	602b      	str	r3, [r5, #0]
 800b826:	e7d6      	b.n	800b7d6 <_free_r+0x22>
 800b828:	6820      	ldr	r0, [r4, #0]
 800b82a:	1821      	adds	r1, r4, r0
 800b82c:	428b      	cmp	r3, r1
 800b82e:	bf04      	itt	eq
 800b830:	6819      	ldreq	r1, [r3, #0]
 800b832:	685b      	ldreq	r3, [r3, #4]
 800b834:	6063      	str	r3, [r4, #4]
 800b836:	bf04      	itt	eq
 800b838:	1809      	addeq	r1, r1, r0
 800b83a:	6021      	streq	r1, [r4, #0]
 800b83c:	6054      	str	r4, [r2, #4]
 800b83e:	e7ca      	b.n	800b7d6 <_free_r+0x22>
 800b840:	bd38      	pop	{r3, r4, r5, pc}
 800b842:	bf00      	nop
 800b844:	200085d8 	.word	0x200085d8

0800b848 <malloc>:
 800b848:	4b02      	ldr	r3, [pc, #8]	@ (800b854 <malloc+0xc>)
 800b84a:	4601      	mov	r1, r0
 800b84c:	6818      	ldr	r0, [r3, #0]
 800b84e:	f000 b825 	b.w	800b89c <_malloc_r>
 800b852:	bf00      	nop
 800b854:	20000030 	.word	0x20000030

0800b858 <sbrk_aligned>:
 800b858:	b570      	push	{r4, r5, r6, lr}
 800b85a:	4e0f      	ldr	r6, [pc, #60]	@ (800b898 <sbrk_aligned+0x40>)
 800b85c:	460c      	mov	r4, r1
 800b85e:	6831      	ldr	r1, [r6, #0]
 800b860:	4605      	mov	r5, r0
 800b862:	b911      	cbnz	r1, 800b86a <sbrk_aligned+0x12>
 800b864:	f000 fcc8 	bl	800c1f8 <_sbrk_r>
 800b868:	6030      	str	r0, [r6, #0]
 800b86a:	4621      	mov	r1, r4
 800b86c:	4628      	mov	r0, r5
 800b86e:	f000 fcc3 	bl	800c1f8 <_sbrk_r>
 800b872:	1c43      	adds	r3, r0, #1
 800b874:	d103      	bne.n	800b87e <sbrk_aligned+0x26>
 800b876:	f04f 34ff 	mov.w	r4, #4294967295
 800b87a:	4620      	mov	r0, r4
 800b87c:	bd70      	pop	{r4, r5, r6, pc}
 800b87e:	1cc4      	adds	r4, r0, #3
 800b880:	f024 0403 	bic.w	r4, r4, #3
 800b884:	42a0      	cmp	r0, r4
 800b886:	d0f8      	beq.n	800b87a <sbrk_aligned+0x22>
 800b888:	1a21      	subs	r1, r4, r0
 800b88a:	4628      	mov	r0, r5
 800b88c:	f000 fcb4 	bl	800c1f8 <_sbrk_r>
 800b890:	3001      	adds	r0, #1
 800b892:	d1f2      	bne.n	800b87a <sbrk_aligned+0x22>
 800b894:	e7ef      	b.n	800b876 <sbrk_aligned+0x1e>
 800b896:	bf00      	nop
 800b898:	200085d4 	.word	0x200085d4

0800b89c <_malloc_r>:
 800b89c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8a0:	1ccd      	adds	r5, r1, #3
 800b8a2:	f025 0503 	bic.w	r5, r5, #3
 800b8a6:	3508      	adds	r5, #8
 800b8a8:	2d0c      	cmp	r5, #12
 800b8aa:	bf38      	it	cc
 800b8ac:	250c      	movcc	r5, #12
 800b8ae:	2d00      	cmp	r5, #0
 800b8b0:	4606      	mov	r6, r0
 800b8b2:	db01      	blt.n	800b8b8 <_malloc_r+0x1c>
 800b8b4:	42a9      	cmp	r1, r5
 800b8b6:	d904      	bls.n	800b8c2 <_malloc_r+0x26>
 800b8b8:	230c      	movs	r3, #12
 800b8ba:	6033      	str	r3, [r6, #0]
 800b8bc:	2000      	movs	r0, #0
 800b8be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b998 <_malloc_r+0xfc>
 800b8c6:	f000 f869 	bl	800b99c <__malloc_lock>
 800b8ca:	f8d8 3000 	ldr.w	r3, [r8]
 800b8ce:	461c      	mov	r4, r3
 800b8d0:	bb44      	cbnz	r4, 800b924 <_malloc_r+0x88>
 800b8d2:	4629      	mov	r1, r5
 800b8d4:	4630      	mov	r0, r6
 800b8d6:	f7ff ffbf 	bl	800b858 <sbrk_aligned>
 800b8da:	1c43      	adds	r3, r0, #1
 800b8dc:	4604      	mov	r4, r0
 800b8de:	d158      	bne.n	800b992 <_malloc_r+0xf6>
 800b8e0:	f8d8 4000 	ldr.w	r4, [r8]
 800b8e4:	4627      	mov	r7, r4
 800b8e6:	2f00      	cmp	r7, #0
 800b8e8:	d143      	bne.n	800b972 <_malloc_r+0xd6>
 800b8ea:	2c00      	cmp	r4, #0
 800b8ec:	d04b      	beq.n	800b986 <_malloc_r+0xea>
 800b8ee:	6823      	ldr	r3, [r4, #0]
 800b8f0:	4639      	mov	r1, r7
 800b8f2:	4630      	mov	r0, r6
 800b8f4:	eb04 0903 	add.w	r9, r4, r3
 800b8f8:	f000 fc7e 	bl	800c1f8 <_sbrk_r>
 800b8fc:	4581      	cmp	r9, r0
 800b8fe:	d142      	bne.n	800b986 <_malloc_r+0xea>
 800b900:	6821      	ldr	r1, [r4, #0]
 800b902:	1a6d      	subs	r5, r5, r1
 800b904:	4629      	mov	r1, r5
 800b906:	4630      	mov	r0, r6
 800b908:	f7ff ffa6 	bl	800b858 <sbrk_aligned>
 800b90c:	3001      	adds	r0, #1
 800b90e:	d03a      	beq.n	800b986 <_malloc_r+0xea>
 800b910:	6823      	ldr	r3, [r4, #0]
 800b912:	442b      	add	r3, r5
 800b914:	6023      	str	r3, [r4, #0]
 800b916:	f8d8 3000 	ldr.w	r3, [r8]
 800b91a:	685a      	ldr	r2, [r3, #4]
 800b91c:	bb62      	cbnz	r2, 800b978 <_malloc_r+0xdc>
 800b91e:	f8c8 7000 	str.w	r7, [r8]
 800b922:	e00f      	b.n	800b944 <_malloc_r+0xa8>
 800b924:	6822      	ldr	r2, [r4, #0]
 800b926:	1b52      	subs	r2, r2, r5
 800b928:	d420      	bmi.n	800b96c <_malloc_r+0xd0>
 800b92a:	2a0b      	cmp	r2, #11
 800b92c:	d917      	bls.n	800b95e <_malloc_r+0xc2>
 800b92e:	1961      	adds	r1, r4, r5
 800b930:	42a3      	cmp	r3, r4
 800b932:	6025      	str	r5, [r4, #0]
 800b934:	bf18      	it	ne
 800b936:	6059      	strne	r1, [r3, #4]
 800b938:	6863      	ldr	r3, [r4, #4]
 800b93a:	bf08      	it	eq
 800b93c:	f8c8 1000 	streq.w	r1, [r8]
 800b940:	5162      	str	r2, [r4, r5]
 800b942:	604b      	str	r3, [r1, #4]
 800b944:	4630      	mov	r0, r6
 800b946:	f000 f82f 	bl	800b9a8 <__malloc_unlock>
 800b94a:	f104 000b 	add.w	r0, r4, #11
 800b94e:	1d23      	adds	r3, r4, #4
 800b950:	f020 0007 	bic.w	r0, r0, #7
 800b954:	1ac2      	subs	r2, r0, r3
 800b956:	bf1c      	itt	ne
 800b958:	1a1b      	subne	r3, r3, r0
 800b95a:	50a3      	strne	r3, [r4, r2]
 800b95c:	e7af      	b.n	800b8be <_malloc_r+0x22>
 800b95e:	6862      	ldr	r2, [r4, #4]
 800b960:	42a3      	cmp	r3, r4
 800b962:	bf0c      	ite	eq
 800b964:	f8c8 2000 	streq.w	r2, [r8]
 800b968:	605a      	strne	r2, [r3, #4]
 800b96a:	e7eb      	b.n	800b944 <_malloc_r+0xa8>
 800b96c:	4623      	mov	r3, r4
 800b96e:	6864      	ldr	r4, [r4, #4]
 800b970:	e7ae      	b.n	800b8d0 <_malloc_r+0x34>
 800b972:	463c      	mov	r4, r7
 800b974:	687f      	ldr	r7, [r7, #4]
 800b976:	e7b6      	b.n	800b8e6 <_malloc_r+0x4a>
 800b978:	461a      	mov	r2, r3
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	42a3      	cmp	r3, r4
 800b97e:	d1fb      	bne.n	800b978 <_malloc_r+0xdc>
 800b980:	2300      	movs	r3, #0
 800b982:	6053      	str	r3, [r2, #4]
 800b984:	e7de      	b.n	800b944 <_malloc_r+0xa8>
 800b986:	230c      	movs	r3, #12
 800b988:	6033      	str	r3, [r6, #0]
 800b98a:	4630      	mov	r0, r6
 800b98c:	f000 f80c 	bl	800b9a8 <__malloc_unlock>
 800b990:	e794      	b.n	800b8bc <_malloc_r+0x20>
 800b992:	6005      	str	r5, [r0, #0]
 800b994:	e7d6      	b.n	800b944 <_malloc_r+0xa8>
 800b996:	bf00      	nop
 800b998:	200085d8 	.word	0x200085d8

0800b99c <__malloc_lock>:
 800b99c:	4801      	ldr	r0, [pc, #4]	@ (800b9a4 <__malloc_lock+0x8>)
 800b99e:	f7ff beda 	b.w	800b756 <__retarget_lock_acquire_recursive>
 800b9a2:	bf00      	nop
 800b9a4:	200085d0 	.word	0x200085d0

0800b9a8 <__malloc_unlock>:
 800b9a8:	4801      	ldr	r0, [pc, #4]	@ (800b9b0 <__malloc_unlock+0x8>)
 800b9aa:	f7ff bed5 	b.w	800b758 <__retarget_lock_release_recursive>
 800b9ae:	bf00      	nop
 800b9b0:	200085d0 	.word	0x200085d0

0800b9b4 <__sfputc_r>:
 800b9b4:	6893      	ldr	r3, [r2, #8]
 800b9b6:	3b01      	subs	r3, #1
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	b410      	push	{r4}
 800b9bc:	6093      	str	r3, [r2, #8]
 800b9be:	da08      	bge.n	800b9d2 <__sfputc_r+0x1e>
 800b9c0:	6994      	ldr	r4, [r2, #24]
 800b9c2:	42a3      	cmp	r3, r4
 800b9c4:	db01      	blt.n	800b9ca <__sfputc_r+0x16>
 800b9c6:	290a      	cmp	r1, #10
 800b9c8:	d103      	bne.n	800b9d2 <__sfputc_r+0x1e>
 800b9ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9ce:	f000 bb7f 	b.w	800c0d0 <__swbuf_r>
 800b9d2:	6813      	ldr	r3, [r2, #0]
 800b9d4:	1c58      	adds	r0, r3, #1
 800b9d6:	6010      	str	r0, [r2, #0]
 800b9d8:	7019      	strb	r1, [r3, #0]
 800b9da:	4608      	mov	r0, r1
 800b9dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9e0:	4770      	bx	lr

0800b9e2 <__sfputs_r>:
 800b9e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9e4:	4606      	mov	r6, r0
 800b9e6:	460f      	mov	r7, r1
 800b9e8:	4614      	mov	r4, r2
 800b9ea:	18d5      	adds	r5, r2, r3
 800b9ec:	42ac      	cmp	r4, r5
 800b9ee:	d101      	bne.n	800b9f4 <__sfputs_r+0x12>
 800b9f0:	2000      	movs	r0, #0
 800b9f2:	e007      	b.n	800ba04 <__sfputs_r+0x22>
 800b9f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9f8:	463a      	mov	r2, r7
 800b9fa:	4630      	mov	r0, r6
 800b9fc:	f7ff ffda 	bl	800b9b4 <__sfputc_r>
 800ba00:	1c43      	adds	r3, r0, #1
 800ba02:	d1f3      	bne.n	800b9ec <__sfputs_r+0xa>
 800ba04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba08 <_vfiprintf_r>:
 800ba08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba0c:	460d      	mov	r5, r1
 800ba0e:	b09d      	sub	sp, #116	@ 0x74
 800ba10:	4614      	mov	r4, r2
 800ba12:	4698      	mov	r8, r3
 800ba14:	4606      	mov	r6, r0
 800ba16:	b118      	cbz	r0, 800ba20 <_vfiprintf_r+0x18>
 800ba18:	6a03      	ldr	r3, [r0, #32]
 800ba1a:	b90b      	cbnz	r3, 800ba20 <_vfiprintf_r+0x18>
 800ba1c:	f7ff fd7a 	bl	800b514 <__sinit>
 800ba20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba22:	07d9      	lsls	r1, r3, #31
 800ba24:	d405      	bmi.n	800ba32 <_vfiprintf_r+0x2a>
 800ba26:	89ab      	ldrh	r3, [r5, #12]
 800ba28:	059a      	lsls	r2, r3, #22
 800ba2a:	d402      	bmi.n	800ba32 <_vfiprintf_r+0x2a>
 800ba2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba2e:	f7ff fe92 	bl	800b756 <__retarget_lock_acquire_recursive>
 800ba32:	89ab      	ldrh	r3, [r5, #12]
 800ba34:	071b      	lsls	r3, r3, #28
 800ba36:	d501      	bpl.n	800ba3c <_vfiprintf_r+0x34>
 800ba38:	692b      	ldr	r3, [r5, #16]
 800ba3a:	b99b      	cbnz	r3, 800ba64 <_vfiprintf_r+0x5c>
 800ba3c:	4629      	mov	r1, r5
 800ba3e:	4630      	mov	r0, r6
 800ba40:	f000 fb84 	bl	800c14c <__swsetup_r>
 800ba44:	b170      	cbz	r0, 800ba64 <_vfiprintf_r+0x5c>
 800ba46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba48:	07dc      	lsls	r4, r3, #31
 800ba4a:	d504      	bpl.n	800ba56 <_vfiprintf_r+0x4e>
 800ba4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba50:	b01d      	add	sp, #116	@ 0x74
 800ba52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba56:	89ab      	ldrh	r3, [r5, #12]
 800ba58:	0598      	lsls	r0, r3, #22
 800ba5a:	d4f7      	bmi.n	800ba4c <_vfiprintf_r+0x44>
 800ba5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba5e:	f7ff fe7b 	bl	800b758 <__retarget_lock_release_recursive>
 800ba62:	e7f3      	b.n	800ba4c <_vfiprintf_r+0x44>
 800ba64:	2300      	movs	r3, #0
 800ba66:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba68:	2320      	movs	r3, #32
 800ba6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ba6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba72:	2330      	movs	r3, #48	@ 0x30
 800ba74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bc24 <_vfiprintf_r+0x21c>
 800ba78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ba7c:	f04f 0901 	mov.w	r9, #1
 800ba80:	4623      	mov	r3, r4
 800ba82:	469a      	mov	sl, r3
 800ba84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba88:	b10a      	cbz	r2, 800ba8e <_vfiprintf_r+0x86>
 800ba8a:	2a25      	cmp	r2, #37	@ 0x25
 800ba8c:	d1f9      	bne.n	800ba82 <_vfiprintf_r+0x7a>
 800ba8e:	ebba 0b04 	subs.w	fp, sl, r4
 800ba92:	d00b      	beq.n	800baac <_vfiprintf_r+0xa4>
 800ba94:	465b      	mov	r3, fp
 800ba96:	4622      	mov	r2, r4
 800ba98:	4629      	mov	r1, r5
 800ba9a:	4630      	mov	r0, r6
 800ba9c:	f7ff ffa1 	bl	800b9e2 <__sfputs_r>
 800baa0:	3001      	adds	r0, #1
 800baa2:	f000 80a7 	beq.w	800bbf4 <_vfiprintf_r+0x1ec>
 800baa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800baa8:	445a      	add	r2, fp
 800baaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800baac:	f89a 3000 	ldrb.w	r3, [sl]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	f000 809f 	beq.w	800bbf4 <_vfiprintf_r+0x1ec>
 800bab6:	2300      	movs	r3, #0
 800bab8:	f04f 32ff 	mov.w	r2, #4294967295
 800babc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bac0:	f10a 0a01 	add.w	sl, sl, #1
 800bac4:	9304      	str	r3, [sp, #16]
 800bac6:	9307      	str	r3, [sp, #28]
 800bac8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bacc:	931a      	str	r3, [sp, #104]	@ 0x68
 800bace:	4654      	mov	r4, sl
 800bad0:	2205      	movs	r2, #5
 800bad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bad6:	4853      	ldr	r0, [pc, #332]	@ (800bc24 <_vfiprintf_r+0x21c>)
 800bad8:	f7f4 fbba 	bl	8000250 <memchr>
 800badc:	9a04      	ldr	r2, [sp, #16]
 800bade:	b9d8      	cbnz	r0, 800bb18 <_vfiprintf_r+0x110>
 800bae0:	06d1      	lsls	r1, r2, #27
 800bae2:	bf44      	itt	mi
 800bae4:	2320      	movmi	r3, #32
 800bae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800baea:	0713      	lsls	r3, r2, #28
 800baec:	bf44      	itt	mi
 800baee:	232b      	movmi	r3, #43	@ 0x2b
 800baf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800baf4:	f89a 3000 	ldrb.w	r3, [sl]
 800baf8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bafa:	d015      	beq.n	800bb28 <_vfiprintf_r+0x120>
 800bafc:	9a07      	ldr	r2, [sp, #28]
 800bafe:	4654      	mov	r4, sl
 800bb00:	2000      	movs	r0, #0
 800bb02:	f04f 0c0a 	mov.w	ip, #10
 800bb06:	4621      	mov	r1, r4
 800bb08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb0c:	3b30      	subs	r3, #48	@ 0x30
 800bb0e:	2b09      	cmp	r3, #9
 800bb10:	d94b      	bls.n	800bbaa <_vfiprintf_r+0x1a2>
 800bb12:	b1b0      	cbz	r0, 800bb42 <_vfiprintf_r+0x13a>
 800bb14:	9207      	str	r2, [sp, #28]
 800bb16:	e014      	b.n	800bb42 <_vfiprintf_r+0x13a>
 800bb18:	eba0 0308 	sub.w	r3, r0, r8
 800bb1c:	fa09 f303 	lsl.w	r3, r9, r3
 800bb20:	4313      	orrs	r3, r2
 800bb22:	9304      	str	r3, [sp, #16]
 800bb24:	46a2      	mov	sl, r4
 800bb26:	e7d2      	b.n	800bace <_vfiprintf_r+0xc6>
 800bb28:	9b03      	ldr	r3, [sp, #12]
 800bb2a:	1d19      	adds	r1, r3, #4
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	9103      	str	r1, [sp, #12]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	bfbb      	ittet	lt
 800bb34:	425b      	neglt	r3, r3
 800bb36:	f042 0202 	orrlt.w	r2, r2, #2
 800bb3a:	9307      	strge	r3, [sp, #28]
 800bb3c:	9307      	strlt	r3, [sp, #28]
 800bb3e:	bfb8      	it	lt
 800bb40:	9204      	strlt	r2, [sp, #16]
 800bb42:	7823      	ldrb	r3, [r4, #0]
 800bb44:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb46:	d10a      	bne.n	800bb5e <_vfiprintf_r+0x156>
 800bb48:	7863      	ldrb	r3, [r4, #1]
 800bb4a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb4c:	d132      	bne.n	800bbb4 <_vfiprintf_r+0x1ac>
 800bb4e:	9b03      	ldr	r3, [sp, #12]
 800bb50:	1d1a      	adds	r2, r3, #4
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	9203      	str	r2, [sp, #12]
 800bb56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb5a:	3402      	adds	r4, #2
 800bb5c:	9305      	str	r3, [sp, #20]
 800bb5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bc34 <_vfiprintf_r+0x22c>
 800bb62:	7821      	ldrb	r1, [r4, #0]
 800bb64:	2203      	movs	r2, #3
 800bb66:	4650      	mov	r0, sl
 800bb68:	f7f4 fb72 	bl	8000250 <memchr>
 800bb6c:	b138      	cbz	r0, 800bb7e <_vfiprintf_r+0x176>
 800bb6e:	9b04      	ldr	r3, [sp, #16]
 800bb70:	eba0 000a 	sub.w	r0, r0, sl
 800bb74:	2240      	movs	r2, #64	@ 0x40
 800bb76:	4082      	lsls	r2, r0
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	3401      	adds	r4, #1
 800bb7c:	9304      	str	r3, [sp, #16]
 800bb7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb82:	4829      	ldr	r0, [pc, #164]	@ (800bc28 <_vfiprintf_r+0x220>)
 800bb84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb88:	2206      	movs	r2, #6
 800bb8a:	f7f4 fb61 	bl	8000250 <memchr>
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	d03f      	beq.n	800bc12 <_vfiprintf_r+0x20a>
 800bb92:	4b26      	ldr	r3, [pc, #152]	@ (800bc2c <_vfiprintf_r+0x224>)
 800bb94:	bb1b      	cbnz	r3, 800bbde <_vfiprintf_r+0x1d6>
 800bb96:	9b03      	ldr	r3, [sp, #12]
 800bb98:	3307      	adds	r3, #7
 800bb9a:	f023 0307 	bic.w	r3, r3, #7
 800bb9e:	3308      	adds	r3, #8
 800bba0:	9303      	str	r3, [sp, #12]
 800bba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bba4:	443b      	add	r3, r7
 800bba6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bba8:	e76a      	b.n	800ba80 <_vfiprintf_r+0x78>
 800bbaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbae:	460c      	mov	r4, r1
 800bbb0:	2001      	movs	r0, #1
 800bbb2:	e7a8      	b.n	800bb06 <_vfiprintf_r+0xfe>
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	3401      	adds	r4, #1
 800bbb8:	9305      	str	r3, [sp, #20]
 800bbba:	4619      	mov	r1, r3
 800bbbc:	f04f 0c0a 	mov.w	ip, #10
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbc6:	3a30      	subs	r2, #48	@ 0x30
 800bbc8:	2a09      	cmp	r2, #9
 800bbca:	d903      	bls.n	800bbd4 <_vfiprintf_r+0x1cc>
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d0c6      	beq.n	800bb5e <_vfiprintf_r+0x156>
 800bbd0:	9105      	str	r1, [sp, #20]
 800bbd2:	e7c4      	b.n	800bb5e <_vfiprintf_r+0x156>
 800bbd4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbd8:	4604      	mov	r4, r0
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e7f0      	b.n	800bbc0 <_vfiprintf_r+0x1b8>
 800bbde:	ab03      	add	r3, sp, #12
 800bbe0:	9300      	str	r3, [sp, #0]
 800bbe2:	462a      	mov	r2, r5
 800bbe4:	4b12      	ldr	r3, [pc, #72]	@ (800bc30 <_vfiprintf_r+0x228>)
 800bbe6:	a904      	add	r1, sp, #16
 800bbe8:	4630      	mov	r0, r6
 800bbea:	f3af 8000 	nop.w
 800bbee:	4607      	mov	r7, r0
 800bbf0:	1c78      	adds	r0, r7, #1
 800bbf2:	d1d6      	bne.n	800bba2 <_vfiprintf_r+0x19a>
 800bbf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbf6:	07d9      	lsls	r1, r3, #31
 800bbf8:	d405      	bmi.n	800bc06 <_vfiprintf_r+0x1fe>
 800bbfa:	89ab      	ldrh	r3, [r5, #12]
 800bbfc:	059a      	lsls	r2, r3, #22
 800bbfe:	d402      	bmi.n	800bc06 <_vfiprintf_r+0x1fe>
 800bc00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc02:	f7ff fda9 	bl	800b758 <__retarget_lock_release_recursive>
 800bc06:	89ab      	ldrh	r3, [r5, #12]
 800bc08:	065b      	lsls	r3, r3, #25
 800bc0a:	f53f af1f 	bmi.w	800ba4c <_vfiprintf_r+0x44>
 800bc0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc10:	e71e      	b.n	800ba50 <_vfiprintf_r+0x48>
 800bc12:	ab03      	add	r3, sp, #12
 800bc14:	9300      	str	r3, [sp, #0]
 800bc16:	462a      	mov	r2, r5
 800bc18:	4b05      	ldr	r3, [pc, #20]	@ (800bc30 <_vfiprintf_r+0x228>)
 800bc1a:	a904      	add	r1, sp, #16
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	f000 f879 	bl	800bd14 <_printf_i>
 800bc22:	e7e4      	b.n	800bbee <_vfiprintf_r+0x1e6>
 800bc24:	0800da8d 	.word	0x0800da8d
 800bc28:	0800da97 	.word	0x0800da97
 800bc2c:	00000000 	.word	0x00000000
 800bc30:	0800b9e3 	.word	0x0800b9e3
 800bc34:	0800da93 	.word	0x0800da93

0800bc38 <_printf_common>:
 800bc38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc3c:	4616      	mov	r6, r2
 800bc3e:	4698      	mov	r8, r3
 800bc40:	688a      	ldr	r2, [r1, #8]
 800bc42:	690b      	ldr	r3, [r1, #16]
 800bc44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	bfb8      	it	lt
 800bc4c:	4613      	movlt	r3, r2
 800bc4e:	6033      	str	r3, [r6, #0]
 800bc50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bc54:	4607      	mov	r7, r0
 800bc56:	460c      	mov	r4, r1
 800bc58:	b10a      	cbz	r2, 800bc5e <_printf_common+0x26>
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	6033      	str	r3, [r6, #0]
 800bc5e:	6823      	ldr	r3, [r4, #0]
 800bc60:	0699      	lsls	r1, r3, #26
 800bc62:	bf42      	ittt	mi
 800bc64:	6833      	ldrmi	r3, [r6, #0]
 800bc66:	3302      	addmi	r3, #2
 800bc68:	6033      	strmi	r3, [r6, #0]
 800bc6a:	6825      	ldr	r5, [r4, #0]
 800bc6c:	f015 0506 	ands.w	r5, r5, #6
 800bc70:	d106      	bne.n	800bc80 <_printf_common+0x48>
 800bc72:	f104 0a19 	add.w	sl, r4, #25
 800bc76:	68e3      	ldr	r3, [r4, #12]
 800bc78:	6832      	ldr	r2, [r6, #0]
 800bc7a:	1a9b      	subs	r3, r3, r2
 800bc7c:	42ab      	cmp	r3, r5
 800bc7e:	dc26      	bgt.n	800bcce <_printf_common+0x96>
 800bc80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bc84:	6822      	ldr	r2, [r4, #0]
 800bc86:	3b00      	subs	r3, #0
 800bc88:	bf18      	it	ne
 800bc8a:	2301      	movne	r3, #1
 800bc8c:	0692      	lsls	r2, r2, #26
 800bc8e:	d42b      	bmi.n	800bce8 <_printf_common+0xb0>
 800bc90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bc94:	4641      	mov	r1, r8
 800bc96:	4638      	mov	r0, r7
 800bc98:	47c8      	blx	r9
 800bc9a:	3001      	adds	r0, #1
 800bc9c:	d01e      	beq.n	800bcdc <_printf_common+0xa4>
 800bc9e:	6823      	ldr	r3, [r4, #0]
 800bca0:	6922      	ldr	r2, [r4, #16]
 800bca2:	f003 0306 	and.w	r3, r3, #6
 800bca6:	2b04      	cmp	r3, #4
 800bca8:	bf02      	ittt	eq
 800bcaa:	68e5      	ldreq	r5, [r4, #12]
 800bcac:	6833      	ldreq	r3, [r6, #0]
 800bcae:	1aed      	subeq	r5, r5, r3
 800bcb0:	68a3      	ldr	r3, [r4, #8]
 800bcb2:	bf0c      	ite	eq
 800bcb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bcb8:	2500      	movne	r5, #0
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	bfc4      	itt	gt
 800bcbe:	1a9b      	subgt	r3, r3, r2
 800bcc0:	18ed      	addgt	r5, r5, r3
 800bcc2:	2600      	movs	r6, #0
 800bcc4:	341a      	adds	r4, #26
 800bcc6:	42b5      	cmp	r5, r6
 800bcc8:	d11a      	bne.n	800bd00 <_printf_common+0xc8>
 800bcca:	2000      	movs	r0, #0
 800bccc:	e008      	b.n	800bce0 <_printf_common+0xa8>
 800bcce:	2301      	movs	r3, #1
 800bcd0:	4652      	mov	r2, sl
 800bcd2:	4641      	mov	r1, r8
 800bcd4:	4638      	mov	r0, r7
 800bcd6:	47c8      	blx	r9
 800bcd8:	3001      	adds	r0, #1
 800bcda:	d103      	bne.n	800bce4 <_printf_common+0xac>
 800bcdc:	f04f 30ff 	mov.w	r0, #4294967295
 800bce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bce4:	3501      	adds	r5, #1
 800bce6:	e7c6      	b.n	800bc76 <_printf_common+0x3e>
 800bce8:	18e1      	adds	r1, r4, r3
 800bcea:	1c5a      	adds	r2, r3, #1
 800bcec:	2030      	movs	r0, #48	@ 0x30
 800bcee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bcf2:	4422      	add	r2, r4
 800bcf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bcf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bcfc:	3302      	adds	r3, #2
 800bcfe:	e7c7      	b.n	800bc90 <_printf_common+0x58>
 800bd00:	2301      	movs	r3, #1
 800bd02:	4622      	mov	r2, r4
 800bd04:	4641      	mov	r1, r8
 800bd06:	4638      	mov	r0, r7
 800bd08:	47c8      	blx	r9
 800bd0a:	3001      	adds	r0, #1
 800bd0c:	d0e6      	beq.n	800bcdc <_printf_common+0xa4>
 800bd0e:	3601      	adds	r6, #1
 800bd10:	e7d9      	b.n	800bcc6 <_printf_common+0x8e>
	...

0800bd14 <_printf_i>:
 800bd14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd18:	7e0f      	ldrb	r7, [r1, #24]
 800bd1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bd1c:	2f78      	cmp	r7, #120	@ 0x78
 800bd1e:	4691      	mov	r9, r2
 800bd20:	4680      	mov	r8, r0
 800bd22:	460c      	mov	r4, r1
 800bd24:	469a      	mov	sl, r3
 800bd26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bd2a:	d807      	bhi.n	800bd3c <_printf_i+0x28>
 800bd2c:	2f62      	cmp	r7, #98	@ 0x62
 800bd2e:	d80a      	bhi.n	800bd46 <_printf_i+0x32>
 800bd30:	2f00      	cmp	r7, #0
 800bd32:	f000 80d2 	beq.w	800beda <_printf_i+0x1c6>
 800bd36:	2f58      	cmp	r7, #88	@ 0x58
 800bd38:	f000 80b9 	beq.w	800beae <_printf_i+0x19a>
 800bd3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bd40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bd44:	e03a      	b.n	800bdbc <_printf_i+0xa8>
 800bd46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bd4a:	2b15      	cmp	r3, #21
 800bd4c:	d8f6      	bhi.n	800bd3c <_printf_i+0x28>
 800bd4e:	a101      	add	r1, pc, #4	@ (adr r1, 800bd54 <_printf_i+0x40>)
 800bd50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd54:	0800bdad 	.word	0x0800bdad
 800bd58:	0800bdc1 	.word	0x0800bdc1
 800bd5c:	0800bd3d 	.word	0x0800bd3d
 800bd60:	0800bd3d 	.word	0x0800bd3d
 800bd64:	0800bd3d 	.word	0x0800bd3d
 800bd68:	0800bd3d 	.word	0x0800bd3d
 800bd6c:	0800bdc1 	.word	0x0800bdc1
 800bd70:	0800bd3d 	.word	0x0800bd3d
 800bd74:	0800bd3d 	.word	0x0800bd3d
 800bd78:	0800bd3d 	.word	0x0800bd3d
 800bd7c:	0800bd3d 	.word	0x0800bd3d
 800bd80:	0800bec1 	.word	0x0800bec1
 800bd84:	0800bdeb 	.word	0x0800bdeb
 800bd88:	0800be7b 	.word	0x0800be7b
 800bd8c:	0800bd3d 	.word	0x0800bd3d
 800bd90:	0800bd3d 	.word	0x0800bd3d
 800bd94:	0800bee3 	.word	0x0800bee3
 800bd98:	0800bd3d 	.word	0x0800bd3d
 800bd9c:	0800bdeb 	.word	0x0800bdeb
 800bda0:	0800bd3d 	.word	0x0800bd3d
 800bda4:	0800bd3d 	.word	0x0800bd3d
 800bda8:	0800be83 	.word	0x0800be83
 800bdac:	6833      	ldr	r3, [r6, #0]
 800bdae:	1d1a      	adds	r2, r3, #4
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	6032      	str	r2, [r6, #0]
 800bdb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bdb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	e09d      	b.n	800befc <_printf_i+0x1e8>
 800bdc0:	6833      	ldr	r3, [r6, #0]
 800bdc2:	6820      	ldr	r0, [r4, #0]
 800bdc4:	1d19      	adds	r1, r3, #4
 800bdc6:	6031      	str	r1, [r6, #0]
 800bdc8:	0606      	lsls	r6, r0, #24
 800bdca:	d501      	bpl.n	800bdd0 <_printf_i+0xbc>
 800bdcc:	681d      	ldr	r5, [r3, #0]
 800bdce:	e003      	b.n	800bdd8 <_printf_i+0xc4>
 800bdd0:	0645      	lsls	r5, r0, #25
 800bdd2:	d5fb      	bpl.n	800bdcc <_printf_i+0xb8>
 800bdd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bdd8:	2d00      	cmp	r5, #0
 800bdda:	da03      	bge.n	800bde4 <_printf_i+0xd0>
 800bddc:	232d      	movs	r3, #45	@ 0x2d
 800bdde:	426d      	negs	r5, r5
 800bde0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bde4:	4859      	ldr	r0, [pc, #356]	@ (800bf4c <_printf_i+0x238>)
 800bde6:	230a      	movs	r3, #10
 800bde8:	e011      	b.n	800be0e <_printf_i+0xfa>
 800bdea:	6821      	ldr	r1, [r4, #0]
 800bdec:	6833      	ldr	r3, [r6, #0]
 800bdee:	0608      	lsls	r0, r1, #24
 800bdf0:	f853 5b04 	ldr.w	r5, [r3], #4
 800bdf4:	d402      	bmi.n	800bdfc <_printf_i+0xe8>
 800bdf6:	0649      	lsls	r1, r1, #25
 800bdf8:	bf48      	it	mi
 800bdfa:	b2ad      	uxthmi	r5, r5
 800bdfc:	2f6f      	cmp	r7, #111	@ 0x6f
 800bdfe:	4853      	ldr	r0, [pc, #332]	@ (800bf4c <_printf_i+0x238>)
 800be00:	6033      	str	r3, [r6, #0]
 800be02:	bf14      	ite	ne
 800be04:	230a      	movne	r3, #10
 800be06:	2308      	moveq	r3, #8
 800be08:	2100      	movs	r1, #0
 800be0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800be0e:	6866      	ldr	r6, [r4, #4]
 800be10:	60a6      	str	r6, [r4, #8]
 800be12:	2e00      	cmp	r6, #0
 800be14:	bfa2      	ittt	ge
 800be16:	6821      	ldrge	r1, [r4, #0]
 800be18:	f021 0104 	bicge.w	r1, r1, #4
 800be1c:	6021      	strge	r1, [r4, #0]
 800be1e:	b90d      	cbnz	r5, 800be24 <_printf_i+0x110>
 800be20:	2e00      	cmp	r6, #0
 800be22:	d04b      	beq.n	800bebc <_printf_i+0x1a8>
 800be24:	4616      	mov	r6, r2
 800be26:	fbb5 f1f3 	udiv	r1, r5, r3
 800be2a:	fb03 5711 	mls	r7, r3, r1, r5
 800be2e:	5dc7      	ldrb	r7, [r0, r7]
 800be30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800be34:	462f      	mov	r7, r5
 800be36:	42bb      	cmp	r3, r7
 800be38:	460d      	mov	r5, r1
 800be3a:	d9f4      	bls.n	800be26 <_printf_i+0x112>
 800be3c:	2b08      	cmp	r3, #8
 800be3e:	d10b      	bne.n	800be58 <_printf_i+0x144>
 800be40:	6823      	ldr	r3, [r4, #0]
 800be42:	07df      	lsls	r7, r3, #31
 800be44:	d508      	bpl.n	800be58 <_printf_i+0x144>
 800be46:	6923      	ldr	r3, [r4, #16]
 800be48:	6861      	ldr	r1, [r4, #4]
 800be4a:	4299      	cmp	r1, r3
 800be4c:	bfde      	ittt	le
 800be4e:	2330      	movle	r3, #48	@ 0x30
 800be50:	f806 3c01 	strble.w	r3, [r6, #-1]
 800be54:	f106 36ff 	addle.w	r6, r6, #4294967295
 800be58:	1b92      	subs	r2, r2, r6
 800be5a:	6122      	str	r2, [r4, #16]
 800be5c:	f8cd a000 	str.w	sl, [sp]
 800be60:	464b      	mov	r3, r9
 800be62:	aa03      	add	r2, sp, #12
 800be64:	4621      	mov	r1, r4
 800be66:	4640      	mov	r0, r8
 800be68:	f7ff fee6 	bl	800bc38 <_printf_common>
 800be6c:	3001      	adds	r0, #1
 800be6e:	d14a      	bne.n	800bf06 <_printf_i+0x1f2>
 800be70:	f04f 30ff 	mov.w	r0, #4294967295
 800be74:	b004      	add	sp, #16
 800be76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be7a:	6823      	ldr	r3, [r4, #0]
 800be7c:	f043 0320 	orr.w	r3, r3, #32
 800be80:	6023      	str	r3, [r4, #0]
 800be82:	4833      	ldr	r0, [pc, #204]	@ (800bf50 <_printf_i+0x23c>)
 800be84:	2778      	movs	r7, #120	@ 0x78
 800be86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800be8a:	6823      	ldr	r3, [r4, #0]
 800be8c:	6831      	ldr	r1, [r6, #0]
 800be8e:	061f      	lsls	r7, r3, #24
 800be90:	f851 5b04 	ldr.w	r5, [r1], #4
 800be94:	d402      	bmi.n	800be9c <_printf_i+0x188>
 800be96:	065f      	lsls	r7, r3, #25
 800be98:	bf48      	it	mi
 800be9a:	b2ad      	uxthmi	r5, r5
 800be9c:	6031      	str	r1, [r6, #0]
 800be9e:	07d9      	lsls	r1, r3, #31
 800bea0:	bf44      	itt	mi
 800bea2:	f043 0320 	orrmi.w	r3, r3, #32
 800bea6:	6023      	strmi	r3, [r4, #0]
 800bea8:	b11d      	cbz	r5, 800beb2 <_printf_i+0x19e>
 800beaa:	2310      	movs	r3, #16
 800beac:	e7ac      	b.n	800be08 <_printf_i+0xf4>
 800beae:	4827      	ldr	r0, [pc, #156]	@ (800bf4c <_printf_i+0x238>)
 800beb0:	e7e9      	b.n	800be86 <_printf_i+0x172>
 800beb2:	6823      	ldr	r3, [r4, #0]
 800beb4:	f023 0320 	bic.w	r3, r3, #32
 800beb8:	6023      	str	r3, [r4, #0]
 800beba:	e7f6      	b.n	800beaa <_printf_i+0x196>
 800bebc:	4616      	mov	r6, r2
 800bebe:	e7bd      	b.n	800be3c <_printf_i+0x128>
 800bec0:	6833      	ldr	r3, [r6, #0]
 800bec2:	6825      	ldr	r5, [r4, #0]
 800bec4:	6961      	ldr	r1, [r4, #20]
 800bec6:	1d18      	adds	r0, r3, #4
 800bec8:	6030      	str	r0, [r6, #0]
 800beca:	062e      	lsls	r6, r5, #24
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	d501      	bpl.n	800bed4 <_printf_i+0x1c0>
 800bed0:	6019      	str	r1, [r3, #0]
 800bed2:	e002      	b.n	800beda <_printf_i+0x1c6>
 800bed4:	0668      	lsls	r0, r5, #25
 800bed6:	d5fb      	bpl.n	800bed0 <_printf_i+0x1bc>
 800bed8:	8019      	strh	r1, [r3, #0]
 800beda:	2300      	movs	r3, #0
 800bedc:	6123      	str	r3, [r4, #16]
 800bede:	4616      	mov	r6, r2
 800bee0:	e7bc      	b.n	800be5c <_printf_i+0x148>
 800bee2:	6833      	ldr	r3, [r6, #0]
 800bee4:	1d1a      	adds	r2, r3, #4
 800bee6:	6032      	str	r2, [r6, #0]
 800bee8:	681e      	ldr	r6, [r3, #0]
 800beea:	6862      	ldr	r2, [r4, #4]
 800beec:	2100      	movs	r1, #0
 800beee:	4630      	mov	r0, r6
 800bef0:	f7f4 f9ae 	bl	8000250 <memchr>
 800bef4:	b108      	cbz	r0, 800befa <_printf_i+0x1e6>
 800bef6:	1b80      	subs	r0, r0, r6
 800bef8:	6060      	str	r0, [r4, #4]
 800befa:	6863      	ldr	r3, [r4, #4]
 800befc:	6123      	str	r3, [r4, #16]
 800befe:	2300      	movs	r3, #0
 800bf00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf04:	e7aa      	b.n	800be5c <_printf_i+0x148>
 800bf06:	6923      	ldr	r3, [r4, #16]
 800bf08:	4632      	mov	r2, r6
 800bf0a:	4649      	mov	r1, r9
 800bf0c:	4640      	mov	r0, r8
 800bf0e:	47d0      	blx	sl
 800bf10:	3001      	adds	r0, #1
 800bf12:	d0ad      	beq.n	800be70 <_printf_i+0x15c>
 800bf14:	6823      	ldr	r3, [r4, #0]
 800bf16:	079b      	lsls	r3, r3, #30
 800bf18:	d413      	bmi.n	800bf42 <_printf_i+0x22e>
 800bf1a:	68e0      	ldr	r0, [r4, #12]
 800bf1c:	9b03      	ldr	r3, [sp, #12]
 800bf1e:	4298      	cmp	r0, r3
 800bf20:	bfb8      	it	lt
 800bf22:	4618      	movlt	r0, r3
 800bf24:	e7a6      	b.n	800be74 <_printf_i+0x160>
 800bf26:	2301      	movs	r3, #1
 800bf28:	4632      	mov	r2, r6
 800bf2a:	4649      	mov	r1, r9
 800bf2c:	4640      	mov	r0, r8
 800bf2e:	47d0      	blx	sl
 800bf30:	3001      	adds	r0, #1
 800bf32:	d09d      	beq.n	800be70 <_printf_i+0x15c>
 800bf34:	3501      	adds	r5, #1
 800bf36:	68e3      	ldr	r3, [r4, #12]
 800bf38:	9903      	ldr	r1, [sp, #12]
 800bf3a:	1a5b      	subs	r3, r3, r1
 800bf3c:	42ab      	cmp	r3, r5
 800bf3e:	dcf2      	bgt.n	800bf26 <_printf_i+0x212>
 800bf40:	e7eb      	b.n	800bf1a <_printf_i+0x206>
 800bf42:	2500      	movs	r5, #0
 800bf44:	f104 0619 	add.w	r6, r4, #25
 800bf48:	e7f5      	b.n	800bf36 <_printf_i+0x222>
 800bf4a:	bf00      	nop
 800bf4c:	0800da9e 	.word	0x0800da9e
 800bf50:	0800daaf 	.word	0x0800daaf

0800bf54 <__sflush_r>:
 800bf54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bf58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf5c:	0716      	lsls	r6, r2, #28
 800bf5e:	4605      	mov	r5, r0
 800bf60:	460c      	mov	r4, r1
 800bf62:	d454      	bmi.n	800c00e <__sflush_r+0xba>
 800bf64:	684b      	ldr	r3, [r1, #4]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	dc02      	bgt.n	800bf70 <__sflush_r+0x1c>
 800bf6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	dd48      	ble.n	800c002 <__sflush_r+0xae>
 800bf70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bf72:	2e00      	cmp	r6, #0
 800bf74:	d045      	beq.n	800c002 <__sflush_r+0xae>
 800bf76:	2300      	movs	r3, #0
 800bf78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bf7c:	682f      	ldr	r7, [r5, #0]
 800bf7e:	6a21      	ldr	r1, [r4, #32]
 800bf80:	602b      	str	r3, [r5, #0]
 800bf82:	d030      	beq.n	800bfe6 <__sflush_r+0x92>
 800bf84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bf86:	89a3      	ldrh	r3, [r4, #12]
 800bf88:	0759      	lsls	r1, r3, #29
 800bf8a:	d505      	bpl.n	800bf98 <__sflush_r+0x44>
 800bf8c:	6863      	ldr	r3, [r4, #4]
 800bf8e:	1ad2      	subs	r2, r2, r3
 800bf90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bf92:	b10b      	cbz	r3, 800bf98 <__sflush_r+0x44>
 800bf94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bf96:	1ad2      	subs	r2, r2, r3
 800bf98:	2300      	movs	r3, #0
 800bf9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bf9c:	6a21      	ldr	r1, [r4, #32]
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	47b0      	blx	r6
 800bfa2:	1c43      	adds	r3, r0, #1
 800bfa4:	89a3      	ldrh	r3, [r4, #12]
 800bfa6:	d106      	bne.n	800bfb6 <__sflush_r+0x62>
 800bfa8:	6829      	ldr	r1, [r5, #0]
 800bfaa:	291d      	cmp	r1, #29
 800bfac:	d82b      	bhi.n	800c006 <__sflush_r+0xb2>
 800bfae:	4a2a      	ldr	r2, [pc, #168]	@ (800c058 <__sflush_r+0x104>)
 800bfb0:	410a      	asrs	r2, r1
 800bfb2:	07d6      	lsls	r6, r2, #31
 800bfb4:	d427      	bmi.n	800c006 <__sflush_r+0xb2>
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	6062      	str	r2, [r4, #4]
 800bfba:	04d9      	lsls	r1, r3, #19
 800bfbc:	6922      	ldr	r2, [r4, #16]
 800bfbe:	6022      	str	r2, [r4, #0]
 800bfc0:	d504      	bpl.n	800bfcc <__sflush_r+0x78>
 800bfc2:	1c42      	adds	r2, r0, #1
 800bfc4:	d101      	bne.n	800bfca <__sflush_r+0x76>
 800bfc6:	682b      	ldr	r3, [r5, #0]
 800bfc8:	b903      	cbnz	r3, 800bfcc <__sflush_r+0x78>
 800bfca:	6560      	str	r0, [r4, #84]	@ 0x54
 800bfcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bfce:	602f      	str	r7, [r5, #0]
 800bfd0:	b1b9      	cbz	r1, 800c002 <__sflush_r+0xae>
 800bfd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bfd6:	4299      	cmp	r1, r3
 800bfd8:	d002      	beq.n	800bfe0 <__sflush_r+0x8c>
 800bfda:	4628      	mov	r0, r5
 800bfdc:	f7ff fbea 	bl	800b7b4 <_free_r>
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	6363      	str	r3, [r4, #52]	@ 0x34
 800bfe4:	e00d      	b.n	800c002 <__sflush_r+0xae>
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	4628      	mov	r0, r5
 800bfea:	47b0      	blx	r6
 800bfec:	4602      	mov	r2, r0
 800bfee:	1c50      	adds	r0, r2, #1
 800bff0:	d1c9      	bne.n	800bf86 <__sflush_r+0x32>
 800bff2:	682b      	ldr	r3, [r5, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d0c6      	beq.n	800bf86 <__sflush_r+0x32>
 800bff8:	2b1d      	cmp	r3, #29
 800bffa:	d001      	beq.n	800c000 <__sflush_r+0xac>
 800bffc:	2b16      	cmp	r3, #22
 800bffe:	d11e      	bne.n	800c03e <__sflush_r+0xea>
 800c000:	602f      	str	r7, [r5, #0]
 800c002:	2000      	movs	r0, #0
 800c004:	e022      	b.n	800c04c <__sflush_r+0xf8>
 800c006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c00a:	b21b      	sxth	r3, r3
 800c00c:	e01b      	b.n	800c046 <__sflush_r+0xf2>
 800c00e:	690f      	ldr	r7, [r1, #16]
 800c010:	2f00      	cmp	r7, #0
 800c012:	d0f6      	beq.n	800c002 <__sflush_r+0xae>
 800c014:	0793      	lsls	r3, r2, #30
 800c016:	680e      	ldr	r6, [r1, #0]
 800c018:	bf08      	it	eq
 800c01a:	694b      	ldreq	r3, [r1, #20]
 800c01c:	600f      	str	r7, [r1, #0]
 800c01e:	bf18      	it	ne
 800c020:	2300      	movne	r3, #0
 800c022:	eba6 0807 	sub.w	r8, r6, r7
 800c026:	608b      	str	r3, [r1, #8]
 800c028:	f1b8 0f00 	cmp.w	r8, #0
 800c02c:	dde9      	ble.n	800c002 <__sflush_r+0xae>
 800c02e:	6a21      	ldr	r1, [r4, #32]
 800c030:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c032:	4643      	mov	r3, r8
 800c034:	463a      	mov	r2, r7
 800c036:	4628      	mov	r0, r5
 800c038:	47b0      	blx	r6
 800c03a:	2800      	cmp	r0, #0
 800c03c:	dc08      	bgt.n	800c050 <__sflush_r+0xfc>
 800c03e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c046:	81a3      	strh	r3, [r4, #12]
 800c048:	f04f 30ff 	mov.w	r0, #4294967295
 800c04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c050:	4407      	add	r7, r0
 800c052:	eba8 0800 	sub.w	r8, r8, r0
 800c056:	e7e7      	b.n	800c028 <__sflush_r+0xd4>
 800c058:	dfbffffe 	.word	0xdfbffffe

0800c05c <_fflush_r>:
 800c05c:	b538      	push	{r3, r4, r5, lr}
 800c05e:	690b      	ldr	r3, [r1, #16]
 800c060:	4605      	mov	r5, r0
 800c062:	460c      	mov	r4, r1
 800c064:	b913      	cbnz	r3, 800c06c <_fflush_r+0x10>
 800c066:	2500      	movs	r5, #0
 800c068:	4628      	mov	r0, r5
 800c06a:	bd38      	pop	{r3, r4, r5, pc}
 800c06c:	b118      	cbz	r0, 800c076 <_fflush_r+0x1a>
 800c06e:	6a03      	ldr	r3, [r0, #32]
 800c070:	b90b      	cbnz	r3, 800c076 <_fflush_r+0x1a>
 800c072:	f7ff fa4f 	bl	800b514 <__sinit>
 800c076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d0f3      	beq.n	800c066 <_fflush_r+0xa>
 800c07e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c080:	07d0      	lsls	r0, r2, #31
 800c082:	d404      	bmi.n	800c08e <_fflush_r+0x32>
 800c084:	0599      	lsls	r1, r3, #22
 800c086:	d402      	bmi.n	800c08e <_fflush_r+0x32>
 800c088:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c08a:	f7ff fb64 	bl	800b756 <__retarget_lock_acquire_recursive>
 800c08e:	4628      	mov	r0, r5
 800c090:	4621      	mov	r1, r4
 800c092:	f7ff ff5f 	bl	800bf54 <__sflush_r>
 800c096:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c098:	07da      	lsls	r2, r3, #31
 800c09a:	4605      	mov	r5, r0
 800c09c:	d4e4      	bmi.n	800c068 <_fflush_r+0xc>
 800c09e:	89a3      	ldrh	r3, [r4, #12]
 800c0a0:	059b      	lsls	r3, r3, #22
 800c0a2:	d4e1      	bmi.n	800c068 <_fflush_r+0xc>
 800c0a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c0a6:	f7ff fb57 	bl	800b758 <__retarget_lock_release_recursive>
 800c0aa:	e7dd      	b.n	800c068 <_fflush_r+0xc>

0800c0ac <fiprintf>:
 800c0ac:	b40e      	push	{r1, r2, r3}
 800c0ae:	b503      	push	{r0, r1, lr}
 800c0b0:	4601      	mov	r1, r0
 800c0b2:	ab03      	add	r3, sp, #12
 800c0b4:	4805      	ldr	r0, [pc, #20]	@ (800c0cc <fiprintf+0x20>)
 800c0b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0ba:	6800      	ldr	r0, [r0, #0]
 800c0bc:	9301      	str	r3, [sp, #4]
 800c0be:	f7ff fca3 	bl	800ba08 <_vfiprintf_r>
 800c0c2:	b002      	add	sp, #8
 800c0c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0c8:	b003      	add	sp, #12
 800c0ca:	4770      	bx	lr
 800c0cc:	20000030 	.word	0x20000030

0800c0d0 <__swbuf_r>:
 800c0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0d2:	460e      	mov	r6, r1
 800c0d4:	4614      	mov	r4, r2
 800c0d6:	4605      	mov	r5, r0
 800c0d8:	b118      	cbz	r0, 800c0e2 <__swbuf_r+0x12>
 800c0da:	6a03      	ldr	r3, [r0, #32]
 800c0dc:	b90b      	cbnz	r3, 800c0e2 <__swbuf_r+0x12>
 800c0de:	f7ff fa19 	bl	800b514 <__sinit>
 800c0e2:	69a3      	ldr	r3, [r4, #24]
 800c0e4:	60a3      	str	r3, [r4, #8]
 800c0e6:	89a3      	ldrh	r3, [r4, #12]
 800c0e8:	071a      	lsls	r2, r3, #28
 800c0ea:	d501      	bpl.n	800c0f0 <__swbuf_r+0x20>
 800c0ec:	6923      	ldr	r3, [r4, #16]
 800c0ee:	b943      	cbnz	r3, 800c102 <__swbuf_r+0x32>
 800c0f0:	4621      	mov	r1, r4
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	f000 f82a 	bl	800c14c <__swsetup_r>
 800c0f8:	b118      	cbz	r0, 800c102 <__swbuf_r+0x32>
 800c0fa:	f04f 37ff 	mov.w	r7, #4294967295
 800c0fe:	4638      	mov	r0, r7
 800c100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c102:	6823      	ldr	r3, [r4, #0]
 800c104:	6922      	ldr	r2, [r4, #16]
 800c106:	1a98      	subs	r0, r3, r2
 800c108:	6963      	ldr	r3, [r4, #20]
 800c10a:	b2f6      	uxtb	r6, r6
 800c10c:	4283      	cmp	r3, r0
 800c10e:	4637      	mov	r7, r6
 800c110:	dc05      	bgt.n	800c11e <__swbuf_r+0x4e>
 800c112:	4621      	mov	r1, r4
 800c114:	4628      	mov	r0, r5
 800c116:	f7ff ffa1 	bl	800c05c <_fflush_r>
 800c11a:	2800      	cmp	r0, #0
 800c11c:	d1ed      	bne.n	800c0fa <__swbuf_r+0x2a>
 800c11e:	68a3      	ldr	r3, [r4, #8]
 800c120:	3b01      	subs	r3, #1
 800c122:	60a3      	str	r3, [r4, #8]
 800c124:	6823      	ldr	r3, [r4, #0]
 800c126:	1c5a      	adds	r2, r3, #1
 800c128:	6022      	str	r2, [r4, #0]
 800c12a:	701e      	strb	r6, [r3, #0]
 800c12c:	6962      	ldr	r2, [r4, #20]
 800c12e:	1c43      	adds	r3, r0, #1
 800c130:	429a      	cmp	r2, r3
 800c132:	d004      	beq.n	800c13e <__swbuf_r+0x6e>
 800c134:	89a3      	ldrh	r3, [r4, #12]
 800c136:	07db      	lsls	r3, r3, #31
 800c138:	d5e1      	bpl.n	800c0fe <__swbuf_r+0x2e>
 800c13a:	2e0a      	cmp	r6, #10
 800c13c:	d1df      	bne.n	800c0fe <__swbuf_r+0x2e>
 800c13e:	4621      	mov	r1, r4
 800c140:	4628      	mov	r0, r5
 800c142:	f7ff ff8b 	bl	800c05c <_fflush_r>
 800c146:	2800      	cmp	r0, #0
 800c148:	d0d9      	beq.n	800c0fe <__swbuf_r+0x2e>
 800c14a:	e7d6      	b.n	800c0fa <__swbuf_r+0x2a>

0800c14c <__swsetup_r>:
 800c14c:	b538      	push	{r3, r4, r5, lr}
 800c14e:	4b29      	ldr	r3, [pc, #164]	@ (800c1f4 <__swsetup_r+0xa8>)
 800c150:	4605      	mov	r5, r0
 800c152:	6818      	ldr	r0, [r3, #0]
 800c154:	460c      	mov	r4, r1
 800c156:	b118      	cbz	r0, 800c160 <__swsetup_r+0x14>
 800c158:	6a03      	ldr	r3, [r0, #32]
 800c15a:	b90b      	cbnz	r3, 800c160 <__swsetup_r+0x14>
 800c15c:	f7ff f9da 	bl	800b514 <__sinit>
 800c160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c164:	0719      	lsls	r1, r3, #28
 800c166:	d422      	bmi.n	800c1ae <__swsetup_r+0x62>
 800c168:	06da      	lsls	r2, r3, #27
 800c16a:	d407      	bmi.n	800c17c <__swsetup_r+0x30>
 800c16c:	2209      	movs	r2, #9
 800c16e:	602a      	str	r2, [r5, #0]
 800c170:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c174:	81a3      	strh	r3, [r4, #12]
 800c176:	f04f 30ff 	mov.w	r0, #4294967295
 800c17a:	e033      	b.n	800c1e4 <__swsetup_r+0x98>
 800c17c:	0758      	lsls	r0, r3, #29
 800c17e:	d512      	bpl.n	800c1a6 <__swsetup_r+0x5a>
 800c180:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c182:	b141      	cbz	r1, 800c196 <__swsetup_r+0x4a>
 800c184:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c188:	4299      	cmp	r1, r3
 800c18a:	d002      	beq.n	800c192 <__swsetup_r+0x46>
 800c18c:	4628      	mov	r0, r5
 800c18e:	f7ff fb11 	bl	800b7b4 <_free_r>
 800c192:	2300      	movs	r3, #0
 800c194:	6363      	str	r3, [r4, #52]	@ 0x34
 800c196:	89a3      	ldrh	r3, [r4, #12]
 800c198:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c19c:	81a3      	strh	r3, [r4, #12]
 800c19e:	2300      	movs	r3, #0
 800c1a0:	6063      	str	r3, [r4, #4]
 800c1a2:	6923      	ldr	r3, [r4, #16]
 800c1a4:	6023      	str	r3, [r4, #0]
 800c1a6:	89a3      	ldrh	r3, [r4, #12]
 800c1a8:	f043 0308 	orr.w	r3, r3, #8
 800c1ac:	81a3      	strh	r3, [r4, #12]
 800c1ae:	6923      	ldr	r3, [r4, #16]
 800c1b0:	b94b      	cbnz	r3, 800c1c6 <__swsetup_r+0x7a>
 800c1b2:	89a3      	ldrh	r3, [r4, #12]
 800c1b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c1b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1bc:	d003      	beq.n	800c1c6 <__swsetup_r+0x7a>
 800c1be:	4621      	mov	r1, r4
 800c1c0:	4628      	mov	r0, r5
 800c1c2:	f000 f856 	bl	800c272 <__smakebuf_r>
 800c1c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ca:	f013 0201 	ands.w	r2, r3, #1
 800c1ce:	d00a      	beq.n	800c1e6 <__swsetup_r+0x9a>
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	60a2      	str	r2, [r4, #8]
 800c1d4:	6962      	ldr	r2, [r4, #20]
 800c1d6:	4252      	negs	r2, r2
 800c1d8:	61a2      	str	r2, [r4, #24]
 800c1da:	6922      	ldr	r2, [r4, #16]
 800c1dc:	b942      	cbnz	r2, 800c1f0 <__swsetup_r+0xa4>
 800c1de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c1e2:	d1c5      	bne.n	800c170 <__swsetup_r+0x24>
 800c1e4:	bd38      	pop	{r3, r4, r5, pc}
 800c1e6:	0799      	lsls	r1, r3, #30
 800c1e8:	bf58      	it	pl
 800c1ea:	6962      	ldrpl	r2, [r4, #20]
 800c1ec:	60a2      	str	r2, [r4, #8]
 800c1ee:	e7f4      	b.n	800c1da <__swsetup_r+0x8e>
 800c1f0:	2000      	movs	r0, #0
 800c1f2:	e7f7      	b.n	800c1e4 <__swsetup_r+0x98>
 800c1f4:	20000030 	.word	0x20000030

0800c1f8 <_sbrk_r>:
 800c1f8:	b538      	push	{r3, r4, r5, lr}
 800c1fa:	4d06      	ldr	r5, [pc, #24]	@ (800c214 <_sbrk_r+0x1c>)
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	4604      	mov	r4, r0
 800c200:	4608      	mov	r0, r1
 800c202:	602b      	str	r3, [r5, #0]
 800c204:	f7f4 fdf6 	bl	8000df4 <_sbrk>
 800c208:	1c43      	adds	r3, r0, #1
 800c20a:	d102      	bne.n	800c212 <_sbrk_r+0x1a>
 800c20c:	682b      	ldr	r3, [r5, #0]
 800c20e:	b103      	cbz	r3, 800c212 <_sbrk_r+0x1a>
 800c210:	6023      	str	r3, [r4, #0]
 800c212:	bd38      	pop	{r3, r4, r5, pc}
 800c214:	200085cc 	.word	0x200085cc

0800c218 <abort>:
 800c218:	b508      	push	{r3, lr}
 800c21a:	2006      	movs	r0, #6
 800c21c:	f000 f88e 	bl	800c33c <raise>
 800c220:	2001      	movs	r0, #1
 800c222:	f7f4 fd6f 	bl	8000d04 <_exit>

0800c226 <__swhatbuf_r>:
 800c226:	b570      	push	{r4, r5, r6, lr}
 800c228:	460c      	mov	r4, r1
 800c22a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c22e:	2900      	cmp	r1, #0
 800c230:	b096      	sub	sp, #88	@ 0x58
 800c232:	4615      	mov	r5, r2
 800c234:	461e      	mov	r6, r3
 800c236:	da0d      	bge.n	800c254 <__swhatbuf_r+0x2e>
 800c238:	89a3      	ldrh	r3, [r4, #12]
 800c23a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c23e:	f04f 0100 	mov.w	r1, #0
 800c242:	bf14      	ite	ne
 800c244:	2340      	movne	r3, #64	@ 0x40
 800c246:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c24a:	2000      	movs	r0, #0
 800c24c:	6031      	str	r1, [r6, #0]
 800c24e:	602b      	str	r3, [r5, #0]
 800c250:	b016      	add	sp, #88	@ 0x58
 800c252:	bd70      	pop	{r4, r5, r6, pc}
 800c254:	466a      	mov	r2, sp
 800c256:	f000 f879 	bl	800c34c <_fstat_r>
 800c25a:	2800      	cmp	r0, #0
 800c25c:	dbec      	blt.n	800c238 <__swhatbuf_r+0x12>
 800c25e:	9901      	ldr	r1, [sp, #4]
 800c260:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c264:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c268:	4259      	negs	r1, r3
 800c26a:	4159      	adcs	r1, r3
 800c26c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c270:	e7eb      	b.n	800c24a <__swhatbuf_r+0x24>

0800c272 <__smakebuf_r>:
 800c272:	898b      	ldrh	r3, [r1, #12]
 800c274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c276:	079d      	lsls	r5, r3, #30
 800c278:	4606      	mov	r6, r0
 800c27a:	460c      	mov	r4, r1
 800c27c:	d507      	bpl.n	800c28e <__smakebuf_r+0x1c>
 800c27e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c282:	6023      	str	r3, [r4, #0]
 800c284:	6123      	str	r3, [r4, #16]
 800c286:	2301      	movs	r3, #1
 800c288:	6163      	str	r3, [r4, #20]
 800c28a:	b003      	add	sp, #12
 800c28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c28e:	ab01      	add	r3, sp, #4
 800c290:	466a      	mov	r2, sp
 800c292:	f7ff ffc8 	bl	800c226 <__swhatbuf_r>
 800c296:	9f00      	ldr	r7, [sp, #0]
 800c298:	4605      	mov	r5, r0
 800c29a:	4639      	mov	r1, r7
 800c29c:	4630      	mov	r0, r6
 800c29e:	f7ff fafd 	bl	800b89c <_malloc_r>
 800c2a2:	b948      	cbnz	r0, 800c2b8 <__smakebuf_r+0x46>
 800c2a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2a8:	059a      	lsls	r2, r3, #22
 800c2aa:	d4ee      	bmi.n	800c28a <__smakebuf_r+0x18>
 800c2ac:	f023 0303 	bic.w	r3, r3, #3
 800c2b0:	f043 0302 	orr.w	r3, r3, #2
 800c2b4:	81a3      	strh	r3, [r4, #12]
 800c2b6:	e7e2      	b.n	800c27e <__smakebuf_r+0xc>
 800c2b8:	89a3      	ldrh	r3, [r4, #12]
 800c2ba:	6020      	str	r0, [r4, #0]
 800c2bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2c0:	81a3      	strh	r3, [r4, #12]
 800c2c2:	9b01      	ldr	r3, [sp, #4]
 800c2c4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c2c8:	b15b      	cbz	r3, 800c2e2 <__smakebuf_r+0x70>
 800c2ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2ce:	4630      	mov	r0, r6
 800c2d0:	f000 f84e 	bl	800c370 <_isatty_r>
 800c2d4:	b128      	cbz	r0, 800c2e2 <__smakebuf_r+0x70>
 800c2d6:	89a3      	ldrh	r3, [r4, #12]
 800c2d8:	f023 0303 	bic.w	r3, r3, #3
 800c2dc:	f043 0301 	orr.w	r3, r3, #1
 800c2e0:	81a3      	strh	r3, [r4, #12]
 800c2e2:	89a3      	ldrh	r3, [r4, #12]
 800c2e4:	431d      	orrs	r5, r3
 800c2e6:	81a5      	strh	r5, [r4, #12]
 800c2e8:	e7cf      	b.n	800c28a <__smakebuf_r+0x18>

0800c2ea <_raise_r>:
 800c2ea:	291f      	cmp	r1, #31
 800c2ec:	b538      	push	{r3, r4, r5, lr}
 800c2ee:	4605      	mov	r5, r0
 800c2f0:	460c      	mov	r4, r1
 800c2f2:	d904      	bls.n	800c2fe <_raise_r+0x14>
 800c2f4:	2316      	movs	r3, #22
 800c2f6:	6003      	str	r3, [r0, #0]
 800c2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2fc:	bd38      	pop	{r3, r4, r5, pc}
 800c2fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c300:	b112      	cbz	r2, 800c308 <_raise_r+0x1e>
 800c302:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c306:	b94b      	cbnz	r3, 800c31c <_raise_r+0x32>
 800c308:	4628      	mov	r0, r5
 800c30a:	f000 f853 	bl	800c3b4 <_getpid_r>
 800c30e:	4622      	mov	r2, r4
 800c310:	4601      	mov	r1, r0
 800c312:	4628      	mov	r0, r5
 800c314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c318:	f000 b83a 	b.w	800c390 <_kill_r>
 800c31c:	2b01      	cmp	r3, #1
 800c31e:	d00a      	beq.n	800c336 <_raise_r+0x4c>
 800c320:	1c59      	adds	r1, r3, #1
 800c322:	d103      	bne.n	800c32c <_raise_r+0x42>
 800c324:	2316      	movs	r3, #22
 800c326:	6003      	str	r3, [r0, #0]
 800c328:	2001      	movs	r0, #1
 800c32a:	e7e7      	b.n	800c2fc <_raise_r+0x12>
 800c32c:	2100      	movs	r1, #0
 800c32e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c332:	4620      	mov	r0, r4
 800c334:	4798      	blx	r3
 800c336:	2000      	movs	r0, #0
 800c338:	e7e0      	b.n	800c2fc <_raise_r+0x12>
	...

0800c33c <raise>:
 800c33c:	4b02      	ldr	r3, [pc, #8]	@ (800c348 <raise+0xc>)
 800c33e:	4601      	mov	r1, r0
 800c340:	6818      	ldr	r0, [r3, #0]
 800c342:	f7ff bfd2 	b.w	800c2ea <_raise_r>
 800c346:	bf00      	nop
 800c348:	20000030 	.word	0x20000030

0800c34c <_fstat_r>:
 800c34c:	b538      	push	{r3, r4, r5, lr}
 800c34e:	4d07      	ldr	r5, [pc, #28]	@ (800c36c <_fstat_r+0x20>)
 800c350:	2300      	movs	r3, #0
 800c352:	4604      	mov	r4, r0
 800c354:	4608      	mov	r0, r1
 800c356:	4611      	mov	r1, r2
 800c358:	602b      	str	r3, [r5, #0]
 800c35a:	f7f4 fd23 	bl	8000da4 <_fstat>
 800c35e:	1c43      	adds	r3, r0, #1
 800c360:	d102      	bne.n	800c368 <_fstat_r+0x1c>
 800c362:	682b      	ldr	r3, [r5, #0]
 800c364:	b103      	cbz	r3, 800c368 <_fstat_r+0x1c>
 800c366:	6023      	str	r3, [r4, #0]
 800c368:	bd38      	pop	{r3, r4, r5, pc}
 800c36a:	bf00      	nop
 800c36c:	200085cc 	.word	0x200085cc

0800c370 <_isatty_r>:
 800c370:	b538      	push	{r3, r4, r5, lr}
 800c372:	4d06      	ldr	r5, [pc, #24]	@ (800c38c <_isatty_r+0x1c>)
 800c374:	2300      	movs	r3, #0
 800c376:	4604      	mov	r4, r0
 800c378:	4608      	mov	r0, r1
 800c37a:	602b      	str	r3, [r5, #0]
 800c37c:	f7f4 fd22 	bl	8000dc4 <_isatty>
 800c380:	1c43      	adds	r3, r0, #1
 800c382:	d102      	bne.n	800c38a <_isatty_r+0x1a>
 800c384:	682b      	ldr	r3, [r5, #0]
 800c386:	b103      	cbz	r3, 800c38a <_isatty_r+0x1a>
 800c388:	6023      	str	r3, [r4, #0]
 800c38a:	bd38      	pop	{r3, r4, r5, pc}
 800c38c:	200085cc 	.word	0x200085cc

0800c390 <_kill_r>:
 800c390:	b538      	push	{r3, r4, r5, lr}
 800c392:	4d07      	ldr	r5, [pc, #28]	@ (800c3b0 <_kill_r+0x20>)
 800c394:	2300      	movs	r3, #0
 800c396:	4604      	mov	r4, r0
 800c398:	4608      	mov	r0, r1
 800c39a:	4611      	mov	r1, r2
 800c39c:	602b      	str	r3, [r5, #0]
 800c39e:	f7f4 fc9f 	bl	8000ce0 <_kill>
 800c3a2:	1c43      	adds	r3, r0, #1
 800c3a4:	d102      	bne.n	800c3ac <_kill_r+0x1c>
 800c3a6:	682b      	ldr	r3, [r5, #0]
 800c3a8:	b103      	cbz	r3, 800c3ac <_kill_r+0x1c>
 800c3aa:	6023      	str	r3, [r4, #0]
 800c3ac:	bd38      	pop	{r3, r4, r5, pc}
 800c3ae:	bf00      	nop
 800c3b0:	200085cc 	.word	0x200085cc

0800c3b4 <_getpid_r>:
 800c3b4:	f7f4 bc8c 	b.w	8000cd0 <_getpid>

0800c3b8 <_init>:
 800c3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ba:	bf00      	nop
 800c3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3be:	bc08      	pop	{r3}
 800c3c0:	469e      	mov	lr, r3
 800c3c2:	4770      	bx	lr

0800c3c4 <_fini>:
 800c3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3c6:	bf00      	nop
 800c3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ca:	bc08      	pop	{r3}
 800c3cc:	469e      	mov	lr, r3
 800c3ce:	4770      	bx	lr
