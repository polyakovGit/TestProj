
TestProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011808  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c7c  08011a08  08011a08  00012a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014684  08014684  000161c8  2**0
                  CONTENTS
  4 .ARM          00000008  08014684  08014684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801468c  0801468c  000161c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801468c  0801468c  0001568c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014690  08014690  00015690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08014694  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  0801471c  00016088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  080147bc  00016128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000088fc  200001c8  0801485c  000161c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20008ac4  0801485c  00016ac4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000161c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000275b5  00000000  00000000  000161f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000062de  00000000  00000000  0003d7ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e30  00000000  00000000  00043a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001812  00000000  00000000  000458c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00036190  00000000  00000000  000470d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00031680  00000000  00000000  0007d262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00117521  00000000  00000000  000ae8e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001c5e03  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000088bc  00000000  00000000  001c5e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005a  00000000  00000000  001ce704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001c8 	.word	0x200001c8
 800021c:	00000000 	.word	0x00000000
 8000220:	080119f0 	.word	0x080119f0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001cc 	.word	0x200001cc
 800023c:	080119f0 	.word	0x080119f0

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 ff86 	bl	8001514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f810 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f92a 	bl	8000864 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000610:	f000 f8ca 	bl	80007a8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000614:	f000 f8f8 	bl	8000808 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000618:	f000 f878 	bl	800070c <MX_TIM2_Init>
  MX_LWIP_Init();
 800061c:	f005 f9bc 	bl	8005998 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
	udp_create_socket();
 8000620:	f000 fdcc 	bl	80011bc <udp_create_socket>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		MX_LWIP_Process();
 8000624:	f005 fb04 	bl	8005c30 <MX_LWIP_Process>
 8000628:	e7fc      	b.n	8000624 <main+0x24>
	...

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	@ 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	2234      	movs	r2, #52	@ 0x34
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f010 f969 	bl	8010912 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000650:	f002 fe00 	bl	8003254 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	4b2b      	ldr	r3, [pc, #172]	@ (8000704 <SystemClock_Config+0xd8>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	4a2a      	ldr	r2, [pc, #168]	@ (8000704 <SystemClock_Config+0xd8>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000660:	4b28      	ldr	r3, [pc, #160]	@ (8000704 <SystemClock_Config+0xd8>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <SystemClock_Config+0xdc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a25      	ldr	r2, [pc, #148]	@ (8000708 <SystemClock_Config+0xdc>)
 8000672:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b23      	ldr	r3, [pc, #140]	@ (8000708 <SystemClock_Config+0xdc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000684:	2301      	movs	r3, #1
 8000686:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000688:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800068c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000696:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800069c:	23d8      	movs	r3, #216	@ 0xd8
 800069e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006a4:	2308      	movs	r3, #8
 80006a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 fe2f 	bl	8003314 <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006bc:	f000 f974 	bl	80009a8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006c0:	f002 fdd8 	bl	8003274 <HAL_PWREx_EnableOverDrive>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006ca:	f000 f96d 	bl	80009a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	230f      	movs	r3, #15
 80006d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2302      	movs	r3, #2
 80006d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006da:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80006e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006e4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	2107      	movs	r1, #7
 80006ec:	4618      	mov	r0, r3
 80006ee:	f003 f8bf 	bl	8003870 <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006f8:	f000 f956 	bl	80009a8 <Error_Handler>
  }
}
 80006fc:	bf00      	nop
 80006fe:	3750      	adds	r7, #80	@ 0x50
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000712:	f107 0310 	add.w	r3, r7, #16
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800072a:	4b1d      	ldr	r3, [pc, #116]	@ (80007a0 <MX_TIM2_Init+0x94>)
 800072c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000730:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000732:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <MX_TIM2_Init+0x94>)
 8000734:	2200      	movs	r2, #0
 8000736:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000738:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <MX_TIM2_Init+0x94>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 800073e:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <MX_TIM2_Init+0x94>)
 8000740:	4a18      	ldr	r2, [pc, #96]	@ (80007a4 <MX_TIM2_Init+0x98>)
 8000742:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000744:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <MX_TIM2_Init+0x94>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074a:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <MX_TIM2_Init+0x94>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000750:	4813      	ldr	r0, [pc, #76]	@ (80007a0 <MX_TIM2_Init+0x94>)
 8000752:	f003 fedb 	bl	800450c <HAL_TIM_Base_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800075c:	f000 f924 	bl	80009a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000760:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000764:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000766:	f107 0310 	add.w	r3, r7, #16
 800076a:	4619      	mov	r1, r3
 800076c:	480c      	ldr	r0, [pc, #48]	@ (80007a0 <MX_TIM2_Init+0x94>)
 800076e:	f003 ff25 	bl	80045bc <HAL_TIM_ConfigClockSource>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000778:	f000 f916 	bl	80009a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_TIM2_Init+0x94>)
 800078a:	f004 f91b 	bl	80049c4 <HAL_TIMEx_MasterConfigSynchronization>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000794:	f000 f908 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	3720      	adds	r7, #32
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200001e4 	.word	0x200001e4
 80007a4:	000f423f 	.word	0x000f423f

080007a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007ac:	4b14      	ldr	r3, [pc, #80]	@ (8000800 <MX_USART3_UART_Init+0x58>)
 80007ae:	4a15      	ldr	r2, [pc, #84]	@ (8000804 <MX_USART3_UART_Init+0x5c>)
 80007b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007b2:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <MX_USART3_UART_Init+0x58>)
 80007b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ba:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <MX_USART3_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <MX_USART3_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <MX_USART3_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <MX_USART3_UART_Init+0x58>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <MX_USART3_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d8:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <MX_USART3_UART_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007de:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <MX_USART3_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <MX_USART3_UART_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	@ (8000800 <MX_USART3_UART_Init+0x58>)
 80007ec:	f004 f978 	bl	8004ae0 <HAL_UART_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007f6:	f000 f8d7 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000230 	.word	0x20000230
 8000804:	40004800 	.word	0x40004800

08000808 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800080c:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000812:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000814:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000816:	2206      	movs	r2, #6
 8000818:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800081a:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081c:	2202      	movs	r2, #2
 800081e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000820:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000828:	2202      	movs	r2, #2
 800082a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800082c:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082e:	2201      	movs	r2, #1
 8000830:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000838:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800083e:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000840:	2201      	movs	r2, #1
 8000842:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084c:	f002 fbb9 	bl	8002fc2 <HAL_PCD_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000856:	f000 f8a7 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200002b8 	.word	0x200002b8

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08c      	sub	sp, #48	@ 0x30
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	4b47      	ldr	r3, [pc, #284]	@ (8000998 <MX_GPIO_Init+0x134>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a46      	ldr	r2, [pc, #280]	@ (8000998 <MX_GPIO_Init+0x134>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b44      	ldr	r3, [pc, #272]	@ (8000998 <MX_GPIO_Init+0x134>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	61bb      	str	r3, [r7, #24]
 8000890:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000892:	4b41      	ldr	r3, [pc, #260]	@ (8000998 <MX_GPIO_Init+0x134>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a40      	ldr	r2, [pc, #256]	@ (8000998 <MX_GPIO_Init+0x134>)
 8000898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b3e      	ldr	r3, [pc, #248]	@ (8000998 <MX_GPIO_Init+0x134>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b3b      	ldr	r3, [pc, #236]	@ (8000998 <MX_GPIO_Init+0x134>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a3a      	ldr	r2, [pc, #232]	@ (8000998 <MX_GPIO_Init+0x134>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b38      	ldr	r3, [pc, #224]	@ (8000998 <MX_GPIO_Init+0x134>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	4b35      	ldr	r3, [pc, #212]	@ (8000998 <MX_GPIO_Init+0x134>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a34      	ldr	r2, [pc, #208]	@ (8000998 <MX_GPIO_Init+0x134>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b32      	ldr	r3, [pc, #200]	@ (8000998 <MX_GPIO_Init+0x134>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008da:	4b2f      	ldr	r3, [pc, #188]	@ (8000998 <MX_GPIO_Init+0x134>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a2e      	ldr	r2, [pc, #184]	@ (8000998 <MX_GPIO_Init+0x134>)
 80008e0:	f043 0308 	orr.w	r3, r3, #8
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000998 <MX_GPIO_Init+0x134>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0308 	and.w	r3, r3, #8
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008f2:	4b29      	ldr	r3, [pc, #164]	@ (8000998 <MX_GPIO_Init+0x134>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a28      	ldr	r2, [pc, #160]	@ (8000998 <MX_GPIO_Init+0x134>)
 80008f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <MX_GPIO_Init+0x134>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000910:	4822      	ldr	r0, [pc, #136]	@ (800099c <MX_GPIO_Init+0x138>)
 8000912:	f002 fb3d 	bl	8002f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2140      	movs	r1, #64	@ 0x40
 800091a:	4821      	ldr	r0, [pc, #132]	@ (80009a0 <MX_GPIO_Init+0x13c>)
 800091c:	f002 fb38 	bl	8002f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000920:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000926:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	481b      	ldr	r0, [pc, #108]	@ (80009a4 <MX_GPIO_Init+0x140>)
 8000938:	f002 f966 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800093c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4811      	ldr	r0, [pc, #68]	@ (800099c <MX_GPIO_Init+0x138>)
 8000956:	f002 f957 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800095a:	2340      	movs	r3, #64	@ 0x40
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <MX_GPIO_Init+0x13c>)
 8000972:	f002 f949 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000976:	2380      	movs	r3, #128	@ 0x80
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <MX_GPIO_Init+0x13c>)
 800098a:	f002 f93d 	bl	8002c08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098e:	bf00      	nop
 8000990:	3730      	adds	r7, #48	@ 0x30
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	40020400 	.word	0x40020400
 80009a0:	40021800 	.word	0x40021800
 80009a4:	40020800 	.word	0x40020800

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <Error_Handler+0x8>

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <HAL_MspInit+0x44>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009be:	4a0e      	ldr	r2, [pc, #56]	@ (80009f8 <HAL_MspInit+0x44>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c6:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <HAL_MspInit+0x44>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d2:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <HAL_MspInit+0x44>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d6:	4a08      	ldr	r2, [pc, #32]	@ (80009f8 <HAL_MspInit+0x44>)
 80009d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009de:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <HAL_MspInit+0x44>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800

080009fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a0c:	d10b      	bne.n	8000a26 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <HAL_TIM_Base_MspInit+0x38>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	4a08      	ldr	r2, [pc, #32]	@ (8000a34 <HAL_TIM_Base_MspInit+0x38>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_TIM_Base_MspInit+0x38>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a26:	bf00      	nop
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b0ae      	sub	sp, #184	@ 0xb8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2290      	movs	r2, #144	@ 0x90
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f00f ff5a 	bl	8010912 <memset>
  if(huart->Instance==USART3)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a22      	ldr	r2, [pc, #136]	@ (8000aec <HAL_UART_MspInit+0xb4>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d13c      	bne.n	8000ae2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a6c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4618      	mov	r0, r3
 8000a78:	f003 f920 	bl	8003cbc <HAL_RCCEx_PeriphCLKConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a82:	f7ff ff91 	bl	80009a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a86:	4b1a      	ldr	r3, [pc, #104]	@ (8000af0 <HAL_UART_MspInit+0xb8>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8a:	4a19      	ldr	r2, [pc, #100]	@ (8000af0 <HAL_UART_MspInit+0xb8>)
 8000a8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a92:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <HAL_UART_MspInit+0xb8>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9e:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <HAL_UART_MspInit+0xb8>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a13      	ldr	r2, [pc, #76]	@ (8000af0 <HAL_UART_MspInit+0xb8>)
 8000aa4:	f043 0308 	orr.w	r3, r3, #8
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <HAL_UART_MspInit+0xb8>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0308 	and.w	r3, r3, #8
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ab6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000aba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aca:	2303      	movs	r3, #3
 8000acc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ad0:	2307      	movs	r3, #7
 8000ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <HAL_UART_MspInit+0xbc>)
 8000ade:	f002 f893 	bl	8002c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ae2:	bf00      	nop
 8000ae4:	37b8      	adds	r7, #184	@ 0xb8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40004800 	.word	0x40004800
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020c00 	.word	0x40020c00

08000af8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b0ae      	sub	sp, #184	@ 0xb8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2290      	movs	r2, #144	@ 0x90
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f00f fefa 	bl	8010912 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b26:	d166      	bne.n	8000bf6 <HAL_PCD_MspInit+0xfe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000b28:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000b2c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000b2e:	23c0      	movs	r3, #192	@ 0xc0
 8000b30:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000b32:	2302      	movs	r3, #2
 8000b34:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000b36:	2302      	movs	r3, #2
 8000b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000b42:	2300      	movs	r3, #0
 8000b44:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000b46:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4618      	mov	r0, r3
 8000b54:	f003 f8b2 	bl	8003cbc <HAL_RCCEx_PeriphCLKConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 8000b5e:	f7ff ff23 	bl	80009a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	4b27      	ldr	r3, [pc, #156]	@ (8000c00 <HAL_PCD_MspInit+0x108>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a26      	ldr	r2, [pc, #152]	@ (8000c00 <HAL_PCD_MspInit+0x108>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b24      	ldr	r3, [pc, #144]	@ (8000c00 <HAL_PCD_MspInit+0x108>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b7a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b94:	230a      	movs	r3, #10
 8000b96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4818      	ldr	r0, [pc, #96]	@ (8000c04 <HAL_PCD_MspInit+0x10c>)
 8000ba2:	f002 f831 	bl	8002c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ba6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000baa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4810      	ldr	r0, [pc, #64]	@ (8000c04 <HAL_PCD_MspInit+0x10c>)
 8000bc2:	f002 f821 	bl	8002c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <HAL_PCD_MspInit+0x108>)
 8000bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bca:	4a0d      	ldr	r2, [pc, #52]	@ (8000c00 <HAL_PCD_MspInit+0x108>)
 8000bcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bd0:	6353      	str	r3, [r2, #52]	@ 0x34
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <HAL_PCD_MspInit+0x108>)
 8000bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <HAL_PCD_MspInit+0x108>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be2:	4a07      	ldr	r2, [pc, #28]	@ (8000c00 <HAL_PCD_MspInit+0x108>)
 8000be4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bea:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <HAL_PCD_MspInit+0x108>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000bf6:	bf00      	nop
 8000bf8:	37b8      	adds	r7, #184	@ 0xb8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40020000 	.word	0x40020000

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <NMI_Handler+0x4>

08000c10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <HardFault_Handler+0x4>

08000c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <MemManage_Handler+0x4>

08000c20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <BusFault_Handler+0x4>

08000c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <UsageFault_Handler+0x4>

08000c30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5e:	f000 fc97 	bl	8001590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c6c:	4802      	ldr	r0, [pc, #8]	@ (8000c78 <ETH_IRQHandler+0x10>)
 8000c6e:	f001 f8e5 	bl	8001e3c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200051a4 	.word	0x200051a4

08000c7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return 1;
 8000c80:	2301      	movs	r3, #1
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <_kill>:

int _kill(int pid, int sig)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c96:	4b05      	ldr	r3, [pc, #20]	@ (8000cac <_kill+0x20>)
 8000c98:	2216      	movs	r2, #22
 8000c9a:	601a      	str	r2, [r3, #0]
  return -1;
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	20008ab4 	.word	0x20008ab4

08000cb0 <_exit>:

void _exit (int status)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff ffe5 	bl	8000c8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000cc2:	bf00      	nop
 8000cc4:	e7fd      	b.n	8000cc2 <_exit+0x12>

08000cc6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	60f8      	str	r0, [r7, #12]
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	e00a      	b.n	8000cee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cd8:	f3af 8000 	nop.w
 8000cdc:	4601      	mov	r1, r0
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	1c5a      	adds	r2, r3, #1
 8000ce2:	60ba      	str	r2, [r7, #8]
 8000ce4:	b2ca      	uxtb	r2, r1
 8000ce6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	3301      	adds	r3, #1
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	697a      	ldr	r2, [r7, #20]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	dbf0      	blt.n	8000cd8 <_read+0x12>
  }

  return len;
 8000cf6:	687b      	ldr	r3, [r7, #4]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	e009      	b.n	8000d26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	1c5a      	adds	r2, r3, #1
 8000d16:	60ba      	str	r2, [r7, #8]
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	3301      	adds	r3, #1
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	dbf1      	blt.n	8000d12 <_write+0x12>
  }
  return len;
 8000d2e:	687b      	ldr	r3, [r7, #4]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <_close>:

int _close(int file)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d60:	605a      	str	r2, [r3, #4]
  return 0;
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <_isatty>:

int _isatty(int file)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d78:	2301      	movs	r3, #1
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b085      	sub	sp, #20
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	60f8      	str	r0, [r7, #12]
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d92:	2300      	movs	r3, #0
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b087      	sub	sp, #28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da8:	4a14      	ldr	r2, [pc, #80]	@ (8000dfc <_sbrk+0x5c>)
 8000daa:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <_sbrk+0x60>)
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db4:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d102      	bne.n	8000dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <_sbrk+0x64>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	@ (8000e08 <_sbrk+0x68>)
 8000dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc2:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d205      	bcs.n	8000ddc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <_sbrk+0x6c>)
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	e009      	b.n	8000df0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de2:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	4a06      	ldr	r2, [pc, #24]	@ (8000e04 <_sbrk+0x64>)
 8000dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	371c      	adds	r7, #28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	20080000 	.word	0x20080000
 8000e00:	00000400 	.word	0x00000400
 8000e04:	200007c0 	.word	0x200007c0
 8000e08:	20008ac8 	.word	0x20008ac8
 8000e0c:	20008ab4 	.word	0x20008ab4

08000e10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <SystemInit+0x20>)
 8000e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e1a:	4a05      	ldr	r2, [pc, #20]	@ (8000e30 <SystemInit+0x20>)
 8000e1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <udp_send_message>:
#include "udp_handler.h"
#include "string.h"

err_t udp_send_message(struct udp_pcb *upcb, const ip_addr_t *addr, u16_t port, const char *dataSource) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	4613      	mov	r3, r2
 8000e42:	80fb      	strh	r3, [r7, #6]
	// если сокет не создался, то на выход с ошибкой
	if (upcb == NULL) {
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d102      	bne.n	8000e50 <udp_send_message+0x1c>
		return ERR_ABRT;
 8000e4a:	f06f 030c 	mvn.w	r3, #12
 8000e4e:	e037      	b.n	8000ec0 <udp_send_message+0x8c>
	}
	u16_t dataLength = strlen(dataSource);
 8000e50:	6838      	ldr	r0, [r7, #0]
 8000e52:	f7ff f9ff 	bl	8000254 <strlen>
 8000e56:	4603      	mov	r3, r0
 8000e58:	83fb      	strh	r3, [r7, #30]
	// аллоцируем память под буфер с данными
	struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, dataLength, PBUF_RAM);
 8000e5a:	8bfb      	ldrh	r3, [r7, #30]
 8000e5c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000e60:	4619      	mov	r1, r3
 8000e62:	2036      	movs	r0, #54	@ 0x36
 8000e64:	f006 fb52 	bl	800750c <pbuf_alloc>
 8000e68:	61b8      	str	r0, [r7, #24]
	if (p != NULL) {
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d026      	beq.n	8000ebe <udp_send_message+0x8a>
		// кладём данные в аллоцированный буфер
		err_t err = pbuf_take(p, dataSource, dataLength);
 8000e70:	8bfb      	ldrh	r3, [r7, #30]
 8000e72:	461a      	mov	r2, r3
 8000e74:	6839      	ldr	r1, [r7, #0]
 8000e76:	69b8      	ldr	r0, [r7, #24]
 8000e78:	f007 f898 	bl	8007fac <pbuf_take>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	75fb      	strb	r3, [r7, #23]
		//очистить память от сообщения
		//free(data);
		if (ERR_OK != err) {
 8000e80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d005      	beq.n	8000e94 <udp_send_message+0x60>
			// обязательно должны очистить аллоцированную память при ошибке
			pbuf_free(p);
 8000e88:	69b8      	ldr	r0, [r7, #24]
 8000e8a:	f006 fe23 	bl	8007ad4 <pbuf_free>
			return err;
 8000e8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e92:	e015      	b.n	8000ec0 <udp_send_message+0x8c>
		}
		// отсылаем пакет
		err = udp_sendto(upcb, p, addr, port);
 8000e94:	88fb      	ldrh	r3, [r7, #6]
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	69b9      	ldr	r1, [r7, #24]
 8000e9a:	68f8      	ldr	r0, [r7, #12]
 8000e9c:	f00c fdae 	bl	800d9fc <udp_sendto>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	75fb      	strb	r3, [r7, #23]
		if (ERR_OK != err) {
 8000ea4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d005      	beq.n	8000eb8 <udp_send_message+0x84>
			// обязательно должны очистить аллоцированную память при ошибке
			pbuf_free(p);
 8000eac:	69b8      	ldr	r0, [r7, #24]
 8000eae:	f006 fe11 	bl	8007ad4 <pbuf_free>
			return err;
 8000eb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000eb6:	e003      	b.n	8000ec0 <udp_send_message+0x8c>
		}
		// очищаем аллоцированную память
		pbuf_free(p);
 8000eb8:	69b8      	ldr	r0, [r7, #24]
 8000eba:	f006 fe0b 	bl	8007ad4 <pbuf_free>
	}
	return ERR_OK;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3720      	adds	r7, #32
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <get_ifconfig>:

void get_ifconfig(char *answer) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b09e      	sub	sp, #120	@ 0x78
 8000ecc:	af04      	add	r7, sp, #16
 8000ece:	6078      	str	r0, [r7, #4]
	char local_ip[BUFFER_ARRAY_SIZE];
	char subnet_mask[BUFFER_ARRAY_SIZE];
	char gateway[BUFFER_ARRAY_SIZE];

	ip4addr_ntoa_r(netif_ip4_addr(&gnetif), local_ip, BUFFER_ARRAY_SIZE);
 8000ed0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ed4:	2220      	movs	r2, #32
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4813      	ldr	r0, [pc, #76]	@ (8000f28 <get_ifconfig+0x60>)
 8000eda:	f00e fbe7 	bl	800f6ac <ip4addr_ntoa_r>
	ip4addr_ntoa_r(netif_ip4_netmask(&gnetif), subnet_mask, BUFFER_ARRAY_SIZE);
 8000ede:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4811      	ldr	r0, [pc, #68]	@ (8000f2c <get_ifconfig+0x64>)
 8000ee8:	f00e fbe0 	bl	800f6ac <ip4addr_ntoa_r>
	ip4addr_ntoa_r(netif_ip4_gw(&gnetif), gateway, BUFFER_ARRAY_SIZE);
 8000eec:	f107 0308 	add.w	r3, r7, #8
 8000ef0:	2220      	movs	r2, #32
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480e      	ldr	r0, [pc, #56]	@ (8000f30 <get_ifconfig+0x68>)
 8000ef6:	f00e fbd9 	bl	800f6ac <ip4addr_ntoa_r>
	sprintf(answer, "\n%s %s\n%s %s\n%s %s", "ip address: ", local_ip, "subnet mask:", subnet_mask, "gateway:    ",
 8000efa:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8000efe:	f107 0308 	add.w	r3, r7, #8
 8000f02:	9303      	str	r3, [sp, #12]
 8000f04:	4b0b      	ldr	r3, [pc, #44]	@ (8000f34 <get_ifconfig+0x6c>)
 8000f06:	9302      	str	r3, [sp, #8]
 8000f08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f0c:	9301      	str	r3, [sp, #4]
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f38 <get_ifconfig+0x70>)
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	4613      	mov	r3, r2
 8000f14:	4a09      	ldr	r2, [pc, #36]	@ (8000f3c <get_ifconfig+0x74>)
 8000f16:	490a      	ldr	r1, [pc, #40]	@ (8000f40 <get_ifconfig+0x78>)
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f00f fc6d 	bl	80107f8 <siprintf>
			gateway);
}
 8000f1e:	bf00      	nop
 8000f20:	3768      	adds	r7, #104	@ 0x68
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200007d0 	.word	0x200007d0
 8000f2c:	200007d4 	.word	0x200007d4
 8000f30:	200007d8 	.word	0x200007d8
 8000f34:	08011a2c 	.word	0x08011a2c
 8000f38:	08011a3c 	.word	0x08011a3c
 8000f3c:	08011a08 	.word	0x08011a08
 8000f40:	08011a18 	.word	0x08011a18

08000f44 <sed_leds>:

void sed_leds(char *answer, char *received_message) {
 8000f44:	b5b0      	push	{r4, r5, r7, lr}
 8000f46:	b092      	sub	sp, #72	@ 0x48
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	char led_answer[BUFFER_ARRAY_SIZE] = "leds { ";
 8000f4e:	4a47      	ldr	r2, [pc, #284]	@ (800106c <sed_leds+0x128>)
 8000f50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f58:	e883 0003 	stmia.w	r3, {r0, r1}
 8000f5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
 8000f6c:	615a      	str	r2, [r3, #20]
	char led[LEDS_COUNT];
	struct GPIO_Attr gpio_outputs[] = { { GPIOB, GPIO_PIN_0 }, { GPIOB,
 8000f6e:	4b40      	ldr	r3, [pc, #256]	@ (8001070 <sed_leds+0x12c>)
 8000f70:	f107 0408 	add.w	r4, r7, #8
 8000f74:	461d      	mov	r5, r3
 8000f76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f7e:	e884 0003 	stmia.w	r4, {r0, r1}
	GPIO_PIN_7 }, { GPIOB, GPIO_PIN_14 } };
	for (uint16_t i = 0; i < sizeof(gpio_outputs) / sizeof(gpio_outputs[0]); i++) {
 8000f82:	2300      	movs	r3, #0
 8000f84:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8000f88:	e04d      	b.n	8001026 <sed_leds+0xe2>
		uint16_t led_command = received_message[i] - '0';
 8000f8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	4413      	add	r3, r2
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	3b30      	subs	r3, #48	@ 0x30
 8000f96:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
		if (led_command != 2 && led_command != HAL_GPIO_ReadPin(gpio_outputs[i].gpio, gpio_outputs[i].pin)) {
 8000f9a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d03c      	beq.n	800101c <sed_leds+0xd8>
 8000fa2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	3348      	adds	r3, #72	@ 0x48
 8000faa:	443b      	add	r3, r7
 8000fac:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8000fb0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	3348      	adds	r3, #72	@ 0x48
 8000fb8:	443b      	add	r3, r7
 8000fba:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	f001 ffcd 	bl	8002f60 <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	461a      	mov	r2, r3
 8000fca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d024      	beq.n	800101c <sed_leds+0xd8>
			HAL_GPIO_WritePin(gpio_outputs[i].gpio, gpio_outputs[i].pin, led_command);
 8000fd2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	3348      	adds	r3, #72	@ 0x48
 8000fda:	443b      	add	r3, r7
 8000fdc:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8000fe0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	3348      	adds	r3, #72	@ 0x48
 8000fe8:	443b      	add	r3, r7
 8000fea:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8000fee:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f001 ffcb 	bl	8002f90 <HAL_GPIO_WritePin>
			sprintf(led, "%d ", i + 1);
 8000ffa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	f107 0320 	add.w	r3, r7, #32
 8001004:	491b      	ldr	r1, [pc, #108]	@ (8001074 <sed_leds+0x130>)
 8001006:	4618      	mov	r0, r3
 8001008:	f00f fbf6 	bl	80107f8 <siprintf>
			strcat(led_answer, led);
 800100c:	f107 0220 	add.w	r2, r7, #32
 8001010:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001014:	4611      	mov	r1, r2
 8001016:	4618      	mov	r0, r3
 8001018:	f00f fc83 	bl	8010922 <strcat>
	for (uint16_t i = 0; i < sizeof(gpio_outputs) / sizeof(gpio_outputs[0]); i++) {
 800101c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001020:	3301      	adds	r3, #1
 8001022:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001026:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800102a:	2b02      	cmp	r3, #2
 800102c:	d9ad      	bls.n	8000f8a <sed_leds+0x46>
		}
	}
	strcat(led_answer, "} switched");
 800102e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff f90e 	bl	8000254 <strlen>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001040:	4413      	add	r3, r2
 8001042:	490d      	ldr	r1, [pc, #52]	@ (8001078 <sed_leds+0x134>)
 8001044:	461a      	mov	r2, r3
 8001046:	460b      	mov	r3, r1
 8001048:	cb03      	ldmia	r3!, {r0, r1}
 800104a:	6010      	str	r0, [r2, #0]
 800104c:	6051      	str	r1, [r2, #4]
 800104e:	8819      	ldrh	r1, [r3, #0]
 8001050:	789b      	ldrb	r3, [r3, #2]
 8001052:	8111      	strh	r1, [r2, #8]
 8001054:	7293      	strb	r3, [r2, #10]
	strcpy(answer, led_answer);
 8001056:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800105a:	4619      	mov	r1, r3
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f00f fd02 	bl	8010a66 <strcpy>
}
 8001062:	bf00      	nop
 8001064:	3748      	adds	r7, #72	@ 0x48
 8001066:	46bd      	mov	sp, r7
 8001068:	bdb0      	pop	{r4, r5, r7, pc}
 800106a:	bf00      	nop
 800106c:	08011a5c 	.word	0x08011a5c
 8001070:	08011a7c 	.word	0x08011a7c
 8001074:	08011a4c 	.word	0x08011a4c
 8001078:	08011a50 	.word	0x08011a50

0800107c <udp_receive_message>:

void udp_receive_message(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port) {
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	f2ad 4d34 	subw	sp, sp, #1076	@ 0x434
 8001082:	af00      	add	r7, sp, #0
 8001084:	f507 6486 	add.w	r4, r7, #1072	@ 0x430
 8001088:	f2a4 4424 	subw	r4, r4, #1060	@ 0x424
 800108c:	6020      	str	r0, [r4, #0]
 800108e:	f507 6086 	add.w	r0, r7, #1072	@ 0x430
 8001092:	f5a0 6085 	sub.w	r0, r0, #1064	@ 0x428
 8001096:	6001      	str	r1, [r0, #0]
 8001098:	f507 6186 	add.w	r1, r7, #1072	@ 0x430
 800109c:	f2a1 412c 	subw	r1, r1, #1068	@ 0x42c
 80010a0:	600a      	str	r2, [r1, #0]
 80010a2:	f507 6286 	add.w	r2, r7, #1072	@ 0x430
 80010a6:	f5a2 6286 	sub.w	r2, r2, #1072	@ 0x430
 80010aa:	6013      	str	r3, [r2, #0]
	if (p != NULL) {
 80010ac:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80010b0:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d072      	beq.n	80011a0 <udp_receive_message+0x124>
		/* send received packet back to sender */
		char received_message[BUFFER_ARRAY_SIZE];
		strncpy(received_message, p->payload, p->len);
 80010ba:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80010be:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6859      	ldr	r1, [r3, #4]
 80010c6:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80010ca:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	895b      	ldrh	r3, [r3, #10]
 80010d2:	461a      	mov	r2, r3
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	4618      	mov	r0, r3
 80010da:	f00f fc43 	bl	8010964 <strncpy>
		received_message[p->len] = '\0';
 80010de:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80010e2:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	895b      	ldrh	r3, [r3, #10]
 80010ea:	461a      	mov	r2, r3
 80010ec:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80010f0:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 80010f4:	2100      	movs	r1, #0
 80010f6:	5499      	strb	r1, [r3, r2]
		pbuf_free(p);
 80010f8:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80010fc:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	f006 fce7 	bl	8007ad4 <pbuf_free>

		char answer[1024];
		if (strcmp(received_message, "echo") == 0) {
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	4928      	ldr	r1, [pc, #160]	@ (80011ac <udp_receive_message+0x130>)
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff f897 	bl	8000240 <strcmp>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d108      	bne.n	800112a <udp_receive_message+0xae>
			strcpy(answer, received_message);
 8001118:	f107 0210 	add.w	r2, r7, #16
 800111c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001120:	4611      	mov	r1, r2
 8001122:	4618      	mov	r0, r3
 8001124:	f00f fc9f 	bl	8010a66 <strcpy>
 8001128:	e02a      	b.n	8001180 <udp_receive_message+0x104>
		} else if (strcmp(received_message, "ifconfig") == 0) {
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	4920      	ldr	r1, [pc, #128]	@ (80011b0 <udp_receive_message+0x134>)
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f885 	bl	8000240 <strcmp>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d105      	bne.n	8001148 <udp_receive_message+0xcc>
			get_ifconfig(answer);
 800113c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fec1 	bl	8000ec8 <get_ifconfig>
 8001146:	e01b      	b.n	8001180 <udp_receive_message+0x104>
		} else if (strncmp(received_message + LEDS_COUNT, "leds", 4) == 0) {
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	3303      	adds	r3, #3
 800114e:	2204      	movs	r2, #4
 8001150:	4918      	ldr	r1, [pc, #96]	@ (80011b4 <udp_receive_message+0x138>)
 8001152:	4618      	mov	r0, r3
 8001154:	f00f fbf4 	bl	8010940 <strncmp>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d108      	bne.n	8001170 <udp_receive_message+0xf4>
			sed_leds(answer, received_message);
 800115e:	f107 0210 	add.w	r2, r7, #16
 8001162:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff feeb 	bl	8000f44 <sed_leds>
 800116e:	e007      	b.n	8001180 <udp_receive_message+0x104>
		} else {
			strcpy(answer, "Unknown command");
 8001170:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001174:	4a10      	ldr	r2, [pc, #64]	@ (80011b8 <udp_receive_message+0x13c>)
 8001176:	461c      	mov	r4, r3
 8001178:	4613      	mov	r3, r2
 800117a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800117c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
		udp_send_message(pcb, addr, port, answer);
 8001180:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001184:	f8b7 2440 	ldrh.w	r2, [r7, #1088]	@ 0x440
 8001188:	f507 6186 	add.w	r1, r7, #1072	@ 0x430
 800118c:	f5a1 6186 	sub.w	r1, r1, #1072	@ 0x430
 8001190:	f507 6086 	add.w	r0, r7, #1072	@ 0x430
 8001194:	f5a0 6085 	sub.w	r0, r0, #1064	@ 0x428
 8001198:	6809      	ldr	r1, [r1, #0]
 800119a:	6800      	ldr	r0, [r0, #0]
 800119c:	f7ff fe4a 	bl	8000e34 <udp_send_message>
	}
}
 80011a0:	bf00      	nop
 80011a2:	f207 4734 	addw	r7, r7, #1076	@ 0x434
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd90      	pop	{r4, r7, pc}
 80011aa:	bf00      	nop
 80011ac:	08011a94 	.word	0x08011a94
 80011b0:	08011a9c 	.word	0x08011a9c
 80011b4:	08011aa8 	.word	0x08011aa8
 80011b8:	08011ab0 	.word	0x08011ab0

080011bc <udp_create_socket>:

void udp_create_socket(void) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
	struct udp_pcb *pcb;

	/* get new pcb */
	pcb = udp_new();
 80011c2:	f00c fe79 	bl	800deb8 <udp_new>
 80011c6:	6078      	str	r0, [r7, #4]
	if (pcb == NULL) {
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d00e      	beq.n	80011ec <udp_create_socket+0x30>
		LWIP_DEBUGF(UDP_DEBUG, ("udp_new failed!\n"));
		return;
	}

	/* bind to any IP address on port 3333 */
	if (udp_bind(pcb, IP_ADDR_ANY, 3333) != ERR_OK) {
 80011ce:	f640 5205 	movw	r2, #3333	@ 0xd05
 80011d2:	4909      	ldr	r1, [pc, #36]	@ (80011f8 <udp_create_socket+0x3c>)
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f00c fdc7 	bl	800dd68 <udp_bind>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d107      	bne.n	80011f0 <udp_create_socket+0x34>
		return;
	}

	/* set udp_echo_recv() as callback function
	 for received packets */
	udp_recv(pcb, udp_receive_message, NULL);
 80011e0:	2200      	movs	r2, #0
 80011e2:	4906      	ldr	r1, [pc, #24]	@ (80011fc <udp_create_socket+0x40>)
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f00c fe47 	bl	800de78 <udp_recv>
 80011ea:	e002      	b.n	80011f2 <udp_create_socket+0x36>
		return;
 80011ec:	bf00      	nop
 80011ee:	e000      	b.n	80011f2 <udp_create_socket+0x36>
		return;
 80011f0:	bf00      	nop
}
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	08014594 	.word	0x08014594
 80011fc:	0800107d 	.word	0x0800107d

08001200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001200:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001238 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001204:	480d      	ldr	r0, [pc, #52]	@ (800123c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001206:	490e      	ldr	r1, [pc, #56]	@ (8001240 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001208:	4a0e      	ldr	r2, [pc, #56]	@ (8001244 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a0b      	ldr	r2, [pc, #44]	@ (8001248 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800121c:	4c0b      	ldr	r4, [pc, #44]	@ (800124c <LoopFillZerobss+0x26>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800122a:	f7ff fdf1 	bl	8000e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122e:	f00f fbf3 	bl	8010a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001232:	f7ff f9e5 	bl	8000600 <main>
  bx  lr    
 8001236:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001238:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001240:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001244:	08014694 	.word	0x08014694
  ldr r2, =_sbss
 8001248:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 800124c:	20008ac4 	.word	0x20008ac4

08001250 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001250:	e7fe      	b.n	8001250 <ADC_IRQHandler>

08001252 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00b      	beq.n	800127a <LAN8742_RegisterBusIO+0x28>
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d007      	beq.n	800127a <LAN8742_RegisterBusIO+0x28>
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <LAN8742_RegisterBusIO+0x28>
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d102      	bne.n	8001280 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	e014      	b.n	80012aa <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	68da      	ldr	r2, [r3, #12]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	691a      	ldr	r2, [r3, #16]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d17c      	bne.n	80013d0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d002      	beq.n	80012e4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2220      	movs	r2, #32
 80012e8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	e01c      	b.n	800132a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	f107 0208 	add.w	r2, r7, #8
 80012f8:	2112      	movs	r1, #18
 80012fa:	6978      	ldr	r0, [r7, #20]
 80012fc:	4798      	blx	r3
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	da03      	bge.n	800130c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001304:	f06f 0304 	mvn.w	r3, #4
 8001308:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800130a:	e00b      	b.n	8001324 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	f003 031f 	and.w	r3, r3, #31
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	429a      	cmp	r2, r3
 8001316:	d105      	bne.n	8001324 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
         break;
 8001322:	e005      	b.n	8001330 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	3301      	adds	r3, #1
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	2b1f      	cmp	r3, #31
 800132e:	d9df      	bls.n	80012f0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b1f      	cmp	r3, #31
 8001336:	d902      	bls.n	800133e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001338:	f06f 0302 	mvn.w	r3, #2
 800133c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d145      	bne.n	80013d0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	6810      	ldr	r0, [r2, #0]
 800134c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001350:	2100      	movs	r1, #0
 8001352:	4798      	blx	r3
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	db37      	blt.n	80013ca <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	6810      	ldr	r0, [r2, #0]
 8001362:	f107 0208 	add.w	r2, r7, #8
 8001366:	2100      	movs	r1, #0
 8001368:	4798      	blx	r3
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	db28      	blt.n	80013c2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	4798      	blx	r3
 8001376:	4603      	mov	r3, r0
 8001378:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800137a:	e01c      	b.n	80013b6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4798      	blx	r3
 8001382:	4603      	mov	r3, r0
 8001384:	461a      	mov	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800138e:	d80e      	bhi.n	80013ae <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6810      	ldr	r0, [r2, #0]
 8001398:	f107 0208 	add.w	r2, r7, #8
 800139c:	2100      	movs	r1, #0
 800139e:	4798      	blx	r3
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	da07      	bge.n	80013b6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80013a6:	f06f 0304 	mvn.w	r3, #4
 80013aa:	613b      	str	r3, [r7, #16]
                 break;
 80013ac:	e010      	b.n	80013d0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80013ae:	f06f 0301 	mvn.w	r3, #1
 80013b2:	613b      	str	r3, [r7, #16]
               break;
 80013b4:	e00c      	b.n	80013d0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1dd      	bne.n	800137c <LAN8742_Init+0xc6>
 80013c0:	e006      	b.n	80013d0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80013c2:	f06f 0304 	mvn.w	r3, #4
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	e002      	b.n	80013d0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80013ca:	f06f 0303 	mvn.w	r3, #3
 80013ce:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d112      	bne.n	80013fc <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	4798      	blx	r3
 80013dc:	4603      	mov	r3, r0
 80013de:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80013e0:	bf00      	nop
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	4798      	blx	r3
 80013e8:	4603      	mov	r3, r0
 80013ea:	461a      	mov	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80013f4:	d9f5      	bls.n	80013e2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80013fc:	693b      	ldr	r3, [r7, #16]
 }
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b084      	sub	sp, #16
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6810      	ldr	r0, [r2, #0]
 800141a:	f107 020c 	add.w	r2, r7, #12
 800141e:	2101      	movs	r1, #1
 8001420:	4798      	blx	r3
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	da02      	bge.n	800142e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001428:	f06f 0304 	mvn.w	r3, #4
 800142c:	e06e      	b.n	800150c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6810      	ldr	r0, [r2, #0]
 8001436:	f107 020c 	add.w	r2, r7, #12
 800143a:	2101      	movs	r1, #1
 800143c:	4798      	blx	r3
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	da02      	bge.n	800144a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001444:	f06f 0304 	mvn.w	r3, #4
 8001448:	e060      	b.n	800150c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	2b00      	cmp	r3, #0
 8001452:	d101      	bne.n	8001458 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001454:	2301      	movs	r3, #1
 8001456:	e059      	b.n	800150c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	6810      	ldr	r0, [r2, #0]
 8001460:	f107 020c 	add.w	r2, r7, #12
 8001464:	2100      	movs	r1, #0
 8001466:	4798      	blx	r3
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	da02      	bge.n	8001474 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800146e:	f06f 0304 	mvn.w	r3, #4
 8001472:	e04b      	b.n	800150c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d11b      	bne.n	80014b6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d006      	beq.n	8001496 <LAN8742_GetLinkState+0x90>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001492:	2302      	movs	r3, #2
 8001494:	e03a      	b.n	800150c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e033      	b.n	800150c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80014ae:	2304      	movs	r3, #4
 80014b0:	e02c      	b.n	800150c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80014b2:	2305      	movs	r3, #5
 80014b4:	e02a      	b.n	800150c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6810      	ldr	r0, [r2, #0]
 80014be:	f107 020c 	add.w	r2, r7, #12
 80014c2:	211f      	movs	r1, #31
 80014c4:	4798      	blx	r3
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	da02      	bge.n	80014d2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80014cc:	f06f 0304 	mvn.w	r3, #4
 80014d0:	e01c      	b.n	800150c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80014dc:	2306      	movs	r3, #6
 80014de:	e015      	b.n	800150c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 031c 	and.w	r3, r3, #28
 80014e6:	2b18      	cmp	r3, #24
 80014e8:	d101      	bne.n	80014ee <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80014ea:	2302      	movs	r3, #2
 80014ec:	e00e      	b.n	800150c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f003 031c 	and.w	r3, r3, #28
 80014f4:	2b08      	cmp	r3, #8
 80014f6:	d101      	bne.n	80014fc <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e007      	b.n	800150c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 031c 	and.w	r3, r3, #28
 8001502:	2b14      	cmp	r3, #20
 8001504:	d101      	bne.n	800150a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001506:	2304      	movs	r3, #4
 8001508:	e000      	b.n	800150c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800150a:	2305      	movs	r3, #5
    }				
  }
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001518:	2003      	movs	r0, #3
 800151a:	f000 f94d 	bl	80017b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800151e:	2000      	movs	r0, #0
 8001520:	f000 f806 	bl	8001530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001524:	f7ff fa46 	bl	80009b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001538:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <HAL_InitTick+0x54>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <HAL_InitTick+0x58>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4619      	mov	r1, r3
 8001542:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001546:	fbb3 f3f1 	udiv	r3, r3, r1
 800154a:	fbb2 f3f3 	udiv	r3, r2, r3
 800154e:	4618      	mov	r0, r3
 8001550:	f000 f967 	bl	8001822 <HAL_SYSTICK_Config>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e00e      	b.n	800157c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b0f      	cmp	r3, #15
 8001562:	d80a      	bhi.n	800157a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001564:	2200      	movs	r2, #0
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	f04f 30ff 	mov.w	r0, #4294967295
 800156c:	f000 f92f 	bl	80017ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001570:	4a06      	ldr	r2, [pc, #24]	@ (800158c <HAL_InitTick+0x5c>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	e000      	b.n	800157c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000000 	.word	0x20000000
 8001588:	20000008 	.word	0x20000008
 800158c:	20000004 	.word	0x20000004

08001590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001594:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <HAL_IncTick+0x20>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <HAL_IncTick+0x24>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4413      	add	r3, r2
 80015a0:	4a04      	ldr	r2, [pc, #16]	@ (80015b4 <HAL_IncTick+0x24>)
 80015a2:	6013      	str	r3, [r2, #0]
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20000008 	.word	0x20000008
 80015b4:	200007c4 	.word	0x200007c4

080015b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return uwTick;
 80015bc:	4b03      	ldr	r3, [pc, #12]	@ (80015cc <HAL_GetTick+0x14>)
 80015be:	681b      	ldr	r3, [r3, #0]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	200007c4 	.word	0x200007c4

080015d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d8:	f7ff ffee 	bl	80015b8 <HAL_GetTick>
 80015dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e8:	d005      	beq.n	80015f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <HAL_Delay+0x44>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	461a      	mov	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4413      	add	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015f6:	bf00      	nop
 80015f8:	f7ff ffde 	bl	80015b8 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	429a      	cmp	r2, r3
 8001606:	d8f7      	bhi.n	80015f8 <HAL_Delay+0x28>
  {
  }
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000008 	.word	0x20000008

08001618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001628:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <__NVIC_SetPriorityGrouping+0x40>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001634:	4013      	ands	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001640:	4b06      	ldr	r3, [pc, #24]	@ (800165c <__NVIC_SetPriorityGrouping+0x44>)
 8001642:	4313      	orrs	r3, r2
 8001644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001646:	4a04      	ldr	r2, [pc, #16]	@ (8001658 <__NVIC_SetPriorityGrouping+0x40>)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	60d3      	str	r3, [r2, #12]
}
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000ed00 	.word	0xe000ed00
 800165c:	05fa0000 	.word	0x05fa0000

08001660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001664:	4b04      	ldr	r3, [pc, #16]	@ (8001678 <__NVIC_GetPriorityGrouping+0x18>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	f003 0307 	and.w	r3, r3, #7
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	2b00      	cmp	r3, #0
 800168c:	db0b      	blt.n	80016a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	f003 021f 	and.w	r2, r3, #31
 8001694:	4907      	ldr	r1, [pc, #28]	@ (80016b4 <__NVIC_EnableIRQ+0x38>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	2001      	movs	r0, #1
 800169e:	fa00 f202 	lsl.w	r2, r0, r2
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000e100 	.word	0xe000e100

080016b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	db0a      	blt.n	80016e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	490c      	ldr	r1, [pc, #48]	@ (8001704 <__NVIC_SetPriority+0x4c>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	0112      	lsls	r2, r2, #4
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	440b      	add	r3, r1
 80016dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e0:	e00a      	b.n	80016f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4908      	ldr	r1, [pc, #32]	@ (8001708 <__NVIC_SetPriority+0x50>)
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	3b04      	subs	r3, #4
 80016f0:	0112      	lsls	r2, r2, #4
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	440b      	add	r3, r1
 80016f6:	761a      	strb	r2, [r3, #24]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000e100 	.word	0xe000e100
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	@ 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f1c3 0307 	rsb	r3, r3, #7
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf28      	it	cs
 800172a:	2304      	movcs	r3, #4
 800172c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3304      	adds	r3, #4
 8001732:	2b06      	cmp	r3, #6
 8001734:	d902      	bls.n	800173c <NVIC_EncodePriority+0x30>
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3b03      	subs	r3, #3
 800173a:	e000      	b.n	800173e <NVIC_EncodePriority+0x32>
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	f04f 32ff 	mov.w	r2, #4294967295
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43da      	mvns	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	401a      	ands	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001754:	f04f 31ff 	mov.w	r1, #4294967295
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	43d9      	mvns	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	4313      	orrs	r3, r2
         );
}
 8001766:	4618      	mov	r0, r3
 8001768:	3724      	adds	r7, #36	@ 0x24
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001784:	d301      	bcc.n	800178a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001786:	2301      	movs	r3, #1
 8001788:	e00f      	b.n	80017aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178a:	4a0a      	ldr	r2, [pc, #40]	@ (80017b4 <SysTick_Config+0x40>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001792:	210f      	movs	r1, #15
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f7ff ff8e 	bl	80016b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800179c:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <SysTick_Config+0x40>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a2:	4b04      	ldr	r3, [pc, #16]	@ (80017b4 <SysTick_Config+0x40>)
 80017a4:	2207      	movs	r2, #7
 80017a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	e000e010 	.word	0xe000e010

080017b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ff29 	bl	8001618 <__NVIC_SetPriorityGrouping>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e0:	f7ff ff3e 	bl	8001660 <__NVIC_GetPriorityGrouping>
 80017e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	68b9      	ldr	r1, [r7, #8]
 80017ea:	6978      	ldr	r0, [r7, #20]
 80017ec:	f7ff ff8e 	bl	800170c <NVIC_EncodePriority>
 80017f0:	4602      	mov	r2, r0
 80017f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f6:	4611      	mov	r1, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff5d 	bl	80016b8 <__NVIC_SetPriority>
}
 80017fe:	bf00      	nop
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff31 	bl	800167c <__NVIC_EnableIRQ>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ffa2 	bl	8001774 <SysTick_Config>
 8001830:	4603      	mov	r3, r0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e06a      	b.n	8001924 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001854:	2b00      	cmp	r3, #0
 8001856:	d106      	bne.n	8001866 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2223      	movs	r2, #35	@ 0x23
 800185c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f004 fbcd 	bl	8006000 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001866:	4b31      	ldr	r3, [pc, #196]	@ (800192c <HAL_ETH_Init+0xf0>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186a:	4a30      	ldr	r2, [pc, #192]	@ (800192c <HAL_ETH_Init+0xf0>)
 800186c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001870:	6453      	str	r3, [r2, #68]	@ 0x44
 8001872:	4b2e      	ldr	r3, [pc, #184]	@ (800192c <HAL_ETH_Init+0xf0>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800187e:	4b2c      	ldr	r3, [pc, #176]	@ (8001930 <HAL_ETH_Init+0xf4>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4a2b      	ldr	r2, [pc, #172]	@ (8001930 <HAL_ETH_Init+0xf4>)
 8001884:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001888:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800188a:	4b29      	ldr	r3, [pc, #164]	@ (8001930 <HAL_ETH_Init+0xf4>)
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	4927      	ldr	r1, [pc, #156]	@ (8001930 <HAL_ETH_Init+0xf4>)
 8001894:	4313      	orrs	r3, r2
 8001896:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001898:	4b25      	ldr	r3, [pc, #148]	@ (8001930 <HAL_ETH_Init+0xf4>)
 800189a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018b4:	f7ff fe80 	bl	80015b8 <HAL_GetTick>
 80018b8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018ba:	e011      	b.n	80018e0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80018bc:	f7ff fe7c 	bl	80015b8 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80018ca:	d909      	bls.n	80018e0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2204      	movs	r2, #4
 80018d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	22e0      	movs	r2, #224	@ 0xe0
 80018d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e021      	b.n	8001924 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1e4      	bne.n	80018bc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 fee4 	bl	80026c0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 ff8b 	bl	8002814 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 ffe1 	bl	80028c6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	461a      	mov	r2, r3
 800190a:	2100      	movs	r1, #0
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 ff49 	bl	80027a4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2210      	movs	r2, #16
 800191e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40023800 	.word	0x40023800
 8001930:	40013800 	.word	0x40013800

08001934 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001942:	2b10      	cmp	r3, #16
 8001944:	d150      	bne.n	80019e8 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2223      	movs	r2, #35	@ 0x23
 800194a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2204      	movs	r2, #4
 8001952:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 f9fd 	bl	8001d54 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f042 0208 	orr.w	r2, r2, #8
 8001968:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001972:	2001      	movs	r0, #1
 8001974:	f7ff fe2c 	bl	80015d0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0204 	orr.w	r2, r2, #4
 800198e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001998:	2001      	movs	r0, #1
 800199a:	f7ff fe19 	bl	80015d0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 fd2a 	bl	8002400 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6812      	ldr	r2, [r2, #0]
 80019ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019c2:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	f043 0302 	orr.w	r3, r3, #2
 80019d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019da:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2223      	movs	r2, #35	@ 0x23
 80019e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	e000      	b.n	80019ea <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
  }
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b084      	sub	sp, #16
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a00:	2b23      	cmp	r3, #35	@ 0x23
 8001a02:	d14a      	bne.n	8001a9a <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2223      	movs	r2, #35	@ 0x23
 8001a08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001a1e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a22:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	f023 0302 	bic.w	r3, r3, #2
 8001a36:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a3a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0204 	bic.w	r2, r2, #4
 8001a4a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a54:	2001      	movs	r0, #1
 8001a56:	f7ff fdbb 	bl	80015d0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 fccc 	bl	8002400 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0208 	bic.w	r2, r2, #8
 8001a76:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a80:	2001      	movs	r0, #1
 8001a82:	f7ff fda5 	bl	80015d0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2210      	movs	r2, #16
 8001a92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	e000      	b.n	8001a9c <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
  }
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d109      	bne.n	8001aca <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001abc:	f043 0201 	orr.w	r2, r3, #1
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e07c      	b.n	8001bc4 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ad0:	2b23      	cmp	r3, #35	@ 0x23
 8001ad2:	d176      	bne.n	8001bc2 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 ff61 	bl	80029a0 <ETH_Prepare_Tx_Descriptors>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d009      	beq.n	8001af8 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aea:	f043 0202 	orr.w	r2, r3, #2
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e065      	b.n	8001bc4 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001af8:	f3bf 8f4f 	dsb	sy
}
 8001afc:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	3206      	adds	r2, #6
 8001b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b0a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d904      	bls.n	8001b28 <HAL_ETH_Transmit+0x84>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b22:	1f1a      	subs	r2, r3, #4
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	3106      	adds	r1, #6
 8001b34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b38:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b3c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001b3e:	f7ff fd3b 	bl	80015b8 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001b44:	e037      	b.n	8001bb6 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d011      	beq.n	8001b7c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b5e:	f043 0208 	orr.w	r2, r3, #8
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b70:	695a      	ldr	r2, [r3, #20]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e023      	b.n	8001bc4 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b82:	d018      	beq.n	8001bb6 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b84:	f7ff fd18 	bl	80015b8 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d302      	bcc.n	8001b9a <HAL_ETH_Transmit+0xf6>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10d      	bne.n	8001bb6 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ba0:	f043 0204 	orr.w	r2, r3, #4
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001bb0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e006      	b.n	8001bc4 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	dbc3      	blt.n	8001b46 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e000      	b.n	8001bc4 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
  }
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d109      	bne.n	8001bf8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bea:	f043 0201 	orr.w	r2, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0a8      	b.n	8001d4a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001bfe:	2b23      	cmp	r3, #35	@ 0x23
 8001c00:	d001      	beq.n	8001c06 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e0a1      	b.n	8001d4a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c0a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69fa      	ldr	r2, [r7, #28]
 8001c10:	3212      	adds	r2, #18
 8001c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c16:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c1c:	f1c3 0304 	rsb	r3, r3, #4
 8001c20:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c22:	e06a      	b.n	8001cfa <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d007      	beq.n	8001c40 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	699a      	ldr	r2, [r3, #24]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	69da      	ldr	r2, [r3, #28]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d103      	bne.n	8001c54 <HAL_ETH_ReadData+0x88>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d040      	beq.n	8001cd6 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00c      	beq.n	8001c98 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	0c1b      	lsrs	r3, r3, #16
 8001c84:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001c88:	3b04      	subs	r3, #4
 8001c8a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001c94:	2301      	movs	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	f004 fb6d 	bl	8006394 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	441a      	add	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	61fb      	str	r3, [r7, #28]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d902      	bls.n	8001ce8 <HAL_ETH_ReadData+0x11c>
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3b04      	subs	r3, #4
 8001ce6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	3212      	adds	r2, #18
 8001cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	db06      	blt.n	8001d10 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d202      	bcs.n	8001d10 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d089      	beq.n	8001c24 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	441a      	add	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d002      	beq.n	8001d2a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f815 	bl	8001d54 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69fa      	ldr	r2, [r7, #28]
 8001d2e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d108      	bne.n	8001d48 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001d44:	2300      	movs	r3, #0
 8001d46:	e000      	b.n	8001d4a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3720      	adds	r7, #32
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001d60:	2301      	movs	r3, #1
 8001d62:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d68:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	3212      	adds	r2, #18
 8001d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d74:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d7a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001d7c:	e040      	b.n	8001e00 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d112      	bne.n	8001dac <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001d86:	f107 030c 	add.w	r3, r7, #12
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f004 fad2 	bl	8006334 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d102      	bne.n	8001d9c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	74fb      	strb	r3, [r7, #19]
 8001d9a:	e007      	b.n	8001dac <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	461a      	mov	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001dac:	7cfb      	ldrb	r3, [r7, #19]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d026      	beq.n	8001e00 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d103      	bne.n	8001dc2 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	4a1e      	ldr	r2, [pc, #120]	@ (8001e38 <ETH_UpdateDescriptor+0xe4>)
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	e003      	b.n	8001dca <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8001dc8:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001dca:	f3bf 8f5f 	dmb	sy
}
 8001dce:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	3301      	adds	r3, #1
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d902      	bls.n	8001dee <ETH_UpdateDescriptor+0x9a>
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	3b04      	subs	r3, #4
 8001dec:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69fa      	ldr	r2, [r7, #28]
 8001df2:	3212      	adds	r2, #18
 8001df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df8:	617b      	str	r3, [r7, #20]
      desccount--;
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <ETH_UpdateDescriptor+0xb8>
 8001e06:	7cfb      	ldrb	r3, [r7, #19]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1b8      	bne.n	8001d7e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d00c      	beq.n	8001e30 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e1e:	461a      	mov	r2, r3
 8001e20:	2300      	movs	r3, #0
 8001e22:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001e30:	bf00      	nop
 8001e32:	3720      	adds	r7, #32
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	80004600 	.word	0x80004600

08001e3c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e52:	2b40      	cmp	r3, #64	@ 0x40
 8001e54:	d112      	bne.n	8001e7c <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e64:	2b40      	cmp	r3, #64	@ 0x40
 8001e66:	d109      	bne.n	8001e7c <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b50      	ldr	r3, [pc, #320]	@ (8001fb4 <HAL_ETH_IRQHandler+0x178>)
 8001e74:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f8ac 	bl	8001fd4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d113      	bne.n	8001eb6 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d10a      	bne.n	8001eb6 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001eae:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f885 	bl	8001fc0 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ec4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ec8:	d14c      	bne.n	8001f64 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ed8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001edc:	d142      	bne.n	8001f64 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ee4:	f043 0208 	orr.w	r2, r3, #8
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001efc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f00:	d11a      	bne.n	8001f38 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f0a:	695a      	ldr	r2, [r3, #20]
 8001f0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb8 <HAL_ETH_IRQHandler+0x17c>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001f28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f2c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	22e0      	movs	r2, #224	@ 0xe0
 8001f32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001f36:	e012      	b.n	8001f5e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001f46:	4013      	ands	r3, r2
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f56:	461a      	mov	r2, r3
 8001f58:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001f5c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f842 	bl	8001fe8 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d10e      	bne.n	8001f90 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f78:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f83a 	bl	8001ffc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001f90:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <HAL_ETH_IRQHandler+0x180>)
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d006      	beq.n	8001faa <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001f9c:	4b07      	ldr	r3, [pc, #28]	@ (8001fbc <HAL_ETH_IRQHandler+0x180>)
 8001f9e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001fa2:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f833 	bl	8002010 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	00010040 	.word	0x00010040
 8001fb8:	007e2000 	.word	0x007e2000
 8001fbc:	40013c00 	.word	0x40013c00

08001fc0 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
 8002030:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f003 031c 	and.w	r3, r3, #28
 8002040:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	02db      	lsls	r3, r3, #11
 8002046:	b29b      	uxth	r3, r3
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	4313      	orrs	r3, r2
 800204c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	019b      	lsls	r3, r3, #6
 8002052:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4313      	orrs	r3, r2
 800205a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f023 0302 	bic.w	r3, r3, #2
 8002062:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002074:	f7ff faa0 	bl	80015b8 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800207a:	e00d      	b.n	8002098 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800207c:	f7ff fa9c 	bl	80015b8 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800208a:	d301      	bcc.n	8002090 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e010      	b.n	80020b2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1ec      	bne.n	800207c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	461a      	mov	r2, r3
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b086      	sub	sp, #24
 80020be:	af00      	add	r7, sp, #0
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f003 031c 	and.w	r3, r3, #28
 80020d6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	02db      	lsls	r3, r3, #11
 80020dc:	b29b      	uxth	r3, r3
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	019b      	lsls	r3, r3, #6
 80020e8:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	b29a      	uxth	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002114:	f7ff fa50 	bl	80015b8 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800211a:	e00d      	b.n	8002138 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800211c:	f7ff fa4c 	bl	80015b8 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800212a:	d301      	bcc.n	8002130 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e009      	b.n	8002144 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1ec      	bne.n	800211c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0d9      	b.n	8002314 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0310 	and.w	r3, r3, #16
 800216a:	2b00      	cmp	r3, #0
 800216c:	bf14      	ite	ne
 800216e:	2301      	movne	r3, #1
 8002170:	2300      	moveq	r3, #0
 8002172:	b2db      	uxtb	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf0c      	ite	eq
 8002198:	2301      	moveq	r3, #1
 800219a:	2300      	movne	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	461a      	mov	r2, r3
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	bf14      	ite	ne
 80021b4:	2301      	movne	r3, #1
 80021b6:	2300      	moveq	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	bf0c      	ite	eq
 80021ce:	2301      	moveq	r3, #1
 80021d0:	2300      	movne	r3, #0
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	461a      	mov	r2, r3
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	bf14      	ite	ne
 80021e8:	2301      	movne	r3, #1
 80021ea:	2300      	moveq	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800221a:	2b00      	cmp	r3, #0
 800221c:	bf0c      	ite	eq
 800221e:	2301      	moveq	r3, #1
 8002220:	2300      	movne	r3, #0
 8002222:	b2db      	uxtb	r3, r3
 8002224:	461a      	mov	r2, r3
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002234:	2b00      	cmp	r3, #0
 8002236:	bf0c      	ite	eq
 8002238:	2301      	moveq	r3, #1
 800223a:	2300      	movne	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800224e:	2b00      	cmp	r3, #0
 8002250:	bf14      	ite	ne
 8002252:	2301      	movne	r3, #1
 8002254:	2300      	moveq	r3, #0
 8002256:	b2db      	uxtb	r3, r3
 8002258:	461a      	mov	r2, r3
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002276:	2b00      	cmp	r3, #0
 8002278:	bf14      	ite	ne
 800227a:	2301      	movne	r3, #1
 800227c:	2300      	moveq	r3, #0
 800227e:	b2db      	uxtb	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf14      	ite	ne
 8002294:	2301      	movne	r3, #1
 8002296:	2300      	moveq	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	461a      	mov	r2, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf0c      	ite	eq
 80022b0:	2301      	moveq	r3, #1
 80022b2:	2300      	movne	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	461a      	mov	r2, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	0c1b      	lsrs	r3, r3, #16
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bf14      	ite	ne
 80022e8:	2301      	movne	r3, #1
 80022ea:	2300      	moveq	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	461a      	mov	r2, r3
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002300:	2b00      	cmp	r3, #0
 8002302:	bf14      	ite	ne
 8002304:	2301      	movne	r3, #1
 8002306:	2300      	moveq	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e00b      	b.n	800234c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800233a:	2b10      	cmp	r3, #16
 800233c:	d105      	bne.n	800234a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800233e:	6839      	ldr	r1, [r7, #0]
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f883 	bl	800244c <ETH_SetMACConfig>

    return HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	e000      	b.n	800234c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
  }
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f023 031c 	bic.w	r3, r3, #28
 800236a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800236c:	f001 fc72 	bl	8003c54 <HAL_RCC_GetHCLKFreq>
 8002370:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	4a1d      	ldr	r2, [pc, #116]	@ (80023ec <HAL_ETH_SetMDIOClockRange+0x98>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d908      	bls.n	800238c <HAL_ETH_SetMDIOClockRange+0x38>
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	4a1c      	ldr	r2, [pc, #112]	@ (80023f0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d804      	bhi.n	800238c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f043 0308 	orr.w	r3, r3, #8
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	e027      	b.n	80023dc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	4a18      	ldr	r2, [pc, #96]	@ (80023f0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d908      	bls.n	80023a6 <HAL_ETH_SetMDIOClockRange+0x52>
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	4a17      	ldr	r2, [pc, #92]	@ (80023f4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d204      	bcs.n	80023a6 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f043 030c 	orr.w	r3, r3, #12
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	e01a      	b.n	80023dc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	4a12      	ldr	r2, [pc, #72]	@ (80023f4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d303      	bcc.n	80023b6 <HAL_ETH_SetMDIOClockRange+0x62>
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	4a11      	ldr	r2, [pc, #68]	@ (80023f8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d911      	bls.n	80023da <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	4a0f      	ldr	r2, [pc, #60]	@ (80023f8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d908      	bls.n	80023d0 <HAL_ETH_SetMDIOClockRange+0x7c>
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	4a0e      	ldr	r2, [pc, #56]	@ (80023fc <HAL_ETH_SetMDIOClockRange+0xa8>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d804      	bhi.n	80023d0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f043 0304 	orr.w	r3, r3, #4
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	e005      	b.n	80023dc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f043 0310 	orr.w	r3, r3, #16
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	e000      	b.n	80023dc <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80023da:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	611a      	str	r2, [r3, #16]
}
 80023e4:	bf00      	nop
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	01312cff 	.word	0x01312cff
 80023f0:	02160ebf 	.word	0x02160ebf
 80023f4:	03938700 	.word	0x03938700
 80023f8:	05f5e0ff 	.word	0x05f5e0ff
 80023fc:	08f0d17f 	.word	0x08f0d17f

08002400 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800241e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002422:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002430:	2001      	movs	r0, #1
 8002432:	f7ff f8cd 	bl	80015d0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002440:	6193      	str	r3, [r2, #24]
}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	4b51      	ldr	r3, [pc, #324]	@ (80025a8 <ETH_SetMACConfig+0x15c>)
 8002462:	4013      	ands	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	7c1b      	ldrb	r3, [r3, #16]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d102      	bne.n	8002474 <ETH_SetMACConfig+0x28>
 800246e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002472:	e000      	b.n	8002476 <ETH_SetMACConfig+0x2a>
 8002474:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	7c5b      	ldrb	r3, [r3, #17]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d102      	bne.n	8002484 <ETH_SetMACConfig+0x38>
 800247e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002482:	e000      	b.n	8002486 <ETH_SetMACConfig+0x3a>
 8002484:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002486:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800248c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	7fdb      	ldrb	r3, [r3, #31]
 8002492:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002494:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800249a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	7f92      	ldrb	r2, [r2, #30]
 80024a0:	2a00      	cmp	r2, #0
 80024a2:	d102      	bne.n	80024aa <ETH_SetMACConfig+0x5e>
 80024a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024a8:	e000      	b.n	80024ac <ETH_SetMACConfig+0x60>
 80024aa:	2200      	movs	r2, #0
                        macconf->Speed |
 80024ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	7f1b      	ldrb	r3, [r3, #28]
 80024b2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80024b4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80024ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	791b      	ldrb	r3, [r3, #4]
 80024c0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80024c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80024ca:	2a00      	cmp	r2, #0
 80024cc:	d102      	bne.n	80024d4 <ETH_SetMACConfig+0x88>
 80024ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024d2:	e000      	b.n	80024d6 <ETH_SetMACConfig+0x8a>
 80024d4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80024d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	7bdb      	ldrb	r3, [r3, #15]
 80024dc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80024de:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80024e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80024ec:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80024ee:	4313      	orrs	r3, r2
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002506:	2001      	movs	r0, #1
 8002508:	f7ff f862 	bl	80015d0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002522:	4013      	ands	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800252a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002532:	2a00      	cmp	r2, #0
 8002534:	d101      	bne.n	800253a <ETH_SetMACConfig+0xee>
 8002536:	2280      	movs	r2, #128	@ 0x80
 8002538:	e000      	b.n	800253c <ETH_SetMACConfig+0xf0>
 800253a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800253c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002542:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800254a:	2a01      	cmp	r2, #1
 800254c:	d101      	bne.n	8002552 <ETH_SetMACConfig+0x106>
 800254e:	2208      	movs	r2, #8
 8002550:	e000      	b.n	8002554 <ETH_SetMACConfig+0x108>
 8002552:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002554:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800255c:	2a01      	cmp	r2, #1
 800255e:	d101      	bne.n	8002564 <ETH_SetMACConfig+0x118>
 8002560:	2204      	movs	r2, #4
 8002562:	e000      	b.n	8002566 <ETH_SetMACConfig+0x11a>
 8002564:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002566:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800256e:	2a01      	cmp	r2, #1
 8002570:	d101      	bne.n	8002576 <ETH_SetMACConfig+0x12a>
 8002572:	2202      	movs	r2, #2
 8002574:	e000      	b.n	8002578 <ETH_SetMACConfig+0x12c>
 8002576:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002578:	4313      	orrs	r3, r2
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4313      	orrs	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002590:	2001      	movs	r0, #1
 8002592:	f7ff f81d 	bl	80015d0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	619a      	str	r2, [r3, #24]
}
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	ff20810f 	.word	0xff20810f

080025ac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	4b3d      	ldr	r3, [pc, #244]	@ (80026bc <ETH_SetDMAConfig+0x110>)
 80025c6:	4013      	ands	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	7b1b      	ldrb	r3, [r3, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d102      	bne.n	80025d8 <ETH_SetDMAConfig+0x2c>
 80025d2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80025d6:	e000      	b.n	80025da <ETH_SetDMAConfig+0x2e>
 80025d8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	7b5b      	ldrb	r3, [r3, #13]
 80025de:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025e0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	7f52      	ldrb	r2, [r2, #29]
 80025e6:	2a00      	cmp	r2, #0
 80025e8:	d102      	bne.n	80025f0 <ETH_SetDMAConfig+0x44>
 80025ea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80025ee:	e000      	b.n	80025f2 <ETH_SetDMAConfig+0x46>
 80025f0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80025f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	7b9b      	ldrb	r3, [r3, #14]
 80025f8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80025fa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002600:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	7f1b      	ldrb	r3, [r3, #28]
 8002606:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002608:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	7f9b      	ldrb	r3, [r3, #30]
 800260e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002610:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002616:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800261e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002620:	4313      	orrs	r3, r2
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	4313      	orrs	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002630:	461a      	mov	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002642:	2001      	movs	r0, #1
 8002644:	f7fe ffc4 	bl	80015d0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002650:	461a      	mov	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	791b      	ldrb	r3, [r3, #4]
 800265a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002660:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002666:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800266c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002674:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002676:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800267e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002684:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800268e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002692:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026a0:	2001      	movs	r0, #1
 80026a2:	f7fe ff95 	bl	80015d0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026ae:	461a      	mov	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6013      	str	r3, [r2, #0]
}
 80026b4:	bf00      	nop
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	f8de3f23 	.word	0xf8de3f23

080026c0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b0a6      	sub	sp, #152	@ 0x98
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80026c8:	2301      	movs	r3, #1
 80026ca:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80026ce:	2301      	movs	r3, #1
 80026d0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80026d4:	2300      	movs	r3, #0
 80026d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80026d8:	2300      	movs	r3, #0
 80026da:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80026de:	2301      	movs	r3, #1
 80026e0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80026e4:	2300      	movs	r3, #0
 80026e6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80026ea:	2301      	movs	r3, #1
 80026ec:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80026f6:	2300      	movs	r3, #0
 80026f8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80026fc:	2300      	movs	r3, #0
 80026fe:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002700:	2300      	movs	r3, #0
 8002702:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002706:	2300      	movs	r3, #0
 8002708:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800270a:	2300      	movs	r3, #0
 800270c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002710:	2300      	movs	r3, #0
 8002712:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002716:	2300      	movs	r3, #0
 8002718:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800271c:	2300      	movs	r3, #0
 800271e:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002722:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002726:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002728:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800272c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800272e:	2300      	movs	r3, #0
 8002730:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002734:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002738:	4619      	mov	r1, r3
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff fe86 	bl	800244c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002740:	2301      	movs	r3, #1
 8002742:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002744:	2301      	movs	r3, #1
 8002746:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002748:	2301      	movs	r3, #1
 800274a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800274e:	2301      	movs	r3, #1
 8002750:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002756:	2300      	movs	r3, #0
 8002758:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800275c:	2300      	movs	r3, #0
 800275e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002762:	2300      	movs	r3, #0
 8002764:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002766:	2301      	movs	r3, #1
 8002768:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800276c:	2301      	movs	r3, #1
 800276e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002770:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002774:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002776:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800277a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800277c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002780:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002782:	2301      	movs	r3, #1
 8002784:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002788:	2300      	movs	r3, #0
 800278a:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800278c:	2300      	movs	r3, #0
 800278e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002790:	f107 0308 	add.w	r3, r7, #8
 8002794:	4619      	mov	r1, r3
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff ff08 	bl	80025ac <ETH_SetDMAConfig>
}
 800279c:	bf00      	nop
 800279e:	3798      	adds	r7, #152	@ 0x98
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3305      	adds	r3, #5
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	021b      	lsls	r3, r3, #8
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	3204      	adds	r2, #4
 80027bc:	7812      	ldrb	r2, [r2, #0]
 80027be:	4313      	orrs	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	4b11      	ldr	r3, [pc, #68]	@ (800280c <ETH_MACAddressConfig+0x68>)
 80027c6:	4413      	add	r3, r2
 80027c8:	461a      	mov	r2, r3
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3303      	adds	r3, #3
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	061a      	lsls	r2, r3, #24
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3302      	adds	r3, #2
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	041b      	lsls	r3, r3, #16
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3301      	adds	r3, #1
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	021b      	lsls	r3, r3, #8
 80027e8:	4313      	orrs	r3, r2
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	7812      	ldrb	r2, [r2, #0]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	4b06      	ldr	r3, [pc, #24]	@ (8002810 <ETH_MACAddressConfig+0x6c>)
 80027f6:	4413      	add	r3, r2
 80027f8:	461a      	mov	r2, r3
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	6013      	str	r3, [r2, #0]
}
 80027fe:	bf00      	nop
 8002800:	371c      	adds	r7, #28
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40028040 	.word	0x40028040
 8002810:	40028044 	.word	0x40028044

08002814 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800281c:	2300      	movs	r3, #0
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	e03e      	b.n	80028a0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68d9      	ldr	r1, [r3, #12]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	4613      	mov	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	440b      	add	r3, r1
 8002832:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2200      	movs	r2, #0
 800283e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2200      	movs	r2, #0
 800284a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	3206      	adds	r2, #6
 8002854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d80c      	bhi.n	8002884 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68d9      	ldr	r1, [r3, #12]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	440b      	add	r3, r1
 800287c:	461a      	mov	r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	60da      	str	r2, [r3, #12]
 8002882:	e004      	b.n	800288e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	461a      	mov	r2, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	3301      	adds	r3, #1
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d9bd      	bls.n	8002822 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028b8:	611a      	str	r2, [r3, #16]
}
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b085      	sub	sp, #20
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	e046      	b.n	8002962 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6919      	ldr	r1, [r3, #16]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	440b      	add	r3, r1
 80028e4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2200      	movs	r2, #0
 80028f0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2200      	movs	r2, #0
 80028f6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2200      	movs	r2, #0
 80028fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2200      	movs	r2, #0
 8002902:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2200      	movs	r2, #0
 8002908:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002910:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8002918:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002926:	68b9      	ldr	r1, [r7, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	3212      	adds	r2, #18
 800292e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d80c      	bhi.n	8002952 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6919      	ldr	r1, [r3, #16]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	440b      	add	r3, r1
 800294a:	461a      	mov	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	60da      	str	r2, [r3, #12]
 8002950:	e004      	b.n	800295c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	461a      	mov	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	3301      	adds	r3, #1
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2b03      	cmp	r3, #3
 8002966:	d9b5      	bls.n	80028d4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691a      	ldr	r2, [r3, #16]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002992:	60da      	str	r2, [r3, #12]
}
 8002994:	bf00      	nop
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b08d      	sub	sp, #52	@ 0x34
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	3318      	adds	r3, #24
 80029b0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ca:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80029de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029e2:	d007      	beq.n	80029f4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029e8:	3304      	adds	r3, #4
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80029f4:	2302      	movs	r3, #2
 80029f6:	e0ff      	b.n	8002bf8 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80029f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fa:	3301      	adds	r3, #1
 80029fc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	4b7d      	ldr	r3, [pc, #500]	@ (8002c04 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	69fa      	ldr	r2, [r7, #28]
 8002a12:	6852      	ldr	r2, [r2, #4]
 8002a14:	431a      	orrs	r2, r3
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d008      	beq.n	8002a38 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0320 	and.w	r3, r3, #32
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	431a      	orrs	r2, r3
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002a7a:	f3bf 8f5f 	dmb	sy
}
 8002a7e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002a8c:	e082      	b.n	8002b94 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d006      	beq.n	8002aae <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	e005      	b.n	8002aba <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002abc:	3301      	adds	r3, #1
 8002abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d902      	bls.n	8002acc <ETH_Prepare_Tx_Descriptors+0x12c>
 8002ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac8:	3b04      	subs	r3, #4
 8002aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002aea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002aee:	d007      	beq.n	8002b00 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af4:	3304      	adds	r3, #4
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d029      	beq.n	8002b54 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b0c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002b0e:	2300      	movs	r3, #0
 8002b10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b12:	e019      	b.n	8002b48 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002b14:	f3bf 8f5f 	dmb	sy
}
 8002b18:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b28:	3301      	adds	r3, #1
 8002b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d902      	bls.n	8002b38 <ETH_Prepare_Tx_Descriptors+0x198>
 8002b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b34:	3b04      	subs	r3, #4
 8002b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b40:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b44:	3301      	adds	r3, #1
 8002b46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d3e1      	bcc.n	8002b14 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002b50:	2302      	movs	r3, #2
 8002b52:	e051      	b.n	8002bf8 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b56:	3301      	adds	r3, #1
 8002b58:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	4b25      	ldr	r3, [pc, #148]	@ (8002c04 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	69fa      	ldr	r2, [r7, #28]
 8002b74:	6852      	ldr	r2, [r2, #4]
 8002b76:	431a      	orrs	r2, r3
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b82:	f3bf 8f5f 	dmb	sy
}
 8002b86:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f47f af78 	bne.w	8002a8e <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d006      	beq.n	8002bb2 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	e005      	b.n	8002bbe <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bce:	6979      	ldr	r1, [r7, #20]
 8002bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bde:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002be0:	b672      	cpsid	i
}
 8002be2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	4413      	add	r3, r2
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002bf2:	b662      	cpsie	i
}
 8002bf4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3734      	adds	r7, #52	@ 0x34
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	ffffe000 	.word	0xffffe000

08002c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b089      	sub	sp, #36	@ 0x24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	e175      	b.n	8002f14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c28:	2201      	movs	r2, #1
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	f040 8164 	bne.w	8002f0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d005      	beq.n	8002c5e <HAL_GPIO_Init+0x56>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d130      	bne.n	8002cc0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	2203      	movs	r2, #3
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c94:	2201      	movs	r2, #1
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	f003 0201 	and.w	r2, r3, #1
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d017      	beq.n	8002cfc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d123      	bne.n	8002d50 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	08da      	lsrs	r2, r3, #3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3208      	adds	r2, #8
 8002d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	220f      	movs	r2, #15
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	08da      	lsrs	r2, r3, #3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3208      	adds	r2, #8
 8002d4a:	69b9      	ldr	r1, [r7, #24]
 8002d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 0203 	and.w	r2, r3, #3
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80be 	beq.w	8002f0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d92:	4b66      	ldr	r3, [pc, #408]	@ (8002f2c <HAL_GPIO_Init+0x324>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d96:	4a65      	ldr	r2, [pc, #404]	@ (8002f2c <HAL_GPIO_Init+0x324>)
 8002d98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d9e:	4b63      	ldr	r3, [pc, #396]	@ (8002f2c <HAL_GPIO_Init+0x324>)
 8002da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002daa:	4a61      	ldr	r2, [pc, #388]	@ (8002f30 <HAL_GPIO_Init+0x328>)
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	089b      	lsrs	r3, r3, #2
 8002db0:	3302      	adds	r3, #2
 8002db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	220f      	movs	r2, #15
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a58      	ldr	r2, [pc, #352]	@ (8002f34 <HAL_GPIO_Init+0x32c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d037      	beq.n	8002e46 <HAL_GPIO_Init+0x23e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a57      	ldr	r2, [pc, #348]	@ (8002f38 <HAL_GPIO_Init+0x330>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d031      	beq.n	8002e42 <HAL_GPIO_Init+0x23a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a56      	ldr	r2, [pc, #344]	@ (8002f3c <HAL_GPIO_Init+0x334>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d02b      	beq.n	8002e3e <HAL_GPIO_Init+0x236>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a55      	ldr	r2, [pc, #340]	@ (8002f40 <HAL_GPIO_Init+0x338>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d025      	beq.n	8002e3a <HAL_GPIO_Init+0x232>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a54      	ldr	r2, [pc, #336]	@ (8002f44 <HAL_GPIO_Init+0x33c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d01f      	beq.n	8002e36 <HAL_GPIO_Init+0x22e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a53      	ldr	r2, [pc, #332]	@ (8002f48 <HAL_GPIO_Init+0x340>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d019      	beq.n	8002e32 <HAL_GPIO_Init+0x22a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a52      	ldr	r2, [pc, #328]	@ (8002f4c <HAL_GPIO_Init+0x344>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <HAL_GPIO_Init+0x226>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a51      	ldr	r2, [pc, #324]	@ (8002f50 <HAL_GPIO_Init+0x348>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00d      	beq.n	8002e2a <HAL_GPIO_Init+0x222>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a50      	ldr	r2, [pc, #320]	@ (8002f54 <HAL_GPIO_Init+0x34c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d007      	beq.n	8002e26 <HAL_GPIO_Init+0x21e>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a4f      	ldr	r2, [pc, #316]	@ (8002f58 <HAL_GPIO_Init+0x350>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d101      	bne.n	8002e22 <HAL_GPIO_Init+0x21a>
 8002e1e:	2309      	movs	r3, #9
 8002e20:	e012      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e22:	230a      	movs	r3, #10
 8002e24:	e010      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e26:	2308      	movs	r3, #8
 8002e28:	e00e      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e2a:	2307      	movs	r3, #7
 8002e2c:	e00c      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e2e:	2306      	movs	r3, #6
 8002e30:	e00a      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e32:	2305      	movs	r3, #5
 8002e34:	e008      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e36:	2304      	movs	r3, #4
 8002e38:	e006      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e004      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e002      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e46:	2300      	movs	r3, #0
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	f002 0203 	and.w	r2, r2, #3
 8002e4e:	0092      	lsls	r2, r2, #2
 8002e50:	4093      	lsls	r3, r2
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e58:	4935      	ldr	r1, [pc, #212]	@ (8002f30 <HAL_GPIO_Init+0x328>)
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	089b      	lsrs	r3, r3, #2
 8002e5e:	3302      	adds	r3, #2
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e66:	4b3d      	ldr	r3, [pc, #244]	@ (8002f5c <HAL_GPIO_Init+0x354>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e8a:	4a34      	ldr	r2, [pc, #208]	@ (8002f5c <HAL_GPIO_Init+0x354>)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e90:	4b32      	ldr	r3, [pc, #200]	@ (8002f5c <HAL_GPIO_Init+0x354>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eb4:	4a29      	ldr	r2, [pc, #164]	@ (8002f5c <HAL_GPIO_Init+0x354>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eba:	4b28      	ldr	r3, [pc, #160]	@ (8002f5c <HAL_GPIO_Init+0x354>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ede:	4a1f      	ldr	r2, [pc, #124]	@ (8002f5c <HAL_GPIO_Init+0x354>)
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f5c <HAL_GPIO_Init+0x354>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f08:	4a14      	ldr	r2, [pc, #80]	@ (8002f5c <HAL_GPIO_Init+0x354>)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	3301      	adds	r3, #1
 8002f12:	61fb      	str	r3, [r7, #28]
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	2b0f      	cmp	r3, #15
 8002f18:	f67f ae86 	bls.w	8002c28 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	3724      	adds	r7, #36	@ 0x24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	40013800 	.word	0x40013800
 8002f34:	40020000 	.word	0x40020000
 8002f38:	40020400 	.word	0x40020400
 8002f3c:	40020800 	.word	0x40020800
 8002f40:	40020c00 	.word	0x40020c00
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40021400 	.word	0x40021400
 8002f4c:	40021800 	.word	0x40021800
 8002f50:	40021c00 	.word	0x40021c00
 8002f54:	40022000 	.word	0x40022000
 8002f58:	40022400 	.word	0x40022400
 8002f5c:	40013c00 	.word	0x40013c00

08002f60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	887b      	ldrh	r3, [r7, #2]
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
 8002f7c:	e001      	b.n	8002f82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	807b      	strh	r3, [r7, #2]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fa0:	787b      	ldrb	r3, [r7, #1]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fa6:	887a      	ldrh	r2, [r7, #2]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002fac:	e003      	b.n	8002fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002fae:	887b      	ldrh	r3, [r7, #2]
 8002fb0:	041a      	lsls	r2, r3, #16
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	619a      	str	r2, [r3, #24]
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fc4:	b08f      	sub	sp, #60	@ 0x3c
 8002fc6:	af0a      	add	r7, sp, #40	@ 0x28
 8002fc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e116      	b.n	8003202 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7fd fd82 	bl	8000af8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d102      	bne.n	800300e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f002 fa24 	bl	8005460 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	603b      	str	r3, [r7, #0]
 800301e:	687e      	ldr	r6, [r7, #4]
 8003020:	466d      	mov	r5, sp
 8003022:	f106 0410 	add.w	r4, r6, #16
 8003026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003028:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800302a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800302c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800302e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003032:	e885 0003 	stmia.w	r5, {r0, r1}
 8003036:	1d33      	adds	r3, r6, #4
 8003038:	cb0e      	ldmia	r3, {r1, r2, r3}
 800303a:	6838      	ldr	r0, [r7, #0]
 800303c:	f002 f9b8 	bl	80053b0 <USB_CoreInit>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d005      	beq.n	8003052 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2202      	movs	r2, #2
 800304a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e0d7      	b.n	8003202 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2100      	movs	r1, #0
 8003058:	4618      	mov	r0, r3
 800305a:	f002 fa12 	bl	8005482 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800305e:	2300      	movs	r3, #0
 8003060:	73fb      	strb	r3, [r7, #15]
 8003062:	e04a      	b.n	80030fa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003064:	7bfa      	ldrb	r2, [r7, #15]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	333d      	adds	r3, #61	@ 0x3d
 8003074:	2201      	movs	r2, #1
 8003076:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003078:	7bfa      	ldrb	r2, [r7, #15]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	333c      	adds	r3, #60	@ 0x3c
 8003088:	7bfa      	ldrb	r2, [r7, #15]
 800308a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800308c:	7bfa      	ldrb	r2, [r7, #15]
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	b298      	uxth	r0, r3
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	3344      	adds	r3, #68	@ 0x44
 80030a0:	4602      	mov	r2, r0
 80030a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030a4:	7bfa      	ldrb	r2, [r7, #15]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	3340      	adds	r3, #64	@ 0x40
 80030b4:	2200      	movs	r2, #0
 80030b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030b8:	7bfa      	ldrb	r2, [r7, #15]
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	4413      	add	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	3348      	adds	r3, #72	@ 0x48
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030cc:	7bfa      	ldrb	r2, [r7, #15]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	4413      	add	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	334c      	adds	r3, #76	@ 0x4c
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030e0:	7bfa      	ldrb	r2, [r7, #15]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	3354      	adds	r3, #84	@ 0x54
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
 80030f6:	3301      	adds	r3, #1
 80030f8:	73fb      	strb	r3, [r7, #15]
 80030fa:	7bfa      	ldrb	r2, [r7, #15]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	429a      	cmp	r2, r3
 8003102:	d3af      	bcc.n	8003064 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003104:	2300      	movs	r3, #0
 8003106:	73fb      	strb	r3, [r7, #15]
 8003108:	e044      	b.n	8003194 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800310a:	7bfa      	ldrb	r2, [r7, #15]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4413      	add	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800311c:	2200      	movs	r2, #0
 800311e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003120:	7bfa      	ldrb	r2, [r7, #15]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003132:	7bfa      	ldrb	r2, [r7, #15]
 8003134:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003136:	7bfa      	ldrb	r2, [r7, #15]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003148:	2200      	movs	r2, #0
 800314a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003162:	7bfa      	ldrb	r2, [r7, #15]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003178:	7bfa      	ldrb	r2, [r7, #15]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	3301      	adds	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
 8003194:	7bfa      	ldrb	r2, [r7, #15]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	429a      	cmp	r2, r3
 800319c:	d3b5      	bcc.n	800310a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	687e      	ldr	r6, [r7, #4]
 80031a6:	466d      	mov	r5, sp
 80031a8:	f106 0410 	add.w	r4, r6, #16
 80031ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80031bc:	1d33      	adds	r3, r6, #4
 80031be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031c0:	6838      	ldr	r0, [r7, #0]
 80031c2:	f002 f9ab 	bl	800551c <USB_DevInit>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e014      	b.n	8003202 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d102      	bne.n	80031f6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f80b 	bl	800320c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f002 fb69 	bl	80058d2 <USB_DevDisconnect>

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800320c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800323a:	4b05      	ldr	r3, [pc, #20]	@ (8003250 <HAL_PCDEx_ActivateLPM+0x44>)
 800323c:	4313      	orrs	r3, r2
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	10000003 	.word	0x10000003

08003254 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003258:	4b05      	ldr	r3, [pc, #20]	@ (8003270 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a04      	ldr	r2, [pc, #16]	@ (8003270 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800325e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003262:	6013      	str	r3, [r2, #0]
}
 8003264:	bf00      	nop
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40007000 	.word	0x40007000

08003274 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800327a:	2300      	movs	r3, #0
 800327c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800327e:	4b23      	ldr	r3, [pc, #140]	@ (800330c <HAL_PWREx_EnableOverDrive+0x98>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003282:	4a22      	ldr	r2, [pc, #136]	@ (800330c <HAL_PWREx_EnableOverDrive+0x98>)
 8003284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003288:	6413      	str	r3, [r2, #64]	@ 0x40
 800328a:	4b20      	ldr	r3, [pc, #128]	@ (800330c <HAL_PWREx_EnableOverDrive+0x98>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003296:	4b1e      	ldr	r3, [pc, #120]	@ (8003310 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1d      	ldr	r2, [pc, #116]	@ (8003310 <HAL_PWREx_EnableOverDrive+0x9c>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032a2:	f7fe f989 	bl	80015b8 <HAL_GetTick>
 80032a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032a8:	e009      	b.n	80032be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032aa:	f7fe f985 	bl	80015b8 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032b8:	d901      	bls.n	80032be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e022      	b.n	8003304 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032be:	4b14      	ldr	r3, [pc, #80]	@ (8003310 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032ca:	d1ee      	bne.n	80032aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032cc:	4b10      	ldr	r3, [pc, #64]	@ (8003310 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003310 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032d8:	f7fe f96e 	bl	80015b8 <HAL_GetTick>
 80032dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032de:	e009      	b.n	80032f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032e0:	f7fe f96a 	bl	80015b8 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032ee:	d901      	bls.n	80032f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e007      	b.n	8003304 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032f4:	4b06      	ldr	r3, [pc, #24]	@ (8003310 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003300:	d1ee      	bne.n	80032e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40023800 	.word	0x40023800
 8003310:	40007000 	.word	0x40007000

08003314 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800331c:	2300      	movs	r3, #0
 800331e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e29b      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 8087 	beq.w	8003446 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003338:	4b96      	ldr	r3, [pc, #600]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 030c 	and.w	r3, r3, #12
 8003340:	2b04      	cmp	r3, #4
 8003342:	d00c      	beq.n	800335e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003344:	4b93      	ldr	r3, [pc, #588]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 030c 	and.w	r3, r3, #12
 800334c:	2b08      	cmp	r3, #8
 800334e:	d112      	bne.n	8003376 <HAL_RCC_OscConfig+0x62>
 8003350:	4b90      	ldr	r3, [pc, #576]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003358:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800335c:	d10b      	bne.n	8003376 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335e:	4b8d      	ldr	r3, [pc, #564]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d06c      	beq.n	8003444 <HAL_RCC_OscConfig+0x130>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d168      	bne.n	8003444 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e275      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x7a>
 8003380:	4b84      	ldr	r3, [pc, #528]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a83      	ldr	r2, [pc, #524]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	e02e      	b.n	80033ec <HAL_RCC_OscConfig+0xd8>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x9c>
 8003396:	4b7f      	ldr	r3, [pc, #508]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a7e      	ldr	r2, [pc, #504]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 800339c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	4b7c      	ldr	r3, [pc, #496]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a7b      	ldr	r2, [pc, #492]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	e01d      	b.n	80033ec <HAL_RCC_OscConfig+0xd8>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCC_OscConfig+0xc0>
 80033ba:	4b76      	ldr	r3, [pc, #472]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a75      	ldr	r2, [pc, #468]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	4b73      	ldr	r3, [pc, #460]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a72      	ldr	r2, [pc, #456]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	e00b      	b.n	80033ec <HAL_RCC_OscConfig+0xd8>
 80033d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	4b6c      	ldr	r3, [pc, #432]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a6b      	ldr	r2, [pc, #428]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d013      	beq.n	800341c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fe f8e0 	bl	80015b8 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033fc:	f7fe f8dc 	bl	80015b8 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b64      	cmp	r3, #100	@ 0x64
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e229      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340e:	4b61      	ldr	r3, [pc, #388]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0xe8>
 800341a:	e014      	b.n	8003446 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fe f8cc 	bl	80015b8 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003424:	f7fe f8c8 	bl	80015b8 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	@ 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e215      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003436:	4b57      	ldr	r3, [pc, #348]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x110>
 8003442:	e000      	b.n	8003446 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d069      	beq.n	8003526 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003452:	4b50      	ldr	r3, [pc, #320]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00b      	beq.n	8003476 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800345e:	4b4d      	ldr	r3, [pc, #308]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	2b08      	cmp	r3, #8
 8003468:	d11c      	bne.n	80034a4 <HAL_RCC_OscConfig+0x190>
 800346a:	4b4a      	ldr	r3, [pc, #296]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d116      	bne.n	80034a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003476:	4b47      	ldr	r3, [pc, #284]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d005      	beq.n	800348e <HAL_RCC_OscConfig+0x17a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d001      	beq.n	800348e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e1e9      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348e:	4b41      	ldr	r3, [pc, #260]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	493d      	ldr	r1, [pc, #244]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a2:	e040      	b.n	8003526 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d023      	beq.n	80034f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ac:	4b39      	ldr	r3, [pc, #228]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a38      	ldr	r2, [pc, #224]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7fe f87e 	bl	80015b8 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c0:	f7fe f87a 	bl	80015b8 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e1c7      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d2:	4b30      	ldr	r3, [pc, #192]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034de:	4b2d      	ldr	r3, [pc, #180]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4929      	ldr	r1, [pc, #164]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]
 80034f2:	e018      	b.n	8003526 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f4:	4b27      	ldr	r3, [pc, #156]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a26      	ldr	r2, [pc, #152]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80034fa:	f023 0301 	bic.w	r3, r3, #1
 80034fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fe f85a 	bl	80015b8 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003508:	f7fe f856 	bl	80015b8 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e1a3      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351a:	4b1e      	ldr	r3, [pc, #120]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d038      	beq.n	80035a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d019      	beq.n	800356e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353a:	4b16      	ldr	r3, [pc, #88]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 800353c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800353e:	4a15      	ldr	r2, [pc, #84]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003546:	f7fe f837 	bl	80015b8 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800354e:	f7fe f833 	bl	80015b8 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e180      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003560:	4b0c      	ldr	r3, [pc, #48]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x23a>
 800356c:	e01a      	b.n	80035a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800356e:	4b09      	ldr	r3, [pc, #36]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003572:	4a08      	ldr	r2, [pc, #32]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003574:	f023 0301 	bic.w	r3, r3, #1
 8003578:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357a:	f7fe f81d 	bl	80015b8 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003580:	e00a      	b.n	8003598 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003582:	f7fe f819 	bl	80015b8 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d903      	bls.n	8003598 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e166      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
 8003594:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003598:	4b92      	ldr	r3, [pc, #584]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 800359a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1ee      	bne.n	8003582 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 80a4 	beq.w	80036fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b2:	4b8c      	ldr	r3, [pc, #560]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10d      	bne.n	80035da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80035be:	4b89      	ldr	r3, [pc, #548]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c2:	4a88      	ldr	r2, [pc, #544]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80035c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ca:	4b86      	ldr	r3, [pc, #536]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d6:	2301      	movs	r3, #1
 80035d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035da:	4b83      	ldr	r3, [pc, #524]	@ (80037e8 <HAL_RCC_OscConfig+0x4d4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d118      	bne.n	8003618 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80035e6:	4b80      	ldr	r3, [pc, #512]	@ (80037e8 <HAL_RCC_OscConfig+0x4d4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a7f      	ldr	r2, [pc, #508]	@ (80037e8 <HAL_RCC_OscConfig+0x4d4>)
 80035ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f2:	f7fd ffe1 	bl	80015b8 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fa:	f7fd ffdd 	bl	80015b8 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b64      	cmp	r3, #100	@ 0x64
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e12a      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800360c:	4b76      	ldr	r3, [pc, #472]	@ (80037e8 <HAL_RCC_OscConfig+0x4d4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0f0      	beq.n	80035fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d106      	bne.n	800362e <HAL_RCC_OscConfig+0x31a>
 8003620:	4b70      	ldr	r3, [pc, #448]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003624:	4a6f      	ldr	r2, [pc, #444]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	6713      	str	r3, [r2, #112]	@ 0x70
 800362c:	e02d      	b.n	800368a <HAL_RCC_OscConfig+0x376>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10c      	bne.n	8003650 <HAL_RCC_OscConfig+0x33c>
 8003636:	4b6b      	ldr	r3, [pc, #428]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363a:	4a6a      	ldr	r2, [pc, #424]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 800363c:	f023 0301 	bic.w	r3, r3, #1
 8003640:	6713      	str	r3, [r2, #112]	@ 0x70
 8003642:	4b68      	ldr	r3, [pc, #416]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003646:	4a67      	ldr	r2, [pc, #412]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003648:	f023 0304 	bic.w	r3, r3, #4
 800364c:	6713      	str	r3, [r2, #112]	@ 0x70
 800364e:	e01c      	b.n	800368a <HAL_RCC_OscConfig+0x376>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2b05      	cmp	r3, #5
 8003656:	d10c      	bne.n	8003672 <HAL_RCC_OscConfig+0x35e>
 8003658:	4b62      	ldr	r3, [pc, #392]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 800365a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365c:	4a61      	ldr	r2, [pc, #388]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 800365e:	f043 0304 	orr.w	r3, r3, #4
 8003662:	6713      	str	r3, [r2, #112]	@ 0x70
 8003664:	4b5f      	ldr	r3, [pc, #380]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003668:	4a5e      	ldr	r2, [pc, #376]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003670:	e00b      	b.n	800368a <HAL_RCC_OscConfig+0x376>
 8003672:	4b5c      	ldr	r3, [pc, #368]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003676:	4a5b      	ldr	r2, [pc, #364]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003678:	f023 0301 	bic.w	r3, r3, #1
 800367c:	6713      	str	r3, [r2, #112]	@ 0x70
 800367e:	4b59      	ldr	r3, [pc, #356]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003682:	4a58      	ldr	r2, [pc, #352]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003684:	f023 0304 	bic.w	r3, r3, #4
 8003688:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d015      	beq.n	80036be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003692:	f7fd ff91 	bl	80015b8 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003698:	e00a      	b.n	80036b0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369a:	f7fd ff8d 	bl	80015b8 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e0d8      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b0:	4b4c      	ldr	r3, [pc, #304]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80036b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0ee      	beq.n	800369a <HAL_RCC_OscConfig+0x386>
 80036bc:	e014      	b.n	80036e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036be:	f7fd ff7b 	bl	80015b8 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c4:	e00a      	b.n	80036dc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c6:	f7fd ff77 	bl	80015b8 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e0c2      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036dc:	4b41      	ldr	r3, [pc, #260]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1ee      	bne.n	80036c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036e8:	7dfb      	ldrb	r3, [r7, #23]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d105      	bne.n	80036fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ee:	4b3d      	ldr	r3, [pc, #244]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f2:	4a3c      	ldr	r2, [pc, #240]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80036f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036f8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 80ae 	beq.w	8003860 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003704:	4b37      	ldr	r3, [pc, #220]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 030c 	and.w	r3, r3, #12
 800370c:	2b08      	cmp	r3, #8
 800370e:	d06d      	beq.n	80037ec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d14b      	bne.n	80037b0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003718:	4b32      	ldr	r3, [pc, #200]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a31      	ldr	r2, [pc, #196]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 800371e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003724:	f7fd ff48 	bl	80015b8 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372c:	f7fd ff44 	bl	80015b8 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e091      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373e:	4b29      	ldr	r3, [pc, #164]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69da      	ldr	r2, [r3, #28]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003758:	019b      	lsls	r3, r3, #6
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003760:	085b      	lsrs	r3, r3, #1
 8003762:	3b01      	subs	r3, #1
 8003764:	041b      	lsls	r3, r3, #16
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376c:	061b      	lsls	r3, r3, #24
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003774:	071b      	lsls	r3, r3, #28
 8003776:	491b      	ldr	r1, [pc, #108]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003778:	4313      	orrs	r3, r2
 800377a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800377c:	4b19      	ldr	r3, [pc, #100]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a18      	ldr	r2, [pc, #96]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 8003782:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003788:	f7fd ff16 	bl	80015b8 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003790:	f7fd ff12 	bl	80015b8 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e05f      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a2:	4b10      	ldr	r3, [pc, #64]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0f0      	beq.n	8003790 <HAL_RCC_OscConfig+0x47c>
 80037ae:	e057      	b.n	8003860 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b0:	4b0c      	ldr	r3, [pc, #48]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a0b      	ldr	r2, [pc, #44]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80037b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037bc:	f7fd fefc 	bl	80015b8 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c4:	f7fd fef8 	bl	80015b8 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e045      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d6:	4b03      	ldr	r3, [pc, #12]	@ (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f0      	bne.n	80037c4 <HAL_RCC_OscConfig+0x4b0>
 80037e2:	e03d      	b.n	8003860 <HAL_RCC_OscConfig+0x54c>
 80037e4:	40023800 	.word	0x40023800
 80037e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80037ec:	4b1f      	ldr	r3, [pc, #124]	@ (800386c <HAL_RCC_OscConfig+0x558>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d030      	beq.n	800385c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003804:	429a      	cmp	r2, r3
 8003806:	d129      	bne.n	800385c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003812:	429a      	cmp	r2, r3
 8003814:	d122      	bne.n	800385c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800381c:	4013      	ands	r3, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003822:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003824:	4293      	cmp	r3, r2
 8003826:	d119      	bne.n	800385c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003832:	085b      	lsrs	r3, r3, #1
 8003834:	3b01      	subs	r3, #1
 8003836:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003838:	429a      	cmp	r2, r3
 800383a:	d10f      	bne.n	800385c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003846:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003848:	429a      	cmp	r2, r3
 800384a:	d107      	bne.n	800385c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003856:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003858:	429a      	cmp	r2, r3
 800385a:	d001      	beq.n	8003860 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e000      	b.n	8003862 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40023800 	.word	0x40023800

08003870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0d0      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003888:	4b6a      	ldr	r3, [pc, #424]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 030f 	and.w	r3, r3, #15
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d910      	bls.n	80038b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003896:	4b67      	ldr	r3, [pc, #412]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f023 020f 	bic.w	r2, r3, #15
 800389e:	4965      	ldr	r1, [pc, #404]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a6:	4b63      	ldr	r3, [pc, #396]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0b8      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d020      	beq.n	8003906 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d0:	4b59      	ldr	r3, [pc, #356]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	4a58      	ldr	r2, [pc, #352]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 80038d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038e8:	4b53      	ldr	r3, [pc, #332]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4a52      	ldr	r2, [pc, #328]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 80038ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f4:	4b50      	ldr	r3, [pc, #320]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	494d      	ldr	r1, [pc, #308]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 8003902:	4313      	orrs	r3, r2
 8003904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d040      	beq.n	8003994 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d107      	bne.n	800392a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391a:	4b47      	ldr	r3, [pc, #284]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d115      	bne.n	8003952 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e07f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d107      	bne.n	8003942 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003932:	4b41      	ldr	r3, [pc, #260]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e073      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003942:	4b3d      	ldr	r3, [pc, #244]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e06b      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003952:	4b39      	ldr	r3, [pc, #228]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f023 0203 	bic.w	r2, r3, #3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	4936      	ldr	r1, [pc, #216]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 8003960:	4313      	orrs	r3, r2
 8003962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003964:	f7fd fe28 	bl	80015b8 <HAL_GetTick>
 8003968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396a:	e00a      	b.n	8003982 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800396c:	f7fd fe24 	bl	80015b8 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800397a:	4293      	cmp	r3, r2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e053      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003982:	4b2d      	ldr	r3, [pc, #180]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 020c 	and.w	r2, r3, #12
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	429a      	cmp	r2, r3
 8003992:	d1eb      	bne.n	800396c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003994:	4b27      	ldr	r3, [pc, #156]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 030f 	and.w	r3, r3, #15
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d210      	bcs.n	80039c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a2:	4b24      	ldr	r3, [pc, #144]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 020f 	bic.w	r2, r3, #15
 80039aa:	4922      	ldr	r1, [pc, #136]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b20      	ldr	r3, [pc, #128]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e032      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d0:	4b19      	ldr	r3, [pc, #100]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	4916      	ldr	r1, [pc, #88]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039ee:	4b12      	ldr	r3, [pc, #72]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	490e      	ldr	r1, [pc, #56]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a02:	f000 f821 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8003a06:	4602      	mov	r2, r0
 8003a08:	4b0b      	ldr	r3, [pc, #44]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	091b      	lsrs	r3, r3, #4
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	490a      	ldr	r1, [pc, #40]	@ (8003a3c <HAL_RCC_ClockConfig+0x1cc>)
 8003a14:	5ccb      	ldrb	r3, [r1, r3]
 8003a16:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1a:	4a09      	ldr	r2, [pc, #36]	@ (8003a40 <HAL_RCC_ClockConfig+0x1d0>)
 8003a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a1e:	4b09      	ldr	r3, [pc, #36]	@ (8003a44 <HAL_RCC_ClockConfig+0x1d4>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fd fd84 	bl	8001530 <HAL_InitTick>

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40023c00 	.word	0x40023c00
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	080144a0 	.word	0x080144a0
 8003a40:	20000000 	.word	0x20000000
 8003a44:	20000004 	.word	0x20000004

08003a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a4c:	b094      	sub	sp, #80	@ 0x50
 8003a4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a50:	2300      	movs	r3, #0
 8003a52:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a54:	2300      	movs	r3, #0
 8003a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a58:	2300      	movs	r3, #0
 8003a5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a60:	4b79      	ldr	r3, [pc, #484]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 030c 	and.w	r3, r3, #12
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d00d      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0x40>
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	f200 80e1 	bhi.w	8003c34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0x34>
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d003      	beq.n	8003a82 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a7a:	e0db      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a7c:	4b73      	ldr	r3, [pc, #460]	@ (8003c4c <HAL_RCC_GetSysClockFreq+0x204>)
 8003a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a80:	e0db      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a82:	4b73      	ldr	r3, [pc, #460]	@ (8003c50 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a86:	e0d8      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a88:	4b6f      	ldr	r3, [pc, #444]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a90:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a92:	4b6d      	ldr	r3, [pc, #436]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d063      	beq.n	8003b66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a9e:	4b6a      	ldr	r3, [pc, #424]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	099b      	lsrs	r3, r3, #6
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003aa8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ab6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003aba:	4622      	mov	r2, r4
 8003abc:	462b      	mov	r3, r5
 8003abe:	f04f 0000 	mov.w	r0, #0
 8003ac2:	f04f 0100 	mov.w	r1, #0
 8003ac6:	0159      	lsls	r1, r3, #5
 8003ac8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003acc:	0150      	lsls	r0, r2, #5
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	1a51      	subs	r1, r2, r1
 8003ad6:	6139      	str	r1, [r7, #16]
 8003ad8:	4629      	mov	r1, r5
 8003ada:	eb63 0301 	sbc.w	r3, r3, r1
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003aec:	4659      	mov	r1, fp
 8003aee:	018b      	lsls	r3, r1, #6
 8003af0:	4651      	mov	r1, sl
 8003af2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003af6:	4651      	mov	r1, sl
 8003af8:	018a      	lsls	r2, r1, #6
 8003afa:	4651      	mov	r1, sl
 8003afc:	ebb2 0801 	subs.w	r8, r2, r1
 8003b00:	4659      	mov	r1, fp
 8003b02:	eb63 0901 	sbc.w	r9, r3, r1
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b1a:	4690      	mov	r8, r2
 8003b1c:	4699      	mov	r9, r3
 8003b1e:	4623      	mov	r3, r4
 8003b20:	eb18 0303 	adds.w	r3, r8, r3
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	462b      	mov	r3, r5
 8003b28:	eb49 0303 	adc.w	r3, r9, r3
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b3a:	4629      	mov	r1, r5
 8003b3c:	024b      	lsls	r3, r1, #9
 8003b3e:	4621      	mov	r1, r4
 8003b40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b44:	4621      	mov	r1, r4
 8003b46:	024a      	lsls	r2, r1, #9
 8003b48:	4610      	mov	r0, r2
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b4e:	2200      	movs	r2, #0
 8003b50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b58:	f7fc fbda 	bl	8000310 <__aeabi_uldivmod>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4613      	mov	r3, r2
 8003b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b64:	e058      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b66:	4b38      	ldr	r3, [pc, #224]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	099b      	lsrs	r3, r3, #6
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	4611      	mov	r1, r2
 8003b72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b76:	623b      	str	r3, [r7, #32]
 8003b78:	2300      	movs	r3, #0
 8003b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b80:	4642      	mov	r2, r8
 8003b82:	464b      	mov	r3, r9
 8003b84:	f04f 0000 	mov.w	r0, #0
 8003b88:	f04f 0100 	mov.w	r1, #0
 8003b8c:	0159      	lsls	r1, r3, #5
 8003b8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b92:	0150      	lsls	r0, r2, #5
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4641      	mov	r1, r8
 8003b9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b9e:	4649      	mov	r1, r9
 8003ba0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bb8:	ebb2 040a 	subs.w	r4, r2, sl
 8003bbc:	eb63 050b 	sbc.w	r5, r3, fp
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	00eb      	lsls	r3, r5, #3
 8003bca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bce:	00e2      	lsls	r2, r4, #3
 8003bd0:	4614      	mov	r4, r2
 8003bd2:	461d      	mov	r5, r3
 8003bd4:	4643      	mov	r3, r8
 8003bd6:	18e3      	adds	r3, r4, r3
 8003bd8:	603b      	str	r3, [r7, #0]
 8003bda:	464b      	mov	r3, r9
 8003bdc:	eb45 0303 	adc.w	r3, r5, r3
 8003be0:	607b      	str	r3, [r7, #4]
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bee:	4629      	mov	r1, r5
 8003bf0:	028b      	lsls	r3, r1, #10
 8003bf2:	4621      	mov	r1, r4
 8003bf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	028a      	lsls	r2, r1, #10
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	4619      	mov	r1, r3
 8003c00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c02:	2200      	movs	r2, #0
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	61fa      	str	r2, [r7, #28]
 8003c08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c0c:	f7fc fb80 	bl	8000310 <__aeabi_uldivmod>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4613      	mov	r3, r2
 8003c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003c18:	4b0b      	ldr	r3, [pc, #44]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	0c1b      	lsrs	r3, r3, #16
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	3301      	adds	r3, #1
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003c28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c32:	e002      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c34:	4b05      	ldr	r3, [pc, #20]	@ (8003c4c <HAL_RCC_GetSysClockFreq+0x204>)
 8003c36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3750      	adds	r7, #80	@ 0x50
 8003c40:	46bd      	mov	sp, r7
 8003c42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c46:	bf00      	nop
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	00f42400 	.word	0x00f42400
 8003c50:	007a1200 	.word	0x007a1200

08003c54 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c58:	4b03      	ldr	r3, [pc, #12]	@ (8003c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20000000 	.word	0x20000000

08003c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c70:	f7ff fff0 	bl	8003c54 <HAL_RCC_GetHCLKFreq>
 8003c74:	4602      	mov	r2, r0
 8003c76:	4b05      	ldr	r3, [pc, #20]	@ (8003c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	0a9b      	lsrs	r3, r3, #10
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	4903      	ldr	r1, [pc, #12]	@ (8003c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c82:	5ccb      	ldrb	r3, [r1, r3]
 8003c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	080144b0 	.word	0x080144b0

08003c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c98:	f7ff ffdc 	bl	8003c54 <HAL_RCC_GetHCLKFreq>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	4b05      	ldr	r3, [pc, #20]	@ (8003cb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	0b5b      	lsrs	r3, r3, #13
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	4903      	ldr	r1, [pc, #12]	@ (8003cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003caa:	5ccb      	ldrb	r3, [r1, r3]
 8003cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	080144b0 	.word	0x080144b0

08003cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d012      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ce4:	4b69      	ldr	r3, [pc, #420]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	4a68      	ldr	r2, [pc, #416]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cea:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003cee:	6093      	str	r3, [r2, #8]
 8003cf0:	4b66      	ldr	r3, [pc, #408]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cf8:	4964      	ldr	r1, [pc, #400]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d06:	2301      	movs	r3, #1
 8003d08:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d017      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d16:	4b5d      	ldr	r3, [pc, #372]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d1c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d24:	4959      	ldr	r1, [pc, #356]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d34:	d101      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d36:	2301      	movs	r3, #1
 8003d38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d42:	2301      	movs	r3, #1
 8003d44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d017      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d52:	4b4e      	ldr	r3, [pc, #312]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d58:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d60:	494a      	ldr	r1, [pc, #296]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d70:	d101      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d72:	2301      	movs	r3, #1
 8003d74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0320 	and.w	r3, r3, #32
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 808b 	beq.w	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003da0:	4b3a      	ldr	r3, [pc, #232]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da4:	4a39      	ldr	r2, [pc, #228]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003daa:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dac:	4b37      	ldr	r3, [pc, #220]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003db8:	4b35      	ldr	r3, [pc, #212]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a34      	ldr	r2, [pc, #208]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dc4:	f7fd fbf8 	bl	80015b8 <HAL_GetTick>
 8003dc8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dcc:	f7fd fbf4 	bl	80015b8 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b64      	cmp	r3, #100	@ 0x64
 8003dd8:	d901      	bls.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e38f      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003dde:	4b2c      	ldr	r3, [pc, #176]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dea:	4b28      	ldr	r3, [pc, #160]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003df2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d035      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d02e      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e08:	4b20      	ldr	r3, [pc, #128]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e10:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e12:	4b1e      	ldr	r3, [pc, #120]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e16:	4a1d      	ldr	r2, [pc, #116]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e1c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e22:	4a1a      	ldr	r2, [pc, #104]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e28:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e2a:	4a18      	ldr	r2, [pc, #96]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e30:	4b16      	ldr	r3, [pc, #88]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d114      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fd fbbc 	bl	80015b8 <HAL_GetTick>
 8003e40:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e42:	e00a      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e44:	f7fd fbb8 	bl	80015b8 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e351      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0ee      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e72:	d111      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e74:	4b05      	ldr	r3, [pc, #20]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003e80:	4b04      	ldr	r3, [pc, #16]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e82:	400b      	ands	r3, r1
 8003e84:	4901      	ldr	r1, [pc, #4]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	608b      	str	r3, [r1, #8]
 8003e8a:	e00b      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	40007000 	.word	0x40007000
 8003e94:	0ffffcff 	.word	0x0ffffcff
 8003e98:	4bac      	ldr	r3, [pc, #688]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	4aab      	ldr	r2, [pc, #684]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e9e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003ea2:	6093      	str	r3, [r2, #8]
 8003ea4:	4ba9      	ldr	r3, [pc, #676]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb0:	49a6      	ldr	r1, [pc, #664]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0310 	and.w	r3, r3, #16
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d010      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ec2:	4ba2      	ldr	r3, [pc, #648]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ec8:	4aa0      	ldr	r2, [pc, #640]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ece:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003ed2:	4b9e      	ldr	r3, [pc, #632]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003edc:	499b      	ldr	r1, [pc, #620]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ef0:	4b96      	ldr	r3, [pc, #600]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003efe:	4993      	ldr	r1, [pc, #588]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f12:	4b8e      	ldr	r3, [pc, #568]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f18:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f20:	498a      	ldr	r1, [pc, #552]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00a      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f34:	4b85      	ldr	r3, [pc, #532]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f42:	4982      	ldr	r1, [pc, #520]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f56:	4b7d      	ldr	r3, [pc, #500]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f5c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f64:	4979      	ldr	r1, [pc, #484]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f78:	4b74      	ldr	r3, [pc, #464]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f7e:	f023 0203 	bic.w	r2, r3, #3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f86:	4971      	ldr	r1, [pc, #452]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f9a:	4b6c      	ldr	r3, [pc, #432]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fa0:	f023 020c 	bic.w	r2, r3, #12
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fa8:	4968      	ldr	r1, [pc, #416]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fbc:	4b63      	ldr	r3, [pc, #396]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fca:	4960      	ldr	r1, [pc, #384]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fde:	4b5b      	ldr	r3, [pc, #364]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fec:	4957      	ldr	r1, [pc, #348]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004000:	4b52      	ldr	r3, [pc, #328]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004006:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800400e:	494f      	ldr	r1, [pc, #316]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004022:	4b4a      	ldr	r3, [pc, #296]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004028:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004030:	4946      	ldr	r1, [pc, #280]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004044:	4b41      	ldr	r3, [pc, #260]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800404a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004052:	493e      	ldr	r1, [pc, #248]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004066:	4b39      	ldr	r3, [pc, #228]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800406c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004074:	4935      	ldr	r1, [pc, #212]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00a      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004088:	4b30      	ldr	r3, [pc, #192]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004096:	492d      	ldr	r1, [pc, #180]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d011      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80040aa:	4b28      	ldr	r3, [pc, #160]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040b8:	4924      	ldr	r1, [pc, #144]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040c8:	d101      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80040ca:	2301      	movs	r3, #1
 80040cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80040da:	2301      	movs	r3, #1
 80040dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040ea:	4b18      	ldr	r3, [pc, #96]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040f8:	4914      	ldr	r1, [pc, #80]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00b      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800410c:	4b0f      	ldr	r3, [pc, #60]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800410e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004112:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800411c:	490b      	ldr	r1, [pc, #44]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00f      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004130:	4b06      	ldr	r3, [pc, #24]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004136:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004140:	4902      	ldr	r1, [pc, #8]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004148:	e002      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800414a:	bf00      	nop
 800414c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00b      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800415c:	4b8a      	ldr	r3, [pc, #552]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800415e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004162:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800416c:	4986      	ldr	r1, [pc, #536]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00b      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004180:	4b81      	ldr	r3, [pc, #516]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004182:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004186:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004190:	497d      	ldr	r1, [pc, #500]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d006      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 80d6 	beq.w	8004358 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041ac:	4b76      	ldr	r3, [pc, #472]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a75      	ldr	r2, [pc, #468]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b8:	f7fd f9fe 	bl	80015b8 <HAL_GetTick>
 80041bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041c0:	f7fd f9fa 	bl	80015b8 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b64      	cmp	r3, #100	@ 0x64
 80041cc:	d901      	bls.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e195      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041d2:	4b6d      	ldr	r3, [pc, #436]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d021      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d11d      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041f2:	4b65      	ldr	r3, [pc, #404]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041f8:	0c1b      	lsrs	r3, r3, #16
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004200:	4b61      	ldr	r3, [pc, #388]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004202:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004206:	0e1b      	lsrs	r3, r3, #24
 8004208:	f003 030f 	and.w	r3, r3, #15
 800420c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	019a      	lsls	r2, r3, #6
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	041b      	lsls	r3, r3, #16
 8004218:	431a      	orrs	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	061b      	lsls	r3, r3, #24
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	071b      	lsls	r3, r3, #28
 8004226:	4958      	ldr	r1, [pc, #352]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004228:	4313      	orrs	r3, r2
 800422a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d004      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800423e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004242:	d00a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800424c:	2b00      	cmp	r3, #0
 800424e:	d02e      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004254:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004258:	d129      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800425a:	4b4b      	ldr	r3, [pc, #300]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800425c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004260:	0c1b      	lsrs	r3, r3, #16
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004268:	4b47      	ldr	r3, [pc, #284]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800426a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800426e:	0f1b      	lsrs	r3, r3, #28
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	019a      	lsls	r2, r3, #6
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	041b      	lsls	r3, r3, #16
 8004280:	431a      	orrs	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	061b      	lsls	r3, r3, #24
 8004288:	431a      	orrs	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	071b      	lsls	r3, r3, #28
 800428e:	493e      	ldr	r1, [pc, #248]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004296:	4b3c      	ldr	r3, [pc, #240]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004298:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800429c:	f023 021f 	bic.w	r2, r3, #31
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	3b01      	subs	r3, #1
 80042a6:	4938      	ldr	r1, [pc, #224]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d01d      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042ba:	4b33      	ldr	r3, [pc, #204]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042c0:	0e1b      	lsrs	r3, r3, #24
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042ce:	0f1b      	lsrs	r3, r3, #28
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	019a      	lsls	r2, r3, #6
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	041b      	lsls	r3, r3, #16
 80042e2:	431a      	orrs	r2, r3
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	061b      	lsls	r3, r3, #24
 80042e8:	431a      	orrs	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	071b      	lsls	r3, r3, #28
 80042ee:	4926      	ldr	r1, [pc, #152]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d011      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	019a      	lsls	r2, r3, #6
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	041b      	lsls	r3, r3, #16
 800430e:	431a      	orrs	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	061b      	lsls	r3, r3, #24
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	071b      	lsls	r3, r3, #28
 800431e:	491a      	ldr	r1, [pc, #104]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004326:	4b18      	ldr	r3, [pc, #96]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a17      	ldr	r2, [pc, #92]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800432c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004330:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004332:	f7fd f941 	bl	80015b8 <HAL_GetTick>
 8004336:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004338:	e008      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800433a:	f7fd f93d 	bl	80015b8 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b64      	cmp	r3, #100	@ 0x64
 8004346:	d901      	bls.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e0d8      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800434c:	4b0e      	ldr	r3, [pc, #56]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0f0      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	2b01      	cmp	r3, #1
 800435c:	f040 80ce 	bne.w	80044fc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004360:	4b09      	ldr	r3, [pc, #36]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a08      	ldr	r2, [pc, #32]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004366:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800436a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800436c:	f7fd f924 	bl	80015b8 <HAL_GetTick>
 8004370:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004372:	e00b      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004374:	f7fd f920 	bl	80015b8 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b64      	cmp	r3, #100	@ 0x64
 8004380:	d904      	bls.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e0bb      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004386:	bf00      	nop
 8004388:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800438c:	4b5e      	ldr	r3, [pc, #376]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004394:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004398:	d0ec      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d009      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d02e      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d12a      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043c2:	4b51      	ldr	r3, [pc, #324]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c8:	0c1b      	lsrs	r3, r3, #16
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d6:	0f1b      	lsrs	r3, r3, #28
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	019a      	lsls	r2, r3, #6
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	041b      	lsls	r3, r3, #16
 80043e8:	431a      	orrs	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	061b      	lsls	r3, r3, #24
 80043f0:	431a      	orrs	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	071b      	lsls	r3, r3, #28
 80043f6:	4944      	ldr	r1, [pc, #272]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80043fe:	4b42      	ldr	r3, [pc, #264]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004400:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004404:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800440c:	3b01      	subs	r3, #1
 800440e:	021b      	lsls	r3, r3, #8
 8004410:	493d      	ldr	r1, [pc, #244]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d022      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004428:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800442c:	d11d      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800442e:	4b36      	ldr	r3, [pc, #216]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004434:	0e1b      	lsrs	r3, r3, #24
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800443c:	4b32      	ldr	r3, [pc, #200]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800443e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004442:	0f1b      	lsrs	r3, r3, #28
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	019a      	lsls	r2, r3, #6
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	041b      	lsls	r3, r3, #16
 8004456:	431a      	orrs	r2, r3
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	061b      	lsls	r3, r3, #24
 800445c:	431a      	orrs	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	071b      	lsls	r3, r3, #28
 8004462:	4929      	ldr	r1, [pc, #164]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	2b00      	cmp	r3, #0
 8004474:	d028      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004476:	4b24      	ldr	r3, [pc, #144]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800447c:	0e1b      	lsrs	r3, r3, #24
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004484:	4b20      	ldr	r3, [pc, #128]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800448a:	0c1b      	lsrs	r3, r3, #16
 800448c:	f003 0303 	and.w	r3, r3, #3
 8004490:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	019a      	lsls	r2, r3, #6
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	041b      	lsls	r3, r3, #16
 800449c:	431a      	orrs	r2, r3
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	061b      	lsls	r3, r3, #24
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	071b      	lsls	r3, r3, #28
 80044aa:	4917      	ldr	r1, [pc, #92]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80044b2:	4b15      	ldr	r3, [pc, #84]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c0:	4911      	ldr	r1, [pc, #68]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a0e      	ldr	r2, [pc, #56]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d4:	f7fd f870 	bl	80015b8 <HAL_GetTick>
 80044d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044dc:	f7fd f86c 	bl	80015b8 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b64      	cmp	r3, #100	@ 0x64
 80044e8:	d901      	bls.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e007      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044ee:	4b06      	ldr	r3, [pc, #24]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044fa:	d1ef      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3720      	adds	r7, #32
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	40023800 	.word	0x40023800

0800450c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e049      	b.n	80045b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d106      	bne.n	8004538 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7fc fa62 	bl	80009fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3304      	adds	r3, #4
 8004548:	4619      	mov	r1, r3
 800454a:	4610      	mov	r0, r2
 800454c:	f000 f900 	bl	8004750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d101      	bne.n	80045d8 <HAL_TIM_ConfigClockSource+0x1c>
 80045d4:	2302      	movs	r3, #2
 80045d6:	e0b4      	b.n	8004742 <HAL_TIM_ConfigClockSource+0x186>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	4b56      	ldr	r3, [pc, #344]	@ (800474c <HAL_TIM_ConfigClockSource+0x190>)
 80045f4:	4013      	ands	r3, r2
 80045f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004610:	d03e      	beq.n	8004690 <HAL_TIM_ConfigClockSource+0xd4>
 8004612:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004616:	f200 8087 	bhi.w	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 800461a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800461e:	f000 8086 	beq.w	800472e <HAL_TIM_ConfigClockSource+0x172>
 8004622:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004626:	d87f      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004628:	2b70      	cmp	r3, #112	@ 0x70
 800462a:	d01a      	beq.n	8004662 <HAL_TIM_ConfigClockSource+0xa6>
 800462c:	2b70      	cmp	r3, #112	@ 0x70
 800462e:	d87b      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004630:	2b60      	cmp	r3, #96	@ 0x60
 8004632:	d050      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x11a>
 8004634:	2b60      	cmp	r3, #96	@ 0x60
 8004636:	d877      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004638:	2b50      	cmp	r3, #80	@ 0x50
 800463a:	d03c      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0xfa>
 800463c:	2b50      	cmp	r3, #80	@ 0x50
 800463e:	d873      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004640:	2b40      	cmp	r3, #64	@ 0x40
 8004642:	d058      	beq.n	80046f6 <HAL_TIM_ConfigClockSource+0x13a>
 8004644:	2b40      	cmp	r3, #64	@ 0x40
 8004646:	d86f      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004648:	2b30      	cmp	r3, #48	@ 0x30
 800464a:	d064      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x15a>
 800464c:	2b30      	cmp	r3, #48	@ 0x30
 800464e:	d86b      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004650:	2b20      	cmp	r3, #32
 8004652:	d060      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x15a>
 8004654:	2b20      	cmp	r3, #32
 8004656:	d867      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004658:	2b00      	cmp	r3, #0
 800465a:	d05c      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x15a>
 800465c:	2b10      	cmp	r3, #16
 800465e:	d05a      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x15a>
 8004660:	e062      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004672:	f000 f987 	bl	8004984 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004684:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	609a      	str	r2, [r3, #8]
      break;
 800468e:	e04f      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046a0:	f000 f970 	bl	8004984 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046b2:	609a      	str	r2, [r3, #8]
      break;
 80046b4:	e03c      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046c2:	461a      	mov	r2, r3
 80046c4:	f000 f8e4 	bl	8004890 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2150      	movs	r1, #80	@ 0x50
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 f93d 	bl	800494e <TIM_ITRx_SetConfig>
      break;
 80046d4:	e02c      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046e2:	461a      	mov	r2, r3
 80046e4:	f000 f903 	bl	80048ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2160      	movs	r1, #96	@ 0x60
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 f92d 	bl	800494e <TIM_ITRx_SetConfig>
      break;
 80046f4:	e01c      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004702:	461a      	mov	r2, r3
 8004704:	f000 f8c4 	bl	8004890 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2140      	movs	r1, #64	@ 0x40
 800470e:	4618      	mov	r0, r3
 8004710:	f000 f91d 	bl	800494e <TIM_ITRx_SetConfig>
      break;
 8004714:	e00c      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4619      	mov	r1, r3
 8004720:	4610      	mov	r0, r2
 8004722:	f000 f914 	bl	800494e <TIM_ITRx_SetConfig>
      break;
 8004726:	e003      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	73fb      	strb	r3, [r7, #15]
      break;
 800472c:	e000      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800472e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004740:	7bfb      	ldrb	r3, [r7, #15]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	fffeff88 	.word	0xfffeff88

08004750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a40      	ldr	r2, [pc, #256]	@ (8004864 <TIM_Base_SetConfig+0x114>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d013      	beq.n	8004790 <TIM_Base_SetConfig+0x40>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800476e:	d00f      	beq.n	8004790 <TIM_Base_SetConfig+0x40>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a3d      	ldr	r2, [pc, #244]	@ (8004868 <TIM_Base_SetConfig+0x118>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d00b      	beq.n	8004790 <TIM_Base_SetConfig+0x40>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a3c      	ldr	r2, [pc, #240]	@ (800486c <TIM_Base_SetConfig+0x11c>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d007      	beq.n	8004790 <TIM_Base_SetConfig+0x40>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a3b      	ldr	r2, [pc, #236]	@ (8004870 <TIM_Base_SetConfig+0x120>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d003      	beq.n	8004790 <TIM_Base_SetConfig+0x40>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a3a      	ldr	r2, [pc, #232]	@ (8004874 <TIM_Base_SetConfig+0x124>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d108      	bne.n	80047a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a2f      	ldr	r2, [pc, #188]	@ (8004864 <TIM_Base_SetConfig+0x114>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d02b      	beq.n	8004802 <TIM_Base_SetConfig+0xb2>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047b0:	d027      	beq.n	8004802 <TIM_Base_SetConfig+0xb2>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004868 <TIM_Base_SetConfig+0x118>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d023      	beq.n	8004802 <TIM_Base_SetConfig+0xb2>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a2b      	ldr	r2, [pc, #172]	@ (800486c <TIM_Base_SetConfig+0x11c>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d01f      	beq.n	8004802 <TIM_Base_SetConfig+0xb2>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a2a      	ldr	r2, [pc, #168]	@ (8004870 <TIM_Base_SetConfig+0x120>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d01b      	beq.n	8004802 <TIM_Base_SetConfig+0xb2>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a29      	ldr	r2, [pc, #164]	@ (8004874 <TIM_Base_SetConfig+0x124>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d017      	beq.n	8004802 <TIM_Base_SetConfig+0xb2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a28      	ldr	r2, [pc, #160]	@ (8004878 <TIM_Base_SetConfig+0x128>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d013      	beq.n	8004802 <TIM_Base_SetConfig+0xb2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a27      	ldr	r2, [pc, #156]	@ (800487c <TIM_Base_SetConfig+0x12c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00f      	beq.n	8004802 <TIM_Base_SetConfig+0xb2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a26      	ldr	r2, [pc, #152]	@ (8004880 <TIM_Base_SetConfig+0x130>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d00b      	beq.n	8004802 <TIM_Base_SetConfig+0xb2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a25      	ldr	r2, [pc, #148]	@ (8004884 <TIM_Base_SetConfig+0x134>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d007      	beq.n	8004802 <TIM_Base_SetConfig+0xb2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a24      	ldr	r2, [pc, #144]	@ (8004888 <TIM_Base_SetConfig+0x138>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d003      	beq.n	8004802 <TIM_Base_SetConfig+0xb2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a23      	ldr	r2, [pc, #140]	@ (800488c <TIM_Base_SetConfig+0x13c>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d108      	bne.n	8004814 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a0a      	ldr	r2, [pc, #40]	@ (8004864 <TIM_Base_SetConfig+0x114>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d003      	beq.n	8004848 <TIM_Base_SetConfig+0xf8>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a0c      	ldr	r2, [pc, #48]	@ (8004874 <TIM_Base_SetConfig+0x124>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d103      	bne.n	8004850 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	615a      	str	r2, [r3, #20]
}
 8004856:	bf00      	nop
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	40010000 	.word	0x40010000
 8004868:	40000400 	.word	0x40000400
 800486c:	40000800 	.word	0x40000800
 8004870:	40000c00 	.word	0x40000c00
 8004874:	40010400 	.word	0x40010400
 8004878:	40014000 	.word	0x40014000
 800487c:	40014400 	.word	0x40014400
 8004880:	40014800 	.word	0x40014800
 8004884:	40001800 	.word	0x40001800
 8004888:	40001c00 	.word	0x40001c00
 800488c:	40002000 	.word	0x40002000

08004890 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	f023 0201 	bic.w	r2, r3, #1
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	011b      	lsls	r3, r3, #4
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f023 030a 	bic.w	r3, r3, #10
 80048cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	621a      	str	r2, [r3, #32]
}
 80048e2:	bf00      	nop
 80048e4:	371c      	adds	r7, #28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b087      	sub	sp, #28
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	60f8      	str	r0, [r7, #12]
 80048f6:	60b9      	str	r1, [r7, #8]
 80048f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	f023 0210 	bic.w	r2, r3, #16
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004918:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	031b      	lsls	r3, r3, #12
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	4313      	orrs	r3, r2
 8004922:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800492a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	011b      	lsls	r3, r3, #4
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	4313      	orrs	r3, r2
 8004934:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	621a      	str	r2, [r3, #32]
}
 8004942:	bf00      	nop
 8004944:	371c      	adds	r7, #28
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004964:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	f043 0307 	orr.w	r3, r3, #7
 8004970:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	609a      	str	r2, [r3, #8]
}
 8004978:	bf00      	nop
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004984:	b480      	push	{r7}
 8004986:	b087      	sub	sp, #28
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
 8004990:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800499e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	021a      	lsls	r2, r3, #8
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	609a      	str	r2, [r3, #8]
}
 80049b8:	bf00      	nop
 80049ba:	371c      	adds	r7, #28
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049d8:	2302      	movs	r3, #2
 80049da:	e06d      	b.n	8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a30      	ldr	r2, [pc, #192]	@ (8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d004      	beq.n	8004a10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a2f      	ldr	r2, [pc, #188]	@ (8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d108      	bne.n	8004a22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004a16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a20      	ldr	r2, [pc, #128]	@ (8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d022      	beq.n	8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a4e:	d01d      	beq.n	8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a1d      	ldr	r2, [pc, #116]	@ (8004acc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d018      	beq.n	8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d013      	beq.n	8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a1a      	ldr	r2, [pc, #104]	@ (8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d00e      	beq.n	8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a15      	ldr	r2, [pc, #84]	@ (8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d009      	beq.n	8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a16      	ldr	r2, [pc, #88]	@ (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d004      	beq.n	8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a15      	ldr	r2, [pc, #84]	@ (8004adc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d10c      	bne.n	8004aa6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	40010000 	.word	0x40010000
 8004ac8:	40010400 	.word	0x40010400
 8004acc:	40000400 	.word	0x40000400
 8004ad0:	40000800 	.word	0x40000800
 8004ad4:	40000c00 	.word	0x40000c00
 8004ad8:	40014000 	.word	0x40014000
 8004adc:	40001800 	.word	0x40001800

08004ae0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e040      	b.n	8004b74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d106      	bne.n	8004b08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7fb ff98 	bl	8000a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2224      	movs	r2, #36	@ 0x24
 8004b0c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0201 	bic.w	r2, r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f82c 	bl	8004b7c <UART_SetConfig>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d101      	bne.n	8004b2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e022      	b.n	8004b74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fa84 	bl	8005044 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0201 	orr.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fb0b 	bl	8005188 <UART_CheckIdleState>
 8004b72:	4603      	mov	r3, r0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b088      	sub	sp, #32
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	431a      	orrs	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	4ba6      	ldr	r3, [pc, #664]	@ (8004e40 <UART_SetConfig+0x2c4>)
 8004ba8:	4013      	ands	r3, r2
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6812      	ldr	r2, [r2, #0]
 8004bae:	6979      	ldr	r1, [r7, #20]
 8004bb0:	430b      	orrs	r3, r1
 8004bb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a94      	ldr	r2, [pc, #592]	@ (8004e44 <UART_SetConfig+0x2c8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d120      	bne.n	8004c3a <UART_SetConfig+0xbe>
 8004bf8:	4b93      	ldr	r3, [pc, #588]	@ (8004e48 <UART_SetConfig+0x2cc>)
 8004bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	d816      	bhi.n	8004c34 <UART_SetConfig+0xb8>
 8004c06:	a201      	add	r2, pc, #4	@ (adr r2, 8004c0c <UART_SetConfig+0x90>)
 8004c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0c:	08004c1d 	.word	0x08004c1d
 8004c10:	08004c29 	.word	0x08004c29
 8004c14:	08004c23 	.word	0x08004c23
 8004c18:	08004c2f 	.word	0x08004c2f
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	77fb      	strb	r3, [r7, #31]
 8004c20:	e150      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004c22:	2302      	movs	r3, #2
 8004c24:	77fb      	strb	r3, [r7, #31]
 8004c26:	e14d      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004c28:	2304      	movs	r3, #4
 8004c2a:	77fb      	strb	r3, [r7, #31]
 8004c2c:	e14a      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004c2e:	2308      	movs	r3, #8
 8004c30:	77fb      	strb	r3, [r7, #31]
 8004c32:	e147      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004c34:	2310      	movs	r3, #16
 8004c36:	77fb      	strb	r3, [r7, #31]
 8004c38:	e144      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a83      	ldr	r2, [pc, #524]	@ (8004e4c <UART_SetConfig+0x2d0>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d132      	bne.n	8004caa <UART_SetConfig+0x12e>
 8004c44:	4b80      	ldr	r3, [pc, #512]	@ (8004e48 <UART_SetConfig+0x2cc>)
 8004c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c4a:	f003 030c 	and.w	r3, r3, #12
 8004c4e:	2b0c      	cmp	r3, #12
 8004c50:	d828      	bhi.n	8004ca4 <UART_SetConfig+0x128>
 8004c52:	a201      	add	r2, pc, #4	@ (adr r2, 8004c58 <UART_SetConfig+0xdc>)
 8004c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c58:	08004c8d 	.word	0x08004c8d
 8004c5c:	08004ca5 	.word	0x08004ca5
 8004c60:	08004ca5 	.word	0x08004ca5
 8004c64:	08004ca5 	.word	0x08004ca5
 8004c68:	08004c99 	.word	0x08004c99
 8004c6c:	08004ca5 	.word	0x08004ca5
 8004c70:	08004ca5 	.word	0x08004ca5
 8004c74:	08004ca5 	.word	0x08004ca5
 8004c78:	08004c93 	.word	0x08004c93
 8004c7c:	08004ca5 	.word	0x08004ca5
 8004c80:	08004ca5 	.word	0x08004ca5
 8004c84:	08004ca5 	.word	0x08004ca5
 8004c88:	08004c9f 	.word	0x08004c9f
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	77fb      	strb	r3, [r7, #31]
 8004c90:	e118      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004c92:	2302      	movs	r3, #2
 8004c94:	77fb      	strb	r3, [r7, #31]
 8004c96:	e115      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004c98:	2304      	movs	r3, #4
 8004c9a:	77fb      	strb	r3, [r7, #31]
 8004c9c:	e112      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004c9e:	2308      	movs	r3, #8
 8004ca0:	77fb      	strb	r3, [r7, #31]
 8004ca2:	e10f      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	77fb      	strb	r3, [r7, #31]
 8004ca8:	e10c      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a68      	ldr	r2, [pc, #416]	@ (8004e50 <UART_SetConfig+0x2d4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d120      	bne.n	8004cf6 <UART_SetConfig+0x17a>
 8004cb4:	4b64      	ldr	r3, [pc, #400]	@ (8004e48 <UART_SetConfig+0x2cc>)
 8004cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004cbe:	2b30      	cmp	r3, #48	@ 0x30
 8004cc0:	d013      	beq.n	8004cea <UART_SetConfig+0x16e>
 8004cc2:	2b30      	cmp	r3, #48	@ 0x30
 8004cc4:	d814      	bhi.n	8004cf0 <UART_SetConfig+0x174>
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	d009      	beq.n	8004cde <UART_SetConfig+0x162>
 8004cca:	2b20      	cmp	r3, #32
 8004ccc:	d810      	bhi.n	8004cf0 <UART_SetConfig+0x174>
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <UART_SetConfig+0x15c>
 8004cd2:	2b10      	cmp	r3, #16
 8004cd4:	d006      	beq.n	8004ce4 <UART_SetConfig+0x168>
 8004cd6:	e00b      	b.n	8004cf0 <UART_SetConfig+0x174>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	77fb      	strb	r3, [r7, #31]
 8004cdc:	e0f2      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	77fb      	strb	r3, [r7, #31]
 8004ce2:	e0ef      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004ce4:	2304      	movs	r3, #4
 8004ce6:	77fb      	strb	r3, [r7, #31]
 8004ce8:	e0ec      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004cea:	2308      	movs	r3, #8
 8004cec:	77fb      	strb	r3, [r7, #31]
 8004cee:	e0e9      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004cf0:	2310      	movs	r3, #16
 8004cf2:	77fb      	strb	r3, [r7, #31]
 8004cf4:	e0e6      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a56      	ldr	r2, [pc, #344]	@ (8004e54 <UART_SetConfig+0x2d8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d120      	bne.n	8004d42 <UART_SetConfig+0x1c6>
 8004d00:	4b51      	ldr	r3, [pc, #324]	@ (8004e48 <UART_SetConfig+0x2cc>)
 8004d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d06:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004d0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d0c:	d013      	beq.n	8004d36 <UART_SetConfig+0x1ba>
 8004d0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d10:	d814      	bhi.n	8004d3c <UART_SetConfig+0x1c0>
 8004d12:	2b80      	cmp	r3, #128	@ 0x80
 8004d14:	d009      	beq.n	8004d2a <UART_SetConfig+0x1ae>
 8004d16:	2b80      	cmp	r3, #128	@ 0x80
 8004d18:	d810      	bhi.n	8004d3c <UART_SetConfig+0x1c0>
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <UART_SetConfig+0x1a8>
 8004d1e:	2b40      	cmp	r3, #64	@ 0x40
 8004d20:	d006      	beq.n	8004d30 <UART_SetConfig+0x1b4>
 8004d22:	e00b      	b.n	8004d3c <UART_SetConfig+0x1c0>
 8004d24:	2300      	movs	r3, #0
 8004d26:	77fb      	strb	r3, [r7, #31]
 8004d28:	e0cc      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	77fb      	strb	r3, [r7, #31]
 8004d2e:	e0c9      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004d30:	2304      	movs	r3, #4
 8004d32:	77fb      	strb	r3, [r7, #31]
 8004d34:	e0c6      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004d36:	2308      	movs	r3, #8
 8004d38:	77fb      	strb	r3, [r7, #31]
 8004d3a:	e0c3      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004d3c:	2310      	movs	r3, #16
 8004d3e:	77fb      	strb	r3, [r7, #31]
 8004d40:	e0c0      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a44      	ldr	r2, [pc, #272]	@ (8004e58 <UART_SetConfig+0x2dc>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d125      	bne.n	8004d98 <UART_SetConfig+0x21c>
 8004d4c:	4b3e      	ldr	r3, [pc, #248]	@ (8004e48 <UART_SetConfig+0x2cc>)
 8004d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d5a:	d017      	beq.n	8004d8c <UART_SetConfig+0x210>
 8004d5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d60:	d817      	bhi.n	8004d92 <UART_SetConfig+0x216>
 8004d62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d66:	d00b      	beq.n	8004d80 <UART_SetConfig+0x204>
 8004d68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d6c:	d811      	bhi.n	8004d92 <UART_SetConfig+0x216>
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <UART_SetConfig+0x1fe>
 8004d72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d76:	d006      	beq.n	8004d86 <UART_SetConfig+0x20a>
 8004d78:	e00b      	b.n	8004d92 <UART_SetConfig+0x216>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	77fb      	strb	r3, [r7, #31]
 8004d7e:	e0a1      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004d80:	2302      	movs	r3, #2
 8004d82:	77fb      	strb	r3, [r7, #31]
 8004d84:	e09e      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004d86:	2304      	movs	r3, #4
 8004d88:	77fb      	strb	r3, [r7, #31]
 8004d8a:	e09b      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004d8c:	2308      	movs	r3, #8
 8004d8e:	77fb      	strb	r3, [r7, #31]
 8004d90:	e098      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004d92:	2310      	movs	r3, #16
 8004d94:	77fb      	strb	r3, [r7, #31]
 8004d96:	e095      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a2f      	ldr	r2, [pc, #188]	@ (8004e5c <UART_SetConfig+0x2e0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d125      	bne.n	8004dee <UART_SetConfig+0x272>
 8004da2:	4b29      	ldr	r3, [pc, #164]	@ (8004e48 <UART_SetConfig+0x2cc>)
 8004da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004dac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004db0:	d017      	beq.n	8004de2 <UART_SetConfig+0x266>
 8004db2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004db6:	d817      	bhi.n	8004de8 <UART_SetConfig+0x26c>
 8004db8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dbc:	d00b      	beq.n	8004dd6 <UART_SetConfig+0x25a>
 8004dbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dc2:	d811      	bhi.n	8004de8 <UART_SetConfig+0x26c>
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <UART_SetConfig+0x254>
 8004dc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dcc:	d006      	beq.n	8004ddc <UART_SetConfig+0x260>
 8004dce:	e00b      	b.n	8004de8 <UART_SetConfig+0x26c>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	77fb      	strb	r3, [r7, #31]
 8004dd4:	e076      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	77fb      	strb	r3, [r7, #31]
 8004dda:	e073      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004ddc:	2304      	movs	r3, #4
 8004dde:	77fb      	strb	r3, [r7, #31]
 8004de0:	e070      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004de2:	2308      	movs	r3, #8
 8004de4:	77fb      	strb	r3, [r7, #31]
 8004de6:	e06d      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004de8:	2310      	movs	r3, #16
 8004dea:	77fb      	strb	r3, [r7, #31]
 8004dec:	e06a      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a1b      	ldr	r2, [pc, #108]	@ (8004e60 <UART_SetConfig+0x2e4>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d138      	bne.n	8004e6a <UART_SetConfig+0x2ee>
 8004df8:	4b13      	ldr	r3, [pc, #76]	@ (8004e48 <UART_SetConfig+0x2cc>)
 8004dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dfe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004e02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e06:	d017      	beq.n	8004e38 <UART_SetConfig+0x2bc>
 8004e08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e0c:	d82a      	bhi.n	8004e64 <UART_SetConfig+0x2e8>
 8004e0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e12:	d00b      	beq.n	8004e2c <UART_SetConfig+0x2b0>
 8004e14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e18:	d824      	bhi.n	8004e64 <UART_SetConfig+0x2e8>
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <UART_SetConfig+0x2aa>
 8004e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e22:	d006      	beq.n	8004e32 <UART_SetConfig+0x2b6>
 8004e24:	e01e      	b.n	8004e64 <UART_SetConfig+0x2e8>
 8004e26:	2300      	movs	r3, #0
 8004e28:	77fb      	strb	r3, [r7, #31]
 8004e2a:	e04b      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	77fb      	strb	r3, [r7, #31]
 8004e30:	e048      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004e32:	2304      	movs	r3, #4
 8004e34:	77fb      	strb	r3, [r7, #31]
 8004e36:	e045      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004e38:	2308      	movs	r3, #8
 8004e3a:	77fb      	strb	r3, [r7, #31]
 8004e3c:	e042      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004e3e:	bf00      	nop
 8004e40:	efff69f3 	.word	0xefff69f3
 8004e44:	40011000 	.word	0x40011000
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	40004400 	.word	0x40004400
 8004e50:	40004800 	.word	0x40004800
 8004e54:	40004c00 	.word	0x40004c00
 8004e58:	40005000 	.word	0x40005000
 8004e5c:	40011400 	.word	0x40011400
 8004e60:	40007800 	.word	0x40007800
 8004e64:	2310      	movs	r3, #16
 8004e66:	77fb      	strb	r3, [r7, #31]
 8004e68:	e02c      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a72      	ldr	r2, [pc, #456]	@ (8005038 <UART_SetConfig+0x4bc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d125      	bne.n	8004ec0 <UART_SetConfig+0x344>
 8004e74:	4b71      	ldr	r3, [pc, #452]	@ (800503c <UART_SetConfig+0x4c0>)
 8004e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e7a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004e7e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004e82:	d017      	beq.n	8004eb4 <UART_SetConfig+0x338>
 8004e84:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004e88:	d817      	bhi.n	8004eba <UART_SetConfig+0x33e>
 8004e8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e8e:	d00b      	beq.n	8004ea8 <UART_SetConfig+0x32c>
 8004e90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e94:	d811      	bhi.n	8004eba <UART_SetConfig+0x33e>
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <UART_SetConfig+0x326>
 8004e9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e9e:	d006      	beq.n	8004eae <UART_SetConfig+0x332>
 8004ea0:	e00b      	b.n	8004eba <UART_SetConfig+0x33e>
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	77fb      	strb	r3, [r7, #31]
 8004ea6:	e00d      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	77fb      	strb	r3, [r7, #31]
 8004eac:	e00a      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004eae:	2304      	movs	r3, #4
 8004eb0:	77fb      	strb	r3, [r7, #31]
 8004eb2:	e007      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004eb4:	2308      	movs	r3, #8
 8004eb6:	77fb      	strb	r3, [r7, #31]
 8004eb8:	e004      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004eba:	2310      	movs	r3, #16
 8004ebc:	77fb      	strb	r3, [r7, #31]
 8004ebe:	e001      	b.n	8004ec4 <UART_SetConfig+0x348>
 8004ec0:	2310      	movs	r3, #16
 8004ec2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ecc:	d15b      	bne.n	8004f86 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004ece:	7ffb      	ldrb	r3, [r7, #31]
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d828      	bhi.n	8004f26 <UART_SetConfig+0x3aa>
 8004ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8004edc <UART_SetConfig+0x360>)
 8004ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eda:	bf00      	nop
 8004edc:	08004f01 	.word	0x08004f01
 8004ee0:	08004f09 	.word	0x08004f09
 8004ee4:	08004f11 	.word	0x08004f11
 8004ee8:	08004f27 	.word	0x08004f27
 8004eec:	08004f17 	.word	0x08004f17
 8004ef0:	08004f27 	.word	0x08004f27
 8004ef4:	08004f27 	.word	0x08004f27
 8004ef8:	08004f27 	.word	0x08004f27
 8004efc:	08004f1f 	.word	0x08004f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f00:	f7fe feb4 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
 8004f04:	61b8      	str	r0, [r7, #24]
        break;
 8004f06:	e013      	b.n	8004f30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f08:	f7fe fec4 	bl	8003c94 <HAL_RCC_GetPCLK2Freq>
 8004f0c:	61b8      	str	r0, [r7, #24]
        break;
 8004f0e:	e00f      	b.n	8004f30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f10:	4b4b      	ldr	r3, [pc, #300]	@ (8005040 <UART_SetConfig+0x4c4>)
 8004f12:	61bb      	str	r3, [r7, #24]
        break;
 8004f14:	e00c      	b.n	8004f30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f16:	f7fe fd97 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8004f1a:	61b8      	str	r0, [r7, #24]
        break;
 8004f1c:	e008      	b.n	8004f30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f22:	61bb      	str	r3, [r7, #24]
        break;
 8004f24:	e004      	b.n	8004f30 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	77bb      	strb	r3, [r7, #30]
        break;
 8004f2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d074      	beq.n	8005020 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	005a      	lsls	r2, r3, #1
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	085b      	lsrs	r3, r3, #1
 8004f40:	441a      	add	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	2b0f      	cmp	r3, #15
 8004f50:	d916      	bls.n	8004f80 <UART_SetConfig+0x404>
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f58:	d212      	bcs.n	8004f80 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	f023 030f 	bic.w	r3, r3, #15
 8004f62:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	085b      	lsrs	r3, r3, #1
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	89fb      	ldrh	r3, [r7, #14]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	89fa      	ldrh	r2, [r7, #14]
 8004f7c:	60da      	str	r2, [r3, #12]
 8004f7e:	e04f      	b.n	8005020 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	77bb      	strb	r3, [r7, #30]
 8004f84:	e04c      	b.n	8005020 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f86:	7ffb      	ldrb	r3, [r7, #31]
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d828      	bhi.n	8004fde <UART_SetConfig+0x462>
 8004f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f94 <UART_SetConfig+0x418>)
 8004f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f92:	bf00      	nop
 8004f94:	08004fb9 	.word	0x08004fb9
 8004f98:	08004fc1 	.word	0x08004fc1
 8004f9c:	08004fc9 	.word	0x08004fc9
 8004fa0:	08004fdf 	.word	0x08004fdf
 8004fa4:	08004fcf 	.word	0x08004fcf
 8004fa8:	08004fdf 	.word	0x08004fdf
 8004fac:	08004fdf 	.word	0x08004fdf
 8004fb0:	08004fdf 	.word	0x08004fdf
 8004fb4:	08004fd7 	.word	0x08004fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fb8:	f7fe fe58 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
 8004fbc:	61b8      	str	r0, [r7, #24]
        break;
 8004fbe:	e013      	b.n	8004fe8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fc0:	f7fe fe68 	bl	8003c94 <HAL_RCC_GetPCLK2Freq>
 8004fc4:	61b8      	str	r0, [r7, #24]
        break;
 8004fc6:	e00f      	b.n	8004fe8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8005040 <UART_SetConfig+0x4c4>)
 8004fca:	61bb      	str	r3, [r7, #24]
        break;
 8004fcc:	e00c      	b.n	8004fe8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fce:	f7fe fd3b 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8004fd2:	61b8      	str	r0, [r7, #24]
        break;
 8004fd4:	e008      	b.n	8004fe8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fda:	61bb      	str	r3, [r7, #24]
        break;
 8004fdc:	e004      	b.n	8004fe8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	77bb      	strb	r3, [r7, #30]
        break;
 8004fe6:	bf00      	nop
    }

    if (pclk != 0U)
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d018      	beq.n	8005020 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	085a      	lsrs	r2, r3, #1
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	441a      	add	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005000:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	2b0f      	cmp	r3, #15
 8005006:	d909      	bls.n	800501c <UART_SetConfig+0x4a0>
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800500e:	d205      	bcs.n	800501c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	b29a      	uxth	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60da      	str	r2, [r3, #12]
 800501a:	e001      	b.n	8005020 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800502c:	7fbb      	ldrb	r3, [r7, #30]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3720      	adds	r7, #32
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	40007c00 	.word	0x40007c00
 800503c:	40023800 	.word	0x40023800
 8005040:	00f42400 	.word	0x00f42400

08005044 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005094:	f003 0304 	and.w	r3, r3, #4
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00a      	beq.n	80050b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	430a      	orrs	r2, r1
 80050d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d8:	f003 0310 	and.w	r3, r3, #16
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00a      	beq.n	80050f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fa:	f003 0320 	and.w	r3, r3, #32
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00a      	beq.n	8005118 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005120:	2b00      	cmp	r3, #0
 8005122:	d01a      	beq.n	800515a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005142:	d10a      	bne.n	800515a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	605a      	str	r2, [r3, #4]
  }
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af02      	add	r7, sp, #8
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005198:	f7fc fa0e 	bl	80015b8 <HAL_GetTick>
 800519c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0308 	and.w	r3, r3, #8
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d10e      	bne.n	80051ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f831 	bl	8005222 <UART_WaitOnFlagUntilTimeout>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e027      	b.n	800521a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d10e      	bne.n	80051f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f81b 	bl	8005222 <UART_WaitOnFlagUntilTimeout>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e011      	b.n	800521a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2220      	movs	r2, #32
 80051fa:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2220      	movs	r2, #32
 8005200:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b09c      	sub	sp, #112	@ 0x70
 8005226:	af00      	add	r7, sp, #0
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	603b      	str	r3, [r7, #0]
 800522e:	4613      	mov	r3, r2
 8005230:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005232:	e0a7      	b.n	8005384 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005234:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523a:	f000 80a3 	beq.w	8005384 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800523e:	f7fc f9bb 	bl	80015b8 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800524a:	429a      	cmp	r2, r3
 800524c:	d302      	bcc.n	8005254 <UART_WaitOnFlagUntilTimeout+0x32>
 800524e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005250:	2b00      	cmp	r3, #0
 8005252:	d13f      	bne.n	80052d4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800525c:	e853 3f00 	ldrex	r3, [r3]
 8005260:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005264:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005268:	667b      	str	r3, [r7, #100]	@ 0x64
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	461a      	mov	r2, r3
 8005270:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005272:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005274:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005276:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005278:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800527a:	e841 2300 	strex	r3, r2, [r1]
 800527e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1e6      	bne.n	8005254 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3308      	adds	r3, #8
 800528c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005290:	e853 3f00 	ldrex	r3, [r3]
 8005294:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005298:	f023 0301 	bic.w	r3, r3, #1
 800529c:	663b      	str	r3, [r7, #96]	@ 0x60
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3308      	adds	r3, #8
 80052a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80052a6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80052a8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80052ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052ae:	e841 2300 	strex	r3, r2, [r1]
 80052b2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80052b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1e5      	bne.n	8005286 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2220      	movs	r2, #32
 80052be:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e068      	b.n	80053a6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0304 	and.w	r3, r3, #4
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d050      	beq.n	8005384 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052f0:	d148      	bne.n	8005384 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80052fa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005304:	e853 3f00 	ldrex	r3, [r3]
 8005308:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005310:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	461a      	mov	r2, r3
 8005318:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800531a:	637b      	str	r3, [r7, #52]	@ 0x34
 800531c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005320:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005322:	e841 2300 	strex	r3, r2, [r1]
 8005326:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1e6      	bne.n	80052fc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	3308      	adds	r3, #8
 8005334:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	e853 3f00 	ldrex	r3, [r3]
 800533c:	613b      	str	r3, [r7, #16]
   return(result);
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f023 0301 	bic.w	r3, r3, #1
 8005344:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3308      	adds	r3, #8
 800534c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800534e:	623a      	str	r2, [r7, #32]
 8005350:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005352:	69f9      	ldr	r1, [r7, #28]
 8005354:	6a3a      	ldr	r2, [r7, #32]
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	61bb      	str	r3, [r7, #24]
   return(result);
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1e5      	bne.n	800532e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2220      	movs	r2, #32
 8005366:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2220      	movs	r2, #32
 800536c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2220      	movs	r2, #32
 8005374:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e010      	b.n	80053a6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	69da      	ldr	r2, [r3, #28]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	4013      	ands	r3, r2
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	429a      	cmp	r2, r3
 8005392:	bf0c      	ite	eq
 8005394:	2301      	moveq	r3, #1
 8005396:	2300      	movne	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	461a      	mov	r2, r3
 800539c:	79fb      	ldrb	r3, [r7, #7]
 800539e:	429a      	cmp	r2, r3
 80053a0:	f43f af48 	beq.w	8005234 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3770      	adds	r7, #112	@ 0x70
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
	...

080053b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053b0:	b084      	sub	sp, #16
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b084      	sub	sp, #16
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	f107 001c 	add.w	r0, r7, #28
 80053be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d120      	bne.n	800540a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	4b20      	ldr	r3, [pc, #128]	@ (800545c <USB_CoreInit+0xac>)
 80053da:	4013      	ands	r3, r2
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d105      	bne.n	80053fe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fa96 	bl	8005930 <USB_CoreReset>
 8005404:	4603      	mov	r3, r0
 8005406:	73fb      	strb	r3, [r7, #15]
 8005408:	e010      	b.n	800542c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fa8a 	bl	8005930 <USB_CoreReset>
 800541c:	4603      	mov	r3, r0
 800541e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005424:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800542c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800542e:	2b01      	cmp	r3, #1
 8005430:	d10b      	bne.n	800544a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f043 0206 	orr.w	r2, r3, #6
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f043 0220 	orr.w	r2, r3, #32
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800544a:	7bfb      	ldrb	r3, [r7, #15]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005456:	b004      	add	sp, #16
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	ffbdffbf 	.word	0xffbdffbf

08005460 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f023 0201 	bic.w	r2, r3, #1
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b084      	sub	sp, #16
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	460b      	mov	r3, r1
 800548c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800549e:	78fb      	ldrb	r3, [r7, #3]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d115      	bne.n	80054d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054b0:	2001      	movs	r0, #1
 80054b2:	f7fc f88d 	bl	80015d0 <HAL_Delay>
      ms++;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	3301      	adds	r3, #1
 80054ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fa29 	bl	8005914 <USB_GetMode>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d01e      	beq.n	8005506 <USB_SetCurrentMode+0x84>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2b31      	cmp	r3, #49	@ 0x31
 80054cc:	d9f0      	bls.n	80054b0 <USB_SetCurrentMode+0x2e>
 80054ce:	e01a      	b.n	8005506 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80054d0:	78fb      	ldrb	r3, [r7, #3]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d115      	bne.n	8005502 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054e2:	2001      	movs	r0, #1
 80054e4:	f7fc f874 	bl	80015d0 <HAL_Delay>
      ms++;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	3301      	adds	r3, #1
 80054ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fa10 	bl	8005914 <USB_GetMode>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d005      	beq.n	8005506 <USB_SetCurrentMode+0x84>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2b31      	cmp	r3, #49	@ 0x31
 80054fe:	d9f0      	bls.n	80054e2 <USB_SetCurrentMode+0x60>
 8005500:	e001      	b.n	8005506 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e005      	b.n	8005512 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2b32      	cmp	r3, #50	@ 0x32
 800550a:	d101      	bne.n	8005510 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e000      	b.n	8005512 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800551c:	b084      	sub	sp, #16
 800551e:	b580      	push	{r7, lr}
 8005520:	b086      	sub	sp, #24
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800552a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800552e:	2300      	movs	r3, #0
 8005530:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005536:	2300      	movs	r3, #0
 8005538:	613b      	str	r3, [r7, #16]
 800553a:	e009      	b.n	8005550 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	3340      	adds	r3, #64	@ 0x40
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	2200      	movs	r2, #0
 8005548:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	3301      	adds	r3, #1
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	2b0e      	cmp	r3, #14
 8005554:	d9f2      	bls.n	800553c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005556:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005558:	2b00      	cmp	r3, #0
 800555a:	d11c      	bne.n	8005596 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800556a:	f043 0302 	orr.w	r3, r3, #2
 800556e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005574:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	e005      	b.n	80055a2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80055a8:	461a      	mov	r2, r3
 80055aa:	2300      	movs	r3, #0
 80055ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055b4:	4619      	mov	r1, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055bc:	461a      	mov	r2, r3
 80055be:	680b      	ldr	r3, [r1, #0]
 80055c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d10c      	bne.n	80055e2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80055c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d104      	bne.n	80055d8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80055ce:	2100      	movs	r1, #0
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 f965 	bl	80058a0 <USB_SetDevSpeed>
 80055d6:	e008      	b.n	80055ea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80055d8:	2101      	movs	r1, #1
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f960 	bl	80058a0 <USB_SetDevSpeed>
 80055e0:	e003      	b.n	80055ea <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80055e2:	2103      	movs	r1, #3
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f95b 	bl	80058a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80055ea:	2110      	movs	r1, #16
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f8f3 	bl	80057d8 <USB_FlushTxFifo>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f91f 	bl	8005840 <USB_FlushRxFifo>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005612:	461a      	mov	r2, r3
 8005614:	2300      	movs	r3, #0
 8005616:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800561e:	461a      	mov	r2, r3
 8005620:	2300      	movs	r3, #0
 8005622:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800562a:	461a      	mov	r2, r3
 800562c:	2300      	movs	r3, #0
 800562e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005630:	2300      	movs	r3, #0
 8005632:	613b      	str	r3, [r7, #16]
 8005634:	e043      	b.n	80056be <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005648:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800564c:	d118      	bne.n	8005680 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10a      	bne.n	800566a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005660:	461a      	mov	r2, r3
 8005662:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005666:	6013      	str	r3, [r2, #0]
 8005668:	e013      	b.n	8005692 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	4413      	add	r3, r2
 8005672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005676:	461a      	mov	r2, r3
 8005678:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	e008      	b.n	8005692 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800568c:	461a      	mov	r2, r3
 800568e:	2300      	movs	r3, #0
 8005690:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800569e:	461a      	mov	r2, r3
 80056a0:	2300      	movs	r3, #0
 80056a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056b0:	461a      	mov	r2, r3
 80056b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80056b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	3301      	adds	r3, #1
 80056bc:	613b      	str	r3, [r7, #16]
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d3b7      	bcc.n	8005636 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056c6:	2300      	movs	r3, #0
 80056c8:	613b      	str	r3, [r7, #16]
 80056ca:	e043      	b.n	8005754 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056e2:	d118      	bne.n	8005716 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10a      	bne.n	8005700 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056f6:	461a      	mov	r2, r3
 80056f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80056fc:	6013      	str	r3, [r2, #0]
 80056fe:	e013      	b.n	8005728 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800570c:	461a      	mov	r2, r3
 800570e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	e008      	b.n	8005728 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005722:	461a      	mov	r2, r3
 8005724:	2300      	movs	r3, #0
 8005726:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005734:	461a      	mov	r2, r3
 8005736:	2300      	movs	r3, #0
 8005738:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005746:	461a      	mov	r2, r3
 8005748:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800574c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	3301      	adds	r3, #1
 8005752:	613b      	str	r3, [r7, #16]
 8005754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	429a      	cmp	r2, r3
 800575a:	d3b7      	bcc.n	80056cc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800576a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800576e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800577c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800577e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005780:	2b00      	cmp	r3, #0
 8005782:	d105      	bne.n	8005790 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	f043 0210 	orr.w	r2, r3, #16
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	699a      	ldr	r2, [r3, #24]
 8005794:	4b0e      	ldr	r3, [pc, #56]	@ (80057d0 <USB_DevInit+0x2b4>)
 8005796:	4313      	orrs	r3, r2
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800579c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d005      	beq.n	80057ae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	f043 0208 	orr.w	r2, r3, #8
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80057ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d105      	bne.n	80057c0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	699a      	ldr	r2, [r3, #24]
 80057b8:	4b06      	ldr	r3, [pc, #24]	@ (80057d4 <USB_DevInit+0x2b8>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80057c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3718      	adds	r7, #24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057cc:	b004      	add	sp, #16
 80057ce:	4770      	bx	lr
 80057d0:	803c3800 	.word	0x803c3800
 80057d4:	40000004 	.word	0x40000004

080057d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	3301      	adds	r3, #1
 80057ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4a13      	ldr	r2, [pc, #76]	@ (800583c <USB_FlushTxFifo+0x64>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d901      	bls.n	80057f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e01b      	b.n	8005830 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	daf2      	bge.n	80057e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	019b      	lsls	r3, r3, #6
 8005808:	f043 0220 	orr.w	r2, r3, #32
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	3301      	adds	r3, #1
 8005814:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4a08      	ldr	r2, [pc, #32]	@ (800583c <USB_FlushTxFifo+0x64>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d901      	bls.n	8005822 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e006      	b.n	8005830 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	f003 0320 	and.w	r3, r3, #32
 800582a:	2b20      	cmp	r3, #32
 800582c:	d0f0      	beq.n	8005810 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	00030d40 	.word	0x00030d40

08005840 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005848:	2300      	movs	r3, #0
 800584a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	3301      	adds	r3, #1
 8005850:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4a11      	ldr	r2, [pc, #68]	@ (800589c <USB_FlushRxFifo+0x5c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d901      	bls.n	800585e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e018      	b.n	8005890 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	2b00      	cmp	r3, #0
 8005864:	daf2      	bge.n	800584c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005866:	2300      	movs	r3, #0
 8005868:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2210      	movs	r2, #16
 800586e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	3301      	adds	r3, #1
 8005874:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4a08      	ldr	r2, [pc, #32]	@ (800589c <USB_FlushRxFifo+0x5c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d901      	bls.n	8005882 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e006      	b.n	8005890 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f003 0310 	and.w	r3, r3, #16
 800588a:	2b10      	cmp	r3, #16
 800588c:	d0f0      	beq.n	8005870 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	00030d40 	.word	0x00030d40

080058a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	460b      	mov	r3, r1
 80058aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	78fb      	ldrb	r3, [r7, #3]
 80058ba:	68f9      	ldr	r1, [r7, #12]
 80058bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058c0:	4313      	orrs	r3, r2
 80058c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b085      	sub	sp, #20
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80058ec:	f023 0303 	bic.w	r3, r3, #3
 80058f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005900:	f043 0302 	orr.w	r3, r3, #2
 8005904:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	f003 0301 	and.w	r3, r3, #1
}
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	3301      	adds	r3, #1
 8005940:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	4a13      	ldr	r2, [pc, #76]	@ (8005994 <USB_CoreReset+0x64>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d901      	bls.n	800594e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e01b      	b.n	8005986 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	2b00      	cmp	r3, #0
 8005954:	daf2      	bge.n	800593c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	f043 0201 	orr.w	r2, r3, #1
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	3301      	adds	r3, #1
 800596a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4a09      	ldr	r2, [pc, #36]	@ (8005994 <USB_CoreReset+0x64>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d901      	bls.n	8005978 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e006      	b.n	8005986 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b01      	cmp	r3, #1
 8005982:	d0f0      	beq.n	8005966 <USB_CoreReset+0x36>

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	00030d40 	.word	0x00030d40

08005998 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800599e:	4b8d      	ldr	r3, [pc, #564]	@ (8005bd4 <MX_LWIP_Init+0x23c>)
 80059a0:	22c0      	movs	r2, #192	@ 0xc0
 80059a2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80059a4:	4b8b      	ldr	r3, [pc, #556]	@ (8005bd4 <MX_LWIP_Init+0x23c>)
 80059a6:	22a8      	movs	r2, #168	@ 0xa8
 80059a8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80059aa:	4b8a      	ldr	r3, [pc, #552]	@ (8005bd4 <MX_LWIP_Init+0x23c>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 80059b0:	4b88      	ldr	r3, [pc, #544]	@ (8005bd4 <MX_LWIP_Init+0x23c>)
 80059b2:	220a      	movs	r2, #10
 80059b4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80059b6:	4b88      	ldr	r3, [pc, #544]	@ (8005bd8 <MX_LWIP_Init+0x240>)
 80059b8:	22ff      	movs	r2, #255	@ 0xff
 80059ba:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80059bc:	4b86      	ldr	r3, [pc, #536]	@ (8005bd8 <MX_LWIP_Init+0x240>)
 80059be:	22ff      	movs	r2, #255	@ 0xff
 80059c0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80059c2:	4b85      	ldr	r3, [pc, #532]	@ (8005bd8 <MX_LWIP_Init+0x240>)
 80059c4:	22ff      	movs	r2, #255	@ 0xff
 80059c6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80059c8:	4b83      	ldr	r3, [pc, #524]	@ (8005bd8 <MX_LWIP_Init+0x240>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80059ce:	4b83      	ldr	r3, [pc, #524]	@ (8005bdc <MX_LWIP_Init+0x244>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80059d4:	4b81      	ldr	r3, [pc, #516]	@ (8005bdc <MX_LWIP_Init+0x244>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80059da:	4b80      	ldr	r3, [pc, #512]	@ (8005bdc <MX_LWIP_Init+0x244>)
 80059dc:	2200      	movs	r2, #0
 80059de:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80059e0:	4b7e      	ldr	r3, [pc, #504]	@ (8005bdc <MX_LWIP_Init+0x244>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80059e6:	f000 fd45 	bl	8006474 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80059ea:	4b7a      	ldr	r3, [pc, #488]	@ (8005bd4 <MX_LWIP_Init+0x23c>)
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	061a      	lsls	r2, r3, #24
 80059f0:	4b78      	ldr	r3, [pc, #480]	@ (8005bd4 <MX_LWIP_Init+0x23c>)
 80059f2:	785b      	ldrb	r3, [r3, #1]
 80059f4:	041b      	lsls	r3, r3, #16
 80059f6:	431a      	orrs	r2, r3
 80059f8:	4b76      	ldr	r3, [pc, #472]	@ (8005bd4 <MX_LWIP_Init+0x23c>)
 80059fa:	789b      	ldrb	r3, [r3, #2]
 80059fc:	021b      	lsls	r3, r3, #8
 80059fe:	4313      	orrs	r3, r2
 8005a00:	4a74      	ldr	r2, [pc, #464]	@ (8005bd4 <MX_LWIP_Init+0x23c>)
 8005a02:	78d2      	ldrb	r2, [r2, #3]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	061a      	lsls	r2, r3, #24
 8005a08:	4b72      	ldr	r3, [pc, #456]	@ (8005bd4 <MX_LWIP_Init+0x23c>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	0619      	lsls	r1, r3, #24
 8005a0e:	4b71      	ldr	r3, [pc, #452]	@ (8005bd4 <MX_LWIP_Init+0x23c>)
 8005a10:	785b      	ldrb	r3, [r3, #1]
 8005a12:	041b      	lsls	r3, r3, #16
 8005a14:	4319      	orrs	r1, r3
 8005a16:	4b6f      	ldr	r3, [pc, #444]	@ (8005bd4 <MX_LWIP_Init+0x23c>)
 8005a18:	789b      	ldrb	r3, [r3, #2]
 8005a1a:	021b      	lsls	r3, r3, #8
 8005a1c:	430b      	orrs	r3, r1
 8005a1e:	496d      	ldr	r1, [pc, #436]	@ (8005bd4 <MX_LWIP_Init+0x23c>)
 8005a20:	78c9      	ldrb	r1, [r1, #3]
 8005a22:	430b      	orrs	r3, r1
 8005a24:	021b      	lsls	r3, r3, #8
 8005a26:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	4b69      	ldr	r3, [pc, #420]	@ (8005bd4 <MX_LWIP_Init+0x23c>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	0619      	lsls	r1, r3, #24
 8005a32:	4b68      	ldr	r3, [pc, #416]	@ (8005bd4 <MX_LWIP_Init+0x23c>)
 8005a34:	785b      	ldrb	r3, [r3, #1]
 8005a36:	041b      	lsls	r3, r3, #16
 8005a38:	4319      	orrs	r1, r3
 8005a3a:	4b66      	ldr	r3, [pc, #408]	@ (8005bd4 <MX_LWIP_Init+0x23c>)
 8005a3c:	789b      	ldrb	r3, [r3, #2]
 8005a3e:	021b      	lsls	r3, r3, #8
 8005a40:	430b      	orrs	r3, r1
 8005a42:	4964      	ldr	r1, [pc, #400]	@ (8005bd4 <MX_LWIP_Init+0x23c>)
 8005a44:	78c9      	ldrb	r1, [r1, #3]
 8005a46:	430b      	orrs	r3, r1
 8005a48:	0a1b      	lsrs	r3, r3, #8
 8005a4a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	4b60      	ldr	r3, [pc, #384]	@ (8005bd4 <MX_LWIP_Init+0x23c>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	0619      	lsls	r1, r3, #24
 8005a56:	4b5f      	ldr	r3, [pc, #380]	@ (8005bd4 <MX_LWIP_Init+0x23c>)
 8005a58:	785b      	ldrb	r3, [r3, #1]
 8005a5a:	041b      	lsls	r3, r3, #16
 8005a5c:	4319      	orrs	r1, r3
 8005a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8005bd4 <MX_LWIP_Init+0x23c>)
 8005a60:	789b      	ldrb	r3, [r3, #2]
 8005a62:	021b      	lsls	r3, r3, #8
 8005a64:	430b      	orrs	r3, r1
 8005a66:	495b      	ldr	r1, [pc, #364]	@ (8005bd4 <MX_LWIP_Init+0x23c>)
 8005a68:	78c9      	ldrb	r1, [r1, #3]
 8005a6a:	430b      	orrs	r3, r1
 8005a6c:	0e1b      	lsrs	r3, r3, #24
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	4a5b      	ldr	r2, [pc, #364]	@ (8005be0 <MX_LWIP_Init+0x248>)
 8005a72:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005a74:	4b58      	ldr	r3, [pc, #352]	@ (8005bd8 <MX_LWIP_Init+0x240>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	061a      	lsls	r2, r3, #24
 8005a7a:	4b57      	ldr	r3, [pc, #348]	@ (8005bd8 <MX_LWIP_Init+0x240>)
 8005a7c:	785b      	ldrb	r3, [r3, #1]
 8005a7e:	041b      	lsls	r3, r3, #16
 8005a80:	431a      	orrs	r2, r3
 8005a82:	4b55      	ldr	r3, [pc, #340]	@ (8005bd8 <MX_LWIP_Init+0x240>)
 8005a84:	789b      	ldrb	r3, [r3, #2]
 8005a86:	021b      	lsls	r3, r3, #8
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	4a53      	ldr	r2, [pc, #332]	@ (8005bd8 <MX_LWIP_Init+0x240>)
 8005a8c:	78d2      	ldrb	r2, [r2, #3]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	061a      	lsls	r2, r3, #24
 8005a92:	4b51      	ldr	r3, [pc, #324]	@ (8005bd8 <MX_LWIP_Init+0x240>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	0619      	lsls	r1, r3, #24
 8005a98:	4b4f      	ldr	r3, [pc, #316]	@ (8005bd8 <MX_LWIP_Init+0x240>)
 8005a9a:	785b      	ldrb	r3, [r3, #1]
 8005a9c:	041b      	lsls	r3, r3, #16
 8005a9e:	4319      	orrs	r1, r3
 8005aa0:	4b4d      	ldr	r3, [pc, #308]	@ (8005bd8 <MX_LWIP_Init+0x240>)
 8005aa2:	789b      	ldrb	r3, [r3, #2]
 8005aa4:	021b      	lsls	r3, r3, #8
 8005aa6:	430b      	orrs	r3, r1
 8005aa8:	494b      	ldr	r1, [pc, #300]	@ (8005bd8 <MX_LWIP_Init+0x240>)
 8005aaa:	78c9      	ldrb	r1, [r1, #3]
 8005aac:	430b      	orrs	r3, r1
 8005aae:	021b      	lsls	r3, r3, #8
 8005ab0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	4b48      	ldr	r3, [pc, #288]	@ (8005bd8 <MX_LWIP_Init+0x240>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	0619      	lsls	r1, r3, #24
 8005abc:	4b46      	ldr	r3, [pc, #280]	@ (8005bd8 <MX_LWIP_Init+0x240>)
 8005abe:	785b      	ldrb	r3, [r3, #1]
 8005ac0:	041b      	lsls	r3, r3, #16
 8005ac2:	4319      	orrs	r1, r3
 8005ac4:	4b44      	ldr	r3, [pc, #272]	@ (8005bd8 <MX_LWIP_Init+0x240>)
 8005ac6:	789b      	ldrb	r3, [r3, #2]
 8005ac8:	021b      	lsls	r3, r3, #8
 8005aca:	430b      	orrs	r3, r1
 8005acc:	4942      	ldr	r1, [pc, #264]	@ (8005bd8 <MX_LWIP_Init+0x240>)
 8005ace:	78c9      	ldrb	r1, [r1, #3]
 8005ad0:	430b      	orrs	r3, r1
 8005ad2:	0a1b      	lsrs	r3, r3, #8
 8005ad4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	4b3f      	ldr	r3, [pc, #252]	@ (8005bd8 <MX_LWIP_Init+0x240>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	0619      	lsls	r1, r3, #24
 8005ae0:	4b3d      	ldr	r3, [pc, #244]	@ (8005bd8 <MX_LWIP_Init+0x240>)
 8005ae2:	785b      	ldrb	r3, [r3, #1]
 8005ae4:	041b      	lsls	r3, r3, #16
 8005ae6:	4319      	orrs	r1, r3
 8005ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8005bd8 <MX_LWIP_Init+0x240>)
 8005aea:	789b      	ldrb	r3, [r3, #2]
 8005aec:	021b      	lsls	r3, r3, #8
 8005aee:	430b      	orrs	r3, r1
 8005af0:	4939      	ldr	r1, [pc, #228]	@ (8005bd8 <MX_LWIP_Init+0x240>)
 8005af2:	78c9      	ldrb	r1, [r1, #3]
 8005af4:	430b      	orrs	r3, r1
 8005af6:	0e1b      	lsrs	r3, r3, #24
 8005af8:	4313      	orrs	r3, r2
 8005afa:	4a3a      	ldr	r2, [pc, #232]	@ (8005be4 <MX_LWIP_Init+0x24c>)
 8005afc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005afe:	4b37      	ldr	r3, [pc, #220]	@ (8005bdc <MX_LWIP_Init+0x244>)
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	061a      	lsls	r2, r3, #24
 8005b04:	4b35      	ldr	r3, [pc, #212]	@ (8005bdc <MX_LWIP_Init+0x244>)
 8005b06:	785b      	ldrb	r3, [r3, #1]
 8005b08:	041b      	lsls	r3, r3, #16
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	4b33      	ldr	r3, [pc, #204]	@ (8005bdc <MX_LWIP_Init+0x244>)
 8005b0e:	789b      	ldrb	r3, [r3, #2]
 8005b10:	021b      	lsls	r3, r3, #8
 8005b12:	4313      	orrs	r3, r2
 8005b14:	4a31      	ldr	r2, [pc, #196]	@ (8005bdc <MX_LWIP_Init+0x244>)
 8005b16:	78d2      	ldrb	r2, [r2, #3]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	061a      	lsls	r2, r3, #24
 8005b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8005bdc <MX_LWIP_Init+0x244>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	0619      	lsls	r1, r3, #24
 8005b22:	4b2e      	ldr	r3, [pc, #184]	@ (8005bdc <MX_LWIP_Init+0x244>)
 8005b24:	785b      	ldrb	r3, [r3, #1]
 8005b26:	041b      	lsls	r3, r3, #16
 8005b28:	4319      	orrs	r1, r3
 8005b2a:	4b2c      	ldr	r3, [pc, #176]	@ (8005bdc <MX_LWIP_Init+0x244>)
 8005b2c:	789b      	ldrb	r3, [r3, #2]
 8005b2e:	021b      	lsls	r3, r3, #8
 8005b30:	430b      	orrs	r3, r1
 8005b32:	492a      	ldr	r1, [pc, #168]	@ (8005bdc <MX_LWIP_Init+0x244>)
 8005b34:	78c9      	ldrb	r1, [r1, #3]
 8005b36:	430b      	orrs	r3, r1
 8005b38:	021b      	lsls	r3, r3, #8
 8005b3a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	4b26      	ldr	r3, [pc, #152]	@ (8005bdc <MX_LWIP_Init+0x244>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	0619      	lsls	r1, r3, #24
 8005b46:	4b25      	ldr	r3, [pc, #148]	@ (8005bdc <MX_LWIP_Init+0x244>)
 8005b48:	785b      	ldrb	r3, [r3, #1]
 8005b4a:	041b      	lsls	r3, r3, #16
 8005b4c:	4319      	orrs	r1, r3
 8005b4e:	4b23      	ldr	r3, [pc, #140]	@ (8005bdc <MX_LWIP_Init+0x244>)
 8005b50:	789b      	ldrb	r3, [r3, #2]
 8005b52:	021b      	lsls	r3, r3, #8
 8005b54:	430b      	orrs	r3, r1
 8005b56:	4921      	ldr	r1, [pc, #132]	@ (8005bdc <MX_LWIP_Init+0x244>)
 8005b58:	78c9      	ldrb	r1, [r1, #3]
 8005b5a:	430b      	orrs	r3, r1
 8005b5c:	0a1b      	lsrs	r3, r3, #8
 8005b5e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005b62:	431a      	orrs	r2, r3
 8005b64:	4b1d      	ldr	r3, [pc, #116]	@ (8005bdc <MX_LWIP_Init+0x244>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	0619      	lsls	r1, r3, #24
 8005b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8005bdc <MX_LWIP_Init+0x244>)
 8005b6c:	785b      	ldrb	r3, [r3, #1]
 8005b6e:	041b      	lsls	r3, r3, #16
 8005b70:	4319      	orrs	r1, r3
 8005b72:	4b1a      	ldr	r3, [pc, #104]	@ (8005bdc <MX_LWIP_Init+0x244>)
 8005b74:	789b      	ldrb	r3, [r3, #2]
 8005b76:	021b      	lsls	r3, r3, #8
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	4918      	ldr	r1, [pc, #96]	@ (8005bdc <MX_LWIP_Init+0x244>)
 8005b7c:	78c9      	ldrb	r1, [r1, #3]
 8005b7e:	430b      	orrs	r3, r1
 8005b80:	0e1b      	lsrs	r3, r3, #24
 8005b82:	4313      	orrs	r3, r2
 8005b84:	4a18      	ldr	r2, [pc, #96]	@ (8005be8 <MX_LWIP_Init+0x250>)
 8005b86:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005b88:	4b18      	ldr	r3, [pc, #96]	@ (8005bec <MX_LWIP_Init+0x254>)
 8005b8a:	9302      	str	r3, [sp, #8]
 8005b8c:	4b18      	ldr	r3, [pc, #96]	@ (8005bf0 <MX_LWIP_Init+0x258>)
 8005b8e:	9301      	str	r3, [sp, #4]
 8005b90:	2300      	movs	r3, #0
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	4b14      	ldr	r3, [pc, #80]	@ (8005be8 <MX_LWIP_Init+0x250>)
 8005b96:	4a13      	ldr	r2, [pc, #76]	@ (8005be4 <MX_LWIP_Init+0x24c>)
 8005b98:	4911      	ldr	r1, [pc, #68]	@ (8005be0 <MX_LWIP_Init+0x248>)
 8005b9a:	4816      	ldr	r0, [pc, #88]	@ (8005bf4 <MX_LWIP_Init+0x25c>)
 8005b9c:	f001 f956 	bl	8006e4c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005ba0:	4814      	ldr	r0, [pc, #80]	@ (8005bf4 <MX_LWIP_Init+0x25c>)
 8005ba2:	f001 fb05 	bl	80071b0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005ba6:	4b13      	ldr	r3, [pc, #76]	@ (8005bf4 <MX_LWIP_Init+0x25c>)
 8005ba8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005bac:	089b      	lsrs	r3, r3, #2
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005bb8:	480e      	ldr	r0, [pc, #56]	@ (8005bf4 <MX_LWIP_Init+0x25c>)
 8005bba:	f001 fb09 	bl	80071d0 <netif_set_up>
 8005bbe:	e002      	b.n	8005bc6 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005bc0:	480c      	ldr	r0, [pc, #48]	@ (8005bf4 <MX_LWIP_Init+0x25c>)
 8005bc2:	f001 fb71 	bl	80072a8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005bc6:	490c      	ldr	r1, [pc, #48]	@ (8005bf8 <MX_LWIP_Init+0x260>)
 8005bc8:	480a      	ldr	r0, [pc, #40]	@ (8005bf4 <MX_LWIP_Init+0x25c>)
 8005bca:	f001 fc03 	bl	80073d4 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005bce:	bf00      	nop
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	2000080c 	.word	0x2000080c
 8005bd8:	20000810 	.word	0x20000810
 8005bdc:	20000814 	.word	0x20000814
 8005be0:	20000800 	.word	0x20000800
 8005be4:	20000804 	.word	0x20000804
 8005be8:	20000808 	.word	0x20000808
 8005bec:	08010429 	.word	0x08010429
 8005bf0:	08005f61 	.word	0x08005f61
 8005bf4:	200007cc 	.word	0x200007cc
 8005bf8:	08005c4d 	.word	0x08005c4d

08005bfc <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8005c04:	f7fb fcd8 	bl	80015b8 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	4b08      	ldr	r3, [pc, #32]	@ (8005c2c <Ethernet_Link_Periodic_Handle+0x30>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	2b63      	cmp	r3, #99	@ 0x63
 8005c12:	d907      	bls.n	8005c24 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8005c14:	f7fb fcd0 	bl	80015b8 <HAL_GetTick>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	4a04      	ldr	r2, [pc, #16]	@ (8005c2c <Ethernet_Link_Periodic_Handle+0x30>)
 8005c1c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fafc 	bl	800621c <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8005c24:	bf00      	nop
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	200007c8 	.word	0x200007c8

08005c30 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005c34:	4804      	ldr	r0, [pc, #16]	@ (8005c48 <MX_LWIP_Process+0x18>)
 8005c36:	f000 f973 	bl	8005f20 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005c3a:	f007 fcdb 	bl	800d5f4 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8005c3e:	4802      	ldr	r0, [pc, #8]	@ (8005c48 <MX_LWIP_Process+0x18>)
 8005c40:	f7ff ffdc 	bl	8005bfc <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005c44:	bf00      	nop
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	200007cc 	.word	0x200007cc

08005c4c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <SCB_InvalidateDCache_by_Addr>:
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8005c72:	2320      	movs	r3, #32
 8005c74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c76:	f3bf 8f4f 	dsb	sy
}
 8005c7a:	bf00      	nop
    while (op_size > 0) {
 8005c7c:	e00b      	b.n	8005c96 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8005c7e:	4a0d      	ldr	r2, [pc, #52]	@ (8005cb4 <SCB_InvalidateDCache_by_Addr+0x54>)
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	dcf0      	bgt.n	8005c7e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005c9c:	f3bf 8f4f 	dsb	sy
}
 8005ca0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005ca2:	f3bf 8f6f 	isb	sy
}
 8005ca6:	bf00      	nop
}
 8005ca8:	bf00      	nop
 8005caa:	371c      	adds	r7, #28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	e000ed00 	.word	0xe000ed00

08005cb8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005cc4:	4b40      	ldr	r3, [pc, #256]	@ (8005dc8 <low_level_init+0x110>)
 8005cc6:	4a41      	ldr	r2, [pc, #260]	@ (8005dcc <low_level_init+0x114>)
 8005cc8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005cce:	2380      	movs	r3, #128	@ 0x80
 8005cd0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005cd2:	23e1      	movs	r3, #225	@ 0xe1
 8005cd4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005ce2:	4a39      	ldr	r2, [pc, #228]	@ (8005dc8 <low_level_init+0x110>)
 8005ce4:	f107 0308 	add.w	r3, r7, #8
 8005ce8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005cea:	4b37      	ldr	r3, [pc, #220]	@ (8005dc8 <low_level_init+0x110>)
 8005cec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005cf0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005cf2:	4b35      	ldr	r3, [pc, #212]	@ (8005dc8 <low_level_init+0x110>)
 8005cf4:	4a36      	ldr	r2, [pc, #216]	@ (8005dd0 <low_level_init+0x118>)
 8005cf6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005cf8:	4b33      	ldr	r3, [pc, #204]	@ (8005dc8 <low_level_init+0x110>)
 8005cfa:	4a36      	ldr	r2, [pc, #216]	@ (8005dd4 <low_level_init+0x11c>)
 8005cfc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005cfe:	4b32      	ldr	r3, [pc, #200]	@ (8005dc8 <low_level_init+0x110>)
 8005d00:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005d04:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005d06:	4830      	ldr	r0, [pc, #192]	@ (8005dc8 <low_level_init+0x110>)
 8005d08:	f7fb fd98 	bl	800183c <HAL_ETH_Init>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005d10:	2238      	movs	r2, #56	@ 0x38
 8005d12:	2100      	movs	r1, #0
 8005d14:	4830      	ldr	r0, [pc, #192]	@ (8005dd8 <low_level_init+0x120>)
 8005d16:	f00a fdfc 	bl	8010912 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8005dd8 <low_level_init+0x120>)
 8005d1c:	2221      	movs	r2, #33	@ 0x21
 8005d1e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005d20:	4b2d      	ldr	r3, [pc, #180]	@ (8005dd8 <low_level_init+0x120>)
 8005d22:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8005d26:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005d28:	4b2b      	ldr	r3, [pc, #172]	@ (8005dd8 <low_level_init+0x120>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005d2e:	482b      	ldr	r0, [pc, #172]	@ (8005ddc <low_level_init+0x124>)
 8005d30:	f000 ff54 	bl	8006bdc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2206      	movs	r2, #6
 8005d38:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005d3c:	4b22      	ldr	r3, [pc, #136]	@ (8005dc8 <low_level_init+0x110>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	781a      	ldrb	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005d48:	4b1f      	ldr	r3, [pc, #124]	@ (8005dc8 <low_level_init+0x110>)
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	785a      	ldrb	r2, [r3, #1]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005d54:	4b1c      	ldr	r3, [pc, #112]	@ (8005dc8 <low_level_init+0x110>)
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	789a      	ldrb	r2, [r3, #2]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005d60:	4b19      	ldr	r3, [pc, #100]	@ (8005dc8 <low_level_init+0x110>)
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	78da      	ldrb	r2, [r3, #3]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005d6c:	4b16      	ldr	r3, [pc, #88]	@ (8005dc8 <low_level_init+0x110>)
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	791a      	ldrb	r2, [r3, #4]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005d78:	4b13      	ldr	r3, [pc, #76]	@ (8005dc8 <low_level_init+0x110>)
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	795a      	ldrb	r2, [r3, #5]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005d8a:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005d92:	f043 030a 	orr.w	r3, r3, #10
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005d9e:	4910      	ldr	r1, [pc, #64]	@ (8005de0 <low_level_init+0x128>)
 8005da0:	4810      	ldr	r0, [pc, #64]	@ (8005de4 <low_level_init+0x12c>)
 8005da2:	f7fb fa56 	bl	8001252 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8005da6:	480f      	ldr	r0, [pc, #60]	@ (8005de4 <low_level_init+0x12c>)
 8005da8:	f7fb fa85 	bl	80012b6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005dac:	7bfb      	ldrb	r3, [r7, #15]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d103      	bne.n	8005dba <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fa32 	bl	800621c <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005db8:	e001      	b.n	8005dbe <low_level_init+0x106>
    Error_Handler();
 8005dba:	f7fa fdf5 	bl	80009a8 <Error_Handler>
}
 8005dbe:	bf00      	nop
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	200051a4 	.word	0x200051a4
 8005dcc:	40028000 	.word	0x40028000
 8005dd0:	20000128 	.word	0x20000128
 8005dd4:	20000088 	.word	0x20000088
 8005dd8:	20005254 	.word	0x20005254
 8005ddc:	080144b8 	.word	0x080144b8
 8005de0:	2000000c 	.word	0x2000000c
 8005de4:	2000528c 	.word	0x2000528c

08005de8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b092      	sub	sp, #72	@ 0x48
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8005df6:	2300      	movs	r3, #0
 8005df8:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005e00:	f107 030c 	add.w	r3, r7, #12
 8005e04:	2230      	movs	r2, #48	@ 0x30
 8005e06:	2100      	movs	r1, #0
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f00a fd82 	bl	8010912 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005e0e:	f107 030c 	add.w	r3, r7, #12
 8005e12:	2230      	movs	r2, #48	@ 0x30
 8005e14:	2100      	movs	r1, #0
 8005e16:	4618      	mov	r0, r3
 8005e18:	f00a fd7b 	bl	8010912 <memset>

  for(q = p; q != NULL; q = q->next)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e20:	e045      	b.n	8005eae <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005e22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e24:	2b03      	cmp	r3, #3
 8005e26:	d902      	bls.n	8005e2e <low_level_output+0x46>
      return ERR_IF;
 8005e28:	f06f 030b 	mvn.w	r3, #11
 8005e2c:	e055      	b.n	8005eda <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8005e2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e30:	6859      	ldr	r1, [r3, #4]
 8005e32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e34:	4613      	mov	r3, r2
 8005e36:	005b      	lsls	r3, r3, #1
 8005e38:	4413      	add	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	3348      	adds	r3, #72	@ 0x48
 8005e3e:	443b      	add	r3, r7
 8005e40:	3b3c      	subs	r3, #60	@ 0x3c
 8005e42:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005e44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e46:	895b      	ldrh	r3, [r3, #10]
 8005e48:	4619      	mov	r1, r3
 8005e4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	4413      	add	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	3348      	adds	r3, #72	@ 0x48
 8005e56:	443b      	add	r3, r7
 8005e58:	3b38      	subs	r3, #56	@ 0x38
 8005e5a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005e5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d011      	beq.n	8005e86 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005e62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e64:	1e5a      	subs	r2, r3, #1
 8005e66:	f107 000c 	add.w	r0, r7, #12
 8005e6a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	440b      	add	r3, r1
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	18c1      	adds	r1, r0, r3
 8005e76:	4613      	mov	r3, r2
 8005e78:	005b      	lsls	r3, r3, #1
 8005e7a:	4413      	add	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	3348      	adds	r3, #72	@ 0x48
 8005e80:	443b      	add	r3, r7
 8005e82:	3b34      	subs	r3, #52	@ 0x34
 8005e84:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005e86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d109      	bne.n	8005ea2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005e8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e90:	4613      	mov	r3, r2
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	4413      	add	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	3348      	adds	r3, #72	@ 0x48
 8005e9a:	443b      	add	r3, r7
 8005e9c:	3b34      	subs	r3, #52	@ 0x34
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005ea2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8005ea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	643b      	str	r3, [r7, #64]	@ 0x40
 8005eae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1b6      	bne.n	8005e22 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	891b      	ldrh	r3, [r3, #8]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee4 <low_level_output+0xfc>)
 8005ebc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005ebe:	4a09      	ldr	r2, [pc, #36]	@ (8005ee4 <low_level_output+0xfc>)
 8005ec0:	f107 030c 	add.w	r3, r7, #12
 8005ec4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005ec6:	4a07      	ldr	r2, [pc, #28]	@ (8005ee4 <low_level_output+0xfc>)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005ecc:	2214      	movs	r2, #20
 8005ece:	4905      	ldr	r1, [pc, #20]	@ (8005ee4 <low_level_output+0xfc>)
 8005ed0:	4805      	ldr	r0, [pc, #20]	@ (8005ee8 <low_level_output+0x100>)
 8005ed2:	f7fb fde7 	bl	8001aa4 <HAL_ETH_Transmit>

  return errval;
 8005ed6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3748      	adds	r7, #72	@ 0x48
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20005254 	.word	0x20005254
 8005ee8:	200051a4 	.word	0x200051a4

08005eec <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005ef8:	4b07      	ldr	r3, [pc, #28]	@ (8005f18 <low_level_input+0x2c>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d105      	bne.n	8005f0c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005f00:	f107 030c 	add.w	r3, r7, #12
 8005f04:	4619      	mov	r1, r3
 8005f06:	4805      	ldr	r0, [pc, #20]	@ (8005f1c <low_level_input+0x30>)
 8005f08:	f7fb fe60 	bl	8001bcc <HAL_ETH_ReadData>
  }

  return p;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	200051a0 	.word	0x200051a0
 8005f1c:	200051a4 	.word	0x200051a4

08005f20 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff ffdd 	bl	8005eec <low_level_input>
 8005f32:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00a      	beq.n	8005f50 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	6879      	ldr	r1, [r7, #4]
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	4798      	blx	r3
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f001 fdc2 	bl	8007ad4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1ea      	bne.n	8005f2c <ethernetif_input+0xc>
}
 8005f56:	bf00      	nop
 8005f58:	bf00      	nop
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d106      	bne.n	8005f7c <ethernetif_init+0x1c>
 8005f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8005fa8 <ethernetif_init+0x48>)
 8005f70:	f44f 72bd 	mov.w	r2, #378	@ 0x17a
 8005f74:	490d      	ldr	r1, [pc, #52]	@ (8005fac <ethernetif_init+0x4c>)
 8005f76:	480e      	ldr	r0, [pc, #56]	@ (8005fb0 <ethernetif_init+0x50>)
 8005f78:	f00a fc2c 	bl	80107d4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2273      	movs	r2, #115	@ 0x73
 8005f80:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2274      	movs	r2, #116	@ 0x74
 8005f88:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a09      	ldr	r2, [pc, #36]	@ (8005fb4 <ethernetif_init+0x54>)
 8005f90:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a08      	ldr	r2, [pc, #32]	@ (8005fb8 <ethernetif_init+0x58>)
 8005f96:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7ff fe8d 	bl	8005cb8 <low_level_init>

  return ERR_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	08011ac0 	.word	0x08011ac0
 8005fac:	08011adc 	.word	0x08011adc
 8005fb0:	08011aec 	.word	0x08011aec
 8005fb4:	0800e7e1 	.word	0x0800e7e1
 8005fb8:	08005de9 	.word	0x08005de9

08005fbc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005fc8:	68f9      	ldr	r1, [r7, #12]
 8005fca:	4807      	ldr	r0, [pc, #28]	@ (8005fe8 <pbuf_free_custom+0x2c>)
 8005fcc:	f000 fee8 	bl	8006da0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005fd0:	4b06      	ldr	r3, [pc, #24]	@ (8005fec <pbuf_free_custom+0x30>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d102      	bne.n	8005fde <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005fd8:	4b04      	ldr	r3, [pc, #16]	@ (8005fec <pbuf_free_custom+0x30>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	701a      	strb	r2, [r3, #0]
  }
}
 8005fde:	bf00      	nop
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	080144b8 	.word	0x080144b8
 8005fec:	200051a0 	.word	0x200051a0

08005ff0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005ff4:	f7fb fae0 	bl	80015b8 <HAL_GetTick>
 8005ff8:	4603      	mov	r3, r0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	bd80      	pop	{r7, pc}
	...

08006000 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b08e      	sub	sp, #56	@ 0x38
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006008:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800600c:	2200      	movs	r2, #0
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	605a      	str	r2, [r3, #4]
 8006012:	609a      	str	r2, [r3, #8]
 8006014:	60da      	str	r2, [r3, #12]
 8006016:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a52      	ldr	r2, [pc, #328]	@ (8006168 <HAL_ETH_MspInit+0x168>)
 800601e:	4293      	cmp	r3, r2
 8006020:	f040 809e 	bne.w	8006160 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006024:	4b51      	ldr	r3, [pc, #324]	@ (800616c <HAL_ETH_MspInit+0x16c>)
 8006026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006028:	4a50      	ldr	r2, [pc, #320]	@ (800616c <HAL_ETH_MspInit+0x16c>)
 800602a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800602e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006030:	4b4e      	ldr	r3, [pc, #312]	@ (800616c <HAL_ETH_MspInit+0x16c>)
 8006032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006038:	623b      	str	r3, [r7, #32]
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	4b4b      	ldr	r3, [pc, #300]	@ (800616c <HAL_ETH_MspInit+0x16c>)
 800603e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006040:	4a4a      	ldr	r2, [pc, #296]	@ (800616c <HAL_ETH_MspInit+0x16c>)
 8006042:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006046:	6313      	str	r3, [r2, #48]	@ 0x30
 8006048:	4b48      	ldr	r3, [pc, #288]	@ (800616c <HAL_ETH_MspInit+0x16c>)
 800604a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800604c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006050:	61fb      	str	r3, [r7, #28]
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	4b45      	ldr	r3, [pc, #276]	@ (800616c <HAL_ETH_MspInit+0x16c>)
 8006056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006058:	4a44      	ldr	r2, [pc, #272]	@ (800616c <HAL_ETH_MspInit+0x16c>)
 800605a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800605e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006060:	4b42      	ldr	r3, [pc, #264]	@ (800616c <HAL_ETH_MspInit+0x16c>)
 8006062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006064:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006068:	61bb      	str	r3, [r7, #24]
 800606a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800606c:	4b3f      	ldr	r3, [pc, #252]	@ (800616c <HAL_ETH_MspInit+0x16c>)
 800606e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006070:	4a3e      	ldr	r2, [pc, #248]	@ (800616c <HAL_ETH_MspInit+0x16c>)
 8006072:	f043 0304 	orr.w	r3, r3, #4
 8006076:	6313      	str	r3, [r2, #48]	@ 0x30
 8006078:	4b3c      	ldr	r3, [pc, #240]	@ (800616c <HAL_ETH_MspInit+0x16c>)
 800607a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800607c:	f003 0304 	and.w	r3, r3, #4
 8006080:	617b      	str	r3, [r7, #20]
 8006082:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006084:	4b39      	ldr	r3, [pc, #228]	@ (800616c <HAL_ETH_MspInit+0x16c>)
 8006086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006088:	4a38      	ldr	r2, [pc, #224]	@ (800616c <HAL_ETH_MspInit+0x16c>)
 800608a:	f043 0301 	orr.w	r3, r3, #1
 800608e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006090:	4b36      	ldr	r3, [pc, #216]	@ (800616c <HAL_ETH_MspInit+0x16c>)
 8006092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	613b      	str	r3, [r7, #16]
 800609a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800609c:	4b33      	ldr	r3, [pc, #204]	@ (800616c <HAL_ETH_MspInit+0x16c>)
 800609e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a0:	4a32      	ldr	r2, [pc, #200]	@ (800616c <HAL_ETH_MspInit+0x16c>)
 80060a2:	f043 0302 	orr.w	r3, r3, #2
 80060a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80060a8:	4b30      	ldr	r3, [pc, #192]	@ (800616c <HAL_ETH_MspInit+0x16c>)
 80060aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	60fb      	str	r3, [r7, #12]
 80060b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80060b4:	4b2d      	ldr	r3, [pc, #180]	@ (800616c <HAL_ETH_MspInit+0x16c>)
 80060b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b8:	4a2c      	ldr	r2, [pc, #176]	@ (800616c <HAL_ETH_MspInit+0x16c>)
 80060ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060be:	6313      	str	r3, [r2, #48]	@ 0x30
 80060c0:	4b2a      	ldr	r3, [pc, #168]	@ (800616c <HAL_ETH_MspInit+0x16c>)
 80060c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c8:	60bb      	str	r3, [r7, #8]
 80060ca:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80060cc:	2332      	movs	r3, #50	@ 0x32
 80060ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060d0:	2302      	movs	r3, #2
 80060d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060d4:	2300      	movs	r3, #0
 80060d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060d8:	2303      	movs	r3, #3
 80060da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80060dc:	230b      	movs	r3, #11
 80060de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060e4:	4619      	mov	r1, r3
 80060e6:	4822      	ldr	r0, [pc, #136]	@ (8006170 <HAL_ETH_MspInit+0x170>)
 80060e8:	f7fc fd8e 	bl	8002c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80060ec:	2386      	movs	r3, #134	@ 0x86
 80060ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060f0:	2302      	movs	r3, #2
 80060f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060f4:	2300      	movs	r3, #0
 80060f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060f8:	2303      	movs	r3, #3
 80060fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80060fc:	230b      	movs	r3, #11
 80060fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006100:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006104:	4619      	mov	r1, r3
 8006106:	481b      	ldr	r0, [pc, #108]	@ (8006174 <HAL_ETH_MspInit+0x174>)
 8006108:	f7fc fd7e 	bl	8002c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800610c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006110:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006112:	2302      	movs	r3, #2
 8006114:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006116:	2300      	movs	r3, #0
 8006118:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800611a:	2303      	movs	r3, #3
 800611c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800611e:	230b      	movs	r3, #11
 8006120:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006122:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006126:	4619      	mov	r1, r3
 8006128:	4813      	ldr	r0, [pc, #76]	@ (8006178 <HAL_ETH_MspInit+0x178>)
 800612a:	f7fc fd6d 	bl	8002c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800612e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8006132:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006134:	2302      	movs	r3, #2
 8006136:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006138:	2300      	movs	r3, #0
 800613a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800613c:	2303      	movs	r3, #3
 800613e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006140:	230b      	movs	r3, #11
 8006142:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006144:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006148:	4619      	mov	r1, r3
 800614a:	480c      	ldr	r0, [pc, #48]	@ (800617c <HAL_ETH_MspInit+0x17c>)
 800614c:	f7fc fd5c 	bl	8002c08 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8006150:	2200      	movs	r2, #0
 8006152:	2100      	movs	r1, #0
 8006154:	203d      	movs	r0, #61	@ 0x3d
 8006156:	f7fb fb3a 	bl	80017ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800615a:	203d      	movs	r0, #61	@ 0x3d
 800615c:	f7fb fb53 	bl	8001806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006160:	bf00      	nop
 8006162:	3738      	adds	r7, #56	@ 0x38
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	40028000 	.word	0x40028000
 800616c:	40023800 	.word	0x40023800
 8006170:	40020800 	.word	0x40020800
 8006174:	40020000 	.word	0x40020000
 8006178:	40020400 	.word	0x40020400
 800617c:	40021800 	.word	0x40021800

08006180 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006184:	4802      	ldr	r0, [pc, #8]	@ (8006190 <ETH_PHY_IO_Init+0x10>)
 8006186:	f7fc f8e5 	bl	8002354 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	bd80      	pop	{r7, pc}
 8006190:	200051a4 	.word	0x200051a4

08006194 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006194:	b480      	push	{r7}
 8006196:	af00      	add	r7, sp, #0
  return 0;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	68f9      	ldr	r1, [r7, #12]
 80061b6:	4807      	ldr	r0, [pc, #28]	@ (80061d4 <ETH_PHY_IO_ReadReg+0x30>)
 80061b8:	f7fb ff34 	bl	8002024 <HAL_ETH_ReadPHYRegister>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80061c2:	f04f 33ff 	mov.w	r3, #4294967295
 80061c6:	e000      	b.n	80061ca <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	200051a4 	.word	0x200051a4

080061d8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	68f9      	ldr	r1, [r7, #12]
 80061ea:	4807      	ldr	r0, [pc, #28]	@ (8006208 <ETH_PHY_IO_WriteReg+0x30>)
 80061ec:	f7fb ff65 	bl	80020ba <HAL_ETH_WritePHYRegister>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d002      	beq.n	80061fc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80061f6:	f04f 33ff 	mov.w	r3, #4294967295
 80061fa:	e000      	b.n	80061fe <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	200051a4 	.word	0x200051a4

0800620c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006210:	f7fb f9d2 	bl	80015b8 <HAL_GetTick>
 8006214:	4603      	mov	r3, r0
}
 8006216:	4618      	mov	r0, r3
 8006218:	bd80      	pop	{r7, pc}
	...

0800621c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b0a0      	sub	sp, #128	@ 0x80
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006224:	f107 030c 	add.w	r3, r7, #12
 8006228:	2264      	movs	r2, #100	@ 0x64
 800622a:	2100      	movs	r1, #0
 800622c:	4618      	mov	r0, r3
 800622e:	f00a fb70 	bl	8010912 <memset>
  int32_t PHYLinkState = 0;
 8006232:	2300      	movs	r3, #0
 8006234:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006236:	2300      	movs	r3, #0
 8006238:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800623a:	2300      	movs	r3, #0
 800623c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800623e:	2300      	movs	r3, #0
 8006240:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006242:	483a      	ldr	r0, [pc, #232]	@ (800632c <ethernet_link_check_state+0x110>)
 8006244:	f7fb f8df 	bl	8001406 <LAN8742_GetLinkState>
 8006248:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006250:	089b      	lsrs	r3, r3, #2
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00c      	beq.n	8006276 <ethernet_link_check_state+0x5a>
 800625c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800625e:	2b01      	cmp	r3, #1
 8006260:	dc09      	bgt.n	8006276 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8006262:	4833      	ldr	r0, [pc, #204]	@ (8006330 <ethernet_link_check_state+0x114>)
 8006264:	f7fb fbc5 	bl	80019f2 <HAL_ETH_Stop>
    netif_set_down(netif);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f001 f81d 	bl	80072a8 <netif_set_down>
    netif_set_link_down(netif);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f001 f880 	bl	8007374 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8006274:	e055      	b.n	8006322 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800627c:	f003 0304 	and.w	r3, r3, #4
 8006280:	2b00      	cmp	r3, #0
 8006282:	d14e      	bne.n	8006322 <ethernet_link_check_state+0x106>
 8006284:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006286:	2b01      	cmp	r3, #1
 8006288:	dd4b      	ble.n	8006322 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800628a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800628c:	3b02      	subs	r3, #2
 800628e:	2b03      	cmp	r3, #3
 8006290:	d82a      	bhi.n	80062e8 <ethernet_link_check_state+0xcc>
 8006292:	a201      	add	r2, pc, #4	@ (adr r2, 8006298 <ethernet_link_check_state+0x7c>)
 8006294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006298:	080062a9 	.word	0x080062a9
 800629c:	080062bb 	.word	0x080062bb
 80062a0:	080062cb 	.word	0x080062cb
 80062a4:	080062db 	.word	0x080062db
      duplex = ETH_FULLDUPLEX_MODE;
 80062a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80062ac:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80062ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80062b2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80062b4:	2301      	movs	r3, #1
 80062b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80062b8:	e017      	b.n	80062ea <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80062ba:	2300      	movs	r3, #0
 80062bc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80062be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80062c2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80062c4:	2301      	movs	r3, #1
 80062c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80062c8:	e00f      	b.n	80062ea <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80062ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80062ce:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80062d0:	2300      	movs	r3, #0
 80062d2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80062d4:	2301      	movs	r3, #1
 80062d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80062d8:	e007      	b.n	80062ea <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80062da:	2300      	movs	r3, #0
 80062dc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80062de:	2300      	movs	r3, #0
 80062e0:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80062e2:	2301      	movs	r3, #1
 80062e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80062e6:	e000      	b.n	80062ea <ethernet_link_check_state+0xce>
      break;
 80062e8:	bf00      	nop
    if(linkchanged)
 80062ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d018      	beq.n	8006322 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80062f0:	f107 030c 	add.w	r3, r7, #12
 80062f4:	4619      	mov	r1, r3
 80062f6:	480e      	ldr	r0, [pc, #56]	@ (8006330 <ethernet_link_check_state+0x114>)
 80062f8:	f7fb ff28 	bl	800214c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80062fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062fe:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8006300:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006302:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006304:	f107 030c 	add.w	r3, r7, #12
 8006308:	4619      	mov	r1, r3
 800630a:	4809      	ldr	r0, [pc, #36]	@ (8006330 <ethernet_link_check_state+0x114>)
 800630c:	f7fc f808 	bl	8002320 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8006310:	4807      	ldr	r0, [pc, #28]	@ (8006330 <ethernet_link_check_state+0x114>)
 8006312:	f7fb fb0f 	bl	8001934 <HAL_ETH_Start>
      netif_set_up(netif);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 ff5a 	bl	80071d0 <netif_set_up>
      netif_set_link_up(netif);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fff5 	bl	800730c <netif_set_link_up>
}
 8006322:	bf00      	nop
 8006324:	3780      	adds	r7, #128	@ 0x80
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	2000528c 	.word	0x2000528c
 8006330:	200051a4 	.word	0x200051a4

08006334 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af02      	add	r7, sp, #8
 800633a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800633c:	4812      	ldr	r0, [pc, #72]	@ (8006388 <HAL_ETH_RxAllocateCallback+0x54>)
 800633e:	f000 fcc1 	bl	8006cc4 <memp_malloc_pool>
 8006342:	60f8      	str	r0, [r7, #12]
  if (p)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d014      	beq.n	8006374 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f103 0220 	add.w	r2, r3, #32
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	4a0d      	ldr	r2, [pc, #52]	@ (800638c <HAL_ETH_RxAllocateCallback+0x58>)
 8006358:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006362:	9201      	str	r2, [sp, #4]
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2241      	movs	r2, #65	@ 0x41
 800636a:	2100      	movs	r1, #0
 800636c:	2000      	movs	r0, #0
 800636e:	f001 f9f7 	bl	8007760 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006372:	e005      	b.n	8006380 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006374:	4b06      	ldr	r3, [pc, #24]	@ (8006390 <HAL_ETH_RxAllocateCallback+0x5c>)
 8006376:	2201      	movs	r2, #1
 8006378:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	601a      	str	r2, [r3, #0]
}
 8006380:	bf00      	nop
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	080144b8 	.word	0x080144b8
 800638c:	08005fbd 	.word	0x08005fbd
 8006390:	200051a0 	.word	0x200051a0

08006394 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80063aa:	2300      	movs	r3, #0
 80063ac:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	3b20      	subs	r3, #32
 80063b2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	2200      	movs	r2, #0
 80063b8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	2200      	movs	r2, #0
 80063be:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	887a      	ldrh	r2, [r7, #2]
 80063c4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d103      	bne.n	80063d6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	69fa      	ldr	r2, [r7, #28]
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	e003      	b.n	80063de <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	69fa      	ldr	r2, [r7, #28]
 80063dc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	69fa      	ldr	r2, [r7, #28]
 80063e2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	61fb      	str	r3, [r7, #28]
 80063ea:	e009      	b.n	8006400 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	891a      	ldrh	r2, [r3, #8]
 80063f0:	887b      	ldrh	r3, [r7, #2]
 80063f2:	4413      	add	r3, r2
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	61fb      	str	r3, [r7, #28]
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1f2      	bne.n	80063ec <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8006406:	887b      	ldrh	r3, [r7, #2]
 8006408:	4619      	mov	r1, r3
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7ff fc28 	bl	8005c60 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006410:	bf00      	nop
 8006412:	3720      	adds	r7, #32
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	4603      	mov	r3, r0
 8006420:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006422:	88fb      	ldrh	r3, [r7, #6]
 8006424:	021b      	lsls	r3, r3, #8
 8006426:	b21a      	sxth	r2, r3
 8006428:	88fb      	ldrh	r3, [r7, #6]
 800642a:	0a1b      	lsrs	r3, r3, #8
 800642c:	b29b      	uxth	r3, r3
 800642e:	b21b      	sxth	r3, r3
 8006430:	4313      	orrs	r3, r2
 8006432:	b21b      	sxth	r3, r3
 8006434:	b29b      	uxth	r3, r3
}
 8006436:	4618      	mov	r0, r3
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006442:	b480      	push	{r7}
 8006444:	b083      	sub	sp, #12
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	061a      	lsls	r2, r3, #24
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	021b      	lsls	r3, r3, #8
 8006452:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006456:	431a      	orrs	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	0a1b      	lsrs	r3, r3, #8
 800645c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006460:	431a      	orrs	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	0e1b      	lsrs	r3, r3, #24
 8006466:	4313      	orrs	r3, r2
}
 8006468:	4618      	mov	r0, r3
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800647a:	2300      	movs	r3, #0
 800647c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800647e:	f000 f8d5 	bl	800662c <mem_init>
  memp_init();
 8006482:	f000 fbdb 	bl	8006c3c <memp_init>
  pbuf_init();
  netif_init();
 8006486:	f000 fcd9 	bl	8006e3c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800648a:	f007 f8f5 	bl	800d678 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800648e:	f001 fe51 	bl	8008134 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006492:	f007 f867 	bl	800d564 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006496:	bf00      	nop
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
	...

080064a0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	4603      	mov	r3, r0
 80064a8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80064aa:	4b05      	ldr	r3, [pc, #20]	@ (80064c0 <ptr_to_mem+0x20>)
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	88fb      	ldrh	r3, [r7, #6]
 80064b0:	4413      	add	r3, r2
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	20005918 	.word	0x20005918

080064c4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80064cc:	4b05      	ldr	r3, [pc, #20]	@ (80064e4 <mem_to_ptr+0x20>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	b29b      	uxth	r3, r3
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	20005918 	.word	0x20005918

080064e8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80064e8:	b590      	push	{r4, r7, lr}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80064f0:	4b45      	ldr	r3, [pc, #276]	@ (8006608 <plug_holes+0x120>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d206      	bcs.n	8006508 <plug_holes+0x20>
 80064fa:	4b44      	ldr	r3, [pc, #272]	@ (800660c <plug_holes+0x124>)
 80064fc:	f240 12df 	movw	r2, #479	@ 0x1df
 8006500:	4943      	ldr	r1, [pc, #268]	@ (8006610 <plug_holes+0x128>)
 8006502:	4844      	ldr	r0, [pc, #272]	@ (8006614 <plug_holes+0x12c>)
 8006504:	f00a f966 	bl	80107d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006508:	4b43      	ldr	r3, [pc, #268]	@ (8006618 <plug_holes+0x130>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	429a      	cmp	r2, r3
 8006510:	d306      	bcc.n	8006520 <plug_holes+0x38>
 8006512:	4b3e      	ldr	r3, [pc, #248]	@ (800660c <plug_holes+0x124>)
 8006514:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8006518:	4940      	ldr	r1, [pc, #256]	@ (800661c <plug_holes+0x134>)
 800651a:	483e      	ldr	r0, [pc, #248]	@ (8006614 <plug_holes+0x12c>)
 800651c:	f00a f95a 	bl	80107d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	791b      	ldrb	r3, [r3, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d006      	beq.n	8006536 <plug_holes+0x4e>
 8006528:	4b38      	ldr	r3, [pc, #224]	@ (800660c <plug_holes+0x124>)
 800652a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800652e:	493c      	ldr	r1, [pc, #240]	@ (8006620 <plug_holes+0x138>)
 8006530:	4838      	ldr	r0, [pc, #224]	@ (8006614 <plug_holes+0x12c>)
 8006532:	f00a f94f 	bl	80107d4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800653e:	d906      	bls.n	800654e <plug_holes+0x66>
 8006540:	4b32      	ldr	r3, [pc, #200]	@ (800660c <plug_holes+0x124>)
 8006542:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8006546:	4937      	ldr	r1, [pc, #220]	@ (8006624 <plug_holes+0x13c>)
 8006548:	4832      	ldr	r0, [pc, #200]	@ (8006614 <plug_holes+0x12c>)
 800654a:	f00a f943 	bl	80107d4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	881b      	ldrh	r3, [r3, #0]
 8006552:	4618      	mov	r0, r3
 8006554:	f7ff ffa4 	bl	80064a0 <ptr_to_mem>
 8006558:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	429a      	cmp	r2, r3
 8006560:	d024      	beq.n	80065ac <plug_holes+0xc4>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	791b      	ldrb	r3, [r3, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d120      	bne.n	80065ac <plug_holes+0xc4>
 800656a:	4b2b      	ldr	r3, [pc, #172]	@ (8006618 <plug_holes+0x130>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	429a      	cmp	r2, r3
 8006572:	d01b      	beq.n	80065ac <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006574:	4b2c      	ldr	r3, [pc, #176]	@ (8006628 <plug_holes+0x140>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	429a      	cmp	r2, r3
 800657c:	d102      	bne.n	8006584 <plug_holes+0x9c>
      lfree = mem;
 800657e:	4a2a      	ldr	r2, [pc, #168]	@ (8006628 <plug_holes+0x140>)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	881a      	ldrh	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006594:	d00a      	beq.n	80065ac <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	4618      	mov	r0, r3
 800659c:	f7ff ff80 	bl	80064a0 <ptr_to_mem>
 80065a0:	4604      	mov	r4, r0
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7ff ff8e 	bl	80064c4 <mem_to_ptr>
 80065a8:	4603      	mov	r3, r0
 80065aa:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	885b      	ldrh	r3, [r3, #2]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7ff ff75 	bl	80064a0 <ptr_to_mem>
 80065b6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d01f      	beq.n	8006600 <plug_holes+0x118>
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	791b      	ldrb	r3, [r3, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d11b      	bne.n	8006600 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80065c8:	4b17      	ldr	r3, [pc, #92]	@ (8006628 <plug_holes+0x140>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d102      	bne.n	80065d8 <plug_holes+0xf0>
      lfree = pmem;
 80065d2:	4a15      	ldr	r2, [pc, #84]	@ (8006628 <plug_holes+0x140>)
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	881a      	ldrh	r2, [r3, #0]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80065e8:	d00a      	beq.n	8006600 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7ff ff56 	bl	80064a0 <ptr_to_mem>
 80065f4:	4604      	mov	r4, r0
 80065f6:	68b8      	ldr	r0, [r7, #8]
 80065f8:	f7ff ff64 	bl	80064c4 <mem_to_ptr>
 80065fc:	4603      	mov	r3, r0
 80065fe:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006600:	bf00      	nop
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	bd90      	pop	{r4, r7, pc}
 8006608:	20005918 	.word	0x20005918
 800660c:	08011b14 	.word	0x08011b14
 8006610:	08011b44 	.word	0x08011b44
 8006614:	08011b5c 	.word	0x08011b5c
 8006618:	2000591c 	.word	0x2000591c
 800661c:	08011b84 	.word	0x08011b84
 8006620:	08011ba0 	.word	0x08011ba0
 8006624:	08011bbc 	.word	0x08011bbc
 8006628:	20005920 	.word	0x20005920

0800662c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006632:	4b18      	ldr	r3, [pc, #96]	@ (8006694 <mem_init+0x68>)
 8006634:	3303      	adds	r3, #3
 8006636:	f023 0303 	bic.w	r3, r3, #3
 800663a:	461a      	mov	r2, r3
 800663c:	4b16      	ldr	r3, [pc, #88]	@ (8006698 <mem_init+0x6c>)
 800663e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006640:	4b15      	ldr	r3, [pc, #84]	@ (8006698 <mem_init+0x6c>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800664c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800665a:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800665e:	f7ff ff1f 	bl	80064a0 <ptr_to_mem>
 8006662:	4603      	mov	r3, r0
 8006664:	4a0d      	ldr	r2, [pc, #52]	@ (800669c <mem_init+0x70>)
 8006666:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8006668:	4b0c      	ldr	r3, [pc, #48]	@ (800669c <mem_init+0x70>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2201      	movs	r2, #1
 800666e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006670:	4b0a      	ldr	r3, [pc, #40]	@ (800669c <mem_init+0x70>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8006678:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800667a:	4b08      	ldr	r3, [pc, #32]	@ (800669c <mem_init+0x70>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8006682:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006684:	4b04      	ldr	r3, [pc, #16]	@ (8006698 <mem_init+0x6c>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a05      	ldr	r2, [pc, #20]	@ (80066a0 <mem_init+0x74>)
 800668a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800668c:	bf00      	nop
 800668e:	3708      	adds	r7, #8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	200052c4 	.word	0x200052c4
 8006698:	20005918 	.word	0x20005918
 800669c:	2000591c 	.word	0x2000591c
 80066a0:	20005920 	.word	0x20005920

080066a4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f7ff ff09 	bl	80064c4 <mem_to_ptr>
 80066b2:	4603      	mov	r3, r0
 80066b4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7ff fef0 	bl	80064a0 <ptr_to_mem>
 80066c0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	885b      	ldrh	r3, [r3, #2]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7ff feea 	bl	80064a0 <ptr_to_mem>
 80066cc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	881b      	ldrh	r3, [r3, #0]
 80066d2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80066d6:	d818      	bhi.n	800670a <mem_link_valid+0x66>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	885b      	ldrh	r3, [r3, #2]
 80066dc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80066e0:	d813      	bhi.n	800670a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80066e6:	8afa      	ldrh	r2, [r7, #22]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d004      	beq.n	80066f6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	8afa      	ldrh	r2, [r7, #22]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d109      	bne.n	800670a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80066f6:	4b08      	ldr	r3, [pc, #32]	@ (8006718 <mem_link_valid+0x74>)
 80066f8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d006      	beq.n	800670e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	885b      	ldrh	r3, [r3, #2]
 8006704:	8afa      	ldrh	r2, [r7, #22]
 8006706:	429a      	cmp	r2, r3
 8006708:	d001      	beq.n	800670e <mem_link_valid+0x6a>
    return 0;
 800670a:	2300      	movs	r3, #0
 800670c:	e000      	b.n	8006710 <mem_link_valid+0x6c>
  }
  return 1;
 800670e:	2301      	movs	r3, #1
}
 8006710:	4618      	mov	r0, r3
 8006712:	3718      	adds	r7, #24
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	2000591c 	.word	0x2000591c

0800671c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d04c      	beq.n	80067c4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f003 0303 	and.w	r3, r3, #3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d007      	beq.n	8006744 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006734:	4b25      	ldr	r3, [pc, #148]	@ (80067cc <mem_free+0xb0>)
 8006736:	f240 2273 	movw	r2, #627	@ 0x273
 800673a:	4925      	ldr	r1, [pc, #148]	@ (80067d0 <mem_free+0xb4>)
 800673c:	4825      	ldr	r0, [pc, #148]	@ (80067d4 <mem_free+0xb8>)
 800673e:	f00a f849 	bl	80107d4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006742:	e040      	b.n	80067c6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	3b08      	subs	r3, #8
 8006748:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800674a:	4b23      	ldr	r3, [pc, #140]	@ (80067d8 <mem_free+0xbc>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	429a      	cmp	r2, r3
 8006752:	d306      	bcc.n	8006762 <mem_free+0x46>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f103 020c 	add.w	r2, r3, #12
 800675a:	4b20      	ldr	r3, [pc, #128]	@ (80067dc <mem_free+0xc0>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	429a      	cmp	r2, r3
 8006760:	d907      	bls.n	8006772 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006762:	4b1a      	ldr	r3, [pc, #104]	@ (80067cc <mem_free+0xb0>)
 8006764:	f240 227f 	movw	r2, #639	@ 0x27f
 8006768:	491d      	ldr	r1, [pc, #116]	@ (80067e0 <mem_free+0xc4>)
 800676a:	481a      	ldr	r0, [pc, #104]	@ (80067d4 <mem_free+0xb8>)
 800676c:	f00a f832 	bl	80107d4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006770:	e029      	b.n	80067c6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	791b      	ldrb	r3, [r3, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d107      	bne.n	800678a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800677a:	4b14      	ldr	r3, [pc, #80]	@ (80067cc <mem_free+0xb0>)
 800677c:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8006780:	4918      	ldr	r1, [pc, #96]	@ (80067e4 <mem_free+0xc8>)
 8006782:	4814      	ldr	r0, [pc, #80]	@ (80067d4 <mem_free+0xb8>)
 8006784:	f00a f826 	bl	80107d4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006788:	e01d      	b.n	80067c6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f7ff ff8a 	bl	80066a4 <mem_link_valid>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d107      	bne.n	80067a6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006796:	4b0d      	ldr	r3, [pc, #52]	@ (80067cc <mem_free+0xb0>)
 8006798:	f240 2295 	movw	r2, #661	@ 0x295
 800679c:	4912      	ldr	r1, [pc, #72]	@ (80067e8 <mem_free+0xcc>)
 800679e:	480d      	ldr	r0, [pc, #52]	@ (80067d4 <mem_free+0xb8>)
 80067a0:	f00a f818 	bl	80107d4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80067a4:	e00f      	b.n	80067c6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80067ac:	4b0f      	ldr	r3, [pc, #60]	@ (80067ec <mem_free+0xd0>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d202      	bcs.n	80067bc <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80067b6:	4a0d      	ldr	r2, [pc, #52]	@ (80067ec <mem_free+0xd0>)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f7ff fe93 	bl	80064e8 <plug_holes>
 80067c2:	e000      	b.n	80067c6 <mem_free+0xaa>
    return;
 80067c4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	08011b14 	.word	0x08011b14
 80067d0:	08011be8 	.word	0x08011be8
 80067d4:	08011b5c 	.word	0x08011b5c
 80067d8:	20005918 	.word	0x20005918
 80067dc:	2000591c 	.word	0x2000591c
 80067e0:	08011c0c 	.word	0x08011c0c
 80067e4:	08011c28 	.word	0x08011c28
 80067e8:	08011c50 	.word	0x08011c50
 80067ec:	20005920 	.word	0x20005920

080067f0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b088      	sub	sp, #32
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	460b      	mov	r3, r1
 80067fa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80067fc:	887b      	ldrh	r3, [r7, #2]
 80067fe:	3303      	adds	r3, #3
 8006800:	b29b      	uxth	r3, r3
 8006802:	f023 0303 	bic.w	r3, r3, #3
 8006806:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8006808:	8bfb      	ldrh	r3, [r7, #30]
 800680a:	2b0b      	cmp	r3, #11
 800680c:	d801      	bhi.n	8006812 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800680e:	230c      	movs	r3, #12
 8006810:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006812:	8bfb      	ldrh	r3, [r7, #30]
 8006814:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006818:	d803      	bhi.n	8006822 <mem_trim+0x32>
 800681a:	8bfa      	ldrh	r2, [r7, #30]
 800681c:	887b      	ldrh	r3, [r7, #2]
 800681e:	429a      	cmp	r2, r3
 8006820:	d201      	bcs.n	8006826 <mem_trim+0x36>
    return NULL;
 8006822:	2300      	movs	r3, #0
 8006824:	e0cc      	b.n	80069c0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006826:	4b68      	ldr	r3, [pc, #416]	@ (80069c8 <mem_trim+0x1d8>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	429a      	cmp	r2, r3
 800682e:	d304      	bcc.n	800683a <mem_trim+0x4a>
 8006830:	4b66      	ldr	r3, [pc, #408]	@ (80069cc <mem_trim+0x1dc>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	429a      	cmp	r2, r3
 8006838:	d306      	bcc.n	8006848 <mem_trim+0x58>
 800683a:	4b65      	ldr	r3, [pc, #404]	@ (80069d0 <mem_trim+0x1e0>)
 800683c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8006840:	4964      	ldr	r1, [pc, #400]	@ (80069d4 <mem_trim+0x1e4>)
 8006842:	4865      	ldr	r0, [pc, #404]	@ (80069d8 <mem_trim+0x1e8>)
 8006844:	f009 ffc6 	bl	80107d4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006848:	4b5f      	ldr	r3, [pc, #380]	@ (80069c8 <mem_trim+0x1d8>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	429a      	cmp	r2, r3
 8006850:	d304      	bcc.n	800685c <mem_trim+0x6c>
 8006852:	4b5e      	ldr	r3, [pc, #376]	@ (80069cc <mem_trim+0x1dc>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	429a      	cmp	r2, r3
 800685a:	d301      	bcc.n	8006860 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	e0af      	b.n	80069c0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	3b08      	subs	r3, #8
 8006864:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8006866:	69b8      	ldr	r0, [r7, #24]
 8006868:	f7ff fe2c 	bl	80064c4 <mem_to_ptr>
 800686c:	4603      	mov	r3, r0
 800686e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	881a      	ldrh	r2, [r3, #0]
 8006874:	8afb      	ldrh	r3, [r7, #22]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	b29b      	uxth	r3, r3
 800687a:	3b08      	subs	r3, #8
 800687c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800687e:	8bfa      	ldrh	r2, [r7, #30]
 8006880:	8abb      	ldrh	r3, [r7, #20]
 8006882:	429a      	cmp	r2, r3
 8006884:	d906      	bls.n	8006894 <mem_trim+0xa4>
 8006886:	4b52      	ldr	r3, [pc, #328]	@ (80069d0 <mem_trim+0x1e0>)
 8006888:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800688c:	4953      	ldr	r1, [pc, #332]	@ (80069dc <mem_trim+0x1ec>)
 800688e:	4852      	ldr	r0, [pc, #328]	@ (80069d8 <mem_trim+0x1e8>)
 8006890:	f009 ffa0 	bl	80107d4 <iprintf>
  if (newsize > size) {
 8006894:	8bfa      	ldrh	r2, [r7, #30]
 8006896:	8abb      	ldrh	r3, [r7, #20]
 8006898:	429a      	cmp	r2, r3
 800689a:	d901      	bls.n	80068a0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800689c:	2300      	movs	r3, #0
 800689e:	e08f      	b.n	80069c0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80068a0:	8bfa      	ldrh	r2, [r7, #30]
 80068a2:	8abb      	ldrh	r3, [r7, #20]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d101      	bne.n	80068ac <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	e089      	b.n	80069c0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7ff fdf5 	bl	80064a0 <ptr_to_mem>
 80068b6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	791b      	ldrb	r3, [r3, #4]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d13f      	bne.n	8006940 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	881b      	ldrh	r3, [r3, #0]
 80068c4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80068c8:	d106      	bne.n	80068d8 <mem_trim+0xe8>
 80068ca:	4b41      	ldr	r3, [pc, #260]	@ (80069d0 <mem_trim+0x1e0>)
 80068cc:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80068d0:	4943      	ldr	r1, [pc, #268]	@ (80069e0 <mem_trim+0x1f0>)
 80068d2:	4841      	ldr	r0, [pc, #260]	@ (80069d8 <mem_trim+0x1e8>)
 80068d4:	f009 ff7e 	bl	80107d4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80068de:	8afa      	ldrh	r2, [r7, #22]
 80068e0:	8bfb      	ldrh	r3, [r7, #30]
 80068e2:	4413      	add	r3, r2
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	3308      	adds	r3, #8
 80068e8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80068ea:	4b3e      	ldr	r3, [pc, #248]	@ (80069e4 <mem_trim+0x1f4>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d106      	bne.n	8006902 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80068f4:	89fb      	ldrh	r3, [r7, #14]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7ff fdd2 	bl	80064a0 <ptr_to_mem>
 80068fc:	4603      	mov	r3, r0
 80068fe:	4a39      	ldr	r2, [pc, #228]	@ (80069e4 <mem_trim+0x1f4>)
 8006900:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8006902:	89fb      	ldrh	r3, [r7, #14]
 8006904:	4618      	mov	r0, r3
 8006906:	f7ff fdcb 	bl	80064a0 <ptr_to_mem>
 800690a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	2200      	movs	r2, #0
 8006910:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	89ba      	ldrh	r2, [r7, #12]
 8006916:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	8afa      	ldrh	r2, [r7, #22]
 800691c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	89fa      	ldrh	r2, [r7, #14]
 8006922:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800692c:	d047      	beq.n	80069be <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	881b      	ldrh	r3, [r3, #0]
 8006932:	4618      	mov	r0, r3
 8006934:	f7ff fdb4 	bl	80064a0 <ptr_to_mem>
 8006938:	4602      	mov	r2, r0
 800693a:	89fb      	ldrh	r3, [r7, #14]
 800693c:	8053      	strh	r3, [r2, #2]
 800693e:	e03e      	b.n	80069be <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006940:	8bfb      	ldrh	r3, [r7, #30]
 8006942:	f103 0214 	add.w	r2, r3, #20
 8006946:	8abb      	ldrh	r3, [r7, #20]
 8006948:	429a      	cmp	r2, r3
 800694a:	d838      	bhi.n	80069be <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800694c:	8afa      	ldrh	r2, [r7, #22]
 800694e:	8bfb      	ldrh	r3, [r7, #30]
 8006950:	4413      	add	r3, r2
 8006952:	b29b      	uxth	r3, r3
 8006954:	3308      	adds	r3, #8
 8006956:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006960:	d106      	bne.n	8006970 <mem_trim+0x180>
 8006962:	4b1b      	ldr	r3, [pc, #108]	@ (80069d0 <mem_trim+0x1e0>)
 8006964:	f240 3216 	movw	r2, #790	@ 0x316
 8006968:	491d      	ldr	r1, [pc, #116]	@ (80069e0 <mem_trim+0x1f0>)
 800696a:	481b      	ldr	r0, [pc, #108]	@ (80069d8 <mem_trim+0x1e8>)
 800696c:	f009 ff32 	bl	80107d4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006970:	89fb      	ldrh	r3, [r7, #14]
 8006972:	4618      	mov	r0, r3
 8006974:	f7ff fd94 	bl	80064a0 <ptr_to_mem>
 8006978:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800697a:	4b1a      	ldr	r3, [pc, #104]	@ (80069e4 <mem_trim+0x1f4>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	429a      	cmp	r2, r3
 8006982:	d202      	bcs.n	800698a <mem_trim+0x19a>
      lfree = mem2;
 8006984:	4a17      	ldr	r2, [pc, #92]	@ (80069e4 <mem_trim+0x1f4>)
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	2200      	movs	r2, #0
 800698e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	881a      	ldrh	r2, [r3, #0]
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	8afa      	ldrh	r2, [r7, #22]
 800699c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	89fa      	ldrh	r2, [r7, #14]
 80069a2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80069ac:	d007      	beq.n	80069be <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7ff fd74 	bl	80064a0 <ptr_to_mem>
 80069b8:	4602      	mov	r2, r0
 80069ba:	89fb      	ldrh	r3, [r7, #14]
 80069bc:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80069be:	687b      	ldr	r3, [r7, #4]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3720      	adds	r7, #32
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	20005918 	.word	0x20005918
 80069cc:	2000591c 	.word	0x2000591c
 80069d0:	08011b14 	.word	0x08011b14
 80069d4:	08011c84 	.word	0x08011c84
 80069d8:	08011b5c 	.word	0x08011b5c
 80069dc:	08011c9c 	.word	0x08011c9c
 80069e0:	08011cbc 	.word	0x08011cbc
 80069e4:	20005920 	.word	0x20005920

080069e8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b088      	sub	sp, #32
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	4603      	mov	r3, r0
 80069f0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80069f2:	88fb      	ldrh	r3, [r7, #6]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <mem_malloc+0x14>
    return NULL;
 80069f8:	2300      	movs	r3, #0
 80069fa:	e0d9      	b.n	8006bb0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80069fc:	88fb      	ldrh	r3, [r7, #6]
 80069fe:	3303      	adds	r3, #3
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	f023 0303 	bic.w	r3, r3, #3
 8006a06:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006a08:	8bbb      	ldrh	r3, [r7, #28]
 8006a0a:	2b0b      	cmp	r3, #11
 8006a0c:	d801      	bhi.n	8006a12 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006a0e:	230c      	movs	r3, #12
 8006a10:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006a12:	8bbb      	ldrh	r3, [r7, #28]
 8006a14:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006a18:	d803      	bhi.n	8006a22 <mem_malloc+0x3a>
 8006a1a:	8bba      	ldrh	r2, [r7, #28]
 8006a1c:	88fb      	ldrh	r3, [r7, #6]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d201      	bcs.n	8006a26 <mem_malloc+0x3e>
    return NULL;
 8006a22:	2300      	movs	r3, #0
 8006a24:	e0c4      	b.n	8006bb0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006a26:	4b64      	ldr	r3, [pc, #400]	@ (8006bb8 <mem_malloc+0x1d0>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff fd4a 	bl	80064c4 <mem_to_ptr>
 8006a30:	4603      	mov	r3, r0
 8006a32:	83fb      	strh	r3, [r7, #30]
 8006a34:	e0b4      	b.n	8006ba0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006a36:	8bfb      	ldrh	r3, [r7, #30]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7ff fd31 	bl	80064a0 <ptr_to_mem>
 8006a3e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	791b      	ldrb	r3, [r3, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f040 80a4 	bne.w	8006b92 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	881b      	ldrh	r3, [r3, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	8bfb      	ldrh	r3, [r7, #30]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	f1a3 0208 	sub.w	r2, r3, #8
 8006a58:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	f0c0 8099 	bcc.w	8006b92 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	881b      	ldrh	r3, [r3, #0]
 8006a64:	461a      	mov	r2, r3
 8006a66:	8bfb      	ldrh	r3, [r7, #30]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	f1a3 0208 	sub.w	r2, r3, #8
 8006a6e:	8bbb      	ldrh	r3, [r7, #28]
 8006a70:	3314      	adds	r3, #20
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d333      	bcc.n	8006ade <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006a76:	8bfa      	ldrh	r2, [r7, #30]
 8006a78:	8bbb      	ldrh	r3, [r7, #28]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	3308      	adds	r3, #8
 8006a80:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006a82:	8a7b      	ldrh	r3, [r7, #18]
 8006a84:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006a88:	d106      	bne.n	8006a98 <mem_malloc+0xb0>
 8006a8a:	4b4c      	ldr	r3, [pc, #304]	@ (8006bbc <mem_malloc+0x1d4>)
 8006a8c:	f240 3287 	movw	r2, #903	@ 0x387
 8006a90:	494b      	ldr	r1, [pc, #300]	@ (8006bc0 <mem_malloc+0x1d8>)
 8006a92:	484c      	ldr	r0, [pc, #304]	@ (8006bc4 <mem_malloc+0x1dc>)
 8006a94:	f009 fe9e 	bl	80107d4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006a98:	8a7b      	ldrh	r3, [r7, #18]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7ff fd00 	bl	80064a0 <ptr_to_mem>
 8006aa0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	881a      	ldrh	r2, [r3, #0]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8bfa      	ldrh	r2, [r7, #30]
 8006ab4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	8a7a      	ldrh	r2, [r7, #18]
 8006aba:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006aca:	d00b      	beq.n	8006ae4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	881b      	ldrh	r3, [r3, #0]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7ff fce5 	bl	80064a0 <ptr_to_mem>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	8a7b      	ldrh	r3, [r7, #18]
 8006ada:	8053      	strh	r3, [r2, #2]
 8006adc:	e002      	b.n	8006ae4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006ae4:	4b34      	ldr	r3, [pc, #208]	@ (8006bb8 <mem_malloc+0x1d0>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d127      	bne.n	8006b3e <mem_malloc+0x156>
          struct mem *cur = lfree;
 8006aee:	4b32      	ldr	r3, [pc, #200]	@ (8006bb8 <mem_malloc+0x1d0>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006af4:	e005      	b.n	8006b02 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	881b      	ldrh	r3, [r3, #0]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7ff fcd0 	bl	80064a0 <ptr_to_mem>
 8006b00:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	791b      	ldrb	r3, [r3, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d004      	beq.n	8006b14 <mem_malloc+0x12c>
 8006b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8006bc8 <mem_malloc+0x1e0>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	69ba      	ldr	r2, [r7, #24]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d1f0      	bne.n	8006af6 <mem_malloc+0x10e>
          }
          lfree = cur;
 8006b14:	4a28      	ldr	r2, [pc, #160]	@ (8006bb8 <mem_malloc+0x1d0>)
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006b1a:	4b27      	ldr	r3, [pc, #156]	@ (8006bb8 <mem_malloc+0x1d0>)
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8006bc8 <mem_malloc+0x1e0>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d00b      	beq.n	8006b3e <mem_malloc+0x156>
 8006b26:	4b24      	ldr	r3, [pc, #144]	@ (8006bb8 <mem_malloc+0x1d0>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	791b      	ldrb	r3, [r3, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d006      	beq.n	8006b3e <mem_malloc+0x156>
 8006b30:	4b22      	ldr	r3, [pc, #136]	@ (8006bbc <mem_malloc+0x1d4>)
 8006b32:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8006b36:	4925      	ldr	r1, [pc, #148]	@ (8006bcc <mem_malloc+0x1e4>)
 8006b38:	4822      	ldr	r0, [pc, #136]	@ (8006bc4 <mem_malloc+0x1dc>)
 8006b3a:	f009 fe4b 	bl	80107d4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006b3e:	8bba      	ldrh	r2, [r7, #28]
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	4413      	add	r3, r2
 8006b44:	3308      	adds	r3, #8
 8006b46:	4a20      	ldr	r2, [pc, #128]	@ (8006bc8 <mem_malloc+0x1e0>)
 8006b48:	6812      	ldr	r2, [r2, #0]
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d906      	bls.n	8006b5c <mem_malloc+0x174>
 8006b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8006bbc <mem_malloc+0x1d4>)
 8006b50:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8006b54:	491e      	ldr	r1, [pc, #120]	@ (8006bd0 <mem_malloc+0x1e8>)
 8006b56:	481b      	ldr	r0, [pc, #108]	@ (8006bc4 <mem_malloc+0x1dc>)
 8006b58:	f009 fe3c 	bl	80107d4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	f003 0303 	and.w	r3, r3, #3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d006      	beq.n	8006b74 <mem_malloc+0x18c>
 8006b66:	4b15      	ldr	r3, [pc, #84]	@ (8006bbc <mem_malloc+0x1d4>)
 8006b68:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8006b6c:	4919      	ldr	r1, [pc, #100]	@ (8006bd4 <mem_malloc+0x1ec>)
 8006b6e:	4815      	ldr	r0, [pc, #84]	@ (8006bc4 <mem_malloc+0x1dc>)
 8006b70:	f009 fe30 	bl	80107d4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f003 0303 	and.w	r3, r3, #3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d006      	beq.n	8006b8c <mem_malloc+0x1a4>
 8006b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8006bbc <mem_malloc+0x1d4>)
 8006b80:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8006b84:	4914      	ldr	r1, [pc, #80]	@ (8006bd8 <mem_malloc+0x1f0>)
 8006b86:	480f      	ldr	r0, [pc, #60]	@ (8006bc4 <mem_malloc+0x1dc>)
 8006b88:	f009 fe24 	bl	80107d4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	3308      	adds	r3, #8
 8006b90:	e00e      	b.n	8006bb0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006b92:	8bfb      	ldrh	r3, [r7, #30]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7ff fc83 	bl	80064a0 <ptr_to_mem>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006ba0:	8bfa      	ldrh	r2, [r7, #30]
 8006ba2:	8bbb      	ldrh	r3, [r7, #28]
 8006ba4:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	f4ff af44 	bcc.w	8006a36 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3720      	adds	r7, #32
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	20005920 	.word	0x20005920
 8006bbc:	08011b14 	.word	0x08011b14
 8006bc0:	08011cbc 	.word	0x08011cbc
 8006bc4:	08011b5c 	.word	0x08011b5c
 8006bc8:	2000591c 	.word	0x2000591c
 8006bcc:	08011cd0 	.word	0x08011cd0
 8006bd0:	08011cec 	.word	0x08011cec
 8006bd4:	08011d1c 	.word	0x08011d1c
 8006bd8:	08011d4c 	.word	0x08011d4c

08006bdc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	3303      	adds	r3, #3
 8006bf2:	f023 0303 	bic.w	r3, r3, #3
 8006bf6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	60fb      	str	r3, [r7, #12]
 8006bfc:	e011      	b.n	8006c22 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	881b      	ldrh	r3, [r3, #0]
 8006c14:	461a      	mov	r2, r3
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	4413      	add	r3, r2
 8006c1a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	60fb      	str	r3, [r7, #12]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	885b      	ldrh	r3, [r3, #2]
 8006c26:	461a      	mov	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	dbe7      	blt.n	8006bfe <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006c2e:	bf00      	nop
 8006c30:	bf00      	nop
 8006c32:	3714      	adds	r7, #20
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006c42:	2300      	movs	r3, #0
 8006c44:	80fb      	strh	r3, [r7, #6]
 8006c46:	e009      	b.n	8006c5c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006c48:	88fb      	ldrh	r3, [r7, #6]
 8006c4a:	4a08      	ldr	r2, [pc, #32]	@ (8006c6c <memp_init+0x30>)
 8006c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7ff ffc3 	bl	8006bdc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006c56:	88fb      	ldrh	r3, [r7, #6]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	80fb      	strh	r3, [r7, #6]
 8006c5c:	88fb      	ldrh	r3, [r7, #6]
 8006c5e:	2b08      	cmp	r3, #8
 8006c60:	d9f2      	bls.n	8006c48 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006c62:	bf00      	nop
 8006c64:	bf00      	nop
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	08014530 	.word	0x08014530

08006c70 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d012      	beq.n	8006cac <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	6812      	ldr	r2, [r2, #0]
 8006c8e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f003 0303 	and.w	r3, r3, #3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d006      	beq.n	8006ca8 <do_memp_malloc_pool+0x38>
 8006c9a:	4b07      	ldr	r3, [pc, #28]	@ (8006cb8 <do_memp_malloc_pool+0x48>)
 8006c9c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8006ca0:	4906      	ldr	r1, [pc, #24]	@ (8006cbc <do_memp_malloc_pool+0x4c>)
 8006ca2:	4807      	ldr	r0, [pc, #28]	@ (8006cc0 <do_memp_malloc_pool+0x50>)
 8006ca4:	f009 fd96 	bl	80107d4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	e000      	b.n	8006cae <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	08011d70 	.word	0x08011d70
 8006cbc:	08011da0 	.word	0x08011da0
 8006cc0:	08011dc4 	.word	0x08011dc4

08006cc4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d106      	bne.n	8006ce0 <memp_malloc_pool+0x1c>
 8006cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8006cfc <memp_malloc_pool+0x38>)
 8006cd4:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8006cd8:	4909      	ldr	r1, [pc, #36]	@ (8006d00 <memp_malloc_pool+0x3c>)
 8006cda:	480a      	ldr	r0, [pc, #40]	@ (8006d04 <memp_malloc_pool+0x40>)
 8006cdc:	f009 fd7a 	bl	80107d4 <iprintf>
  if (desc == NULL) {
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <memp_malloc_pool+0x26>
    return NULL;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	e003      	b.n	8006cf2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7ff ffc0 	bl	8006c70 <do_memp_malloc_pool>
 8006cf0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	08011d70 	.word	0x08011d70
 8006d00:	08011dec 	.word	0x08011dec
 8006d04:	08011dc4 	.word	0x08011dc4

08006d08 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	4603      	mov	r3, r0
 8006d10:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006d12:	79fb      	ldrb	r3, [r7, #7]
 8006d14:	2b08      	cmp	r3, #8
 8006d16:	d908      	bls.n	8006d2a <memp_malloc+0x22>
 8006d18:	4b0a      	ldr	r3, [pc, #40]	@ (8006d44 <memp_malloc+0x3c>)
 8006d1a:	f240 1257 	movw	r2, #343	@ 0x157
 8006d1e:	490a      	ldr	r1, [pc, #40]	@ (8006d48 <memp_malloc+0x40>)
 8006d20:	480a      	ldr	r0, [pc, #40]	@ (8006d4c <memp_malloc+0x44>)
 8006d22:	f009 fd57 	bl	80107d4 <iprintf>
 8006d26:	2300      	movs	r3, #0
 8006d28:	e008      	b.n	8006d3c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006d2a:	79fb      	ldrb	r3, [r7, #7]
 8006d2c:	4a08      	ldr	r2, [pc, #32]	@ (8006d50 <memp_malloc+0x48>)
 8006d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7ff ff9c 	bl	8006c70 <do_memp_malloc_pool>
 8006d38:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	08011d70 	.word	0x08011d70
 8006d48:	08011e00 	.word	0x08011e00
 8006d4c:	08011dc4 	.word	0x08011dc4
 8006d50:	08014530 	.word	0x08014530

08006d54 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	f003 0303 	and.w	r3, r3, #3
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d006      	beq.n	8006d76 <do_memp_free_pool+0x22>
 8006d68:	4b0a      	ldr	r3, [pc, #40]	@ (8006d94 <do_memp_free_pool+0x40>)
 8006d6a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8006d6e:	490a      	ldr	r1, [pc, #40]	@ (8006d98 <do_memp_free_pool+0x44>)
 8006d70:	480a      	ldr	r0, [pc, #40]	@ (8006d9c <do_memp_free_pool+0x48>)
 8006d72:	f009 fd2f 	bl	80107d4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006d8c:	bf00      	nop
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	08011d70 	.word	0x08011d70
 8006d98:	08011e20 	.word	0x08011e20
 8006d9c:	08011dc4 	.word	0x08011dc4

08006da0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d106      	bne.n	8006dbe <memp_free_pool+0x1e>
 8006db0:	4b0a      	ldr	r3, [pc, #40]	@ (8006ddc <memp_free_pool+0x3c>)
 8006db2:	f240 1295 	movw	r2, #405	@ 0x195
 8006db6:	490a      	ldr	r1, [pc, #40]	@ (8006de0 <memp_free_pool+0x40>)
 8006db8:	480a      	ldr	r0, [pc, #40]	@ (8006de4 <memp_free_pool+0x44>)
 8006dba:	f009 fd0b 	bl	80107d4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d007      	beq.n	8006dd4 <memp_free_pool+0x34>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d004      	beq.n	8006dd4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7ff ffc1 	bl	8006d54 <do_memp_free_pool>
 8006dd2:	e000      	b.n	8006dd6 <memp_free_pool+0x36>
    return;
 8006dd4:	bf00      	nop
}
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	08011d70 	.word	0x08011d70
 8006de0:	08011dec 	.word	0x08011dec
 8006de4:	08011dc4 	.word	0x08011dc4

08006de8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	4603      	mov	r3, r0
 8006df0:	6039      	str	r1, [r7, #0]
 8006df2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006df4:	79fb      	ldrb	r3, [r7, #7]
 8006df6:	2b08      	cmp	r3, #8
 8006df8:	d907      	bls.n	8006e0a <memp_free+0x22>
 8006dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8006e2c <memp_free+0x44>)
 8006dfc:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8006e00:	490b      	ldr	r1, [pc, #44]	@ (8006e30 <memp_free+0x48>)
 8006e02:	480c      	ldr	r0, [pc, #48]	@ (8006e34 <memp_free+0x4c>)
 8006e04:	f009 fce6 	bl	80107d4 <iprintf>
 8006e08:	e00c      	b.n	8006e24 <memp_free+0x3c>

  if (mem == NULL) {
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d008      	beq.n	8006e22 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006e10:	79fb      	ldrb	r3, [r7, #7]
 8006e12:	4a09      	ldr	r2, [pc, #36]	@ (8006e38 <memp_free+0x50>)
 8006e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e18:	6839      	ldr	r1, [r7, #0]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7ff ff9a 	bl	8006d54 <do_memp_free_pool>
 8006e20:	e000      	b.n	8006e24 <memp_free+0x3c>
    return;
 8006e22:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	08011d70 	.word	0x08011d70
 8006e30:	08011e40 	.word	0x08011e40
 8006e34:	08011dc4 	.word	0x08011dc4
 8006e38:	08014530 	.word	0x08014530

08006e3c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006e40:	bf00      	nop
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
	...

08006e4c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d108      	bne.n	8006e72 <netif_add+0x26>
 8006e60:	4b57      	ldr	r3, [pc, #348]	@ (8006fc0 <netif_add+0x174>)
 8006e62:	f240 1227 	movw	r2, #295	@ 0x127
 8006e66:	4957      	ldr	r1, [pc, #348]	@ (8006fc4 <netif_add+0x178>)
 8006e68:	4857      	ldr	r0, [pc, #348]	@ (8006fc8 <netif_add+0x17c>)
 8006e6a:	f009 fcb3 	bl	80107d4 <iprintf>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	e0a2      	b.n	8006fb8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d108      	bne.n	8006e8a <netif_add+0x3e>
 8006e78:	4b51      	ldr	r3, [pc, #324]	@ (8006fc0 <netif_add+0x174>)
 8006e7a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006e7e:	4953      	ldr	r1, [pc, #332]	@ (8006fcc <netif_add+0x180>)
 8006e80:	4851      	ldr	r0, [pc, #324]	@ (8006fc8 <netif_add+0x17c>)
 8006e82:	f009 fca7 	bl	80107d4 <iprintf>
 8006e86:	2300      	movs	r3, #0
 8006e88:	e096      	b.n	8006fb8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006e90:	4b4f      	ldr	r3, [pc, #316]	@ (8006fd0 <netif_add+0x184>)
 8006e92:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006e9a:	4b4d      	ldr	r3, [pc, #308]	@ (8006fd0 <netif_add+0x184>)
 8006e9c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006ea4:	4b4a      	ldr	r3, [pc, #296]	@ (8006fd0 <netif_add+0x184>)
 8006ea6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	4a45      	ldr	r2, [pc, #276]	@ (8006fd4 <netif_add+0x188>)
 8006ebe:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6a3a      	ldr	r2, [r7, #32]
 8006ed8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006eda:	4b3f      	ldr	r3, [pc, #252]	@ (8006fd8 <netif_add+0x18c>)
 8006edc:	781a      	ldrb	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ee8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	68b9      	ldr	r1, [r7, #8]
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 f913 	bl	800711c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	4798      	blx	r3
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <netif_add+0xba>
    return NULL;
 8006f02:	2300      	movs	r3, #0
 8006f04:	e058      	b.n	8006fb8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006f0c:	2bff      	cmp	r3, #255	@ 0xff
 8006f0e:	d103      	bne.n	8006f18 <netif_add+0xcc>
        netif->num = 0;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006f1c:	4b2f      	ldr	r3, [pc, #188]	@ (8006fdc <netif_add+0x190>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	617b      	str	r3, [r7, #20]
 8006f22:	e02b      	b.n	8006f7c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d106      	bne.n	8006f3a <netif_add+0xee>
 8006f2c:	4b24      	ldr	r3, [pc, #144]	@ (8006fc0 <netif_add+0x174>)
 8006f2e:	f240 128b 	movw	r2, #395	@ 0x18b
 8006f32:	492b      	ldr	r1, [pc, #172]	@ (8006fe0 <netif_add+0x194>)
 8006f34:	4824      	ldr	r0, [pc, #144]	@ (8006fc8 <netif_add+0x17c>)
 8006f36:	f009 fc4d 	bl	80107d4 <iprintf>
        num_netifs++;
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	2bff      	cmp	r3, #255	@ 0xff
 8006f44:	dd06      	ble.n	8006f54 <netif_add+0x108>
 8006f46:	4b1e      	ldr	r3, [pc, #120]	@ (8006fc0 <netif_add+0x174>)
 8006f48:	f240 128d 	movw	r2, #397	@ 0x18d
 8006f4c:	4925      	ldr	r1, [pc, #148]	@ (8006fe4 <netif_add+0x198>)
 8006f4e:	481e      	ldr	r0, [pc, #120]	@ (8006fc8 <netif_add+0x17c>)
 8006f50:	f009 fc40 	bl	80107d4 <iprintf>
        if (netif2->num == netif->num) {
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d108      	bne.n	8006f76 <netif_add+0x12a>
          netif->num++;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8006f74:	e005      	b.n	8006f82 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	617b      	str	r3, [r7, #20]
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1d0      	bne.n	8006f24 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1be      	bne.n	8006f06 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006f8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8006f90:	d103      	bne.n	8006f9a <netif_add+0x14e>
    netif_num = 0;
 8006f92:	4b11      	ldr	r3, [pc, #68]	@ (8006fd8 <netif_add+0x18c>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	701a      	strb	r2, [r3, #0]
 8006f98:	e006      	b.n	8006fa8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8006fd8 <netif_add+0x18c>)
 8006fa6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8006fdc <netif_add+0x190>)
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8006fdc <netif_add+0x190>)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3718      	adds	r7, #24
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	08011e5c 	.word	0x08011e5c
 8006fc4:	08011ef0 	.word	0x08011ef0
 8006fc8:	08011eac 	.word	0x08011eac
 8006fcc:	08011f0c 	.word	0x08011f0c
 8006fd0:	08014594 	.word	0x08014594
 8006fd4:	080073f7 	.word	0x080073f7
 8006fd8:	20008818 	.word	0x20008818
 8006fdc:	20008810 	.word	0x20008810
 8006fe0:	08011f30 	.word	0x08011f30
 8006fe4:	08011f44 	.word	0x08011f44

08006fe8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006ff2:	6839      	ldr	r1, [r7, #0]
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f002 fbe7 	bl	80097c8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006ffa:	6839      	ldr	r1, [r7, #0]
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f006 ff73 	bl	800dee8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007002:	bf00      	nop
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
	...

0800700c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d106      	bne.n	800702c <netif_do_set_ipaddr+0x20>
 800701e:	4b1d      	ldr	r3, [pc, #116]	@ (8007094 <netif_do_set_ipaddr+0x88>)
 8007020:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8007024:	491c      	ldr	r1, [pc, #112]	@ (8007098 <netif_do_set_ipaddr+0x8c>)
 8007026:	481d      	ldr	r0, [pc, #116]	@ (800709c <netif_do_set_ipaddr+0x90>)
 8007028:	f009 fbd4 	bl	80107d4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d106      	bne.n	8007040 <netif_do_set_ipaddr+0x34>
 8007032:	4b18      	ldr	r3, [pc, #96]	@ (8007094 <netif_do_set_ipaddr+0x88>)
 8007034:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8007038:	4917      	ldr	r1, [pc, #92]	@ (8007098 <netif_do_set_ipaddr+0x8c>)
 800703a:	4818      	ldr	r0, [pc, #96]	@ (800709c <netif_do_set_ipaddr+0x90>)
 800703c:	f009 fbca 	bl	80107d4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	3304      	adds	r3, #4
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	429a      	cmp	r2, r3
 800704c:	d01c      	beq.n	8007088 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	3304      	adds	r3, #4
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800705e:	f107 0314 	add.w	r3, r7, #20
 8007062:	4619      	mov	r1, r3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f7ff ffbf 	bl	8006fe8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <netif_do_set_ipaddr+0x6a>
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	e000      	b.n	8007078 <netif_do_set_ipaddr+0x6c>
 8007076:	2300      	movs	r3, #0
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800707c:	2101      	movs	r1, #1
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	f000 f8d2 	bl	8007228 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007084:	2301      	movs	r3, #1
 8007086:	e000      	b.n	800708a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3718      	adds	r7, #24
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	08011e5c 	.word	0x08011e5c
 8007098:	08011f74 	.word	0x08011f74
 800709c:	08011eac 	.word	0x08011eac

080070a0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	3308      	adds	r3, #8
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d00a      	beq.n	80070d0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d002      	beq.n	80070c6 <netif_do_set_netmask+0x26>
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	e000      	b.n	80070c8 <netif_do_set_netmask+0x28>
 80070c6:	2300      	movs	r3, #0
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80070cc:	2301      	movs	r3, #1
 80070ce:	e000      	b.n	80070d2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80070de:	b480      	push	{r7}
 80070e0:	b085      	sub	sp, #20
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	60f8      	str	r0, [r7, #12]
 80070e6:	60b9      	str	r1, [r7, #8]
 80070e8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	330c      	adds	r3, #12
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d00a      	beq.n	800710e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d002      	beq.n	8007104 <netif_do_set_gw+0x26>
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	e000      	b.n	8007106 <netif_do_set_gw+0x28>
 8007104:	2300      	movs	r3, #0
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800710a:	2301      	movs	r3, #1
 800710c:	e000      	b.n	8007110 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b088      	sub	sp, #32
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
 8007128:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800712a:	2300      	movs	r3, #0
 800712c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800712e:	2300      	movs	r3, #0
 8007130:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d101      	bne.n	800713c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007138:	4b1c      	ldr	r3, [pc, #112]	@ (80071ac <netif_set_addr+0x90>)
 800713a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007142:	4b1a      	ldr	r3, [pc, #104]	@ (80071ac <netif_set_addr+0x90>)
 8007144:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d101      	bne.n	8007150 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800714c:	4b17      	ldr	r3, [pc, #92]	@ (80071ac <netif_set_addr+0x90>)
 800714e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d003      	beq.n	800715e <netif_set_addr+0x42>
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <netif_set_addr+0x46>
 800715e:	2301      	movs	r3, #1
 8007160:	e000      	b.n	8007164 <netif_set_addr+0x48>
 8007162:	2300      	movs	r3, #0
 8007164:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d006      	beq.n	800717a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800716c:	f107 0310 	add.w	r3, r7, #16
 8007170:	461a      	mov	r2, r3
 8007172:	68b9      	ldr	r1, [r7, #8]
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f7ff ff49 	bl	800700c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800717a:	69fa      	ldr	r2, [r7, #28]
 800717c:	6879      	ldr	r1, [r7, #4]
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f7ff ff8e 	bl	80070a0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007184:	69ba      	ldr	r2, [r7, #24]
 8007186:	6839      	ldr	r1, [r7, #0]
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f7ff ffa8 	bl	80070de <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d106      	bne.n	80071a2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007194:	f107 0310 	add.w	r3, r7, #16
 8007198:	461a      	mov	r2, r3
 800719a:	68b9      	ldr	r1, [r7, #8]
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f7ff ff35 	bl	800700c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80071a2:	bf00      	nop
 80071a4:	3720      	adds	r7, #32
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	08014594 	.word	0x08014594

080071b0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80071b8:	4a04      	ldr	r2, [pc, #16]	@ (80071cc <netif_set_default+0x1c>)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80071be:	bf00      	nop
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	20008814 	.word	0x20008814

080071d0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d107      	bne.n	80071ee <netif_set_up+0x1e>
 80071de:	4b0f      	ldr	r3, [pc, #60]	@ (800721c <netif_set_up+0x4c>)
 80071e0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80071e4:	490e      	ldr	r1, [pc, #56]	@ (8007220 <netif_set_up+0x50>)
 80071e6:	480f      	ldr	r0, [pc, #60]	@ (8007224 <netif_set_up+0x54>)
 80071e8:	f009 faf4 	bl	80107d4 <iprintf>
 80071ec:	e013      	b.n	8007216 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80071f4:	f003 0301 	and.w	r3, r3, #1
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10c      	bne.n	8007216 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007202:	f043 0301 	orr.w	r3, r3, #1
 8007206:	b2da      	uxtb	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800720e:	2103      	movs	r1, #3
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f809 	bl	8007228 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	08011e5c 	.word	0x08011e5c
 8007220:	08011fe4 	.word	0x08011fe4
 8007224:	08011eac 	.word	0x08011eac

08007228 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	460b      	mov	r3, r1
 8007232:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d106      	bne.n	8007248 <netif_issue_reports+0x20>
 800723a:	4b18      	ldr	r3, [pc, #96]	@ (800729c <netif_issue_reports+0x74>)
 800723c:	f240 326d 	movw	r2, #877	@ 0x36d
 8007240:	4917      	ldr	r1, [pc, #92]	@ (80072a0 <netif_issue_reports+0x78>)
 8007242:	4818      	ldr	r0, [pc, #96]	@ (80072a4 <netif_issue_reports+0x7c>)
 8007244:	f009 fac6 	bl	80107d4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800724e:	f003 0304 	and.w	r3, r3, #4
 8007252:	2b00      	cmp	r3, #0
 8007254:	d01e      	beq.n	8007294 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800725c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007260:	2b00      	cmp	r3, #0
 8007262:	d017      	beq.n	8007294 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007264:	78fb      	ldrb	r3, [r7, #3]
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b00      	cmp	r3, #0
 800726c:	d013      	beq.n	8007296 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	3304      	adds	r3, #4
 8007272:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00e      	beq.n	8007296 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800727e:	f003 0308 	and.w	r3, r3, #8
 8007282:	2b00      	cmp	r3, #0
 8007284:	d007      	beq.n	8007296 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	3304      	adds	r3, #4
 800728a:	4619      	mov	r1, r3
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f007 fd95 	bl	800edbc <etharp_request>
 8007292:	e000      	b.n	8007296 <netif_issue_reports+0x6e>
    return;
 8007294:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	08011e5c 	.word	0x08011e5c
 80072a0:	08012000 	.word	0x08012000
 80072a4:	08011eac 	.word	0x08011eac

080072a8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d107      	bne.n	80072c6 <netif_set_down+0x1e>
 80072b6:	4b12      	ldr	r3, [pc, #72]	@ (8007300 <netif_set_down+0x58>)
 80072b8:	f240 329b 	movw	r2, #923	@ 0x39b
 80072bc:	4911      	ldr	r1, [pc, #68]	@ (8007304 <netif_set_down+0x5c>)
 80072be:	4812      	ldr	r0, [pc, #72]	@ (8007308 <netif_set_down+0x60>)
 80072c0:	f009 fa88 	bl	80107d4 <iprintf>
 80072c4:	e019      	b.n	80072fa <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d012      	beq.n	80072fa <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80072da:	f023 0301 	bic.w	r3, r3, #1
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80072ec:	f003 0308 	and.w	r3, r3, #8
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d002      	beq.n	80072fa <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f007 f91f 	bl	800e538 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80072fa:	3708      	adds	r7, #8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	08011e5c 	.word	0x08011e5c
 8007304:	08012024 	.word	0x08012024
 8007308:	08011eac 	.word	0x08011eac

0800730c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d107      	bne.n	800732a <netif_set_link_up+0x1e>
 800731a:	4b13      	ldr	r3, [pc, #76]	@ (8007368 <netif_set_link_up+0x5c>)
 800731c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8007320:	4912      	ldr	r1, [pc, #72]	@ (800736c <netif_set_link_up+0x60>)
 8007322:	4813      	ldr	r0, [pc, #76]	@ (8007370 <netif_set_link_up+0x64>)
 8007324:	f009 fa56 	bl	80107d4 <iprintf>
 8007328:	e01b      	b.n	8007362 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007330:	f003 0304 	and.w	r3, r3, #4
 8007334:	2b00      	cmp	r3, #0
 8007336:	d114      	bne.n	8007362 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800733e:	f043 0304 	orr.w	r3, r3, #4
 8007342:	b2da      	uxtb	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800734a:	2103      	movs	r1, #3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7ff ff6b 	bl	8007228 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <netif_set_link_up+0x56>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	69db      	ldr	r3, [r3, #28]
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	08011e5c 	.word	0x08011e5c
 800736c:	08012044 	.word	0x08012044
 8007370:	08011eac 	.word	0x08011eac

08007374 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d107      	bne.n	8007392 <netif_set_link_down+0x1e>
 8007382:	4b11      	ldr	r3, [pc, #68]	@ (80073c8 <netif_set_link_down+0x54>)
 8007384:	f240 4206 	movw	r2, #1030	@ 0x406
 8007388:	4910      	ldr	r1, [pc, #64]	@ (80073cc <netif_set_link_down+0x58>)
 800738a:	4811      	ldr	r0, [pc, #68]	@ (80073d0 <netif_set_link_down+0x5c>)
 800738c:	f009 fa22 	bl	80107d4 <iprintf>
 8007390:	e017      	b.n	80073c2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007398:	f003 0304 	and.w	r3, r3, #4
 800739c:	2b00      	cmp	r3, #0
 800739e:	d010      	beq.n	80073c2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80073a6:	f023 0304 	bic.w	r3, r3, #4
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	69db      	ldr	r3, [r3, #28]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <netif_set_link_down+0x4e>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	08011e5c 	.word	0x08011e5c
 80073cc:	08012068 	.word	0x08012068
 80073d0:	08011eac 	.word	0x08011eac

080073d4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	61da      	str	r2, [r3, #28]
  }
}
 80073ea:	bf00      	nop
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b085      	sub	sp, #20
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	60f8      	str	r0, [r7, #12]
 80073fe:	60b9      	str	r1, [r7, #8]
 8007400:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8007402:	f06f 030b 	mvn.w	r3, #11
}
 8007406:	4618      	mov	r0, r3
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
	...

08007414 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	4603      	mov	r3, r0
 800741c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800741e:	79fb      	ldrb	r3, [r7, #7]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d013      	beq.n	800744c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007424:	4b0d      	ldr	r3, [pc, #52]	@ (800745c <netif_get_by_index+0x48>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	60fb      	str	r3, [r7, #12]
 800742a:	e00c      	b.n	8007446 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007432:	3301      	adds	r3, #1
 8007434:	b2db      	uxtb	r3, r3
 8007436:	79fa      	ldrb	r2, [r7, #7]
 8007438:	429a      	cmp	r2, r3
 800743a:	d101      	bne.n	8007440 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	e006      	b.n	800744e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	60fb      	str	r3, [r7, #12]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1ef      	bne.n	800742c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3714      	adds	r7, #20
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	20008810 	.word	0x20008810

08007460 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007466:	4b0c      	ldr	r3, [pc, #48]	@ (8007498 <pbuf_free_ooseq+0x38>)
 8007468:	2200      	movs	r2, #0
 800746a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800746c:	4b0b      	ldr	r3, [pc, #44]	@ (800749c <pbuf_free_ooseq+0x3c>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	607b      	str	r3, [r7, #4]
 8007472:	e00a      	b.n	800748a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007478:	2b00      	cmp	r3, #0
 800747a:	d003      	beq.n	8007484 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f002 f9e1 	bl	8009844 <tcp_free_ooseq>
      return;
 8007482:	e005      	b.n	8007490 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	607b      	str	r3, [r7, #4]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1f1      	bne.n	8007474 <pbuf_free_ooseq+0x14>
    }
  }
}
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	20008819 	.word	0x20008819
 800749c:	20008828 	.word	0x20008828

080074a0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80074a0:	b480      	push	{r7}
 80074a2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80074a4:	4b03      	ldr	r3, [pc, #12]	@ (80074b4 <pbuf_pool_is_empty+0x14>)
 80074a6:	2201      	movs	r2, #1
 80074a8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80074aa:	bf00      	nop
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	20008819 	.word	0x20008819

080074b8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	4611      	mov	r1, r2
 80074c4:	461a      	mov	r2, r3
 80074c6:	460b      	mov	r3, r1
 80074c8:	80fb      	strh	r3, [r7, #6]
 80074ca:	4613      	mov	r3, r2
 80074cc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	88fa      	ldrh	r2, [r7, #6]
 80074de:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	88ba      	ldrh	r2, [r7, #4]
 80074e4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80074e6:	8b3b      	ldrh	r3, [r7, #24]
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	7f3a      	ldrb	r2, [r7, #28]
 80074f2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2201      	movs	r2, #1
 80074f8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	73da      	strb	r2, [r3, #15]
}
 8007500:	bf00      	nop
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b08c      	sub	sp, #48	@ 0x30
 8007510:	af02      	add	r7, sp, #8
 8007512:	4603      	mov	r3, r0
 8007514:	71fb      	strb	r3, [r7, #7]
 8007516:	460b      	mov	r3, r1
 8007518:	80bb      	strh	r3, [r7, #4]
 800751a:	4613      	mov	r3, r2
 800751c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800751e:	79fb      	ldrb	r3, [r7, #7]
 8007520:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007522:	887b      	ldrh	r3, [r7, #2]
 8007524:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8007528:	d07f      	beq.n	800762a <pbuf_alloc+0x11e>
 800752a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800752e:	f300 80c8 	bgt.w	80076c2 <pbuf_alloc+0x1b6>
 8007532:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8007536:	d010      	beq.n	800755a <pbuf_alloc+0x4e>
 8007538:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800753c:	f300 80c1 	bgt.w	80076c2 <pbuf_alloc+0x1b6>
 8007540:	2b01      	cmp	r3, #1
 8007542:	d002      	beq.n	800754a <pbuf_alloc+0x3e>
 8007544:	2b41      	cmp	r3, #65	@ 0x41
 8007546:	f040 80bc 	bne.w	80076c2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800754a:	887a      	ldrh	r2, [r7, #2]
 800754c:	88bb      	ldrh	r3, [r7, #4]
 800754e:	4619      	mov	r1, r3
 8007550:	2000      	movs	r0, #0
 8007552:	f000 f8d1 	bl	80076f8 <pbuf_alloc_reference>
 8007556:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8007558:	e0bd      	b.n	80076d6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800755a:	2300      	movs	r3, #0
 800755c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800755e:	2300      	movs	r3, #0
 8007560:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007562:	88bb      	ldrh	r3, [r7, #4]
 8007564:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007566:	2008      	movs	r0, #8
 8007568:	f7ff fbce 	bl	8006d08 <memp_malloc>
 800756c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d109      	bne.n	8007588 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8007574:	f7ff ff94 	bl	80074a0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8007578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757a:	2b00      	cmp	r3, #0
 800757c:	d002      	beq.n	8007584 <pbuf_alloc+0x78>
            pbuf_free(p);
 800757e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007580:	f000 faa8 	bl	8007ad4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007584:	2300      	movs	r3, #0
 8007586:	e0a7      	b.n	80076d8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007588:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800758a:	3303      	adds	r3, #3
 800758c:	b29b      	uxth	r3, r3
 800758e:	f023 0303 	bic.w	r3, r3, #3
 8007592:	b29b      	uxth	r3, r3
 8007594:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8007598:	b29b      	uxth	r3, r3
 800759a:	8b7a      	ldrh	r2, [r7, #26]
 800759c:	4293      	cmp	r3, r2
 800759e:	bf28      	it	cs
 80075a0:	4613      	movcs	r3, r2
 80075a2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80075a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80075a6:	3310      	adds	r3, #16
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	4413      	add	r3, r2
 80075ac:	3303      	adds	r3, #3
 80075ae:	f023 0303 	bic.w	r3, r3, #3
 80075b2:	4618      	mov	r0, r3
 80075b4:	89f9      	ldrh	r1, [r7, #14]
 80075b6:	8b7a      	ldrh	r2, [r7, #26]
 80075b8:	2300      	movs	r3, #0
 80075ba:	9301      	str	r3, [sp, #4]
 80075bc:	887b      	ldrh	r3, [r7, #2]
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	460b      	mov	r3, r1
 80075c2:	4601      	mov	r1, r0
 80075c4:	6938      	ldr	r0, [r7, #16]
 80075c6:	f7ff ff77 	bl	80074b8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	f003 0303 	and.w	r3, r3, #3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d006      	beq.n	80075e4 <pbuf_alloc+0xd8>
 80075d6:	4b42      	ldr	r3, [pc, #264]	@ (80076e0 <pbuf_alloc+0x1d4>)
 80075d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80075dc:	4941      	ldr	r1, [pc, #260]	@ (80076e4 <pbuf_alloc+0x1d8>)
 80075de:	4842      	ldr	r0, [pc, #264]	@ (80076e8 <pbuf_alloc+0x1dc>)
 80075e0:	f009 f8f8 	bl	80107d4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80075e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80075e6:	3303      	adds	r3, #3
 80075e8:	f023 0303 	bic.w	r3, r3, #3
 80075ec:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80075f0:	d106      	bne.n	8007600 <pbuf_alloc+0xf4>
 80075f2:	4b3b      	ldr	r3, [pc, #236]	@ (80076e0 <pbuf_alloc+0x1d4>)
 80075f4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80075f8:	493c      	ldr	r1, [pc, #240]	@ (80076ec <pbuf_alloc+0x1e0>)
 80075fa:	483b      	ldr	r0, [pc, #236]	@ (80076e8 <pbuf_alloc+0x1dc>)
 80075fc:	f009 f8ea 	bl	80107d4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007602:	2b00      	cmp	r3, #0
 8007604:	d102      	bne.n	800760c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	627b      	str	r3, [r7, #36]	@ 0x24
 800760a:	e002      	b.n	8007612 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	693a      	ldr	r2, [r7, #16]
 8007610:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007616:	8b7a      	ldrh	r2, [r7, #26]
 8007618:	89fb      	ldrh	r3, [r7, #14]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800761e:	2300      	movs	r3, #0
 8007620:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8007622:	8b7b      	ldrh	r3, [r7, #26]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d19e      	bne.n	8007566 <pbuf_alloc+0x5a>
      break;
 8007628:	e055      	b.n	80076d6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800762a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800762c:	3303      	adds	r3, #3
 800762e:	b29b      	uxth	r3, r3
 8007630:	f023 0303 	bic.w	r3, r3, #3
 8007634:	b29a      	uxth	r2, r3
 8007636:	88bb      	ldrh	r3, [r7, #4]
 8007638:	3303      	adds	r3, #3
 800763a:	b29b      	uxth	r3, r3
 800763c:	f023 0303 	bic.w	r3, r3, #3
 8007640:	b29b      	uxth	r3, r3
 8007642:	4413      	add	r3, r2
 8007644:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007646:	8b3b      	ldrh	r3, [r7, #24]
 8007648:	3310      	adds	r3, #16
 800764a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800764c:	8b3a      	ldrh	r2, [r7, #24]
 800764e:	88bb      	ldrh	r3, [r7, #4]
 8007650:	3303      	adds	r3, #3
 8007652:	f023 0303 	bic.w	r3, r3, #3
 8007656:	429a      	cmp	r2, r3
 8007658:	d306      	bcc.n	8007668 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800765a:	8afa      	ldrh	r2, [r7, #22]
 800765c:	88bb      	ldrh	r3, [r7, #4]
 800765e:	3303      	adds	r3, #3
 8007660:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007664:	429a      	cmp	r2, r3
 8007666:	d201      	bcs.n	800766c <pbuf_alloc+0x160>
        return NULL;
 8007668:	2300      	movs	r3, #0
 800766a:	e035      	b.n	80076d8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800766c:	8afb      	ldrh	r3, [r7, #22]
 800766e:	4618      	mov	r0, r3
 8007670:	f7ff f9ba 	bl	80069e8 <mem_malloc>
 8007674:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8007676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <pbuf_alloc+0x174>
        return NULL;
 800767c:	2300      	movs	r3, #0
 800767e:	e02b      	b.n	80076d8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007680:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007682:	3310      	adds	r3, #16
 8007684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007686:	4413      	add	r3, r2
 8007688:	3303      	adds	r3, #3
 800768a:	f023 0303 	bic.w	r3, r3, #3
 800768e:	4618      	mov	r0, r3
 8007690:	88b9      	ldrh	r1, [r7, #4]
 8007692:	88ba      	ldrh	r2, [r7, #4]
 8007694:	2300      	movs	r3, #0
 8007696:	9301      	str	r3, [sp, #4]
 8007698:	887b      	ldrh	r3, [r7, #2]
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	460b      	mov	r3, r1
 800769e:	4601      	mov	r1, r0
 80076a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80076a2:	f7ff ff09 	bl	80074b8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80076a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f003 0303 	and.w	r3, r3, #3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d010      	beq.n	80076d4 <pbuf_alloc+0x1c8>
 80076b2:	4b0b      	ldr	r3, [pc, #44]	@ (80076e0 <pbuf_alloc+0x1d4>)
 80076b4:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80076b8:	490d      	ldr	r1, [pc, #52]	@ (80076f0 <pbuf_alloc+0x1e4>)
 80076ba:	480b      	ldr	r0, [pc, #44]	@ (80076e8 <pbuf_alloc+0x1dc>)
 80076bc:	f009 f88a 	bl	80107d4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80076c0:	e008      	b.n	80076d4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80076c2:	4b07      	ldr	r3, [pc, #28]	@ (80076e0 <pbuf_alloc+0x1d4>)
 80076c4:	f240 1227 	movw	r2, #295	@ 0x127
 80076c8:	490a      	ldr	r1, [pc, #40]	@ (80076f4 <pbuf_alloc+0x1e8>)
 80076ca:	4807      	ldr	r0, [pc, #28]	@ (80076e8 <pbuf_alloc+0x1dc>)
 80076cc:	f009 f882 	bl	80107d4 <iprintf>
      return NULL;
 80076d0:	2300      	movs	r3, #0
 80076d2:	e001      	b.n	80076d8 <pbuf_alloc+0x1cc>
      break;
 80076d4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80076d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3728      	adds	r7, #40	@ 0x28
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	0801208c 	.word	0x0801208c
 80076e4:	080120bc 	.word	0x080120bc
 80076e8:	080120ec 	.word	0x080120ec
 80076ec:	08012114 	.word	0x08012114
 80076f0:	08012148 	.word	0x08012148
 80076f4:	08012174 	.word	0x08012174

080076f8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b086      	sub	sp, #24
 80076fc:	af02      	add	r7, sp, #8
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	460b      	mov	r3, r1
 8007702:	807b      	strh	r3, [r7, #2]
 8007704:	4613      	mov	r3, r2
 8007706:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007708:	883b      	ldrh	r3, [r7, #0]
 800770a:	2b41      	cmp	r3, #65	@ 0x41
 800770c:	d009      	beq.n	8007722 <pbuf_alloc_reference+0x2a>
 800770e:	883b      	ldrh	r3, [r7, #0]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d006      	beq.n	8007722 <pbuf_alloc_reference+0x2a>
 8007714:	4b0f      	ldr	r3, [pc, #60]	@ (8007754 <pbuf_alloc_reference+0x5c>)
 8007716:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800771a:	490f      	ldr	r1, [pc, #60]	@ (8007758 <pbuf_alloc_reference+0x60>)
 800771c:	480f      	ldr	r0, [pc, #60]	@ (800775c <pbuf_alloc_reference+0x64>)
 800771e:	f009 f859 	bl	80107d4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007722:	2007      	movs	r0, #7
 8007724:	f7ff faf0 	bl	8006d08 <memp_malloc>
 8007728:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8007730:	2300      	movs	r3, #0
 8007732:	e00b      	b.n	800774c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007734:	8879      	ldrh	r1, [r7, #2]
 8007736:	887a      	ldrh	r2, [r7, #2]
 8007738:	2300      	movs	r3, #0
 800773a:	9301      	str	r3, [sp, #4]
 800773c:	883b      	ldrh	r3, [r7, #0]
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	460b      	mov	r3, r1
 8007742:	6879      	ldr	r1, [r7, #4]
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f7ff feb7 	bl	80074b8 <pbuf_init_alloced_pbuf>
  return p;
 800774a:	68fb      	ldr	r3, [r7, #12]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	0801208c 	.word	0x0801208c
 8007758:	08012190 	.word	0x08012190
 800775c:	080120ec 	.word	0x080120ec

08007760 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b088      	sub	sp, #32
 8007764:	af02      	add	r7, sp, #8
 8007766:	607b      	str	r3, [r7, #4]
 8007768:	4603      	mov	r3, r0
 800776a:	73fb      	strb	r3, [r7, #15]
 800776c:	460b      	mov	r3, r1
 800776e:	81bb      	strh	r3, [r7, #12]
 8007770:	4613      	mov	r3, r2
 8007772:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8007774:	7bfb      	ldrb	r3, [r7, #15]
 8007776:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007778:	8a7b      	ldrh	r3, [r7, #18]
 800777a:	3303      	adds	r3, #3
 800777c:	f023 0203 	bic.w	r2, r3, #3
 8007780:	89bb      	ldrh	r3, [r7, #12]
 8007782:	441a      	add	r2, r3
 8007784:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007786:	429a      	cmp	r2, r3
 8007788:	d901      	bls.n	800778e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800778a:	2300      	movs	r3, #0
 800778c:	e018      	b.n	80077c0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800778e:	6a3b      	ldr	r3, [r7, #32]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d007      	beq.n	80077a4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007794:	8a7b      	ldrh	r3, [r7, #18]
 8007796:	3303      	adds	r3, #3
 8007798:	f023 0303 	bic.w	r3, r3, #3
 800779c:	6a3a      	ldr	r2, [r7, #32]
 800779e:	4413      	add	r3, r2
 80077a0:	617b      	str	r3, [r7, #20]
 80077a2:	e001      	b.n	80077a8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80077a4:	2300      	movs	r3, #0
 80077a6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	89b9      	ldrh	r1, [r7, #12]
 80077ac:	89ba      	ldrh	r2, [r7, #12]
 80077ae:	2302      	movs	r3, #2
 80077b0:	9301      	str	r3, [sp, #4]
 80077b2:	897b      	ldrh	r3, [r7, #10]
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	460b      	mov	r3, r1
 80077b8:	6979      	ldr	r1, [r7, #20]
 80077ba:	f7ff fe7d 	bl	80074b8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80077be:	687b      	ldr	r3, [r7, #4]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3718      	adds	r7, #24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	460b      	mov	r3, r1
 80077d2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d106      	bne.n	80077e8 <pbuf_realloc+0x20>
 80077da:	4b3a      	ldr	r3, [pc, #232]	@ (80078c4 <pbuf_realloc+0xfc>)
 80077dc:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80077e0:	4939      	ldr	r1, [pc, #228]	@ (80078c8 <pbuf_realloc+0x100>)
 80077e2:	483a      	ldr	r0, [pc, #232]	@ (80078cc <pbuf_realloc+0x104>)
 80077e4:	f008 fff6 	bl	80107d4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	891b      	ldrh	r3, [r3, #8]
 80077ec:	887a      	ldrh	r2, [r7, #2]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d263      	bcs.n	80078ba <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	891a      	ldrh	r2, [r3, #8]
 80077f6:	887b      	ldrh	r3, [r7, #2]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80077fc:	887b      	ldrh	r3, [r7, #2]
 80077fe:	817b      	strh	r3, [r7, #10]
  q = p;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007804:	e018      	b.n	8007838 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	895b      	ldrh	r3, [r3, #10]
 800780a:	897a      	ldrh	r2, [r7, #10]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	891a      	ldrh	r2, [r3, #8]
 8007814:	893b      	ldrh	r3, [r7, #8]
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	b29a      	uxth	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d106      	bne.n	8007838 <pbuf_realloc+0x70>
 800782a:	4b26      	ldr	r3, [pc, #152]	@ (80078c4 <pbuf_realloc+0xfc>)
 800782c:	f240 12af 	movw	r2, #431	@ 0x1af
 8007830:	4927      	ldr	r1, [pc, #156]	@ (80078d0 <pbuf_realloc+0x108>)
 8007832:	4826      	ldr	r0, [pc, #152]	@ (80078cc <pbuf_realloc+0x104>)
 8007834:	f008 ffce 	bl	80107d4 <iprintf>
  while (rem_len > q->len) {
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	895b      	ldrh	r3, [r3, #10]
 800783c:	897a      	ldrh	r2, [r7, #10]
 800783e:	429a      	cmp	r2, r3
 8007840:	d8e1      	bhi.n	8007806 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	7b1b      	ldrb	r3, [r3, #12]
 8007846:	f003 030f 	and.w	r3, r3, #15
 800784a:	2b00      	cmp	r3, #0
 800784c:	d121      	bne.n	8007892 <pbuf_realloc+0xca>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	895b      	ldrh	r3, [r3, #10]
 8007852:	897a      	ldrh	r2, [r7, #10]
 8007854:	429a      	cmp	r2, r3
 8007856:	d01c      	beq.n	8007892 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	7b5b      	ldrb	r3, [r3, #13]
 800785c:	f003 0302 	and.w	r3, r3, #2
 8007860:	2b00      	cmp	r3, #0
 8007862:	d116      	bne.n	8007892 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	b29a      	uxth	r2, r3
 800786e:	897b      	ldrh	r3, [r7, #10]
 8007870:	4413      	add	r3, r2
 8007872:	b29b      	uxth	r3, r3
 8007874:	4619      	mov	r1, r3
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f7fe ffba 	bl	80067f0 <mem_trim>
 800787c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d106      	bne.n	8007892 <pbuf_realloc+0xca>
 8007884:	4b0f      	ldr	r3, [pc, #60]	@ (80078c4 <pbuf_realloc+0xfc>)
 8007886:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800788a:	4912      	ldr	r1, [pc, #72]	@ (80078d4 <pbuf_realloc+0x10c>)
 800788c:	480f      	ldr	r0, [pc, #60]	@ (80078cc <pbuf_realloc+0x104>)
 800788e:	f008 ffa1 	bl	80107d4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	897a      	ldrh	r2, [r7, #10]
 8007896:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	895a      	ldrh	r2, [r3, #10]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d004      	beq.n	80078b2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f000 f911 	bl	8007ad4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	601a      	str	r2, [r3, #0]
 80078b8:	e000      	b.n	80078bc <pbuf_realloc+0xf4>
    return;
 80078ba:	bf00      	nop

}
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	0801208c 	.word	0x0801208c
 80078c8:	080121a4 	.word	0x080121a4
 80078cc:	080120ec 	.word	0x080120ec
 80078d0:	080121bc 	.word	0x080121bc
 80078d4:	080121d4 	.word	0x080121d4

080078d8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	4613      	mov	r3, r2
 80078e4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d106      	bne.n	80078fa <pbuf_add_header_impl+0x22>
 80078ec:	4b2b      	ldr	r3, [pc, #172]	@ (800799c <pbuf_add_header_impl+0xc4>)
 80078ee:	f240 12df 	movw	r2, #479	@ 0x1df
 80078f2:	492b      	ldr	r1, [pc, #172]	@ (80079a0 <pbuf_add_header_impl+0xc8>)
 80078f4:	482b      	ldr	r0, [pc, #172]	@ (80079a4 <pbuf_add_header_impl+0xcc>)
 80078f6:	f008 ff6d 	bl	80107d4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d003      	beq.n	8007908 <pbuf_add_header_impl+0x30>
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007906:	d301      	bcc.n	800790c <pbuf_add_header_impl+0x34>
    return 1;
 8007908:	2301      	movs	r3, #1
 800790a:	e043      	b.n	8007994 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d101      	bne.n	8007916 <pbuf_add_header_impl+0x3e>
    return 0;
 8007912:	2300      	movs	r3, #0
 8007914:	e03e      	b.n	8007994 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	891a      	ldrh	r2, [r3, #8]
 800791e:	8a7b      	ldrh	r3, [r7, #18]
 8007920:	4413      	add	r3, r2
 8007922:	b29b      	uxth	r3, r3
 8007924:	8a7a      	ldrh	r2, [r7, #18]
 8007926:	429a      	cmp	r2, r3
 8007928:	d901      	bls.n	800792e <pbuf_add_header_impl+0x56>
    return 1;
 800792a:	2301      	movs	r3, #1
 800792c:	e032      	b.n	8007994 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	7b1b      	ldrb	r3, [r3, #12]
 8007932:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007934:	8a3b      	ldrh	r3, [r7, #16]
 8007936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00c      	beq.n	8007958 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	425b      	negs	r3, r3
 8007946:	4413      	add	r3, r2
 8007948:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	3310      	adds	r3, #16
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	429a      	cmp	r2, r3
 8007952:	d20d      	bcs.n	8007970 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007954:	2301      	movs	r3, #1
 8007956:	e01d      	b.n	8007994 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007958:	79fb      	ldrb	r3, [r7, #7]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d006      	beq.n	800796c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	425b      	negs	r3, r3
 8007966:	4413      	add	r3, r2
 8007968:	617b      	str	r3, [r7, #20]
 800796a:	e001      	b.n	8007970 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800796c:	2301      	movs	r3, #1
 800796e:	e011      	b.n	8007994 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	895a      	ldrh	r2, [r3, #10]
 800797a:	8a7b      	ldrh	r3, [r7, #18]
 800797c:	4413      	add	r3, r2
 800797e:	b29a      	uxth	r2, r3
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	891a      	ldrh	r2, [r3, #8]
 8007988:	8a7b      	ldrh	r3, [r7, #18]
 800798a:	4413      	add	r3, r2
 800798c:	b29a      	uxth	r2, r3
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	811a      	strh	r2, [r3, #8]


  return 0;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3718      	adds	r7, #24
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	0801208c 	.word	0x0801208c
 80079a0:	080121f0 	.word	0x080121f0
 80079a4:	080120ec 	.word	0x080120ec

080079a8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80079b2:	2200      	movs	r2, #0
 80079b4:	6839      	ldr	r1, [r7, #0]
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7ff ff8e 	bl	80078d8 <pbuf_add_header_impl>
 80079bc:	4603      	mov	r3, r0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
	...

080079c8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d106      	bne.n	80079e6 <pbuf_remove_header+0x1e>
 80079d8:	4b20      	ldr	r3, [pc, #128]	@ (8007a5c <pbuf_remove_header+0x94>)
 80079da:	f240 224b 	movw	r2, #587	@ 0x24b
 80079de:	4920      	ldr	r1, [pc, #128]	@ (8007a60 <pbuf_remove_header+0x98>)
 80079e0:	4820      	ldr	r0, [pc, #128]	@ (8007a64 <pbuf_remove_header+0x9c>)
 80079e2:	f008 fef7 	bl	80107d4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d003      	beq.n	80079f4 <pbuf_remove_header+0x2c>
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079f2:	d301      	bcc.n	80079f8 <pbuf_remove_header+0x30>
    return 1;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e02c      	b.n	8007a52 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <pbuf_remove_header+0x3a>
    return 0;
 80079fe:	2300      	movs	r3, #0
 8007a00:	e027      	b.n	8007a52 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	895b      	ldrh	r3, [r3, #10]
 8007a0a:	89fa      	ldrh	r2, [r7, #14]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d908      	bls.n	8007a22 <pbuf_remove_header+0x5a>
 8007a10:	4b12      	ldr	r3, [pc, #72]	@ (8007a5c <pbuf_remove_header+0x94>)
 8007a12:	f240 2255 	movw	r2, #597	@ 0x255
 8007a16:	4914      	ldr	r1, [pc, #80]	@ (8007a68 <pbuf_remove_header+0xa0>)
 8007a18:	4812      	ldr	r0, [pc, #72]	@ (8007a64 <pbuf_remove_header+0x9c>)
 8007a1a:	f008 fedb 	bl	80107d4 <iprintf>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e017      	b.n	8007a52 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685a      	ldr	r2, [r3, #4]
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	441a      	add	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	895a      	ldrh	r2, [r3, #10]
 8007a38:	89fb      	ldrh	r3, [r7, #14]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	891a      	ldrh	r2, [r3, #8]
 8007a46:	89fb      	ldrh	r3, [r7, #14]
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	0801208c 	.word	0x0801208c
 8007a60:	080121f0 	.word	0x080121f0
 8007a64:	080120ec 	.word	0x080120ec
 8007a68:	080121fc 	.word	0x080121fc

08007a6c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	460b      	mov	r3, r1
 8007a76:	807b      	strh	r3, [r7, #2]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007a7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	da08      	bge.n	8007a96 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007a84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a88:	425b      	negs	r3, r3
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7ff ff9b 	bl	80079c8 <pbuf_remove_header>
 8007a92:	4603      	mov	r3, r0
 8007a94:	e007      	b.n	8007aa6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007a96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a9a:	787a      	ldrb	r2, [r7, #1]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7ff ff1a 	bl	80078d8 <pbuf_add_header_impl>
 8007aa4:	4603      	mov	r3, r0
  }
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b082      	sub	sp, #8
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007aba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f7ff ffd2 	bl	8007a6c <pbuf_header_impl>
 8007ac8:	4603      	mov	r3, r0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
	...

08007ad4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10b      	bne.n	8007afa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d106      	bne.n	8007af6 <pbuf_free+0x22>
 8007ae8:	4b38      	ldr	r3, [pc, #224]	@ (8007bcc <pbuf_free+0xf8>)
 8007aea:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8007aee:	4938      	ldr	r1, [pc, #224]	@ (8007bd0 <pbuf_free+0xfc>)
 8007af0:	4838      	ldr	r0, [pc, #224]	@ (8007bd4 <pbuf_free+0x100>)
 8007af2:	f008 fe6f 	bl	80107d4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007af6:	2300      	movs	r3, #0
 8007af8:	e063      	b.n	8007bc2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007afa:	2300      	movs	r3, #0
 8007afc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007afe:	e05c      	b.n	8007bba <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	7b9b      	ldrb	r3, [r3, #14]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d106      	bne.n	8007b16 <pbuf_free+0x42>
 8007b08:	4b30      	ldr	r3, [pc, #192]	@ (8007bcc <pbuf_free+0xf8>)
 8007b0a:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8007b0e:	4932      	ldr	r1, [pc, #200]	@ (8007bd8 <pbuf_free+0x104>)
 8007b10:	4830      	ldr	r0, [pc, #192]	@ (8007bd4 <pbuf_free+0x100>)
 8007b12:	f008 fe5f 	bl	80107d4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	7b9b      	ldrb	r3, [r3, #14]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	739a      	strb	r2, [r3, #14]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	7b9b      	ldrb	r3, [r3, #14]
 8007b26:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007b28:	7dbb      	ldrb	r3, [r7, #22]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d143      	bne.n	8007bb6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	7b1b      	ldrb	r3, [r3, #12]
 8007b38:	f003 030f 	and.w	r3, r3, #15
 8007b3c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	7b5b      	ldrb	r3, [r3, #13]
 8007b42:	f003 0302 	and.w	r3, r3, #2
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d011      	beq.n	8007b6e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d106      	bne.n	8007b64 <pbuf_free+0x90>
 8007b56:	4b1d      	ldr	r3, [pc, #116]	@ (8007bcc <pbuf_free+0xf8>)
 8007b58:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8007b5c:	491f      	ldr	r1, [pc, #124]	@ (8007bdc <pbuf_free+0x108>)
 8007b5e:	481d      	ldr	r0, [pc, #116]	@ (8007bd4 <pbuf_free+0x100>)
 8007b60:	f008 fe38 	bl	80107d4 <iprintf>
        pc->custom_free_function(p);
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	4798      	blx	r3
 8007b6c:	e01d      	b.n	8007baa <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007b6e:	7bfb      	ldrb	r3, [r7, #15]
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d104      	bne.n	8007b7e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007b74:	6879      	ldr	r1, [r7, #4]
 8007b76:	2008      	movs	r0, #8
 8007b78:	f7ff f936 	bl	8006de8 <memp_free>
 8007b7c:	e015      	b.n	8007baa <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d104      	bne.n	8007b8e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007b84:	6879      	ldr	r1, [r7, #4]
 8007b86:	2007      	movs	r0, #7
 8007b88:	f7ff f92e 	bl	8006de8 <memp_free>
 8007b8c:	e00d      	b.n	8007baa <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007b8e:	7bfb      	ldrb	r3, [r7, #15]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d103      	bne.n	8007b9c <pbuf_free+0xc8>
          mem_free(p);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f7fe fdc1 	bl	800671c <mem_free>
 8007b9a:	e006      	b.n	8007baa <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007bcc <pbuf_free+0xf8>)
 8007b9e:	f240 320f 	movw	r2, #783	@ 0x30f
 8007ba2:	490f      	ldr	r1, [pc, #60]	@ (8007be0 <pbuf_free+0x10c>)
 8007ba4:	480b      	ldr	r0, [pc, #44]	@ (8007bd4 <pbuf_free+0x100>)
 8007ba6:	f008 fe15 	bl	80107d4 <iprintf>
        }
      }
      count++;
 8007baa:	7dfb      	ldrb	r3, [r7, #23]
 8007bac:	3301      	adds	r3, #1
 8007bae:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	607b      	str	r3, [r7, #4]
 8007bb4:	e001      	b.n	8007bba <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d19f      	bne.n	8007b00 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3718      	adds	r7, #24
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	0801208c 	.word	0x0801208c
 8007bd0:	080121f0 	.word	0x080121f0
 8007bd4:	080120ec 	.word	0x080120ec
 8007bd8:	0801221c 	.word	0x0801221c
 8007bdc:	08012234 	.word	0x08012234
 8007be0:	08012258 	.word	0x08012258

08007be4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007bec:	2300      	movs	r3, #0
 8007bee:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007bf0:	e005      	b.n	8007bfe <pbuf_clen+0x1a>
    ++len;
 8007bf2:	89fb      	ldrh	r3, [r7, #14]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1f6      	bne.n	8007bf2 <pbuf_clen+0xe>
  }
  return len;
 8007c04:	89fb      	ldrh	r3, [r7, #14]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3714      	adds	r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
	...

08007c14 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d010      	beq.n	8007c44 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	7b9b      	ldrb	r3, [r3, #14]
 8007c26:	3301      	adds	r3, #1
 8007c28:	b2da      	uxtb	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	7b9b      	ldrb	r3, [r3, #14]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d106      	bne.n	8007c44 <pbuf_ref+0x30>
 8007c36:	4b05      	ldr	r3, [pc, #20]	@ (8007c4c <pbuf_ref+0x38>)
 8007c38:	f240 3242 	movw	r2, #834	@ 0x342
 8007c3c:	4904      	ldr	r1, [pc, #16]	@ (8007c50 <pbuf_ref+0x3c>)
 8007c3e:	4805      	ldr	r0, [pc, #20]	@ (8007c54 <pbuf_ref+0x40>)
 8007c40:	f008 fdc8 	bl	80107d4 <iprintf>
  }
}
 8007c44:	bf00      	nop
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	0801208c 	.word	0x0801208c
 8007c50:	0801226c 	.word	0x0801226c
 8007c54:	080120ec 	.word	0x080120ec

08007c58 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d002      	beq.n	8007c6e <pbuf_cat+0x16>
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d107      	bne.n	8007c7e <pbuf_cat+0x26>
 8007c6e:	4b20      	ldr	r3, [pc, #128]	@ (8007cf0 <pbuf_cat+0x98>)
 8007c70:	f240 3259 	movw	r2, #857	@ 0x359
 8007c74:	491f      	ldr	r1, [pc, #124]	@ (8007cf4 <pbuf_cat+0x9c>)
 8007c76:	4820      	ldr	r0, [pc, #128]	@ (8007cf8 <pbuf_cat+0xa0>)
 8007c78:	f008 fdac 	bl	80107d4 <iprintf>
 8007c7c:	e034      	b.n	8007ce8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	60fb      	str	r3, [r7, #12]
 8007c82:	e00a      	b.n	8007c9a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	891a      	ldrh	r2, [r3, #8]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	891b      	ldrh	r3, [r3, #8]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	60fb      	str	r3, [r7, #12]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1f0      	bne.n	8007c84 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	891a      	ldrh	r2, [r3, #8]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	895b      	ldrh	r3, [r3, #10]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d006      	beq.n	8007cbc <pbuf_cat+0x64>
 8007cae:	4b10      	ldr	r3, [pc, #64]	@ (8007cf0 <pbuf_cat+0x98>)
 8007cb0:	f240 3262 	movw	r2, #866	@ 0x362
 8007cb4:	4911      	ldr	r1, [pc, #68]	@ (8007cfc <pbuf_cat+0xa4>)
 8007cb6:	4810      	ldr	r0, [pc, #64]	@ (8007cf8 <pbuf_cat+0xa0>)
 8007cb8:	f008 fd8c 	bl	80107d4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d006      	beq.n	8007cd2 <pbuf_cat+0x7a>
 8007cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8007cf0 <pbuf_cat+0x98>)
 8007cc6:	f240 3263 	movw	r2, #867	@ 0x363
 8007cca:	490d      	ldr	r1, [pc, #52]	@ (8007d00 <pbuf_cat+0xa8>)
 8007ccc:	480a      	ldr	r0, [pc, #40]	@ (8007cf8 <pbuf_cat+0xa0>)
 8007cce:	f008 fd81 	bl	80107d4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	891a      	ldrh	r2, [r3, #8]
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	891b      	ldrh	r3, [r3, #8]
 8007cda:	4413      	add	r3, r2
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	683a      	ldr	r2, [r7, #0]
 8007ce6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	0801208c 	.word	0x0801208c
 8007cf4:	08012280 	.word	0x08012280
 8007cf8:	080120ec 	.word	0x080120ec
 8007cfc:	080122b8 	.word	0x080122b8
 8007d00:	080122e8 	.word	0x080122e8

08007d04 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f7ff ffa1 	bl	8007c58 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8007d16:	6838      	ldr	r0, [r7, #0]
 8007d18:	f7ff ff7c 	bl	8007c14 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007d1c:	bf00      	nop
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b086      	sub	sp, #24
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	617b      	str	r3, [r7, #20]
 8007d32:	2300      	movs	r3, #0
 8007d34:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d008      	beq.n	8007d4e <pbuf_copy+0x2a>
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d005      	beq.n	8007d4e <pbuf_copy+0x2a>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	891a      	ldrh	r2, [r3, #8]
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	891b      	ldrh	r3, [r3, #8]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d209      	bcs.n	8007d62 <pbuf_copy+0x3e>
 8007d4e:	4b57      	ldr	r3, [pc, #348]	@ (8007eac <pbuf_copy+0x188>)
 8007d50:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8007d54:	4956      	ldr	r1, [pc, #344]	@ (8007eb0 <pbuf_copy+0x18c>)
 8007d56:	4857      	ldr	r0, [pc, #348]	@ (8007eb4 <pbuf_copy+0x190>)
 8007d58:	f008 fd3c 	bl	80107d4 <iprintf>
 8007d5c:	f06f 030f 	mvn.w	r3, #15
 8007d60:	e09f      	b.n	8007ea2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	895b      	ldrh	r3, [r3, #10]
 8007d66:	461a      	mov	r2, r3
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	1ad2      	subs	r2, r2, r3
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	895b      	ldrh	r3, [r3, #10]
 8007d70:	4619      	mov	r1, r3
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	1acb      	subs	r3, r1, r3
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d306      	bcc.n	8007d88 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	895b      	ldrh	r3, [r3, #10]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	60fb      	str	r3, [r7, #12]
 8007d86:	e005      	b.n	8007d94 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	895b      	ldrh	r3, [r3, #10]
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	18d0      	adds	r0, r2, r3
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	4413      	add	r3, r2
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	4619      	mov	r1, r3
 8007da8:	f008 fe65 	bl	8010a76 <memcpy>
    offset_to += len;
 8007dac:	697a      	ldr	r2, [r7, #20]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	4413      	add	r3, r2
 8007db2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	4413      	add	r3, r2
 8007dba:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	895b      	ldrh	r3, [r3, #10]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d906      	bls.n	8007dd6 <pbuf_copy+0xb2>
 8007dc8:	4b38      	ldr	r3, [pc, #224]	@ (8007eac <pbuf_copy+0x188>)
 8007dca:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8007dce:	493a      	ldr	r1, [pc, #232]	@ (8007eb8 <pbuf_copy+0x194>)
 8007dd0:	4838      	ldr	r0, [pc, #224]	@ (8007eb4 <pbuf_copy+0x190>)
 8007dd2:	f008 fcff 	bl	80107d4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	895b      	ldrh	r3, [r3, #10]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d906      	bls.n	8007df0 <pbuf_copy+0xcc>
 8007de2:	4b32      	ldr	r3, [pc, #200]	@ (8007eac <pbuf_copy+0x188>)
 8007de4:	f240 32da 	movw	r2, #986	@ 0x3da
 8007de8:	4934      	ldr	r1, [pc, #208]	@ (8007ebc <pbuf_copy+0x198>)
 8007dea:	4832      	ldr	r0, [pc, #200]	@ (8007eb4 <pbuf_copy+0x190>)
 8007dec:	f008 fcf2 	bl	80107d4 <iprintf>
    if (offset_from >= p_from->len) {
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	895b      	ldrh	r3, [r3, #10]
 8007df4:	461a      	mov	r2, r3
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d304      	bcc.n	8007e06 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	895b      	ldrh	r3, [r3, #10]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d114      	bne.n	8007e3c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007e12:	2300      	movs	r3, #0
 8007e14:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10c      	bne.n	8007e3c <pbuf_copy+0x118>
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d009      	beq.n	8007e3c <pbuf_copy+0x118>
 8007e28:	4b20      	ldr	r3, [pc, #128]	@ (8007eac <pbuf_copy+0x188>)
 8007e2a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8007e2e:	4924      	ldr	r1, [pc, #144]	@ (8007ec0 <pbuf_copy+0x19c>)
 8007e30:	4820      	ldr	r0, [pc, #128]	@ (8007eb4 <pbuf_copy+0x190>)
 8007e32:	f008 fccf 	bl	80107d4 <iprintf>
 8007e36:	f06f 030f 	mvn.w	r3, #15
 8007e3a:	e032      	b.n	8007ea2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d013      	beq.n	8007e6a <pbuf_copy+0x146>
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	895a      	ldrh	r2, [r3, #10]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	891b      	ldrh	r3, [r3, #8]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d10d      	bne.n	8007e6a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d009      	beq.n	8007e6a <pbuf_copy+0x146>
 8007e56:	4b15      	ldr	r3, [pc, #84]	@ (8007eac <pbuf_copy+0x188>)
 8007e58:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8007e5c:	4919      	ldr	r1, [pc, #100]	@ (8007ec4 <pbuf_copy+0x1a0>)
 8007e5e:	4815      	ldr	r0, [pc, #84]	@ (8007eb4 <pbuf_copy+0x190>)
 8007e60:	f008 fcb8 	bl	80107d4 <iprintf>
 8007e64:	f06f 0305 	mvn.w	r3, #5
 8007e68:	e01b      	b.n	8007ea2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d013      	beq.n	8007e98 <pbuf_copy+0x174>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	895a      	ldrh	r2, [r3, #10]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	891b      	ldrh	r3, [r3, #8]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d10d      	bne.n	8007e98 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d009      	beq.n	8007e98 <pbuf_copy+0x174>
 8007e84:	4b09      	ldr	r3, [pc, #36]	@ (8007eac <pbuf_copy+0x188>)
 8007e86:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8007e8a:	490e      	ldr	r1, [pc, #56]	@ (8007ec4 <pbuf_copy+0x1a0>)
 8007e8c:	4809      	ldr	r0, [pc, #36]	@ (8007eb4 <pbuf_copy+0x190>)
 8007e8e:	f008 fca1 	bl	80107d4 <iprintf>
 8007e92:	f06f 0305 	mvn.w	r3, #5
 8007e96:	e004      	b.n	8007ea2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f47f af61 	bne.w	8007d62 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3718      	adds	r7, #24
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	0801208c 	.word	0x0801208c
 8007eb0:	08012334 	.word	0x08012334
 8007eb4:	080120ec 	.word	0x080120ec
 8007eb8:	08012364 	.word	0x08012364
 8007ebc:	0801237c 	.word	0x0801237c
 8007ec0:	08012398 	.word	0x08012398
 8007ec4:	080123a8 	.word	0x080123a8

08007ec8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b088      	sub	sp, #32
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	4611      	mov	r1, r2
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	80fb      	strh	r3, [r7, #6]
 8007eda:	4613      	mov	r3, r2
 8007edc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d108      	bne.n	8007efe <pbuf_copy_partial+0x36>
 8007eec:	4b2b      	ldr	r3, [pc, #172]	@ (8007f9c <pbuf_copy_partial+0xd4>)
 8007eee:	f240 420a 	movw	r2, #1034	@ 0x40a
 8007ef2:	492b      	ldr	r1, [pc, #172]	@ (8007fa0 <pbuf_copy_partial+0xd8>)
 8007ef4:	482b      	ldr	r0, [pc, #172]	@ (8007fa4 <pbuf_copy_partial+0xdc>)
 8007ef6:	f008 fc6d 	bl	80107d4 <iprintf>
 8007efa:	2300      	movs	r3, #0
 8007efc:	e04a      	b.n	8007f94 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d108      	bne.n	8007f16 <pbuf_copy_partial+0x4e>
 8007f04:	4b25      	ldr	r3, [pc, #148]	@ (8007f9c <pbuf_copy_partial+0xd4>)
 8007f06:	f240 420b 	movw	r2, #1035	@ 0x40b
 8007f0a:	4927      	ldr	r1, [pc, #156]	@ (8007fa8 <pbuf_copy_partial+0xe0>)
 8007f0c:	4825      	ldr	r0, [pc, #148]	@ (8007fa4 <pbuf_copy_partial+0xdc>)
 8007f0e:	f008 fc61 	bl	80107d4 <iprintf>
 8007f12:	2300      	movs	r3, #0
 8007f14:	e03e      	b.n	8007f94 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	61fb      	str	r3, [r7, #28]
 8007f1a:	e034      	b.n	8007f86 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007f1c:	88bb      	ldrh	r3, [r7, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00a      	beq.n	8007f38 <pbuf_copy_partial+0x70>
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	895b      	ldrh	r3, [r3, #10]
 8007f26:	88ba      	ldrh	r2, [r7, #4]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d305      	bcc.n	8007f38 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	895b      	ldrh	r3, [r3, #10]
 8007f30:	88ba      	ldrh	r2, [r7, #4]
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	80bb      	strh	r3, [r7, #4]
 8007f36:	e023      	b.n	8007f80 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	895a      	ldrh	r2, [r3, #10]
 8007f3c:	88bb      	ldrh	r3, [r7, #4]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007f42:	8b3a      	ldrh	r2, [r7, #24]
 8007f44:	88fb      	ldrh	r3, [r7, #6]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d901      	bls.n	8007f4e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007f4a:	88fb      	ldrh	r3, [r7, #6]
 8007f4c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007f4e:	8b7b      	ldrh	r3, [r7, #26]
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	18d0      	adds	r0, r2, r3
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	685a      	ldr	r2, [r3, #4]
 8007f58:	88bb      	ldrh	r3, [r7, #4]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	8b3a      	ldrh	r2, [r7, #24]
 8007f5e:	4619      	mov	r1, r3
 8007f60:	f008 fd89 	bl	8010a76 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007f64:	8afa      	ldrh	r2, [r7, #22]
 8007f66:	8b3b      	ldrh	r3, [r7, #24]
 8007f68:	4413      	add	r3, r2
 8007f6a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007f6c:	8b7a      	ldrh	r2, [r7, #26]
 8007f6e:	8b3b      	ldrh	r3, [r7, #24]
 8007f70:	4413      	add	r3, r2
 8007f72:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007f74:	88fa      	ldrh	r2, [r7, #6]
 8007f76:	8b3b      	ldrh	r3, [r7, #24]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	61fb      	str	r3, [r7, #28]
 8007f86:	88fb      	ldrh	r3, [r7, #6]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d002      	beq.n	8007f92 <pbuf_copy_partial+0xca>
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1c4      	bne.n	8007f1c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007f92:	8afb      	ldrh	r3, [r7, #22]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3720      	adds	r7, #32
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	0801208c 	.word	0x0801208c
 8007fa0:	080123d4 	.word	0x080123d4
 8007fa4:	080120ec 	.word	0x080120ec
 8007fa8:	080123f4 	.word	0x080123f4

08007fac <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b088      	sub	sp, #32
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8007fba:	88fb      	ldrh	r3, [r7, #6]
 8007fbc:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d109      	bne.n	8007fdc <pbuf_take+0x30>
 8007fc8:	4b3a      	ldr	r3, [pc, #232]	@ (80080b4 <pbuf_take+0x108>)
 8007fca:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 8007fce:	493a      	ldr	r1, [pc, #232]	@ (80080b8 <pbuf_take+0x10c>)
 8007fd0:	483a      	ldr	r0, [pc, #232]	@ (80080bc <pbuf_take+0x110>)
 8007fd2:	f008 fbff 	bl	80107d4 <iprintf>
 8007fd6:	f06f 030f 	mvn.w	r3, #15
 8007fda:	e067      	b.n	80080ac <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d109      	bne.n	8007ff6 <pbuf_take+0x4a>
 8007fe2:	4b34      	ldr	r3, [pc, #208]	@ (80080b4 <pbuf_take+0x108>)
 8007fe4:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 8007fe8:	4935      	ldr	r1, [pc, #212]	@ (80080c0 <pbuf_take+0x114>)
 8007fea:	4834      	ldr	r0, [pc, #208]	@ (80080bc <pbuf_take+0x110>)
 8007fec:	f008 fbf2 	bl	80107d4 <iprintf>
 8007ff0:	f06f 030f 	mvn.w	r3, #15
 8007ff4:	e05a      	b.n	80080ac <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	891b      	ldrh	r3, [r3, #8]
 8007ffa:	88fa      	ldrh	r2, [r7, #6]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d909      	bls.n	8008014 <pbuf_take+0x68>
 8008000:	4b2c      	ldr	r3, [pc, #176]	@ (80080b4 <pbuf_take+0x108>)
 8008002:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 8008006:	492f      	ldr	r1, [pc, #188]	@ (80080c4 <pbuf_take+0x118>)
 8008008:	482c      	ldr	r0, [pc, #176]	@ (80080bc <pbuf_take+0x110>)
 800800a:	f008 fbe3 	bl	80107d4 <iprintf>
 800800e:	f04f 33ff 	mov.w	r3, #4294967295
 8008012:	e04b      	b.n	80080ac <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d007      	beq.n	800802a <pbuf_take+0x7e>
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d004      	beq.n	800802a <pbuf_take+0x7e>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	891b      	ldrh	r3, [r3, #8]
 8008024:	88fa      	ldrh	r2, [r7, #6]
 8008026:	429a      	cmp	r2, r3
 8008028:	d902      	bls.n	8008030 <pbuf_take+0x84>
    return ERR_ARG;
 800802a:	f06f 030f 	mvn.w	r3, #15
 800802e:	e03d      	b.n	80080ac <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	61fb      	str	r3, [r7, #28]
 8008034:	e028      	b.n	8008088 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d106      	bne.n	800804a <pbuf_take+0x9e>
 800803c:	4b1d      	ldr	r3, [pc, #116]	@ (80080b4 <pbuf_take+0x108>)
 800803e:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 8008042:	4921      	ldr	r1, [pc, #132]	@ (80080c8 <pbuf_take+0x11c>)
 8008044:	481d      	ldr	r0, [pc, #116]	@ (80080bc <pbuf_take+0x110>)
 8008046:	f008 fbc5 	bl	80107d4 <iprintf>
    buf_copy_len = total_copy_len;
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	895b      	ldrh	r3, [r3, #10]
 8008052:	461a      	mov	r2, r3
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	4293      	cmp	r3, r2
 8008058:	d902      	bls.n	8008060 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	895b      	ldrh	r3, [r3, #10]
 800805e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	6858      	ldr	r0, [r3, #4]
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	4413      	add	r3, r2
 800806a:	69ba      	ldr	r2, [r7, #24]
 800806c:	4619      	mov	r1, r3
 800806e:	f008 fd02 	bl	8010a76 <memcpy>
    total_copy_len -= buf_copy_len;
 8008072:	697a      	ldr	r2, [r7, #20]
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	4413      	add	r3, r2
 8008080:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	61fb      	str	r3, [r7, #28]
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1d3      	bne.n	8008036 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d103      	bne.n	800809c <pbuf_take+0xf0>
 8008094:	88fb      	ldrh	r3, [r7, #6]
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	429a      	cmp	r2, r3
 800809a:	d006      	beq.n	80080aa <pbuf_take+0xfe>
 800809c:	4b05      	ldr	r3, [pc, #20]	@ (80080b4 <pbuf_take+0x108>)
 800809e:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 80080a2:	490a      	ldr	r1, [pc, #40]	@ (80080cc <pbuf_take+0x120>)
 80080a4:	4805      	ldr	r0, [pc, #20]	@ (80080bc <pbuf_take+0x110>)
 80080a6:	f008 fb95 	bl	80107d4 <iprintf>
  return ERR_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3720      	adds	r7, #32
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	0801208c 	.word	0x0801208c
 80080b8:	08012464 	.word	0x08012464
 80080bc:	080120ec 	.word	0x080120ec
 80080c0:	0801247c 	.word	0x0801247c
 80080c4:	08012498 	.word	0x08012498
 80080c8:	080124b8 	.word	0x080124b8
 80080cc:	080124d0 	.word	0x080124d0

080080d0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	4603      	mov	r3, r0
 80080d8:	603a      	str	r2, [r7, #0]
 80080da:	71fb      	strb	r3, [r7, #7]
 80080dc:	460b      	mov	r3, r1
 80080de:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	8919      	ldrh	r1, [r3, #8]
 80080e4:	88ba      	ldrh	r2, [r7, #4]
 80080e6:	79fb      	ldrb	r3, [r7, #7]
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7ff fa0f 	bl	800750c <pbuf_alloc>
 80080ee:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d101      	bne.n	80080fa <pbuf_clone+0x2a>
    return NULL;
 80080f6:	2300      	movs	r3, #0
 80080f8:	e011      	b.n	800811e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80080fa:	6839      	ldr	r1, [r7, #0]
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f7ff fe11 	bl	8007d24 <pbuf_copy>
 8008102:	4603      	mov	r3, r0
 8008104:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008106:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d006      	beq.n	800811c <pbuf_clone+0x4c>
 800810e:	4b06      	ldr	r3, [pc, #24]	@ (8008128 <pbuf_clone+0x58>)
 8008110:	f240 5224 	movw	r2, #1316	@ 0x524
 8008114:	4905      	ldr	r1, [pc, #20]	@ (800812c <pbuf_clone+0x5c>)
 8008116:	4806      	ldr	r0, [pc, #24]	@ (8008130 <pbuf_clone+0x60>)
 8008118:	f008 fb5c 	bl	80107d4 <iprintf>
  return q;
 800811c:	68fb      	ldr	r3, [r7, #12]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	0801208c 	.word	0x0801208c
 800812c:	08012500 	.word	0x08012500
 8008130:	080120ec 	.word	0x080120ec

08008134 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008138:	f008 fa4c 	bl	80105d4 <rand>
 800813c:	4603      	mov	r3, r0
 800813e:	b29b      	uxth	r3, r3
 8008140:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008144:	b29b      	uxth	r3, r3
 8008146:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800814a:	b29a      	uxth	r2, r3
 800814c:	4b01      	ldr	r3, [pc, #4]	@ (8008154 <tcp_init+0x20>)
 800814e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008150:	bf00      	nop
 8008152:	bd80      	pop	{r7, pc}
 8008154:	20000020 	.word	0x20000020

08008158 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	7d1b      	ldrb	r3, [r3, #20]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d105      	bne.n	8008174 <tcp_free+0x1c>
 8008168:	4b06      	ldr	r3, [pc, #24]	@ (8008184 <tcp_free+0x2c>)
 800816a:	22d4      	movs	r2, #212	@ 0xd4
 800816c:	4906      	ldr	r1, [pc, #24]	@ (8008188 <tcp_free+0x30>)
 800816e:	4807      	ldr	r0, [pc, #28]	@ (800818c <tcp_free+0x34>)
 8008170:	f008 fb30 	bl	80107d4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008174:	6879      	ldr	r1, [r7, #4]
 8008176:	2001      	movs	r0, #1
 8008178:	f7fe fe36 	bl	8006de8 <memp_free>
}
 800817c:	bf00      	nop
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	0801258c 	.word	0x0801258c
 8008188:	080125bc 	.word	0x080125bc
 800818c:	080125d0 	.word	0x080125d0

08008190 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	7d1b      	ldrb	r3, [r3, #20]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d105      	bne.n	80081ac <tcp_free_listen+0x1c>
 80081a0:	4b06      	ldr	r3, [pc, #24]	@ (80081bc <tcp_free_listen+0x2c>)
 80081a2:	22df      	movs	r2, #223	@ 0xdf
 80081a4:	4906      	ldr	r1, [pc, #24]	@ (80081c0 <tcp_free_listen+0x30>)
 80081a6:	4807      	ldr	r0, [pc, #28]	@ (80081c4 <tcp_free_listen+0x34>)
 80081a8:	f008 fb14 	bl	80107d4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80081ac:	6879      	ldr	r1, [r7, #4]
 80081ae:	2002      	movs	r0, #2
 80081b0:	f7fe fe1a 	bl	8006de8 <memp_free>
}
 80081b4:	bf00      	nop
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	0801258c 	.word	0x0801258c
 80081c0:	080125f8 	.word	0x080125f8
 80081c4:	080125d0 	.word	0x080125d0

080081c8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80081cc:	f000 fea4 	bl	8008f18 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80081d0:	4b07      	ldr	r3, [pc, #28]	@ (80081f0 <tcp_tmr+0x28>)
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	3301      	adds	r3, #1
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	4b05      	ldr	r3, [pc, #20]	@ (80081f0 <tcp_tmr+0x28>)
 80081da:	701a      	strb	r2, [r3, #0]
 80081dc:	4b04      	ldr	r3, [pc, #16]	@ (80081f0 <tcp_tmr+0x28>)
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d001      	beq.n	80081ec <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80081e8:	f000 fb54 	bl	8008894 <tcp_slowtmr>
  }
}
 80081ec:	bf00      	nop
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	20008831 	.word	0x20008831

080081f4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d105      	bne.n	8008210 <tcp_remove_listener+0x1c>
 8008204:	4b0d      	ldr	r3, [pc, #52]	@ (800823c <tcp_remove_listener+0x48>)
 8008206:	22ff      	movs	r2, #255	@ 0xff
 8008208:	490d      	ldr	r1, [pc, #52]	@ (8008240 <tcp_remove_listener+0x4c>)
 800820a:	480e      	ldr	r0, [pc, #56]	@ (8008244 <tcp_remove_listener+0x50>)
 800820c:	f008 fae2 	bl	80107d4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	60fb      	str	r3, [r7, #12]
 8008214:	e00a      	b.n	800822c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800821a:	683a      	ldr	r2, [r7, #0]
 800821c:	429a      	cmp	r2, r3
 800821e:	d102      	bne.n	8008226 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1f1      	bne.n	8008216 <tcp_remove_listener+0x22>
    }
  }
}
 8008232:	bf00      	nop
 8008234:	bf00      	nop
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	0801258c 	.word	0x0801258c
 8008240:	08012614 	.word	0x08012614
 8008244:	080125d0 	.word	0x080125d0

08008248 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d106      	bne.n	8008264 <tcp_listen_closed+0x1c>
 8008256:	4b14      	ldr	r3, [pc, #80]	@ (80082a8 <tcp_listen_closed+0x60>)
 8008258:	f240 1211 	movw	r2, #273	@ 0x111
 800825c:	4913      	ldr	r1, [pc, #76]	@ (80082ac <tcp_listen_closed+0x64>)
 800825e:	4814      	ldr	r0, [pc, #80]	@ (80082b0 <tcp_listen_closed+0x68>)
 8008260:	f008 fab8 	bl	80107d4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	7d1b      	ldrb	r3, [r3, #20]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d006      	beq.n	800827a <tcp_listen_closed+0x32>
 800826c:	4b0e      	ldr	r3, [pc, #56]	@ (80082a8 <tcp_listen_closed+0x60>)
 800826e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8008272:	4910      	ldr	r1, [pc, #64]	@ (80082b4 <tcp_listen_closed+0x6c>)
 8008274:	480e      	ldr	r0, [pc, #56]	@ (80082b0 <tcp_listen_closed+0x68>)
 8008276:	f008 faad 	bl	80107d4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800827a:	2301      	movs	r3, #1
 800827c:	60fb      	str	r3, [r7, #12]
 800827e:	e00b      	b.n	8008298 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008280:	4a0d      	ldr	r2, [pc, #52]	@ (80082b8 <tcp_listen_closed+0x70>)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	6879      	ldr	r1, [r7, #4]
 800828c:	4618      	mov	r0, r3
 800828e:	f7ff ffb1 	bl	80081f4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	3301      	adds	r3, #1
 8008296:	60fb      	str	r3, [r7, #12]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2b03      	cmp	r3, #3
 800829c:	d9f0      	bls.n	8008280 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800829e:	bf00      	nop
 80082a0:	bf00      	nop
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	0801258c 	.word	0x0801258c
 80082ac:	0801263c 	.word	0x0801263c
 80082b0:	080125d0 	.word	0x080125d0
 80082b4:	08012648 	.word	0x08012648
 80082b8:	0801456c 	.word	0x0801456c

080082bc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80082bc:	b5b0      	push	{r4, r5, r7, lr}
 80082be:	b088      	sub	sp, #32
 80082c0:	af04      	add	r7, sp, #16
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	460b      	mov	r3, r1
 80082c6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d106      	bne.n	80082dc <tcp_close_shutdown+0x20>
 80082ce:	4b63      	ldr	r3, [pc, #396]	@ (800845c <tcp_close_shutdown+0x1a0>)
 80082d0:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80082d4:	4962      	ldr	r1, [pc, #392]	@ (8008460 <tcp_close_shutdown+0x1a4>)
 80082d6:	4863      	ldr	r0, [pc, #396]	@ (8008464 <tcp_close_shutdown+0x1a8>)
 80082d8:	f008 fa7c 	bl	80107d4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80082dc:	78fb      	ldrb	r3, [r7, #3]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d066      	beq.n	80083b0 <tcp_close_shutdown+0xf4>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	7d1b      	ldrb	r3, [r3, #20]
 80082e6:	2b04      	cmp	r3, #4
 80082e8:	d003      	beq.n	80082f2 <tcp_close_shutdown+0x36>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	7d1b      	ldrb	r3, [r3, #20]
 80082ee:	2b07      	cmp	r3, #7
 80082f0:	d15e      	bne.n	80083b0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d104      	bne.n	8008304 <tcp_close_shutdown+0x48>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082fe:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008302:	d055      	beq.n	80083b0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	8b5b      	ldrh	r3, [r3, #26]
 8008308:	f003 0310 	and.w	r3, r3, #16
 800830c:	2b00      	cmp	r3, #0
 800830e:	d106      	bne.n	800831e <tcp_close_shutdown+0x62>
 8008310:	4b52      	ldr	r3, [pc, #328]	@ (800845c <tcp_close_shutdown+0x1a0>)
 8008312:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8008316:	4954      	ldr	r1, [pc, #336]	@ (8008468 <tcp_close_shutdown+0x1ac>)
 8008318:	4852      	ldr	r0, [pc, #328]	@ (8008464 <tcp_close_shutdown+0x1a8>)
 800831a:	f008 fa5b 	bl	80107d4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008326:	687d      	ldr	r5, [r7, #4]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	3304      	adds	r3, #4
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	8ad2      	ldrh	r2, [r2, #22]
 8008330:	6879      	ldr	r1, [r7, #4]
 8008332:	8b09      	ldrh	r1, [r1, #24]
 8008334:	9102      	str	r1, [sp, #8]
 8008336:	9201      	str	r2, [sp, #4]
 8008338:	9300      	str	r3, [sp, #0]
 800833a:	462b      	mov	r3, r5
 800833c:	4622      	mov	r2, r4
 800833e:	4601      	mov	r1, r0
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f004 fe8d 	bl	800d060 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f001 f8c8 	bl	80094dc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800834c:	4b47      	ldr	r3, [pc, #284]	@ (800846c <tcp_close_shutdown+0x1b0>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	429a      	cmp	r2, r3
 8008354:	d105      	bne.n	8008362 <tcp_close_shutdown+0xa6>
 8008356:	4b45      	ldr	r3, [pc, #276]	@ (800846c <tcp_close_shutdown+0x1b0>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	4a43      	ldr	r2, [pc, #268]	@ (800846c <tcp_close_shutdown+0x1b0>)
 800835e:	6013      	str	r3, [r2, #0]
 8008360:	e013      	b.n	800838a <tcp_close_shutdown+0xce>
 8008362:	4b42      	ldr	r3, [pc, #264]	@ (800846c <tcp_close_shutdown+0x1b0>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	60fb      	str	r3, [r7, #12]
 8008368:	e00c      	b.n	8008384 <tcp_close_shutdown+0xc8>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	429a      	cmp	r2, r3
 8008372:	d104      	bne.n	800837e <tcp_close_shutdown+0xc2>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	68da      	ldr	r2, [r3, #12]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	60da      	str	r2, [r3, #12]
 800837c:	e005      	b.n	800838a <tcp_close_shutdown+0xce>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	60fb      	str	r3, [r7, #12]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1ef      	bne.n	800836a <tcp_close_shutdown+0xae>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	60da      	str	r2, [r3, #12]
 8008390:	4b37      	ldr	r3, [pc, #220]	@ (8008470 <tcp_close_shutdown+0x1b4>)
 8008392:	2201      	movs	r2, #1
 8008394:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008396:	4b37      	ldr	r3, [pc, #220]	@ (8008474 <tcp_close_shutdown+0x1b8>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	429a      	cmp	r2, r3
 800839e:	d102      	bne.n	80083a6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80083a0:	f003 fd5c 	bl	800be5c <tcp_trigger_input_pcb_close>
 80083a4:	e002      	b.n	80083ac <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f7ff fed6 	bl	8008158 <tcp_free>
      }
      return ERR_OK;
 80083ac:	2300      	movs	r3, #0
 80083ae:	e050      	b.n	8008452 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	7d1b      	ldrb	r3, [r3, #20]
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d03b      	beq.n	8008430 <tcp_close_shutdown+0x174>
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	dc44      	bgt.n	8008446 <tcp_close_shutdown+0x18a>
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d002      	beq.n	80083c6 <tcp_close_shutdown+0x10a>
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d02a      	beq.n	800841a <tcp_close_shutdown+0x15e>
 80083c4:	e03f      	b.n	8008446 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	8adb      	ldrh	r3, [r3, #22]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d021      	beq.n	8008412 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80083ce:	4b2a      	ldr	r3, [pc, #168]	@ (8008478 <tcp_close_shutdown+0x1bc>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d105      	bne.n	80083e4 <tcp_close_shutdown+0x128>
 80083d8:	4b27      	ldr	r3, [pc, #156]	@ (8008478 <tcp_close_shutdown+0x1bc>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	4a26      	ldr	r2, [pc, #152]	@ (8008478 <tcp_close_shutdown+0x1bc>)
 80083e0:	6013      	str	r3, [r2, #0]
 80083e2:	e013      	b.n	800840c <tcp_close_shutdown+0x150>
 80083e4:	4b24      	ldr	r3, [pc, #144]	@ (8008478 <tcp_close_shutdown+0x1bc>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	60bb      	str	r3, [r7, #8]
 80083ea:	e00c      	b.n	8008406 <tcp_close_shutdown+0x14a>
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d104      	bne.n	8008400 <tcp_close_shutdown+0x144>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68da      	ldr	r2, [r3, #12]
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	60da      	str	r2, [r3, #12]
 80083fe:	e005      	b.n	800840c <tcp_close_shutdown+0x150>
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	60bb      	str	r3, [r7, #8]
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1ef      	bne.n	80083ec <tcp_close_shutdown+0x130>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f7ff fea0 	bl	8008158 <tcp_free>
      break;
 8008418:	e01a      	b.n	8008450 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f7ff ff14 	bl	8008248 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008420:	6879      	ldr	r1, [r7, #4]
 8008422:	4816      	ldr	r0, [pc, #88]	@ (800847c <tcp_close_shutdown+0x1c0>)
 8008424:	f001 f8aa 	bl	800957c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7ff feb1 	bl	8008190 <tcp_free_listen>
      break;
 800842e:	e00f      	b.n	8008450 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008430:	6879      	ldr	r1, [r7, #4]
 8008432:	480e      	ldr	r0, [pc, #56]	@ (800846c <tcp_close_shutdown+0x1b0>)
 8008434:	f001 f8a2 	bl	800957c <tcp_pcb_remove>
 8008438:	4b0d      	ldr	r3, [pc, #52]	@ (8008470 <tcp_close_shutdown+0x1b4>)
 800843a:	2201      	movs	r2, #1
 800843c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f7ff fe8a 	bl	8008158 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008444:	e004      	b.n	8008450 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f81a 	bl	8008480 <tcp_close_shutdown_fin>
 800844c:	4603      	mov	r3, r0
 800844e:	e000      	b.n	8008452 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bdb0      	pop	{r4, r5, r7, pc}
 800845a:	bf00      	nop
 800845c:	0801258c 	.word	0x0801258c
 8008460:	08012660 	.word	0x08012660
 8008464:	080125d0 	.word	0x080125d0
 8008468:	08012680 	.word	0x08012680
 800846c:	20008828 	.word	0x20008828
 8008470:	20008830 	.word	0x20008830
 8008474:	20008868 	.word	0x20008868
 8008478:	20008820 	.word	0x20008820
 800847c:	20008824 	.word	0x20008824

08008480 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d106      	bne.n	800849c <tcp_close_shutdown_fin+0x1c>
 800848e:	4b2e      	ldr	r3, [pc, #184]	@ (8008548 <tcp_close_shutdown_fin+0xc8>)
 8008490:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8008494:	492d      	ldr	r1, [pc, #180]	@ (800854c <tcp_close_shutdown_fin+0xcc>)
 8008496:	482e      	ldr	r0, [pc, #184]	@ (8008550 <tcp_close_shutdown_fin+0xd0>)
 8008498:	f008 f99c 	bl	80107d4 <iprintf>

  switch (pcb->state) {
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	7d1b      	ldrb	r3, [r3, #20]
 80084a0:	2b07      	cmp	r3, #7
 80084a2:	d020      	beq.n	80084e6 <tcp_close_shutdown_fin+0x66>
 80084a4:	2b07      	cmp	r3, #7
 80084a6:	dc2b      	bgt.n	8008500 <tcp_close_shutdown_fin+0x80>
 80084a8:	2b03      	cmp	r3, #3
 80084aa:	d002      	beq.n	80084b2 <tcp_close_shutdown_fin+0x32>
 80084ac:	2b04      	cmp	r3, #4
 80084ae:	d00d      	beq.n	80084cc <tcp_close_shutdown_fin+0x4c>
 80084b0:	e026      	b.n	8008500 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f003 fee2 	bl	800c27c <tcp_send_fin>
 80084b8:	4603      	mov	r3, r0
 80084ba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80084bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d11f      	bne.n	8008504 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2205      	movs	r2, #5
 80084c8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80084ca:	e01b      	b.n	8008504 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f003 fed5 	bl	800c27c <tcp_send_fin>
 80084d2:	4603      	mov	r3, r0
 80084d4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80084d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d114      	bne.n	8008508 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2205      	movs	r2, #5
 80084e2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80084e4:	e010      	b.n	8008508 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f003 fec8 	bl	800c27c <tcp_send_fin>
 80084ec:	4603      	mov	r3, r0
 80084ee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80084f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d109      	bne.n	800850c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2209      	movs	r2, #9
 80084fc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80084fe:	e005      	b.n	800850c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	e01c      	b.n	800853e <tcp_close_shutdown_fin+0xbe>
      break;
 8008504:	bf00      	nop
 8008506:	e002      	b.n	800850e <tcp_close_shutdown_fin+0x8e>
      break;
 8008508:	bf00      	nop
 800850a:	e000      	b.n	800850e <tcp_close_shutdown_fin+0x8e>
      break;
 800850c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800850e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d103      	bne.n	800851e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f003 ffee 	bl	800c4f8 <tcp_output>
 800851c:	e00d      	b.n	800853a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800851e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008526:	d108      	bne.n	800853a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	8b5b      	ldrh	r3, [r3, #26]
 800852c:	f043 0308 	orr.w	r3, r3, #8
 8008530:	b29a      	uxth	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8008536:	2300      	movs	r3, #0
 8008538:	e001      	b.n	800853e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800853a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	0801258c 	.word	0x0801258c
 800854c:	0801263c 	.word	0x0801263c
 8008550:	080125d0 	.word	0x080125d0

08008554 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d109      	bne.n	8008576 <tcp_close+0x22>
 8008562:	4b0f      	ldr	r3, [pc, #60]	@ (80085a0 <tcp_close+0x4c>)
 8008564:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8008568:	490e      	ldr	r1, [pc, #56]	@ (80085a4 <tcp_close+0x50>)
 800856a:	480f      	ldr	r0, [pc, #60]	@ (80085a8 <tcp_close+0x54>)
 800856c:	f008 f932 	bl	80107d4 <iprintf>
 8008570:	f06f 030f 	mvn.w	r3, #15
 8008574:	e00f      	b.n	8008596 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	7d1b      	ldrb	r3, [r3, #20]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d006      	beq.n	800858c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	8b5b      	ldrh	r3, [r3, #26]
 8008582:	f043 0310 	orr.w	r3, r3, #16
 8008586:	b29a      	uxth	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800858c:	2101      	movs	r1, #1
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7ff fe94 	bl	80082bc <tcp_close_shutdown>
 8008594:	4603      	mov	r3, r0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	0801258c 	.word	0x0801258c
 80085a4:	0801269c 	.word	0x0801269c
 80085a8:	080125d0 	.word	0x080125d0

080085ac <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b08e      	sub	sp, #56	@ 0x38
 80085b0:	af04      	add	r7, sp, #16
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d107      	bne.n	80085cc <tcp_abandon+0x20>
 80085bc:	4b52      	ldr	r3, [pc, #328]	@ (8008708 <tcp_abandon+0x15c>)
 80085be:	f240 223d 	movw	r2, #573	@ 0x23d
 80085c2:	4952      	ldr	r1, [pc, #328]	@ (800870c <tcp_abandon+0x160>)
 80085c4:	4852      	ldr	r0, [pc, #328]	@ (8008710 <tcp_abandon+0x164>)
 80085c6:	f008 f905 	bl	80107d4 <iprintf>
 80085ca:	e099      	b.n	8008700 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	7d1b      	ldrb	r3, [r3, #20]
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d106      	bne.n	80085e2 <tcp_abandon+0x36>
 80085d4:	4b4c      	ldr	r3, [pc, #304]	@ (8008708 <tcp_abandon+0x15c>)
 80085d6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80085da:	494e      	ldr	r1, [pc, #312]	@ (8008714 <tcp_abandon+0x168>)
 80085dc:	484c      	ldr	r0, [pc, #304]	@ (8008710 <tcp_abandon+0x164>)
 80085de:	f008 f8f9 	bl	80107d4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	7d1b      	ldrb	r3, [r3, #20]
 80085e6:	2b0a      	cmp	r3, #10
 80085e8:	d107      	bne.n	80085fa <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80085ea:	6879      	ldr	r1, [r7, #4]
 80085ec:	484a      	ldr	r0, [pc, #296]	@ (8008718 <tcp_abandon+0x16c>)
 80085ee:	f000 ffc5 	bl	800957c <tcp_pcb_remove>
    tcp_free(pcb);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7ff fdb0 	bl	8008158 <tcp_free>
 80085f8:	e082      	b.n	8008700 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80085fa:	2300      	movs	r3, #0
 80085fc:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80085fe:	2300      	movs	r3, #0
 8008600:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008606:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800860c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008614:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	7d1b      	ldrb	r3, [r3, #20]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d126      	bne.n	8008672 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	8adb      	ldrh	r3, [r3, #22]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d02e      	beq.n	800868a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800862c:	4b3b      	ldr	r3, [pc, #236]	@ (800871c <tcp_abandon+0x170>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	429a      	cmp	r2, r3
 8008634:	d105      	bne.n	8008642 <tcp_abandon+0x96>
 8008636:	4b39      	ldr	r3, [pc, #228]	@ (800871c <tcp_abandon+0x170>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	4a37      	ldr	r2, [pc, #220]	@ (800871c <tcp_abandon+0x170>)
 800863e:	6013      	str	r3, [r2, #0]
 8008640:	e013      	b.n	800866a <tcp_abandon+0xbe>
 8008642:	4b36      	ldr	r3, [pc, #216]	@ (800871c <tcp_abandon+0x170>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	61fb      	str	r3, [r7, #28]
 8008648:	e00c      	b.n	8008664 <tcp_abandon+0xb8>
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	429a      	cmp	r2, r3
 8008652:	d104      	bne.n	800865e <tcp_abandon+0xb2>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	68da      	ldr	r2, [r3, #12]
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	60da      	str	r2, [r3, #12]
 800865c:	e005      	b.n	800866a <tcp_abandon+0xbe>
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	61fb      	str	r3, [r7, #28]
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1ef      	bne.n	800864a <tcp_abandon+0x9e>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	60da      	str	r2, [r3, #12]
 8008670:	e00b      	b.n	800868a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	8adb      	ldrh	r3, [r3, #22]
 800867a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800867c:	6879      	ldr	r1, [r7, #4]
 800867e:	4828      	ldr	r0, [pc, #160]	@ (8008720 <tcp_abandon+0x174>)
 8008680:	f000 ff7c 	bl	800957c <tcp_pcb_remove>
 8008684:	4b27      	ldr	r3, [pc, #156]	@ (8008724 <tcp_abandon+0x178>)
 8008686:	2201      	movs	r2, #1
 8008688:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800868e:	2b00      	cmp	r3, #0
 8008690:	d004      	beq.n	800869c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008696:	4618      	mov	r0, r3
 8008698:	f000 fd1e 	bl	80090d8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d004      	beq.n	80086ae <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086a8:	4618      	mov	r0, r3
 80086aa:	f000 fd15 	bl	80090d8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d004      	beq.n	80086c0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086ba:	4618      	mov	r0, r3
 80086bc:	f000 fd0c 	bl	80090d8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80086c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00e      	beq.n	80086e4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80086c6:	6879      	ldr	r1, [r7, #4]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	3304      	adds	r3, #4
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	8b12      	ldrh	r2, [r2, #24]
 80086d0:	9202      	str	r2, [sp, #8]
 80086d2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80086d4:	9201      	str	r2, [sp, #4]
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	460b      	mov	r3, r1
 80086da:	697a      	ldr	r2, [r7, #20]
 80086dc:	69b9      	ldr	r1, [r7, #24]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f004 fcbe 	bl	800d060 <tcp_rst>
    }
    last_state = pcb->state;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	7d1b      	ldrb	r3, [r3, #20]
 80086e8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7ff fd34 	bl	8008158 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d004      	beq.n	8008700 <tcp_abandon+0x154>
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	f06f 010c 	mvn.w	r1, #12
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	4798      	blx	r3
  }
}
 8008700:	3728      	adds	r7, #40	@ 0x28
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	0801258c 	.word	0x0801258c
 800870c:	080126d0 	.word	0x080126d0
 8008710:	080125d0 	.word	0x080125d0
 8008714:	080126ec 	.word	0x080126ec
 8008718:	2000882c 	.word	0x2000882c
 800871c:	20008820 	.word	0x20008820
 8008720:	20008828 	.word	0x20008828
 8008724:	20008830 	.word	0x20008830

08008728 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008730:	2101      	movs	r1, #1
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f7ff ff3a 	bl	80085ac <tcp_abandon>
}
 8008738:	bf00      	nop
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d106      	bne.n	800875c <tcp_update_rcv_ann_wnd+0x1c>
 800874e:	4b25      	ldr	r3, [pc, #148]	@ (80087e4 <tcp_update_rcv_ann_wnd+0xa4>)
 8008750:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8008754:	4924      	ldr	r1, [pc, #144]	@ (80087e8 <tcp_update_rcv_ann_wnd+0xa8>)
 8008756:	4825      	ldr	r0, [pc, #148]	@ (80087ec <tcp_update_rcv_ann_wnd+0xac>)
 8008758:	f008 f83c 	bl	80107d4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8008764:	4413      	add	r3, r2
 8008766:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8008770:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8008774:	bf28      	it	cs
 8008776:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800877a:	b292      	uxth	r2, r2
 800877c:	4413      	add	r3, r2
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	2b00      	cmp	r3, #0
 8008784:	db08      	blt.n	8008798 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	e020      	b.n	80087da <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	dd03      	ble.n	80087ae <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80087ac:	e014      	b.n	80087d8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087b6:	1ad3      	subs	r3, r2, r3
 80087b8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087c0:	d306      	bcc.n	80087d0 <tcp_update_rcv_ann_wnd+0x90>
 80087c2:	4b08      	ldr	r3, [pc, #32]	@ (80087e4 <tcp_update_rcv_ann_wnd+0xa4>)
 80087c4:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80087c8:	4909      	ldr	r1, [pc, #36]	@ (80087f0 <tcp_update_rcv_ann_wnd+0xb0>)
 80087ca:	4808      	ldr	r0, [pc, #32]	@ (80087ec <tcp_update_rcv_ann_wnd+0xac>)
 80087cc:	f008 f802 	bl	80107d4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	b29a      	uxth	r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80087d8:	2300      	movs	r3, #0
  }
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	0801258c 	.word	0x0801258c
 80087e8:	080127e8 	.word	0x080127e8
 80087ec:	080125d0 	.word	0x080125d0
 80087f0:	0801280c 	.word	0x0801280c

080087f4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	460b      	mov	r3, r1
 80087fe:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d107      	bne.n	8008816 <tcp_recved+0x22>
 8008806:	4b1f      	ldr	r3, [pc, #124]	@ (8008884 <tcp_recved+0x90>)
 8008808:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800880c:	491e      	ldr	r1, [pc, #120]	@ (8008888 <tcp_recved+0x94>)
 800880e:	481f      	ldr	r0, [pc, #124]	@ (800888c <tcp_recved+0x98>)
 8008810:	f007 ffe0 	bl	80107d4 <iprintf>
 8008814:	e032      	b.n	800887c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	7d1b      	ldrb	r3, [r3, #20]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d106      	bne.n	800882c <tcp_recved+0x38>
 800881e:	4b19      	ldr	r3, [pc, #100]	@ (8008884 <tcp_recved+0x90>)
 8008820:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8008824:	491a      	ldr	r1, [pc, #104]	@ (8008890 <tcp_recved+0x9c>)
 8008826:	4819      	ldr	r0, [pc, #100]	@ (800888c <tcp_recved+0x98>)
 8008828:	f007 ffd4 	bl	80107d4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008830:	887b      	ldrh	r3, [r7, #2]
 8008832:	4413      	add	r3, r2
 8008834:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008836:	89fb      	ldrh	r3, [r7, #14]
 8008838:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800883c:	d804      	bhi.n	8008848 <tcp_recved+0x54>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008842:	89fa      	ldrh	r2, [r7, #14]
 8008844:	429a      	cmp	r2, r3
 8008846:	d204      	bcs.n	8008852 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800884e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008850:	e002      	b.n	8008858 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	89fa      	ldrh	r2, [r7, #14]
 8008856:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f7ff ff71 	bl	8008740 <tcp_update_rcv_ann_wnd>
 800885e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8008866:	d309      	bcc.n	800887c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	8b5b      	ldrh	r3, [r3, #26]
 800886c:	f043 0302 	orr.w	r3, r3, #2
 8008870:	b29a      	uxth	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f003 fe3e 	bl	800c4f8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	0801258c 	.word	0x0801258c
 8008888:	08012828 	.word	0x08012828
 800888c:	080125d0 	.word	0x080125d0
 8008890:	08012840 	.word	0x08012840

08008894 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008894:	b5b0      	push	{r4, r5, r7, lr}
 8008896:	b090      	sub	sp, #64	@ 0x40
 8008898:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800889a:	2300      	movs	r3, #0
 800889c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80088a0:	4b95      	ldr	r3, [pc, #596]	@ (8008af8 <tcp_slowtmr+0x264>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	3301      	adds	r3, #1
 80088a6:	4a94      	ldr	r2, [pc, #592]	@ (8008af8 <tcp_slowtmr+0x264>)
 80088a8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80088aa:	4b94      	ldr	r3, [pc, #592]	@ (8008afc <tcp_slowtmr+0x268>)
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	3301      	adds	r3, #1
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	4b92      	ldr	r3, [pc, #584]	@ (8008afc <tcp_slowtmr+0x268>)
 80088b4:	701a      	strb	r2, [r3, #0]
 80088b6:	e000      	b.n	80088ba <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80088b8:	bf00      	nop
  prev = NULL;
 80088ba:	2300      	movs	r3, #0
 80088bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80088be:	4b90      	ldr	r3, [pc, #576]	@ (8008b00 <tcp_slowtmr+0x26c>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80088c4:	e29d      	b.n	8008e02 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80088c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c8:	7d1b      	ldrb	r3, [r3, #20]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d106      	bne.n	80088dc <tcp_slowtmr+0x48>
 80088ce:	4b8d      	ldr	r3, [pc, #564]	@ (8008b04 <tcp_slowtmr+0x270>)
 80088d0:	f240 42be 	movw	r2, #1214	@ 0x4be
 80088d4:	498c      	ldr	r1, [pc, #560]	@ (8008b08 <tcp_slowtmr+0x274>)
 80088d6:	488d      	ldr	r0, [pc, #564]	@ (8008b0c <tcp_slowtmr+0x278>)
 80088d8:	f007 ff7c 	bl	80107d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80088dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088de:	7d1b      	ldrb	r3, [r3, #20]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d106      	bne.n	80088f2 <tcp_slowtmr+0x5e>
 80088e4:	4b87      	ldr	r3, [pc, #540]	@ (8008b04 <tcp_slowtmr+0x270>)
 80088e6:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80088ea:	4989      	ldr	r1, [pc, #548]	@ (8008b10 <tcp_slowtmr+0x27c>)
 80088ec:	4887      	ldr	r0, [pc, #540]	@ (8008b0c <tcp_slowtmr+0x278>)
 80088ee:	f007 ff71 	bl	80107d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80088f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f4:	7d1b      	ldrb	r3, [r3, #20]
 80088f6:	2b0a      	cmp	r3, #10
 80088f8:	d106      	bne.n	8008908 <tcp_slowtmr+0x74>
 80088fa:	4b82      	ldr	r3, [pc, #520]	@ (8008b04 <tcp_slowtmr+0x270>)
 80088fc:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8008900:	4984      	ldr	r1, [pc, #528]	@ (8008b14 <tcp_slowtmr+0x280>)
 8008902:	4882      	ldr	r0, [pc, #520]	@ (8008b0c <tcp_slowtmr+0x278>)
 8008904:	f007 ff66 	bl	80107d4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800890a:	7f9a      	ldrb	r2, [r3, #30]
 800890c:	4b7b      	ldr	r3, [pc, #492]	@ (8008afc <tcp_slowtmr+0x268>)
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	429a      	cmp	r2, r3
 8008912:	d105      	bne.n	8008920 <tcp_slowtmr+0x8c>
      prev = pcb;
 8008914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008916:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800891e:	e270      	b.n	8008e02 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8008920:	4b76      	ldr	r3, [pc, #472]	@ (8008afc <tcp_slowtmr+0x268>)
 8008922:	781a      	ldrb	r2, [r3, #0]
 8008924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008926:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8008928:	2300      	movs	r3, #0
 800892a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800892e:	2300      	movs	r3, #0
 8008930:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008936:	7d1b      	ldrb	r3, [r3, #20]
 8008938:	2b02      	cmp	r3, #2
 800893a:	d10a      	bne.n	8008952 <tcp_slowtmr+0xbe>
 800893c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800893e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008942:	2b05      	cmp	r3, #5
 8008944:	d905      	bls.n	8008952 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8008946:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800894a:	3301      	adds	r3, #1
 800894c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008950:	e11e      	b.n	8008b90 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008954:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008958:	2b0b      	cmp	r3, #11
 800895a:	d905      	bls.n	8008968 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800895c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008960:	3301      	adds	r3, #1
 8008962:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008966:	e113      	b.n	8008b90 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8008968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800896a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800896e:	2b00      	cmp	r3, #0
 8008970:	d075      	beq.n	8008a5e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008976:	2b00      	cmp	r3, #0
 8008978:	d006      	beq.n	8008988 <tcp_slowtmr+0xf4>
 800897a:	4b62      	ldr	r3, [pc, #392]	@ (8008b04 <tcp_slowtmr+0x270>)
 800897c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8008980:	4965      	ldr	r1, [pc, #404]	@ (8008b18 <tcp_slowtmr+0x284>)
 8008982:	4862      	ldr	r0, [pc, #392]	@ (8008b0c <tcp_slowtmr+0x278>)
 8008984:	f007 ff26 	bl	80107d4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800898a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800898c:	2b00      	cmp	r3, #0
 800898e:	d106      	bne.n	800899e <tcp_slowtmr+0x10a>
 8008990:	4b5c      	ldr	r3, [pc, #368]	@ (8008b04 <tcp_slowtmr+0x270>)
 8008992:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8008996:	4961      	ldr	r1, [pc, #388]	@ (8008b1c <tcp_slowtmr+0x288>)
 8008998:	485c      	ldr	r0, [pc, #368]	@ (8008b0c <tcp_slowtmr+0x278>)
 800899a:	f007 ff1b 	bl	80107d4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800899e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80089a4:	2b0b      	cmp	r3, #11
 80089a6:	d905      	bls.n	80089b4 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80089a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089ac:	3301      	adds	r3, #1
 80089ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80089b2:	e0ed      	b.n	8008b90 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80089b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80089ba:	3b01      	subs	r3, #1
 80089bc:	4a58      	ldr	r2, [pc, #352]	@ (8008b20 <tcp_slowtmr+0x28c>)
 80089be:	5cd3      	ldrb	r3, [r2, r3]
 80089c0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80089c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80089c8:	7c7a      	ldrb	r2, [r7, #17]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d907      	bls.n	80089de <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80089ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80089d4:	3301      	adds	r3, #1
 80089d6:	b2da      	uxtb	r2, r3
 80089d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089da:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80089de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80089e4:	7c7a      	ldrb	r2, [r7, #17]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	f200 80d2 	bhi.w	8008b90 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80089ec:	2301      	movs	r3, #1
 80089ee:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80089f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d108      	bne.n	8008a0c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80089fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80089fc:	f004 fc24 	bl	800d248 <tcp_zero_window_probe>
 8008a00:	4603      	mov	r3, r0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d014      	beq.n	8008a30 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8008a06:	2300      	movs	r3, #0
 8008a08:	623b      	str	r3, [r7, #32]
 8008a0a:	e011      	b.n	8008a30 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a12:	4619      	mov	r1, r3
 8008a14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a16:	f003 fae9 	bl	800bfec <tcp_split_unsent_seg>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d107      	bne.n	8008a30 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8008a20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a22:	f003 fd69 	bl	800c4f8 <tcp_output>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f000 80ac 	beq.w	8008b90 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8008a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a42:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008a46:	2b06      	cmp	r3, #6
 8008a48:	f200 80a2 	bhi.w	8008b90 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8008a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a4e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008a52:	3301      	adds	r3, #1
 8008a54:	b2da      	uxtb	r2, r3
 8008a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a58:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8008a5c:	e098      	b.n	8008b90 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a60:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	db0f      	blt.n	8008a88 <tcp_slowtmr+0x1f4>
 8008a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a6a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008a6e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d008      	beq.n	8008a88 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8008a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a78:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	3301      	adds	r3, #1
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	b21a      	sxth	r2, r3
 8008a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a86:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8008a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a8a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8008a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a90:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8008a94:	429a      	cmp	r2, r3
 8008a96:	db7b      	blt.n	8008b90 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008a98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a9a:	f004 f821 	bl	800cae0 <tcp_rexmit_rto_prepare>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d007      	beq.n	8008ab4 <tcp_slowtmr+0x220>
 8008aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d171      	bne.n	8008b90 <tcp_slowtmr+0x2fc>
 8008aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d06d      	beq.n	8008b90 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8008ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab6:	7d1b      	ldrb	r3, [r3, #20]
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d03a      	beq.n	8008b32 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008abe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ac2:	2b0c      	cmp	r3, #12
 8008ac4:	bf28      	it	cs
 8008ac6:	230c      	movcs	r3, #12
 8008ac8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008acc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008ad0:	10db      	asrs	r3, r3, #3
 8008ad2:	b21b      	sxth	r3, r3
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008adc:	4413      	add	r3, r2
 8008ade:	7efa      	ldrb	r2, [r7, #27]
 8008ae0:	4910      	ldr	r1, [pc, #64]	@ (8008b24 <tcp_slowtmr+0x290>)
 8008ae2:	5c8a      	ldrb	r2, [r1, r2]
 8008ae4:	4093      	lsls	r3, r2
 8008ae6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8008aee:	4293      	cmp	r3, r2
 8008af0:	dc1a      	bgt.n	8008b28 <tcp_slowtmr+0x294>
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	b21a      	sxth	r2, r3
 8008af6:	e019      	b.n	8008b2c <tcp_slowtmr+0x298>
 8008af8:	2000881c 	.word	0x2000881c
 8008afc:	20008832 	.word	0x20008832
 8008b00:	20008828 	.word	0x20008828
 8008b04:	0801258c 	.word	0x0801258c
 8008b08:	080128d0 	.word	0x080128d0
 8008b0c:	080125d0 	.word	0x080125d0
 8008b10:	080128fc 	.word	0x080128fc
 8008b14:	08012928 	.word	0x08012928
 8008b18:	08012958 	.word	0x08012958
 8008b1c:	0801298c 	.word	0x0801298c
 8008b20:	08014564 	.word	0x08014564
 8008b24:	08014554 	.word	0x08014554
 8008b28:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b2e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8008b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b34:	2200      	movs	r2, #0
 8008b36:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b40:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008b44:	4293      	cmp	r3, r2
 8008b46:	bf28      	it	cs
 8008b48:	4613      	movcs	r3, r2
 8008b4a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008b4c:	8a7b      	ldrh	r3, [r7, #18]
 8008b4e:	085b      	lsrs	r3, r3, #1
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b54:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b5a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8008b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008b62:	005b      	lsls	r3, r3, #1
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d206      	bcs.n	8008b78 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008b6e:	005b      	lsls	r3, r3, #1
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b74:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8008b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b7a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8008b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b7e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8008b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b84:	2200      	movs	r2, #0
 8008b86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8008b8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b8c:	f004 f818 	bl	800cbc0 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8008b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b92:	7d1b      	ldrb	r3, [r3, #20]
 8008b94:	2b06      	cmp	r3, #6
 8008b96:	d111      	bne.n	8008bbc <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8008b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b9a:	8b5b      	ldrh	r3, [r3, #26]
 8008b9c:	f003 0310 	and.w	r3, r3, #16
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00b      	beq.n	8008bbc <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008ba4:	4b9c      	ldr	r3, [pc, #624]	@ (8008e18 <tcp_slowtmr+0x584>)
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008baa:	6a1b      	ldr	r3, [r3, #32]
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	2b28      	cmp	r3, #40	@ 0x28
 8008bb0:	d904      	bls.n	8008bbc <tcp_slowtmr+0x328>
          ++pcb_remove;
 8008bb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bbe:	7a5b      	ldrb	r3, [r3, #9]
 8008bc0:	f003 0308 	and.w	r3, r3, #8
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d04a      	beq.n	8008c5e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8008bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bca:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008bcc:	2b04      	cmp	r3, #4
 8008bce:	d003      	beq.n	8008bd8 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8008bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bd2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008bd4:	2b07      	cmp	r3, #7
 8008bd6:	d142      	bne.n	8008c5e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008bd8:	4b8f      	ldr	r3, [pc, #572]	@ (8008e18 <tcp_slowtmr+0x584>)
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bde:	6a1b      	ldr	r3, [r3, #32]
 8008be0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008be4:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8008be8:	4b8c      	ldr	r3, [pc, #560]	@ (8008e1c <tcp_slowtmr+0x588>)
 8008bea:	440b      	add	r3, r1
 8008bec:	498c      	ldr	r1, [pc, #560]	@ (8008e20 <tcp_slowtmr+0x58c>)
 8008bee:	fba1 1303 	umull	r1, r3, r1, r3
 8008bf2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d90a      	bls.n	8008c0e <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8008bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8008c02:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c06:	3301      	adds	r3, #1
 8008c08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008c0c:	e027      	b.n	8008c5e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008c0e:	4b82      	ldr	r3, [pc, #520]	@ (8008e18 <tcp_slowtmr+0x584>)
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c14:	6a1b      	ldr	r3, [r3, #32]
 8008c16:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c1a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8008c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c20:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8008c24:	4618      	mov	r0, r3
 8008c26:	4b7f      	ldr	r3, [pc, #508]	@ (8008e24 <tcp_slowtmr+0x590>)
 8008c28:	fb00 f303 	mul.w	r3, r0, r3
 8008c2c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008c2e:	497c      	ldr	r1, [pc, #496]	@ (8008e20 <tcp_slowtmr+0x58c>)
 8008c30:	fba1 1303 	umull	r1, r3, r1, r3
 8008c34:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d911      	bls.n	8008c5e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8008c3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c3c:	f004 fac4 	bl	800d1c8 <tcp_keepalive>
 8008c40:	4603      	mov	r3, r0
 8008c42:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8008c46:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d107      	bne.n	8008c5e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8008c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c50:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8008c54:	3301      	adds	r3, #1
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c5a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8008c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d011      	beq.n	8008c8a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8008c66:	4b6c      	ldr	r3, [pc, #432]	@ (8008e18 <tcp_slowtmr+0x584>)
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	1ad2      	subs	r2, r2, r3
 8008c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c72:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8008c76:	4619      	mov	r1, r3
 8008c78:	460b      	mov	r3, r1
 8008c7a:	005b      	lsls	r3, r3, #1
 8008c7c:	440b      	add	r3, r1
 8008c7e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d302      	bcc.n	8008c8a <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8008c84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c86:	f000 fddd 	bl	8009844 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8008c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c8c:	7d1b      	ldrb	r3, [r3, #20]
 8008c8e:	2b03      	cmp	r3, #3
 8008c90:	d10b      	bne.n	8008caa <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008c92:	4b61      	ldr	r3, [pc, #388]	@ (8008e18 <tcp_slowtmr+0x584>)
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c98:	6a1b      	ldr	r3, [r3, #32]
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	2b28      	cmp	r3, #40	@ 0x28
 8008c9e:	d904      	bls.n	8008caa <tcp_slowtmr+0x416>
        ++pcb_remove;
 8008ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8008caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cac:	7d1b      	ldrb	r3, [r3, #20]
 8008cae:	2b09      	cmp	r3, #9
 8008cb0:	d10b      	bne.n	8008cca <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008cb2:	4b59      	ldr	r3, [pc, #356]	@ (8008e18 <tcp_slowtmr+0x584>)
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb8:	6a1b      	ldr	r3, [r3, #32]
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	2bf0      	cmp	r3, #240	@ 0xf0
 8008cbe:	d904      	bls.n	8008cca <tcp_slowtmr+0x436>
        ++pcb_remove;
 8008cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8008cca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d060      	beq.n	8008d94 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8008cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cd8:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8008cda:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008cdc:	f000 fbfe 	bl	80094dc <tcp_pcb_purge>
      if (prev != NULL) {
 8008ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d010      	beq.n	8008d08 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008ce6:	4b50      	ldr	r3, [pc, #320]	@ (8008e28 <tcp_slowtmr+0x594>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d106      	bne.n	8008cfe <tcp_slowtmr+0x46a>
 8008cf0:	4b4e      	ldr	r3, [pc, #312]	@ (8008e2c <tcp_slowtmr+0x598>)
 8008cf2:	f240 526d 	movw	r2, #1389	@ 0x56d
 8008cf6:	494e      	ldr	r1, [pc, #312]	@ (8008e30 <tcp_slowtmr+0x59c>)
 8008cf8:	484e      	ldr	r0, [pc, #312]	@ (8008e34 <tcp_slowtmr+0x5a0>)
 8008cfa:	f007 fd6b 	bl	80107d4 <iprintf>
        prev->next = pcb->next;
 8008cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d00:	68da      	ldr	r2, [r3, #12]
 8008d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d04:	60da      	str	r2, [r3, #12]
 8008d06:	e00f      	b.n	8008d28 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008d08:	4b47      	ldr	r3, [pc, #284]	@ (8008e28 <tcp_slowtmr+0x594>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d006      	beq.n	8008d20 <tcp_slowtmr+0x48c>
 8008d12:	4b46      	ldr	r3, [pc, #280]	@ (8008e2c <tcp_slowtmr+0x598>)
 8008d14:	f240 5271 	movw	r2, #1393	@ 0x571
 8008d18:	4947      	ldr	r1, [pc, #284]	@ (8008e38 <tcp_slowtmr+0x5a4>)
 8008d1a:	4846      	ldr	r0, [pc, #280]	@ (8008e34 <tcp_slowtmr+0x5a0>)
 8008d1c:	f007 fd5a 	bl	80107d4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	4a40      	ldr	r2, [pc, #256]	@ (8008e28 <tcp_slowtmr+0x594>)
 8008d26:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8008d28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d013      	beq.n	8008d58 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d32:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8008d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d36:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008d38:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8008d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d3c:	3304      	adds	r3, #4
 8008d3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d40:	8ad2      	ldrh	r2, [r2, #22]
 8008d42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d44:	8b09      	ldrh	r1, [r1, #24]
 8008d46:	9102      	str	r1, [sp, #8]
 8008d48:	9201      	str	r2, [sp, #4]
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	462b      	mov	r3, r5
 8008d4e:	4622      	mov	r2, r4
 8008d50:	4601      	mov	r1, r0
 8008d52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d54:	f004 f984 	bl	800d060 <tcp_rst>
      err_arg = pcb->callback_arg;
 8008d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d5a:	691b      	ldr	r3, [r3, #16]
 8008d5c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d60:	7d1b      	ldrb	r3, [r3, #20]
 8008d62:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d66:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8008d6e:	6838      	ldr	r0, [r7, #0]
 8008d70:	f7ff f9f2 	bl	8008158 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8008d74:	4b31      	ldr	r3, [pc, #196]	@ (8008e3c <tcp_slowtmr+0x5a8>)
 8008d76:	2200      	movs	r2, #0
 8008d78:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d004      	beq.n	8008d8a <tcp_slowtmr+0x4f6>
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f06f 010c 	mvn.w	r1, #12
 8008d86:	68b8      	ldr	r0, [r7, #8]
 8008d88:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008d8a:	4b2c      	ldr	r3, [pc, #176]	@ (8008e3c <tcp_slowtmr+0x5a8>)
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d037      	beq.n	8008e02 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8008d92:	e592      	b.n	80088ba <tcp_slowtmr+0x26>
      prev = pcb;
 8008d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d96:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8008d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da0:	7f1b      	ldrb	r3, [r3, #28]
 8008da2:	3301      	adds	r3, #1
 8008da4:	b2da      	uxtb	r2, r3
 8008da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dac:	7f1a      	ldrb	r2, [r3, #28]
 8008dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db0:	7f5b      	ldrb	r3, [r3, #29]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d325      	bcc.n	8008e02 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8008db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db8:	2200      	movs	r2, #0
 8008dba:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8008dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8008e3c <tcp_slowtmr+0x5a8>)
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d00b      	beq.n	8008de4 <tcp_slowtmr+0x550>
 8008dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008dd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008dd4:	6912      	ldr	r2, [r2, #16]
 8008dd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008dd8:	4610      	mov	r0, r2
 8008dda:	4798      	blx	r3
 8008ddc:	4603      	mov	r3, r0
 8008dde:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8008de2:	e002      	b.n	8008dea <tcp_slowtmr+0x556>
 8008de4:	2300      	movs	r3, #0
 8008de6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8008dea:	4b14      	ldr	r3, [pc, #80]	@ (8008e3c <tcp_slowtmr+0x5a8>)
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f47f ad62 	bne.w	80088b8 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008df4:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d102      	bne.n	8008e02 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8008dfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008dfe:	f003 fb7b 	bl	800c4f8 <tcp_output>
  while (pcb != NULL) {
 8008e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f47f ad5e 	bne.w	80088c6 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8008e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8008e40 <tcp_slowtmr+0x5ac>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008e14:	e069      	b.n	8008eea <tcp_slowtmr+0x656>
 8008e16:	bf00      	nop
 8008e18:	2000881c 	.word	0x2000881c
 8008e1c:	000a4cb8 	.word	0x000a4cb8
 8008e20:	10624dd3 	.word	0x10624dd3
 8008e24:	000124f8 	.word	0x000124f8
 8008e28:	20008828 	.word	0x20008828
 8008e2c:	0801258c 	.word	0x0801258c
 8008e30:	080129c4 	.word	0x080129c4
 8008e34:	080125d0 	.word	0x080125d0
 8008e38:	080129f0 	.word	0x080129f0
 8008e3c:	20008830 	.word	0x20008830
 8008e40:	2000882c 	.word	0x2000882c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e46:	7d1b      	ldrb	r3, [r3, #20]
 8008e48:	2b0a      	cmp	r3, #10
 8008e4a:	d006      	beq.n	8008e5a <tcp_slowtmr+0x5c6>
 8008e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8008efc <tcp_slowtmr+0x668>)
 8008e4e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8008e52:	492b      	ldr	r1, [pc, #172]	@ (8008f00 <tcp_slowtmr+0x66c>)
 8008e54:	482b      	ldr	r0, [pc, #172]	@ (8008f04 <tcp_slowtmr+0x670>)
 8008e56:	f007 fcbd 	bl	80107d4 <iprintf>
    pcb_remove = 0;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008e60:	4b29      	ldr	r3, [pc, #164]	@ (8008f08 <tcp_slowtmr+0x674>)
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e66:	6a1b      	ldr	r3, [r3, #32]
 8008e68:	1ad3      	subs	r3, r2, r3
 8008e6a:	2bf0      	cmp	r3, #240	@ 0xf0
 8008e6c:	d904      	bls.n	8008e78 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8008e6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e72:	3301      	adds	r3, #1
 8008e74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008e78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d02f      	beq.n	8008ee0 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008e80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e82:	f000 fb2b 	bl	80094dc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d010      	beq.n	8008eae <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8008f0c <tcp_slowtmr+0x678>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d106      	bne.n	8008ea4 <tcp_slowtmr+0x610>
 8008e96:	4b19      	ldr	r3, [pc, #100]	@ (8008efc <tcp_slowtmr+0x668>)
 8008e98:	f240 52af 	movw	r2, #1455	@ 0x5af
 8008e9c:	491c      	ldr	r1, [pc, #112]	@ (8008f10 <tcp_slowtmr+0x67c>)
 8008e9e:	4819      	ldr	r0, [pc, #100]	@ (8008f04 <tcp_slowtmr+0x670>)
 8008ea0:	f007 fc98 	bl	80107d4 <iprintf>
        prev->next = pcb->next;
 8008ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea6:	68da      	ldr	r2, [r3, #12]
 8008ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eaa:	60da      	str	r2, [r3, #12]
 8008eac:	e00f      	b.n	8008ece <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008eae:	4b17      	ldr	r3, [pc, #92]	@ (8008f0c <tcp_slowtmr+0x678>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d006      	beq.n	8008ec6 <tcp_slowtmr+0x632>
 8008eb8:	4b10      	ldr	r3, [pc, #64]	@ (8008efc <tcp_slowtmr+0x668>)
 8008eba:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8008ebe:	4915      	ldr	r1, [pc, #84]	@ (8008f14 <tcp_slowtmr+0x680>)
 8008ec0:	4810      	ldr	r0, [pc, #64]	@ (8008f04 <tcp_slowtmr+0x670>)
 8008ec2:	f007 fc87 	bl	80107d4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	4a10      	ldr	r2, [pc, #64]	@ (8008f0c <tcp_slowtmr+0x678>)
 8008ecc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8008ed8:	69f8      	ldr	r0, [r7, #28]
 8008eda:	f7ff f93d 	bl	8008158 <tcp_free>
 8008ede:	e004      	b.n	8008eea <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8008ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1a9      	bne.n	8008e44 <tcp_slowtmr+0x5b0>
    }
  }
}
 8008ef0:	bf00      	nop
 8008ef2:	bf00      	nop
 8008ef4:	3730      	adds	r7, #48	@ 0x30
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8008efa:	bf00      	nop
 8008efc:	0801258c 	.word	0x0801258c
 8008f00:	08012a1c 	.word	0x08012a1c
 8008f04:	080125d0 	.word	0x080125d0
 8008f08:	2000881c 	.word	0x2000881c
 8008f0c:	2000882c 	.word	0x2000882c
 8008f10:	08012a4c 	.word	0x08012a4c
 8008f14:	08012a74 	.word	0x08012a74

08008f18 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8008fd4 <tcp_fasttmr+0xbc>)
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	3301      	adds	r3, #1
 8008f24:	b2da      	uxtb	r2, r3
 8008f26:	4b2b      	ldr	r3, [pc, #172]	@ (8008fd4 <tcp_fasttmr+0xbc>)
 8008f28:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008f2a:	4b2b      	ldr	r3, [pc, #172]	@ (8008fd8 <tcp_fasttmr+0xc0>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008f30:	e048      	b.n	8008fc4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	7f9a      	ldrb	r2, [r3, #30]
 8008f36:	4b27      	ldr	r3, [pc, #156]	@ (8008fd4 <tcp_fasttmr+0xbc>)
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d03f      	beq.n	8008fbe <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008f3e:	4b25      	ldr	r3, [pc, #148]	@ (8008fd4 <tcp_fasttmr+0xbc>)
 8008f40:	781a      	ldrb	r2, [r3, #0]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	8b5b      	ldrh	r3, [r3, #26]
 8008f4a:	f003 0301 	and.w	r3, r3, #1
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d010      	beq.n	8008f74 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	8b5b      	ldrh	r3, [r3, #26]
 8008f56:	f043 0302 	orr.w	r3, r3, #2
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f003 fac9 	bl	800c4f8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	8b5b      	ldrh	r3, [r3, #26]
 8008f6a:	f023 0303 	bic.w	r3, r3, #3
 8008f6e:	b29a      	uxth	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	8b5b      	ldrh	r3, [r3, #26]
 8008f78:	f003 0308 	and.w	r3, r3, #8
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d009      	beq.n	8008f94 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	8b5b      	ldrh	r3, [r3, #26]
 8008f84:	f023 0308 	bic.w	r3, r3, #8
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f7ff fa76 	bl	8008480 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00a      	beq.n	8008fb8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8008fdc <tcp_fasttmr+0xc4>)
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f819 	bl	8008fe0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008fae:	4b0b      	ldr	r3, [pc, #44]	@ (8008fdc <tcp_fasttmr+0xc4>)
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d000      	beq.n	8008fb8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008fb6:	e7b8      	b.n	8008f2a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	607b      	str	r3, [r7, #4]
 8008fbc:	e002      	b.n	8008fc4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1b3      	bne.n	8008f32 <tcp_fasttmr+0x1a>
    }
  }
}
 8008fca:	bf00      	nop
 8008fcc:	bf00      	nop
 8008fce:	3708      	adds	r7, #8
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	20008832 	.word	0x20008832
 8008fd8:	20008828 	.word	0x20008828
 8008fdc:	20008830 	.word	0x20008830

08008fe0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008fe0:	b590      	push	{r4, r7, lr}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d109      	bne.n	8009002 <tcp_process_refused_data+0x22>
 8008fee:	4b37      	ldr	r3, [pc, #220]	@ (80090cc <tcp_process_refused_data+0xec>)
 8008ff0:	f240 6209 	movw	r2, #1545	@ 0x609
 8008ff4:	4936      	ldr	r1, [pc, #216]	@ (80090d0 <tcp_process_refused_data+0xf0>)
 8008ff6:	4837      	ldr	r0, [pc, #220]	@ (80090d4 <tcp_process_refused_data+0xf4>)
 8008ff8:	f007 fbec 	bl	80107d4 <iprintf>
 8008ffc:	f06f 030f 	mvn.w	r3, #15
 8009000:	e060      	b.n	80090c4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009006:	7b5b      	ldrb	r3, [r3, #13]
 8009008:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800900e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00b      	beq.n	8009038 <tcp_process_refused_data+0x58>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6918      	ldr	r0, [r3, #16]
 800902a:	2300      	movs	r3, #0
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	6879      	ldr	r1, [r7, #4]
 8009030:	47a0      	blx	r4
 8009032:	4603      	mov	r3, r0
 8009034:	73fb      	strb	r3, [r7, #15]
 8009036:	e007      	b.n	8009048 <tcp_process_refused_data+0x68>
 8009038:	2300      	movs	r3, #0
 800903a:	68ba      	ldr	r2, [r7, #8]
 800903c:	6879      	ldr	r1, [r7, #4]
 800903e:	2000      	movs	r0, #0
 8009040:	f000 f8a4 	bl	800918c <tcp_recv_null>
 8009044:	4603      	mov	r3, r0
 8009046:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d12a      	bne.n	80090a6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009050:	7bbb      	ldrb	r3, [r7, #14]
 8009052:	f003 0320 	and.w	r3, r3, #32
 8009056:	2b00      	cmp	r3, #0
 8009058:	d033      	beq.n	80090c2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800905e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009062:	d005      	beq.n	8009070 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009068:	3301      	adds	r3, #1
 800906a:	b29a      	uxth	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00b      	beq.n	8009092 <tcp_process_refused_data+0xb2>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6918      	ldr	r0, [r3, #16]
 8009084:	2300      	movs	r3, #0
 8009086:	2200      	movs	r2, #0
 8009088:	6879      	ldr	r1, [r7, #4]
 800908a:	47a0      	blx	r4
 800908c:	4603      	mov	r3, r0
 800908e:	73fb      	strb	r3, [r7, #15]
 8009090:	e001      	b.n	8009096 <tcp_process_refused_data+0xb6>
 8009092:	2300      	movs	r3, #0
 8009094:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800909a:	f113 0f0d 	cmn.w	r3, #13
 800909e:	d110      	bne.n	80090c2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80090a0:	f06f 030c 	mvn.w	r3, #12
 80090a4:	e00e      	b.n	80090c4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80090a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090aa:	f113 0f0d 	cmn.w	r3, #13
 80090ae:	d102      	bne.n	80090b6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80090b0:	f06f 030c 	mvn.w	r3, #12
 80090b4:	e006      	b.n	80090c4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	68ba      	ldr	r2, [r7, #8]
 80090ba:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80090bc:	f06f 0304 	mvn.w	r3, #4
 80090c0:	e000      	b.n	80090c4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3714      	adds	r7, #20
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd90      	pop	{r4, r7, pc}
 80090cc:	0801258c 	.word	0x0801258c
 80090d0:	08012a9c 	.word	0x08012a9c
 80090d4:	080125d0 	.word	0x080125d0

080090d8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80090e0:	e007      	b.n	80090f2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f80a 	bl	8009102 <tcp_seg_free>
    seg = next;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1f4      	bne.n	80090e2 <tcp_segs_free+0xa>
  }
}
 80090f8:	bf00      	nop
 80090fa:	bf00      	nop
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b082      	sub	sp, #8
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00c      	beq.n	800912a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d004      	beq.n	8009122 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	4618      	mov	r0, r3
 800911e:	f7fe fcd9 	bl	8007ad4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009122:	6879      	ldr	r1, [r7, #4]
 8009124:	2003      	movs	r0, #3
 8009126:	f7fd fe5f 	bl	8006de8 <memp_free>
  }
}
 800912a:	bf00      	nop
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
	...

08009134 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d106      	bne.n	8009150 <tcp_seg_copy+0x1c>
 8009142:	4b0f      	ldr	r3, [pc, #60]	@ (8009180 <tcp_seg_copy+0x4c>)
 8009144:	f240 6282 	movw	r2, #1666	@ 0x682
 8009148:	490e      	ldr	r1, [pc, #56]	@ (8009184 <tcp_seg_copy+0x50>)
 800914a:	480f      	ldr	r0, [pc, #60]	@ (8009188 <tcp_seg_copy+0x54>)
 800914c:	f007 fb42 	bl	80107d4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009150:	2003      	movs	r0, #3
 8009152:	f7fd fdd9 	bl	8006d08 <memp_malloc>
 8009156:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d101      	bne.n	8009162 <tcp_seg_copy+0x2e>
    return NULL;
 800915e:	2300      	movs	r3, #0
 8009160:	e00a      	b.n	8009178 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009162:	2210      	movs	r2, #16
 8009164:	6879      	ldr	r1, [r7, #4]
 8009166:	68f8      	ldr	r0, [r7, #12]
 8009168:	f007 fc85 	bl	8010a76 <memcpy>
  pbuf_ref(cseg->p);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	4618      	mov	r0, r3
 8009172:	f7fe fd4f 	bl	8007c14 <pbuf_ref>
  return cseg;
 8009176:	68fb      	ldr	r3, [r7, #12]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	0801258c 	.word	0x0801258c
 8009184:	08012ae0 	.word	0x08012ae0
 8009188:	080125d0 	.word	0x080125d0

0800918c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	607a      	str	r2, [r7, #4]
 8009198:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d109      	bne.n	80091b4 <tcp_recv_null+0x28>
 80091a0:	4b12      	ldr	r3, [pc, #72]	@ (80091ec <tcp_recv_null+0x60>)
 80091a2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80091a6:	4912      	ldr	r1, [pc, #72]	@ (80091f0 <tcp_recv_null+0x64>)
 80091a8:	4812      	ldr	r0, [pc, #72]	@ (80091f4 <tcp_recv_null+0x68>)
 80091aa:	f007 fb13 	bl	80107d4 <iprintf>
 80091ae:	f06f 030f 	mvn.w	r3, #15
 80091b2:	e016      	b.n	80091e2 <tcp_recv_null+0x56>

  if (p != NULL) {
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d009      	beq.n	80091ce <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	891b      	ldrh	r3, [r3, #8]
 80091be:	4619      	mov	r1, r3
 80091c0:	68b8      	ldr	r0, [r7, #8]
 80091c2:	f7ff fb17 	bl	80087f4 <tcp_recved>
    pbuf_free(p);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f7fe fc84 	bl	8007ad4 <pbuf_free>
 80091cc:	e008      	b.n	80091e0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80091ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d104      	bne.n	80091e0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80091d6:	68b8      	ldr	r0, [r7, #8]
 80091d8:	f7ff f9bc 	bl	8008554 <tcp_close>
 80091dc:	4603      	mov	r3, r0
 80091de:	e000      	b.n	80091e2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	0801258c 	.word	0x0801258c
 80091f0:	08012afc 	.word	0x08012afc
 80091f4:	080125d0 	.word	0x080125d0

080091f8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b086      	sub	sp, #24
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	4603      	mov	r3, r0
 8009200:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009206:	2b00      	cmp	r3, #0
 8009208:	db01      	blt.n	800920e <tcp_kill_prio+0x16>
 800920a:	79fb      	ldrb	r3, [r7, #7]
 800920c:	e000      	b.n	8009210 <tcp_kill_prio+0x18>
 800920e:	237f      	movs	r3, #127	@ 0x7f
 8009210:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009212:	7afb      	ldrb	r3, [r7, #11]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d034      	beq.n	8009282 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009218:	7afb      	ldrb	r3, [r7, #11]
 800921a:	3b01      	subs	r3, #1
 800921c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800921e:	2300      	movs	r3, #0
 8009220:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009222:	2300      	movs	r3, #0
 8009224:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009226:	4b19      	ldr	r3, [pc, #100]	@ (800928c <tcp_kill_prio+0x94>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	617b      	str	r3, [r7, #20]
 800922c:	e01f      	b.n	800926e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	7d5b      	ldrb	r3, [r3, #21]
 8009232:	7afa      	ldrb	r2, [r7, #11]
 8009234:	429a      	cmp	r2, r3
 8009236:	d80c      	bhi.n	8009252 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800923c:	7afa      	ldrb	r2, [r7, #11]
 800923e:	429a      	cmp	r2, r3
 8009240:	d112      	bne.n	8009268 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009242:	4b13      	ldr	r3, [pc, #76]	@ (8009290 <tcp_kill_prio+0x98>)
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	6a1b      	ldr	r3, [r3, #32]
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	429a      	cmp	r2, r3
 8009250:	d80a      	bhi.n	8009268 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009252:	4b0f      	ldr	r3, [pc, #60]	@ (8009290 <tcp_kill_prio+0x98>)
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	6a1b      	ldr	r3, [r3, #32]
 800925a:	1ad3      	subs	r3, r2, r3
 800925c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	7d5b      	ldrb	r3, [r3, #21]
 8009266:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	617b      	str	r3, [r7, #20]
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1dc      	bne.n	800922e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d004      	beq.n	8009284 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800927a:	6938      	ldr	r0, [r7, #16]
 800927c:	f7ff fa54 	bl	8008728 <tcp_abort>
 8009280:	e000      	b.n	8009284 <tcp_kill_prio+0x8c>
    return;
 8009282:	bf00      	nop
  }
}
 8009284:	3718      	adds	r7, #24
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	20008828 	.word	0x20008828
 8009290:	2000881c 	.word	0x2000881c

08009294 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b086      	sub	sp, #24
 8009298:	af00      	add	r7, sp, #0
 800929a:	4603      	mov	r3, r0
 800929c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800929e:	79fb      	ldrb	r3, [r7, #7]
 80092a0:	2b08      	cmp	r3, #8
 80092a2:	d009      	beq.n	80092b8 <tcp_kill_state+0x24>
 80092a4:	79fb      	ldrb	r3, [r7, #7]
 80092a6:	2b09      	cmp	r3, #9
 80092a8:	d006      	beq.n	80092b8 <tcp_kill_state+0x24>
 80092aa:	4b1a      	ldr	r3, [pc, #104]	@ (8009314 <tcp_kill_state+0x80>)
 80092ac:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80092b0:	4919      	ldr	r1, [pc, #100]	@ (8009318 <tcp_kill_state+0x84>)
 80092b2:	481a      	ldr	r0, [pc, #104]	@ (800931c <tcp_kill_state+0x88>)
 80092b4:	f007 fa8e 	bl	80107d4 <iprintf>

  inactivity = 0;
 80092b8:	2300      	movs	r3, #0
 80092ba:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80092bc:	2300      	movs	r3, #0
 80092be:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80092c0:	4b17      	ldr	r3, [pc, #92]	@ (8009320 <tcp_kill_state+0x8c>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	617b      	str	r3, [r7, #20]
 80092c6:	e017      	b.n	80092f8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	7d1b      	ldrb	r3, [r3, #20]
 80092cc:	79fa      	ldrb	r2, [r7, #7]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d10f      	bne.n	80092f2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80092d2:	4b14      	ldr	r3, [pc, #80]	@ (8009324 <tcp_kill_state+0x90>)
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d807      	bhi.n	80092f2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80092e2:	4b10      	ldr	r3, [pc, #64]	@ (8009324 <tcp_kill_state+0x90>)
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	6a1b      	ldr	r3, [r3, #32]
 80092ea:	1ad3      	subs	r3, r2, r3
 80092ec:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	617b      	str	r3, [r7, #20]
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1e4      	bne.n	80092c8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d003      	beq.n	800930c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009304:	2100      	movs	r1, #0
 8009306:	6938      	ldr	r0, [r7, #16]
 8009308:	f7ff f950 	bl	80085ac <tcp_abandon>
  }
}
 800930c:	bf00      	nop
 800930e:	3718      	adds	r7, #24
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	0801258c 	.word	0x0801258c
 8009318:	08012b18 	.word	0x08012b18
 800931c:	080125d0 	.word	0x080125d0
 8009320:	20008828 	.word	0x20008828
 8009324:	2000881c 	.word	0x2000881c

08009328 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800932e:	2300      	movs	r3, #0
 8009330:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009332:	2300      	movs	r3, #0
 8009334:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009336:	4b12      	ldr	r3, [pc, #72]	@ (8009380 <tcp_kill_timewait+0x58>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	60fb      	str	r3, [r7, #12]
 800933c:	e012      	b.n	8009364 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800933e:	4b11      	ldr	r3, [pc, #68]	@ (8009384 <tcp_kill_timewait+0x5c>)
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	1ad3      	subs	r3, r2, r3
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	429a      	cmp	r2, r3
 800934c:	d807      	bhi.n	800935e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800934e:	4b0d      	ldr	r3, [pc, #52]	@ (8009384 <tcp_kill_timewait+0x5c>)
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6a1b      	ldr	r3, [r3, #32]
 8009356:	1ad3      	subs	r3, r2, r3
 8009358:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	60fb      	str	r3, [r7, #12]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1e9      	bne.n	800933e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d002      	beq.n	8009376 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009370:	68b8      	ldr	r0, [r7, #8]
 8009372:	f7ff f9d9 	bl	8008728 <tcp_abort>
  }
}
 8009376:	bf00      	nop
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	2000882c 	.word	0x2000882c
 8009384:	2000881c 	.word	0x2000881c

08009388 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800938e:	4b10      	ldr	r3, [pc, #64]	@ (80093d0 <tcp_handle_closepend+0x48>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009394:	e014      	b.n	80093c0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	8b5b      	ldrh	r3, [r3, #26]
 80093a0:	f003 0308 	and.w	r3, r3, #8
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d009      	beq.n	80093bc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	8b5b      	ldrh	r3, [r3, #26]
 80093ac:	f023 0308 	bic.w	r3, r3, #8
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f7ff f862 	bl	8008480 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d1e7      	bne.n	8009396 <tcp_handle_closepend+0xe>
  }
}
 80093c6:	bf00      	nop
 80093c8:	bf00      	nop
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	20008828 	.word	0x20008828

080093d4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	4603      	mov	r3, r0
 80093dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80093de:	2001      	movs	r0, #1
 80093e0:	f7fd fc92 	bl	8006d08 <memp_malloc>
 80093e4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d126      	bne.n	800943a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80093ec:	f7ff ffcc 	bl	8009388 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80093f0:	f7ff ff9a 	bl	8009328 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80093f4:	2001      	movs	r0, #1
 80093f6:	f7fd fc87 	bl	8006d08 <memp_malloc>
 80093fa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d11b      	bne.n	800943a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009402:	2009      	movs	r0, #9
 8009404:	f7ff ff46 	bl	8009294 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009408:	2001      	movs	r0, #1
 800940a:	f7fd fc7d 	bl	8006d08 <memp_malloc>
 800940e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d111      	bne.n	800943a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009416:	2008      	movs	r0, #8
 8009418:	f7ff ff3c 	bl	8009294 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800941c:	2001      	movs	r0, #1
 800941e:	f7fd fc73 	bl	8006d08 <memp_malloc>
 8009422:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d107      	bne.n	800943a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800942a:	79fb      	ldrb	r3, [r7, #7]
 800942c:	4618      	mov	r0, r3
 800942e:	f7ff fee3 	bl	80091f8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009432:	2001      	movs	r0, #1
 8009434:	f7fd fc68 	bl	8006d08 <memp_malloc>
 8009438:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d03f      	beq.n	80094c0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009440:	229c      	movs	r2, #156	@ 0x9c
 8009442:	2100      	movs	r1, #0
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f007 fa64 	bl	8010912 <memset>
    pcb->prio = prio;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	79fa      	ldrb	r2, [r7, #7]
 800944e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009456:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8009460:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	22ff      	movs	r2, #255	@ 0xff
 800946e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8009476:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2206      	movs	r2, #6
 800947c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2206      	movs	r2, #6
 8009484:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800948c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2201      	movs	r2, #1
 8009492:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8009496:	4b0d      	ldr	r3, [pc, #52]	@ (80094cc <tcp_alloc+0xf8>)
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800949e:	4b0c      	ldr	r3, [pc, #48]	@ (80094d0 <tcp_alloc+0xfc>)
 80094a0:	781a      	ldrb	r2, [r3, #0]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80094ac:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	4a08      	ldr	r2, [pc, #32]	@ (80094d4 <tcp_alloc+0x100>)
 80094b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	4a07      	ldr	r2, [pc, #28]	@ (80094d8 <tcp_alloc+0x104>)
 80094bc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80094c0:	68fb      	ldr	r3, [r7, #12]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	2000881c 	.word	0x2000881c
 80094d0:	20008832 	.word	0x20008832
 80094d4:	0800918d 	.word	0x0800918d
 80094d8:	006ddd00 	.word	0x006ddd00

080094dc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d107      	bne.n	80094fa <tcp_pcb_purge+0x1e>
 80094ea:	4b21      	ldr	r3, [pc, #132]	@ (8009570 <tcp_pcb_purge+0x94>)
 80094ec:	f640 0251 	movw	r2, #2129	@ 0x851
 80094f0:	4920      	ldr	r1, [pc, #128]	@ (8009574 <tcp_pcb_purge+0x98>)
 80094f2:	4821      	ldr	r0, [pc, #132]	@ (8009578 <tcp_pcb_purge+0x9c>)
 80094f4:	f007 f96e 	bl	80107d4 <iprintf>
 80094f8:	e037      	b.n	800956a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	7d1b      	ldrb	r3, [r3, #20]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d033      	beq.n	800956a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009506:	2b0a      	cmp	r3, #10
 8009508:	d02f      	beq.n	800956a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800950e:	2b01      	cmp	r3, #1
 8009510:	d02b      	beq.n	800956a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009516:	2b00      	cmp	r3, #0
 8009518:	d007      	beq.n	800952a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800951e:	4618      	mov	r0, r3
 8009520:	f7fe fad8 	bl	8007ad4 <pbuf_free>
      pcb->refused_data = NULL;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800952e:	2b00      	cmp	r3, #0
 8009530:	d002      	beq.n	8009538 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f986 	bl	8009844 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800953e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009544:	4618      	mov	r0, r3
 8009546:	f7ff fdc7 	bl	80090d8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800954e:	4618      	mov	r0, r3
 8009550:	f7ff fdc2 	bl	80090d8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	66da      	str	r2, [r3, #108]	@ 0x6c
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800956a:	3708      	adds	r7, #8
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	0801258c 	.word	0x0801258c
 8009574:	08012bd8 	.word	0x08012bd8
 8009578:	080125d0 	.word	0x080125d0

0800957c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d106      	bne.n	800959a <tcp_pcb_remove+0x1e>
 800958c:	4b3e      	ldr	r3, [pc, #248]	@ (8009688 <tcp_pcb_remove+0x10c>)
 800958e:	f640 0283 	movw	r2, #2179	@ 0x883
 8009592:	493e      	ldr	r1, [pc, #248]	@ (800968c <tcp_pcb_remove+0x110>)
 8009594:	483e      	ldr	r0, [pc, #248]	@ (8009690 <tcp_pcb_remove+0x114>)
 8009596:	f007 f91d 	bl	80107d4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d106      	bne.n	80095ae <tcp_pcb_remove+0x32>
 80095a0:	4b39      	ldr	r3, [pc, #228]	@ (8009688 <tcp_pcb_remove+0x10c>)
 80095a2:	f640 0284 	movw	r2, #2180	@ 0x884
 80095a6:	493b      	ldr	r1, [pc, #236]	@ (8009694 <tcp_pcb_remove+0x118>)
 80095a8:	4839      	ldr	r0, [pc, #228]	@ (8009690 <tcp_pcb_remove+0x114>)
 80095aa:	f007 f913 	bl	80107d4 <iprintf>

  TCP_RMV(pcblist, pcb);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	683a      	ldr	r2, [r7, #0]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d105      	bne.n	80095c4 <tcp_pcb_remove+0x48>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68da      	ldr	r2, [r3, #12]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	601a      	str	r2, [r3, #0]
 80095c2:	e013      	b.n	80095ec <tcp_pcb_remove+0x70>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	60fb      	str	r3, [r7, #12]
 80095ca:	e00c      	b.n	80095e6 <tcp_pcb_remove+0x6a>
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	683a      	ldr	r2, [r7, #0]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d104      	bne.n	80095e0 <tcp_pcb_remove+0x64>
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	68da      	ldr	r2, [r3, #12]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	60da      	str	r2, [r3, #12]
 80095de:	e005      	b.n	80095ec <tcp_pcb_remove+0x70>
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	60fb      	str	r3, [r7, #12]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1ef      	bne.n	80095cc <tcp_pcb_remove+0x50>
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	2200      	movs	r2, #0
 80095f0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80095f2:	6838      	ldr	r0, [r7, #0]
 80095f4:	f7ff ff72 	bl	80094dc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	7d1b      	ldrb	r3, [r3, #20]
 80095fc:	2b0a      	cmp	r3, #10
 80095fe:	d013      	beq.n	8009628 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009604:	2b01      	cmp	r3, #1
 8009606:	d00f      	beq.n	8009628 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	8b5b      	ldrh	r3, [r3, #26]
 800960c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009610:	2b00      	cmp	r3, #0
 8009612:	d009      	beq.n	8009628 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	8b5b      	ldrh	r3, [r3, #26]
 8009618:	f043 0302 	orr.w	r3, r3, #2
 800961c:	b29a      	uxth	r2, r3
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009622:	6838      	ldr	r0, [r7, #0]
 8009624:	f002 ff68 	bl	800c4f8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	7d1b      	ldrb	r3, [r3, #20]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d020      	beq.n	8009672 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009634:	2b00      	cmp	r3, #0
 8009636:	d006      	beq.n	8009646 <tcp_pcb_remove+0xca>
 8009638:	4b13      	ldr	r3, [pc, #76]	@ (8009688 <tcp_pcb_remove+0x10c>)
 800963a:	f640 0293 	movw	r2, #2195	@ 0x893
 800963e:	4916      	ldr	r1, [pc, #88]	@ (8009698 <tcp_pcb_remove+0x11c>)
 8009640:	4813      	ldr	r0, [pc, #76]	@ (8009690 <tcp_pcb_remove+0x114>)
 8009642:	f007 f8c7 	bl	80107d4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800964a:	2b00      	cmp	r3, #0
 800964c:	d006      	beq.n	800965c <tcp_pcb_remove+0xe0>
 800964e:	4b0e      	ldr	r3, [pc, #56]	@ (8009688 <tcp_pcb_remove+0x10c>)
 8009650:	f640 0294 	movw	r2, #2196	@ 0x894
 8009654:	4911      	ldr	r1, [pc, #68]	@ (800969c <tcp_pcb_remove+0x120>)
 8009656:	480e      	ldr	r0, [pc, #56]	@ (8009690 <tcp_pcb_remove+0x114>)
 8009658:	f007 f8bc 	bl	80107d4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009660:	2b00      	cmp	r3, #0
 8009662:	d006      	beq.n	8009672 <tcp_pcb_remove+0xf6>
 8009664:	4b08      	ldr	r3, [pc, #32]	@ (8009688 <tcp_pcb_remove+0x10c>)
 8009666:	f640 0296 	movw	r2, #2198	@ 0x896
 800966a:	490d      	ldr	r1, [pc, #52]	@ (80096a0 <tcp_pcb_remove+0x124>)
 800966c:	4808      	ldr	r0, [pc, #32]	@ (8009690 <tcp_pcb_remove+0x114>)
 800966e:	f007 f8b1 	bl	80107d4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	2200      	movs	r2, #0
 8009676:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	2200      	movs	r2, #0
 800967c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800967e:	bf00      	nop
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	0801258c 	.word	0x0801258c
 800968c:	08012bf4 	.word	0x08012bf4
 8009690:	080125d0 	.word	0x080125d0
 8009694:	08012c10 	.word	0x08012c10
 8009698:	08012c30 	.word	0x08012c30
 800969c:	08012c48 	.word	0x08012c48
 80096a0:	08012c64 	.word	0x08012c64

080096a4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d106      	bne.n	80096c0 <tcp_next_iss+0x1c>
 80096b2:	4b0a      	ldr	r3, [pc, #40]	@ (80096dc <tcp_next_iss+0x38>)
 80096b4:	f640 02af 	movw	r2, #2223	@ 0x8af
 80096b8:	4909      	ldr	r1, [pc, #36]	@ (80096e0 <tcp_next_iss+0x3c>)
 80096ba:	480a      	ldr	r0, [pc, #40]	@ (80096e4 <tcp_next_iss+0x40>)
 80096bc:	f007 f88a 	bl	80107d4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80096c0:	4b09      	ldr	r3, [pc, #36]	@ (80096e8 <tcp_next_iss+0x44>)
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	4b09      	ldr	r3, [pc, #36]	@ (80096ec <tcp_next_iss+0x48>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4413      	add	r3, r2
 80096ca:	4a07      	ldr	r2, [pc, #28]	@ (80096e8 <tcp_next_iss+0x44>)
 80096cc:	6013      	str	r3, [r2, #0]
  return iss;
 80096ce:	4b06      	ldr	r3, [pc, #24]	@ (80096e8 <tcp_next_iss+0x44>)
 80096d0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	0801258c 	.word	0x0801258c
 80096e0:	08012c7c 	.word	0x08012c7c
 80096e4:	080125d0 	.word	0x080125d0
 80096e8:	20000024 	.word	0x20000024
 80096ec:	2000881c 	.word	0x2000881c

080096f0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b086      	sub	sp, #24
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	4603      	mov	r3, r0
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
 80096fc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d106      	bne.n	8009712 <tcp_eff_send_mss_netif+0x22>
 8009704:	4b14      	ldr	r3, [pc, #80]	@ (8009758 <tcp_eff_send_mss_netif+0x68>)
 8009706:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800970a:	4914      	ldr	r1, [pc, #80]	@ (800975c <tcp_eff_send_mss_netif+0x6c>)
 800970c:	4814      	ldr	r0, [pc, #80]	@ (8009760 <tcp_eff_send_mss_netif+0x70>)
 800970e:	f007 f861 	bl	80107d4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d101      	bne.n	800971c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009718:	89fb      	ldrh	r3, [r7, #14]
 800971a:	e019      	b.n	8009750 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009720:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009722:	8afb      	ldrh	r3, [r7, #22]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d012      	beq.n	800974e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009728:	2328      	movs	r3, #40	@ 0x28
 800972a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800972c:	8afa      	ldrh	r2, [r7, #22]
 800972e:	8abb      	ldrh	r3, [r7, #20]
 8009730:	429a      	cmp	r2, r3
 8009732:	d904      	bls.n	800973e <tcp_eff_send_mss_netif+0x4e>
 8009734:	8afa      	ldrh	r2, [r7, #22]
 8009736:	8abb      	ldrh	r3, [r7, #20]
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	b29b      	uxth	r3, r3
 800973c:	e000      	b.n	8009740 <tcp_eff_send_mss_netif+0x50>
 800973e:	2300      	movs	r3, #0
 8009740:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009742:	8a7a      	ldrh	r2, [r7, #18]
 8009744:	89fb      	ldrh	r3, [r7, #14]
 8009746:	4293      	cmp	r3, r2
 8009748:	bf28      	it	cs
 800974a:	4613      	movcs	r3, r2
 800974c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800974e:	89fb      	ldrh	r3, [r7, #14]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3718      	adds	r7, #24
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	0801258c 	.word	0x0801258c
 800975c:	08012c98 	.word	0x08012c98
 8009760:	080125d0 	.word	0x080125d0

08009764 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d119      	bne.n	80097ac <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009778:	4b10      	ldr	r3, [pc, #64]	@ (80097bc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800977a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800977e:	4910      	ldr	r1, [pc, #64]	@ (80097c0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8009780:	4810      	ldr	r0, [pc, #64]	@ (80097c4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8009782:	f007 f827 	bl	80107d4 <iprintf>

  while (pcb != NULL) {
 8009786:	e011      	b.n	80097ac <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	429a      	cmp	r2, r3
 8009792:	d108      	bne.n	80097a6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f7fe ffc4 	bl	8008728 <tcp_abort>
      pcb = next;
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	60fb      	str	r3, [r7, #12]
 80097a4:	e002      	b.n	80097ac <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d1ea      	bne.n	8009788 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80097b2:	bf00      	nop
 80097b4:	bf00      	nop
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	0801258c 	.word	0x0801258c
 80097c0:	08012cc0 	.word	0x08012cc0
 80097c4:	080125d0 	.word	0x080125d0

080097c8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d02a      	beq.n	800982e <tcp_netif_ip_addr_changed+0x66>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d026      	beq.n	800982e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80097e0:	4b15      	ldr	r3, [pc, #84]	@ (8009838 <tcp_netif_ip_addr_changed+0x70>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4619      	mov	r1, r3
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f7ff ffbc 	bl	8009764 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80097ec:	4b13      	ldr	r3, [pc, #76]	@ (800983c <tcp_netif_ip_addr_changed+0x74>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4619      	mov	r1, r3
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7ff ffb6 	bl	8009764 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d017      	beq.n	800982e <tcp_netif_ip_addr_changed+0x66>
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d013      	beq.n	800982e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009806:	4b0e      	ldr	r3, [pc, #56]	@ (8009840 <tcp_netif_ip_addr_changed+0x78>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	60fb      	str	r3, [r7, #12]
 800980c:	e00c      	b.n	8009828 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	429a      	cmp	r2, r3
 8009818:	d103      	bne.n	8009822 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	60fb      	str	r3, [r7, #12]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1ef      	bne.n	800980e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800982e:	bf00      	nop
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	20008828 	.word	0x20008828
 800983c:	20008820 	.word	0x20008820
 8009840:	20008824 	.word	0x20008824

08009844 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009850:	2b00      	cmp	r3, #0
 8009852:	d007      	beq.n	8009864 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009858:	4618      	mov	r0, r3
 800985a:	f7ff fc3d 	bl	80090d8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2200      	movs	r2, #0
 8009862:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009864:	bf00      	nop
 8009866:	3708      	adds	r7, #8
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800986c:	b590      	push	{r4, r7, lr}
 800986e:	b08d      	sub	sp, #52	@ 0x34
 8009870:	af04      	add	r7, sp, #16
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d105      	bne.n	8009888 <tcp_input+0x1c>
 800987c:	4b9b      	ldr	r3, [pc, #620]	@ (8009aec <tcp_input+0x280>)
 800987e:	2283      	movs	r2, #131	@ 0x83
 8009880:	499b      	ldr	r1, [pc, #620]	@ (8009af0 <tcp_input+0x284>)
 8009882:	489c      	ldr	r0, [pc, #624]	@ (8009af4 <tcp_input+0x288>)
 8009884:	f006 ffa6 	bl	80107d4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	4a9a      	ldr	r2, [pc, #616]	@ (8009af8 <tcp_input+0x28c>)
 800988e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	895b      	ldrh	r3, [r3, #10]
 8009894:	2b13      	cmp	r3, #19
 8009896:	f240 83d1 	bls.w	800a03c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800989a:	4b98      	ldr	r3, [pc, #608]	@ (8009afc <tcp_input+0x290>)
 800989c:	695b      	ldr	r3, [r3, #20]
 800989e:	4a97      	ldr	r2, [pc, #604]	@ (8009afc <tcp_input+0x290>)
 80098a0:	6812      	ldr	r2, [r2, #0]
 80098a2:	4611      	mov	r1, r2
 80098a4:	4618      	mov	r0, r3
 80098a6:	f005 febf 	bl	800f628 <ip4_addr_isbroadcast_u32>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f040 83c7 	bne.w	800a040 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80098b2:	4b92      	ldr	r3, [pc, #584]	@ (8009afc <tcp_input+0x290>)
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80098ba:	2be0      	cmp	r3, #224	@ 0xe0
 80098bc:	f000 83c0 	beq.w	800a040 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80098c0:	4b8d      	ldr	r3, [pc, #564]	@ (8009af8 <tcp_input+0x28c>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	899b      	ldrh	r3, [r3, #12]
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7fc fda5 	bl	8006418 <lwip_htons>
 80098ce:	4603      	mov	r3, r0
 80098d0:	0b1b      	lsrs	r3, r3, #12
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80098da:	7cbb      	ldrb	r3, [r7, #18]
 80098dc:	2b13      	cmp	r3, #19
 80098de:	f240 83b1 	bls.w	800a044 <tcp_input+0x7d8>
 80098e2:	7cbb      	ldrb	r3, [r7, #18]
 80098e4:	b29a      	uxth	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	891b      	ldrh	r3, [r3, #8]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	f200 83aa 	bhi.w	800a044 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80098f0:	7cbb      	ldrb	r3, [r7, #18]
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	3b14      	subs	r3, #20
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	4b81      	ldr	r3, [pc, #516]	@ (8009b00 <tcp_input+0x294>)
 80098fa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80098fc:	4b81      	ldr	r3, [pc, #516]	@ (8009b04 <tcp_input+0x298>)
 80098fe:	2200      	movs	r2, #0
 8009900:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	895a      	ldrh	r2, [r3, #10]
 8009906:	7cbb      	ldrb	r3, [r7, #18]
 8009908:	b29b      	uxth	r3, r3
 800990a:	429a      	cmp	r2, r3
 800990c:	d309      	bcc.n	8009922 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800990e:	4b7c      	ldr	r3, [pc, #496]	@ (8009b00 <tcp_input+0x294>)
 8009910:	881a      	ldrh	r2, [r3, #0]
 8009912:	4b7d      	ldr	r3, [pc, #500]	@ (8009b08 <tcp_input+0x29c>)
 8009914:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009916:	7cbb      	ldrb	r3, [r7, #18]
 8009918:	4619      	mov	r1, r3
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f7fe f854 	bl	80079c8 <pbuf_remove_header>
 8009920:	e04e      	b.n	80099c0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d105      	bne.n	8009936 <tcp_input+0xca>
 800992a:	4b70      	ldr	r3, [pc, #448]	@ (8009aec <tcp_input+0x280>)
 800992c:	22c2      	movs	r2, #194	@ 0xc2
 800992e:	4977      	ldr	r1, [pc, #476]	@ (8009b0c <tcp_input+0x2a0>)
 8009930:	4870      	ldr	r0, [pc, #448]	@ (8009af4 <tcp_input+0x288>)
 8009932:	f006 ff4f 	bl	80107d4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8009936:	2114      	movs	r1, #20
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7fe f845 	bl	80079c8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	895a      	ldrh	r2, [r3, #10]
 8009942:	4b71      	ldr	r3, [pc, #452]	@ (8009b08 <tcp_input+0x29c>)
 8009944:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009946:	4b6e      	ldr	r3, [pc, #440]	@ (8009b00 <tcp_input+0x294>)
 8009948:	881a      	ldrh	r2, [r3, #0]
 800994a:	4b6f      	ldr	r3, [pc, #444]	@ (8009b08 <tcp_input+0x29c>)
 800994c:	881b      	ldrh	r3, [r3, #0]
 800994e:	1ad3      	subs	r3, r2, r3
 8009950:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8009952:	4b6d      	ldr	r3, [pc, #436]	@ (8009b08 <tcp_input+0x29c>)
 8009954:	881b      	ldrh	r3, [r3, #0]
 8009956:	4619      	mov	r1, r3
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f7fe f835 	bl	80079c8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	895b      	ldrh	r3, [r3, #10]
 8009964:	8a3a      	ldrh	r2, [r7, #16]
 8009966:	429a      	cmp	r2, r3
 8009968:	f200 836e 	bhi.w	800a048 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	4a64      	ldr	r2, [pc, #400]	@ (8009b04 <tcp_input+0x298>)
 8009974:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	8a3a      	ldrh	r2, [r7, #16]
 800997c:	4611      	mov	r1, r2
 800997e:	4618      	mov	r0, r3
 8009980:	f7fe f822 	bl	80079c8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	891a      	ldrh	r2, [r3, #8]
 8009988:	8a3b      	ldrh	r3, [r7, #16]
 800998a:	1ad3      	subs	r3, r2, r3
 800998c:	b29a      	uxth	r2, r3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	895b      	ldrh	r3, [r3, #10]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d005      	beq.n	80099a6 <tcp_input+0x13a>
 800999a:	4b54      	ldr	r3, [pc, #336]	@ (8009aec <tcp_input+0x280>)
 800999c:	22df      	movs	r2, #223	@ 0xdf
 800999e:	495c      	ldr	r1, [pc, #368]	@ (8009b10 <tcp_input+0x2a4>)
 80099a0:	4854      	ldr	r0, [pc, #336]	@ (8009af4 <tcp_input+0x288>)
 80099a2:	f006 ff17 	bl	80107d4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	891a      	ldrh	r2, [r3, #8]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	891b      	ldrh	r3, [r3, #8]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d005      	beq.n	80099c0 <tcp_input+0x154>
 80099b4:	4b4d      	ldr	r3, [pc, #308]	@ (8009aec <tcp_input+0x280>)
 80099b6:	22e0      	movs	r2, #224	@ 0xe0
 80099b8:	4956      	ldr	r1, [pc, #344]	@ (8009b14 <tcp_input+0x2a8>)
 80099ba:	484e      	ldr	r0, [pc, #312]	@ (8009af4 <tcp_input+0x288>)
 80099bc:	f006 ff0a 	bl	80107d4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80099c0:	4b4d      	ldr	r3, [pc, #308]	@ (8009af8 <tcp_input+0x28c>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	881b      	ldrh	r3, [r3, #0]
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	4a4b      	ldr	r2, [pc, #300]	@ (8009af8 <tcp_input+0x28c>)
 80099ca:	6814      	ldr	r4, [r2, #0]
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7fc fd23 	bl	8006418 <lwip_htons>
 80099d2:	4603      	mov	r3, r0
 80099d4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80099d6:	4b48      	ldr	r3, [pc, #288]	@ (8009af8 <tcp_input+0x28c>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	885b      	ldrh	r3, [r3, #2]
 80099dc:	b29b      	uxth	r3, r3
 80099de:	4a46      	ldr	r2, [pc, #280]	@ (8009af8 <tcp_input+0x28c>)
 80099e0:	6814      	ldr	r4, [r2, #0]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7fc fd18 	bl	8006418 <lwip_htons>
 80099e8:	4603      	mov	r3, r0
 80099ea:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80099ec:	4b42      	ldr	r3, [pc, #264]	@ (8009af8 <tcp_input+0x28c>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	4a41      	ldr	r2, [pc, #260]	@ (8009af8 <tcp_input+0x28c>)
 80099f4:	6814      	ldr	r4, [r2, #0]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7fc fd23 	bl	8006442 <lwip_htonl>
 80099fc:	4603      	mov	r3, r0
 80099fe:	6063      	str	r3, [r4, #4]
 8009a00:	6863      	ldr	r3, [r4, #4]
 8009a02:	4a45      	ldr	r2, [pc, #276]	@ (8009b18 <tcp_input+0x2ac>)
 8009a04:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009a06:	4b3c      	ldr	r3, [pc, #240]	@ (8009af8 <tcp_input+0x28c>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	4a3a      	ldr	r2, [pc, #232]	@ (8009af8 <tcp_input+0x28c>)
 8009a0e:	6814      	ldr	r4, [r2, #0]
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7fc fd16 	bl	8006442 <lwip_htonl>
 8009a16:	4603      	mov	r3, r0
 8009a18:	60a3      	str	r3, [r4, #8]
 8009a1a:	68a3      	ldr	r3, [r4, #8]
 8009a1c:	4a3f      	ldr	r2, [pc, #252]	@ (8009b1c <tcp_input+0x2b0>)
 8009a1e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009a20:	4b35      	ldr	r3, [pc, #212]	@ (8009af8 <tcp_input+0x28c>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	89db      	ldrh	r3, [r3, #14]
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	4a33      	ldr	r2, [pc, #204]	@ (8009af8 <tcp_input+0x28c>)
 8009a2a:	6814      	ldr	r4, [r2, #0]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7fc fcf3 	bl	8006418 <lwip_htons>
 8009a32:	4603      	mov	r3, r0
 8009a34:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009a36:	4b30      	ldr	r3, [pc, #192]	@ (8009af8 <tcp_input+0x28c>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	899b      	ldrh	r3, [r3, #12]
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fc fcea 	bl	8006418 <lwip_htons>
 8009a44:	4603      	mov	r3, r0
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a4c:	b2da      	uxtb	r2, r3
 8009a4e:	4b34      	ldr	r3, [pc, #208]	@ (8009b20 <tcp_input+0x2b4>)
 8009a50:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	891a      	ldrh	r2, [r3, #8]
 8009a56:	4b33      	ldr	r3, [pc, #204]	@ (8009b24 <tcp_input+0x2b8>)
 8009a58:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009a5a:	4b31      	ldr	r3, [pc, #196]	@ (8009b20 <tcp_input+0x2b4>)
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	f003 0303 	and.w	r3, r3, #3
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00c      	beq.n	8009a80 <tcp_input+0x214>
    tcplen++;
 8009a66:	4b2f      	ldr	r3, [pc, #188]	@ (8009b24 <tcp_input+0x2b8>)
 8009a68:	881b      	ldrh	r3, [r3, #0]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8009b24 <tcp_input+0x2b8>)
 8009a70:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	891a      	ldrh	r2, [r3, #8]
 8009a76:	4b2b      	ldr	r3, [pc, #172]	@ (8009b24 <tcp_input+0x2b8>)
 8009a78:	881b      	ldrh	r3, [r3, #0]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	f200 82e6 	bhi.w	800a04c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009a80:	2300      	movs	r3, #0
 8009a82:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a84:	4b28      	ldr	r3, [pc, #160]	@ (8009b28 <tcp_input+0x2bc>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	61fb      	str	r3, [r7, #28]
 8009a8a:	e09d      	b.n	8009bc8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	7d1b      	ldrb	r3, [r3, #20]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d105      	bne.n	8009aa0 <tcp_input+0x234>
 8009a94:	4b15      	ldr	r3, [pc, #84]	@ (8009aec <tcp_input+0x280>)
 8009a96:	22fb      	movs	r2, #251	@ 0xfb
 8009a98:	4924      	ldr	r1, [pc, #144]	@ (8009b2c <tcp_input+0x2c0>)
 8009a9a:	4816      	ldr	r0, [pc, #88]	@ (8009af4 <tcp_input+0x288>)
 8009a9c:	f006 fe9a 	bl	80107d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	7d1b      	ldrb	r3, [r3, #20]
 8009aa4:	2b0a      	cmp	r3, #10
 8009aa6:	d105      	bne.n	8009ab4 <tcp_input+0x248>
 8009aa8:	4b10      	ldr	r3, [pc, #64]	@ (8009aec <tcp_input+0x280>)
 8009aaa:	22fc      	movs	r2, #252	@ 0xfc
 8009aac:	4920      	ldr	r1, [pc, #128]	@ (8009b30 <tcp_input+0x2c4>)
 8009aae:	4811      	ldr	r0, [pc, #68]	@ (8009af4 <tcp_input+0x288>)
 8009ab0:	f006 fe90 	bl	80107d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	7d1b      	ldrb	r3, [r3, #20]
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d105      	bne.n	8009ac8 <tcp_input+0x25c>
 8009abc:	4b0b      	ldr	r3, [pc, #44]	@ (8009aec <tcp_input+0x280>)
 8009abe:	22fd      	movs	r2, #253	@ 0xfd
 8009ac0:	491c      	ldr	r1, [pc, #112]	@ (8009b34 <tcp_input+0x2c8>)
 8009ac2:	480c      	ldr	r0, [pc, #48]	@ (8009af4 <tcp_input+0x288>)
 8009ac4:	f006 fe86 	bl	80107d4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	7a1b      	ldrb	r3, [r3, #8]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d033      	beq.n	8009b38 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	7a1a      	ldrb	r2, [r3, #8]
 8009ad4:	4b09      	ldr	r3, [pc, #36]	@ (8009afc <tcp_input+0x290>)
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009adc:	3301      	adds	r3, #1
 8009ade:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d029      	beq.n	8009b38 <tcp_input+0x2cc>
      prev = pcb;
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	61bb      	str	r3, [r7, #24]
      continue;
 8009ae8:	e06b      	b.n	8009bc2 <tcp_input+0x356>
 8009aea:	bf00      	nop
 8009aec:	08012cf4 	.word	0x08012cf4
 8009af0:	08012d28 	.word	0x08012d28
 8009af4:	08012d40 	.word	0x08012d40
 8009af8:	20008844 	.word	0x20008844
 8009afc:	200052ac 	.word	0x200052ac
 8009b00:	20008848 	.word	0x20008848
 8009b04:	2000884c 	.word	0x2000884c
 8009b08:	2000884a 	.word	0x2000884a
 8009b0c:	08012d68 	.word	0x08012d68
 8009b10:	08012d78 	.word	0x08012d78
 8009b14:	08012d84 	.word	0x08012d84
 8009b18:	20008854 	.word	0x20008854
 8009b1c:	20008858 	.word	0x20008858
 8009b20:	20008860 	.word	0x20008860
 8009b24:	2000885e 	.word	0x2000885e
 8009b28:	20008828 	.word	0x20008828
 8009b2c:	08012da4 	.word	0x08012da4
 8009b30:	08012dcc 	.word	0x08012dcc
 8009b34:	08012df8 	.word	0x08012df8
    }

    if (pcb->remote_port == tcphdr->src &&
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	8b1a      	ldrh	r2, [r3, #24]
 8009b3c:	4b72      	ldr	r3, [pc, #456]	@ (8009d08 <tcp_input+0x49c>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	881b      	ldrh	r3, [r3, #0]
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d13a      	bne.n	8009bbe <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	8ada      	ldrh	r2, [r3, #22]
 8009b4c:	4b6e      	ldr	r3, [pc, #440]	@ (8009d08 <tcp_input+0x49c>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	885b      	ldrh	r3, [r3, #2]
 8009b52:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d132      	bne.n	8009bbe <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	685a      	ldr	r2, [r3, #4]
 8009b5c:	4b6b      	ldr	r3, [pc, #428]	@ (8009d0c <tcp_input+0x4a0>)
 8009b5e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d12c      	bne.n	8009bbe <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	4b68      	ldr	r3, [pc, #416]	@ (8009d0c <tcp_input+0x4a0>)
 8009b6a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d126      	bne.n	8009bbe <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	69fa      	ldr	r2, [r7, #28]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d106      	bne.n	8009b88 <tcp_input+0x31c>
 8009b7a:	4b65      	ldr	r3, [pc, #404]	@ (8009d10 <tcp_input+0x4a4>)
 8009b7c:	f240 120d 	movw	r2, #269	@ 0x10d
 8009b80:	4964      	ldr	r1, [pc, #400]	@ (8009d14 <tcp_input+0x4a8>)
 8009b82:	4865      	ldr	r0, [pc, #404]	@ (8009d18 <tcp_input+0x4ac>)
 8009b84:	f006 fe26 	bl	80107d4 <iprintf>
      if (prev != NULL) {
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00a      	beq.n	8009ba4 <tcp_input+0x338>
        prev->next = pcb->next;
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	68da      	ldr	r2, [r3, #12]
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009b96:	4b61      	ldr	r3, [pc, #388]	@ (8009d1c <tcp_input+0x4b0>)
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009b9e:	4a5f      	ldr	r2, [pc, #380]	@ (8009d1c <tcp_input+0x4b0>)
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	69fa      	ldr	r2, [r7, #28]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d111      	bne.n	8009bd2 <tcp_input+0x366>
 8009bae:	4b58      	ldr	r3, [pc, #352]	@ (8009d10 <tcp_input+0x4a4>)
 8009bb0:	f240 1215 	movw	r2, #277	@ 0x115
 8009bb4:	495a      	ldr	r1, [pc, #360]	@ (8009d20 <tcp_input+0x4b4>)
 8009bb6:	4858      	ldr	r0, [pc, #352]	@ (8009d18 <tcp_input+0x4ac>)
 8009bb8:	f006 fe0c 	bl	80107d4 <iprintf>
      break;
 8009bbc:	e009      	b.n	8009bd2 <tcp_input+0x366>
    }
    prev = pcb;
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	61fb      	str	r3, [r7, #28]
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	f47f af5e 	bne.w	8009a8c <tcp_input+0x220>
 8009bd0:	e000      	b.n	8009bd4 <tcp_input+0x368>
      break;
 8009bd2:	bf00      	nop
  }

  if (pcb == NULL) {
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	f040 80aa 	bne.w	8009d30 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009bdc:	4b51      	ldr	r3, [pc, #324]	@ (8009d24 <tcp_input+0x4b8>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	61fb      	str	r3, [r7, #28]
 8009be2:	e03f      	b.n	8009c64 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	7d1b      	ldrb	r3, [r3, #20]
 8009be8:	2b0a      	cmp	r3, #10
 8009bea:	d006      	beq.n	8009bfa <tcp_input+0x38e>
 8009bec:	4b48      	ldr	r3, [pc, #288]	@ (8009d10 <tcp_input+0x4a4>)
 8009bee:	f240 121f 	movw	r2, #287	@ 0x11f
 8009bf2:	494d      	ldr	r1, [pc, #308]	@ (8009d28 <tcp_input+0x4bc>)
 8009bf4:	4848      	ldr	r0, [pc, #288]	@ (8009d18 <tcp_input+0x4ac>)
 8009bf6:	f006 fded 	bl	80107d4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	7a1b      	ldrb	r3, [r3, #8]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d009      	beq.n	8009c16 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009c02:	69fb      	ldr	r3, [r7, #28]
 8009c04:	7a1a      	ldrb	r2, [r3, #8]
 8009c06:	4b41      	ldr	r3, [pc, #260]	@ (8009d0c <tcp_input+0x4a0>)
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009c0e:	3301      	adds	r3, #1
 8009c10:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d122      	bne.n	8009c5c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	8b1a      	ldrh	r2, [r3, #24]
 8009c1a:	4b3b      	ldr	r3, [pc, #236]	@ (8009d08 <tcp_input+0x49c>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	881b      	ldrh	r3, [r3, #0]
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d11b      	bne.n	8009c5e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	8ada      	ldrh	r2, [r3, #22]
 8009c2a:	4b37      	ldr	r3, [pc, #220]	@ (8009d08 <tcp_input+0x49c>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	885b      	ldrh	r3, [r3, #2]
 8009c30:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d113      	bne.n	8009c5e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	685a      	ldr	r2, [r3, #4]
 8009c3a:	4b34      	ldr	r3, [pc, #208]	@ (8009d0c <tcp_input+0x4a0>)
 8009c3c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d10d      	bne.n	8009c5e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	4b31      	ldr	r3, [pc, #196]	@ (8009d0c <tcp_input+0x4a0>)
 8009c48:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d107      	bne.n	8009c5e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009c4e:	69f8      	ldr	r0, [r7, #28]
 8009c50:	f000 fb56 	bl	800a300 <tcp_timewait_input>
        }
        pbuf_free(p);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f7fd ff3d 	bl	8007ad4 <pbuf_free>
        return;
 8009c5a:	e1fd      	b.n	800a058 <tcp_input+0x7ec>
        continue;
 8009c5c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	61fb      	str	r3, [r7, #28]
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d1bc      	bne.n	8009be4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8009d2c <tcp_input+0x4c0>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	617b      	str	r3, [r7, #20]
 8009c74:	e02a      	b.n	8009ccc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	7a1b      	ldrb	r3, [r3, #8]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00c      	beq.n	8009c98 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	7a1a      	ldrb	r2, [r3, #8]
 8009c82:	4b22      	ldr	r3, [pc, #136]	@ (8009d0c <tcp_input+0x4a0>)
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d002      	beq.n	8009c98 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	61bb      	str	r3, [r7, #24]
        continue;
 8009c96:	e016      	b.n	8009cc6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	8ada      	ldrh	r2, [r3, #22]
 8009c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8009d08 <tcp_input+0x49c>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	885b      	ldrh	r3, [r3, #2]
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d10c      	bne.n	8009cc2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	4b17      	ldr	r3, [pc, #92]	@ (8009d0c <tcp_input+0x4a0>)
 8009cae:	695b      	ldr	r3, [r3, #20]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d00f      	beq.n	8009cd4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00d      	beq.n	8009cd6 <tcp_input+0x46a>
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d009      	beq.n	8009cd6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	617b      	str	r3, [r7, #20]
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d1d1      	bne.n	8009c76 <tcp_input+0x40a>
 8009cd2:	e000      	b.n	8009cd6 <tcp_input+0x46a>
            break;
 8009cd4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d029      	beq.n	8009d30 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009cdc:	69bb      	ldr	r3, [r7, #24]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00a      	beq.n	8009cf8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	68da      	ldr	r2, [r3, #12]
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009cea:	4b10      	ldr	r3, [pc, #64]	@ (8009d2c <tcp_input+0x4c0>)
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009cf2:	4a0e      	ldr	r2, [pc, #56]	@ (8009d2c <tcp_input+0x4c0>)
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009cf8:	6978      	ldr	r0, [r7, #20]
 8009cfa:	f000 fa03 	bl	800a104 <tcp_listen_input>
      }
      pbuf_free(p);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f7fd fee8 	bl	8007ad4 <pbuf_free>
      return;
 8009d04:	e1a8      	b.n	800a058 <tcp_input+0x7ec>
 8009d06:	bf00      	nop
 8009d08:	20008844 	.word	0x20008844
 8009d0c:	200052ac 	.word	0x200052ac
 8009d10:	08012cf4 	.word	0x08012cf4
 8009d14:	08012e20 	.word	0x08012e20
 8009d18:	08012d40 	.word	0x08012d40
 8009d1c:	20008828 	.word	0x20008828
 8009d20:	08012e4c 	.word	0x08012e4c
 8009d24:	2000882c 	.word	0x2000882c
 8009d28:	08012e78 	.word	0x08012e78
 8009d2c:	20008824 	.word	0x20008824
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f000 8158 	beq.w	8009fe8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009d38:	4b95      	ldr	r3, [pc, #596]	@ (8009f90 <tcp_input+0x724>)
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	891a      	ldrh	r2, [r3, #8]
 8009d42:	4b93      	ldr	r3, [pc, #588]	@ (8009f90 <tcp_input+0x724>)
 8009d44:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009d46:	4a92      	ldr	r2, [pc, #584]	@ (8009f90 <tcp_input+0x724>)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009d4c:	4b91      	ldr	r3, [pc, #580]	@ (8009f94 <tcp_input+0x728>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a8f      	ldr	r2, [pc, #572]	@ (8009f90 <tcp_input+0x724>)
 8009d52:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009d54:	4b90      	ldr	r3, [pc, #576]	@ (8009f98 <tcp_input+0x72c>)
 8009d56:	2200      	movs	r2, #0
 8009d58:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009d5a:	4b90      	ldr	r3, [pc, #576]	@ (8009f9c <tcp_input+0x730>)
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009d60:	4b8f      	ldr	r3, [pc, #572]	@ (8009fa0 <tcp_input+0x734>)
 8009d62:	2200      	movs	r2, #0
 8009d64:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009d66:	4b8f      	ldr	r3, [pc, #572]	@ (8009fa4 <tcp_input+0x738>)
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	f003 0308 	and.w	r3, r3, #8
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d006      	beq.n	8009d80 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	7b5b      	ldrb	r3, [r3, #13]
 8009d76:	f043 0301 	orr.w	r3, r3, #1
 8009d7a:	b2da      	uxtb	r2, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d017      	beq.n	8009db8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009d88:	69f8      	ldr	r0, [r7, #28]
 8009d8a:	f7ff f929 	bl	8008fe0 <tcp_process_refused_data>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	f113 0f0d 	cmn.w	r3, #13
 8009d94:	d007      	beq.n	8009da6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00c      	beq.n	8009db8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009d9e:	4b82      	ldr	r3, [pc, #520]	@ (8009fa8 <tcp_input+0x73c>)
 8009da0:	881b      	ldrh	r3, [r3, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d008      	beq.n	8009db8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f040 80e3 	bne.w	8009f76 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009db0:	69f8      	ldr	r0, [r7, #28]
 8009db2:	f003 f9a7 	bl	800d104 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009db6:	e0de      	b.n	8009f76 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8009db8:	4a7c      	ldr	r2, [pc, #496]	@ (8009fac <tcp_input+0x740>)
 8009dba:	69fb      	ldr	r3, [r7, #28]
 8009dbc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009dbe:	69f8      	ldr	r0, [r7, #28]
 8009dc0:	f000 fb18 	bl	800a3f4 <tcp_process>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009dc8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009dcc:	f113 0f0d 	cmn.w	r3, #13
 8009dd0:	f000 80d3 	beq.w	8009f7a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8009dd4:	4b71      	ldr	r3, [pc, #452]	@ (8009f9c <tcp_input+0x730>)
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	f003 0308 	and.w	r3, r3, #8
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d015      	beq.n	8009e0c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009de0:	69fb      	ldr	r3, [r7, #28]
 8009de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d008      	beq.n	8009dfc <tcp_input+0x590>
 8009dea:	69fb      	ldr	r3, [r7, #28]
 8009dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009df0:	69fa      	ldr	r2, [r7, #28]
 8009df2:	6912      	ldr	r2, [r2, #16]
 8009df4:	f06f 010d 	mvn.w	r1, #13
 8009df8:	4610      	mov	r0, r2
 8009dfa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009dfc:	69f9      	ldr	r1, [r7, #28]
 8009dfe:	486c      	ldr	r0, [pc, #432]	@ (8009fb0 <tcp_input+0x744>)
 8009e00:	f7ff fbbc 	bl	800957c <tcp_pcb_remove>
        tcp_free(pcb);
 8009e04:	69f8      	ldr	r0, [r7, #28]
 8009e06:	f7fe f9a7 	bl	8008158 <tcp_free>
 8009e0a:	e0da      	b.n	8009fc2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009e10:	4b63      	ldr	r3, [pc, #396]	@ (8009fa0 <tcp_input+0x734>)
 8009e12:	881b      	ldrh	r3, [r3, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d01d      	beq.n	8009e54 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009e18:	4b61      	ldr	r3, [pc, #388]	@ (8009fa0 <tcp_input+0x734>)
 8009e1a:	881b      	ldrh	r3, [r3, #0]
 8009e1c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009e1e:	69fb      	ldr	r3, [r7, #28]
 8009e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00a      	beq.n	8009e3e <tcp_input+0x5d2>
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e2e:	69fa      	ldr	r2, [r7, #28]
 8009e30:	6910      	ldr	r0, [r2, #16]
 8009e32:	89fa      	ldrh	r2, [r7, #14]
 8009e34:	69f9      	ldr	r1, [r7, #28]
 8009e36:	4798      	blx	r3
 8009e38:	4603      	mov	r3, r0
 8009e3a:	74fb      	strb	r3, [r7, #19]
 8009e3c:	e001      	b.n	8009e42 <tcp_input+0x5d6>
 8009e3e:	2300      	movs	r3, #0
 8009e40:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009e42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009e46:	f113 0f0d 	cmn.w	r3, #13
 8009e4a:	f000 8098 	beq.w	8009f7e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009e4e:	4b54      	ldr	r3, [pc, #336]	@ (8009fa0 <tcp_input+0x734>)
 8009e50:	2200      	movs	r2, #0
 8009e52:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009e54:	69f8      	ldr	r0, [r7, #28]
 8009e56:	f000 f915 	bl	800a084 <tcp_input_delayed_close>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f040 8090 	bne.w	8009f82 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009e62:	4b4d      	ldr	r3, [pc, #308]	@ (8009f98 <tcp_input+0x72c>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d041      	beq.n	8009eee <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d006      	beq.n	8009e80 <tcp_input+0x614>
 8009e72:	4b50      	ldr	r3, [pc, #320]	@ (8009fb4 <tcp_input+0x748>)
 8009e74:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8009e78:	494f      	ldr	r1, [pc, #316]	@ (8009fb8 <tcp_input+0x74c>)
 8009e7a:	4850      	ldr	r0, [pc, #320]	@ (8009fbc <tcp_input+0x750>)
 8009e7c:	f006 fcaa 	bl	80107d4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	8b5b      	ldrh	r3, [r3, #26]
 8009e84:	f003 0310 	and.w	r3, r3, #16
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d008      	beq.n	8009e9e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009e8c:	4b42      	ldr	r3, [pc, #264]	@ (8009f98 <tcp_input+0x72c>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7fd fe1f 	bl	8007ad4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009e96:	69f8      	ldr	r0, [r7, #28]
 8009e98:	f7fe fc46 	bl	8008728 <tcp_abort>
            goto aborted;
 8009e9c:	e091      	b.n	8009fc2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00c      	beq.n	8009ec2 <tcp_input+0x656>
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	6918      	ldr	r0, [r3, #16]
 8009eb2:	4b39      	ldr	r3, [pc, #228]	@ (8009f98 <tcp_input+0x72c>)
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	69f9      	ldr	r1, [r7, #28]
 8009eba:	47a0      	blx	r4
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	74fb      	strb	r3, [r7, #19]
 8009ec0:	e008      	b.n	8009ed4 <tcp_input+0x668>
 8009ec2:	4b35      	ldr	r3, [pc, #212]	@ (8009f98 <tcp_input+0x72c>)
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	69f9      	ldr	r1, [r7, #28]
 8009eca:	2000      	movs	r0, #0
 8009ecc:	f7ff f95e 	bl	800918c <tcp_recv_null>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009ed4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ed8:	f113 0f0d 	cmn.w	r3, #13
 8009edc:	d053      	beq.n	8009f86 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009ede:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d003      	beq.n	8009eee <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009ee6:	4b2c      	ldr	r3, [pc, #176]	@ (8009f98 <tcp_input+0x72c>)
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	69fb      	ldr	r3, [r7, #28]
 8009eec:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009eee:	4b2b      	ldr	r3, [pc, #172]	@ (8009f9c <tcp_input+0x730>)
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	f003 0320 	and.w	r3, r3, #32
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d030      	beq.n	8009f5c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d009      	beq.n	8009f16 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f06:	7b5a      	ldrb	r2, [r3, #13]
 8009f08:	69fb      	ldr	r3, [r7, #28]
 8009f0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f0c:	f042 0220 	orr.w	r2, r2, #32
 8009f10:	b2d2      	uxtb	r2, r2
 8009f12:	735a      	strb	r2, [r3, #13]
 8009f14:	e022      	b.n	8009f5c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009f16:	69fb      	ldr	r3, [r7, #28]
 8009f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f1a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009f1e:	d005      	beq.n	8009f2c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f24:	3301      	adds	r3, #1
 8009f26:	b29a      	uxth	r2, r3
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009f2c:	69fb      	ldr	r3, [r7, #28]
 8009f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00b      	beq.n	8009f4e <tcp_input+0x6e2>
 8009f36:	69fb      	ldr	r3, [r7, #28]
 8009f38:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	6918      	ldr	r0, [r3, #16]
 8009f40:	2300      	movs	r3, #0
 8009f42:	2200      	movs	r2, #0
 8009f44:	69f9      	ldr	r1, [r7, #28]
 8009f46:	47a0      	blx	r4
 8009f48:	4603      	mov	r3, r0
 8009f4a:	74fb      	strb	r3, [r7, #19]
 8009f4c:	e001      	b.n	8009f52 <tcp_input+0x6e6>
 8009f4e:	2300      	movs	r3, #0
 8009f50:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009f52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009f56:	f113 0f0d 	cmn.w	r3, #13
 8009f5a:	d016      	beq.n	8009f8a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009f5c:	4b13      	ldr	r3, [pc, #76]	@ (8009fac <tcp_input+0x740>)
 8009f5e:	2200      	movs	r2, #0
 8009f60:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009f62:	69f8      	ldr	r0, [r7, #28]
 8009f64:	f000 f88e 	bl	800a084 <tcp_input_delayed_close>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d128      	bne.n	8009fc0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009f6e:	69f8      	ldr	r0, [r7, #28]
 8009f70:	f002 fac2 	bl	800c4f8 <tcp_output>
 8009f74:	e025      	b.n	8009fc2 <tcp_input+0x756>
        goto aborted;
 8009f76:	bf00      	nop
 8009f78:	e023      	b.n	8009fc2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009f7a:	bf00      	nop
 8009f7c:	e021      	b.n	8009fc2 <tcp_input+0x756>
              goto aborted;
 8009f7e:	bf00      	nop
 8009f80:	e01f      	b.n	8009fc2 <tcp_input+0x756>
          goto aborted;
 8009f82:	bf00      	nop
 8009f84:	e01d      	b.n	8009fc2 <tcp_input+0x756>
            goto aborted;
 8009f86:	bf00      	nop
 8009f88:	e01b      	b.n	8009fc2 <tcp_input+0x756>
              goto aborted;
 8009f8a:	bf00      	nop
 8009f8c:	e019      	b.n	8009fc2 <tcp_input+0x756>
 8009f8e:	bf00      	nop
 8009f90:	20008834 	.word	0x20008834
 8009f94:	20008844 	.word	0x20008844
 8009f98:	20008864 	.word	0x20008864
 8009f9c:	20008861 	.word	0x20008861
 8009fa0:	2000885c 	.word	0x2000885c
 8009fa4:	20008860 	.word	0x20008860
 8009fa8:	2000885e 	.word	0x2000885e
 8009fac:	20008868 	.word	0x20008868
 8009fb0:	20008828 	.word	0x20008828
 8009fb4:	08012cf4 	.word	0x08012cf4
 8009fb8:	08012ea8 	.word	0x08012ea8
 8009fbc:	08012d40 	.word	0x08012d40
          goto aborted;
 8009fc0:	bf00      	nop
    tcp_input_pcb = NULL;
 8009fc2:	4b27      	ldr	r3, [pc, #156]	@ (800a060 <tcp_input+0x7f4>)
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009fc8:	4b26      	ldr	r3, [pc, #152]	@ (800a064 <tcp_input+0x7f8>)
 8009fca:	2200      	movs	r2, #0
 8009fcc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009fce:	4b26      	ldr	r3, [pc, #152]	@ (800a068 <tcp_input+0x7fc>)
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d03f      	beq.n	800a056 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8009fd6:	4b24      	ldr	r3, [pc, #144]	@ (800a068 <tcp_input+0x7fc>)
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7fd fd7a 	bl	8007ad4 <pbuf_free>
      inseg.p = NULL;
 8009fe0:	4b21      	ldr	r3, [pc, #132]	@ (800a068 <tcp_input+0x7fc>)
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009fe6:	e036      	b.n	800a056 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009fe8:	4b20      	ldr	r3, [pc, #128]	@ (800a06c <tcp_input+0x800>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	899b      	ldrh	r3, [r3, #12]
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f7fc fa11 	bl	8006418 <lwip_htons>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	f003 0304 	and.w	r3, r3, #4
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d118      	bne.n	800a034 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a002:	4b1b      	ldr	r3, [pc, #108]	@ (800a070 <tcp_input+0x804>)
 800a004:	6819      	ldr	r1, [r3, #0]
 800a006:	4b1b      	ldr	r3, [pc, #108]	@ (800a074 <tcp_input+0x808>)
 800a008:	881b      	ldrh	r3, [r3, #0]
 800a00a:	461a      	mov	r2, r3
 800a00c:	4b1a      	ldr	r3, [pc, #104]	@ (800a078 <tcp_input+0x80c>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a012:	4b16      	ldr	r3, [pc, #88]	@ (800a06c <tcp_input+0x800>)
 800a014:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a016:	885b      	ldrh	r3, [r3, #2]
 800a018:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a01a:	4a14      	ldr	r2, [pc, #80]	@ (800a06c <tcp_input+0x800>)
 800a01c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a01e:	8812      	ldrh	r2, [r2, #0]
 800a020:	b292      	uxth	r2, r2
 800a022:	9202      	str	r2, [sp, #8]
 800a024:	9301      	str	r3, [sp, #4]
 800a026:	4b15      	ldr	r3, [pc, #84]	@ (800a07c <tcp_input+0x810>)
 800a028:	9300      	str	r3, [sp, #0]
 800a02a:	4b15      	ldr	r3, [pc, #84]	@ (800a080 <tcp_input+0x814>)
 800a02c:	4602      	mov	r2, r0
 800a02e:	2000      	movs	r0, #0
 800a030:	f003 f816 	bl	800d060 <tcp_rst>
    pbuf_free(p);
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f7fd fd4d 	bl	8007ad4 <pbuf_free>
  return;
 800a03a:	e00c      	b.n	800a056 <tcp_input+0x7ea>
    goto dropped;
 800a03c:	bf00      	nop
 800a03e:	e006      	b.n	800a04e <tcp_input+0x7e2>
    goto dropped;
 800a040:	bf00      	nop
 800a042:	e004      	b.n	800a04e <tcp_input+0x7e2>
    goto dropped;
 800a044:	bf00      	nop
 800a046:	e002      	b.n	800a04e <tcp_input+0x7e2>
      goto dropped;
 800a048:	bf00      	nop
 800a04a:	e000      	b.n	800a04e <tcp_input+0x7e2>
      goto dropped;
 800a04c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7fd fd40 	bl	8007ad4 <pbuf_free>
 800a054:	e000      	b.n	800a058 <tcp_input+0x7ec>
  return;
 800a056:	bf00      	nop
}
 800a058:	3724      	adds	r7, #36	@ 0x24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd90      	pop	{r4, r7, pc}
 800a05e:	bf00      	nop
 800a060:	20008868 	.word	0x20008868
 800a064:	20008864 	.word	0x20008864
 800a068:	20008834 	.word	0x20008834
 800a06c:	20008844 	.word	0x20008844
 800a070:	20008858 	.word	0x20008858
 800a074:	2000885e 	.word	0x2000885e
 800a078:	20008854 	.word	0x20008854
 800a07c:	200052bc 	.word	0x200052bc
 800a080:	200052c0 	.word	0x200052c0

0800a084 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d106      	bne.n	800a0a0 <tcp_input_delayed_close+0x1c>
 800a092:	4b17      	ldr	r3, [pc, #92]	@ (800a0f0 <tcp_input_delayed_close+0x6c>)
 800a094:	f240 225a 	movw	r2, #602	@ 0x25a
 800a098:	4916      	ldr	r1, [pc, #88]	@ (800a0f4 <tcp_input_delayed_close+0x70>)
 800a09a:	4817      	ldr	r0, [pc, #92]	@ (800a0f8 <tcp_input_delayed_close+0x74>)
 800a09c:	f006 fb9a 	bl	80107d4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a0a0:	4b16      	ldr	r3, [pc, #88]	@ (800a0fc <tcp_input_delayed_close+0x78>)
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	f003 0310 	and.w	r3, r3, #16
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d01c      	beq.n	800a0e6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	8b5b      	ldrh	r3, [r3, #26]
 800a0b0:	f003 0310 	and.w	r3, r3, #16
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10d      	bne.n	800a0d4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d008      	beq.n	800a0d4 <tcp_input_delayed_close+0x50>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	6912      	ldr	r2, [r2, #16]
 800a0cc:	f06f 010e 	mvn.w	r1, #14
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a0d4:	6879      	ldr	r1, [r7, #4]
 800a0d6:	480a      	ldr	r0, [pc, #40]	@ (800a100 <tcp_input_delayed_close+0x7c>)
 800a0d8:	f7ff fa50 	bl	800957c <tcp_pcb_remove>
    tcp_free(pcb);
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f7fe f83b 	bl	8008158 <tcp_free>
    return 1;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e000      	b.n	800a0e8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a0e6:	2300      	movs	r3, #0
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	08012cf4 	.word	0x08012cf4
 800a0f4:	08012ec4 	.word	0x08012ec4
 800a0f8:	08012d40 	.word	0x08012d40
 800a0fc:	20008861 	.word	0x20008861
 800a100:	20008828 	.word	0x20008828

0800a104 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a104:	b590      	push	{r4, r7, lr}
 800a106:	b08b      	sub	sp, #44	@ 0x2c
 800a108:	af04      	add	r7, sp, #16
 800a10a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a10c:	4b6f      	ldr	r3, [pc, #444]	@ (800a2cc <tcp_listen_input+0x1c8>)
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	f003 0304 	and.w	r3, r3, #4
 800a114:	2b00      	cmp	r3, #0
 800a116:	f040 80d2 	bne.w	800a2be <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d106      	bne.n	800a12e <tcp_listen_input+0x2a>
 800a120:	4b6b      	ldr	r3, [pc, #428]	@ (800a2d0 <tcp_listen_input+0x1cc>)
 800a122:	f240 2281 	movw	r2, #641	@ 0x281
 800a126:	496b      	ldr	r1, [pc, #428]	@ (800a2d4 <tcp_listen_input+0x1d0>)
 800a128:	486b      	ldr	r0, [pc, #428]	@ (800a2d8 <tcp_listen_input+0x1d4>)
 800a12a:	f006 fb53 	bl	80107d4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a12e:	4b67      	ldr	r3, [pc, #412]	@ (800a2cc <tcp_listen_input+0x1c8>)
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	f003 0310 	and.w	r3, r3, #16
 800a136:	2b00      	cmp	r3, #0
 800a138:	d019      	beq.n	800a16e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a13a:	4b68      	ldr	r3, [pc, #416]	@ (800a2dc <tcp_listen_input+0x1d8>)
 800a13c:	6819      	ldr	r1, [r3, #0]
 800a13e:	4b68      	ldr	r3, [pc, #416]	@ (800a2e0 <tcp_listen_input+0x1dc>)
 800a140:	881b      	ldrh	r3, [r3, #0]
 800a142:	461a      	mov	r2, r3
 800a144:	4b67      	ldr	r3, [pc, #412]	@ (800a2e4 <tcp_listen_input+0x1e0>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a14a:	4b67      	ldr	r3, [pc, #412]	@ (800a2e8 <tcp_listen_input+0x1e4>)
 800a14c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a14e:	885b      	ldrh	r3, [r3, #2]
 800a150:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a152:	4a65      	ldr	r2, [pc, #404]	@ (800a2e8 <tcp_listen_input+0x1e4>)
 800a154:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a156:	8812      	ldrh	r2, [r2, #0]
 800a158:	b292      	uxth	r2, r2
 800a15a:	9202      	str	r2, [sp, #8]
 800a15c:	9301      	str	r3, [sp, #4]
 800a15e:	4b63      	ldr	r3, [pc, #396]	@ (800a2ec <tcp_listen_input+0x1e8>)
 800a160:	9300      	str	r3, [sp, #0]
 800a162:	4b63      	ldr	r3, [pc, #396]	@ (800a2f0 <tcp_listen_input+0x1ec>)
 800a164:	4602      	mov	r2, r0
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f002 ff7a 	bl	800d060 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a16c:	e0a9      	b.n	800a2c2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a16e:	4b57      	ldr	r3, [pc, #348]	@ (800a2cc <tcp_listen_input+0x1c8>)
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	f003 0302 	and.w	r3, r3, #2
 800a176:	2b00      	cmp	r3, #0
 800a178:	f000 80a3 	beq.w	800a2c2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	7d5b      	ldrb	r3, [r3, #21]
 800a180:	4618      	mov	r0, r3
 800a182:	f7ff f927 	bl	80093d4 <tcp_alloc>
 800a186:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d111      	bne.n	800a1b2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	699b      	ldr	r3, [r3, #24]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00a      	beq.n	800a1ac <tcp_listen_input+0xa8>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	699b      	ldr	r3, [r3, #24]
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	6910      	ldr	r0, [r2, #16]
 800a19e:	f04f 32ff 	mov.w	r2, #4294967295
 800a1a2:	2100      	movs	r1, #0
 800a1a4:	4798      	blx	r3
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	73bb      	strb	r3, [r7, #14]
      return;
 800a1aa:	e08b      	b.n	800a2c4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a1ac:	23f0      	movs	r3, #240	@ 0xf0
 800a1ae:	73bb      	strb	r3, [r7, #14]
      return;
 800a1b0:	e088      	b.n	800a2c4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a1b2:	4b50      	ldr	r3, [pc, #320]	@ (800a2f4 <tcp_listen_input+0x1f0>)
 800a1b4:	695a      	ldr	r2, [r3, #20]
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a1ba:	4b4e      	ldr	r3, [pc, #312]	@ (800a2f4 <tcp_listen_input+0x1f0>)
 800a1bc:	691a      	ldr	r2, [r3, #16]
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	8ada      	ldrh	r2, [r3, #22]
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a1ca:	4b47      	ldr	r3, [pc, #284]	@ (800a2e8 <tcp_listen_input+0x1e4>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	881b      	ldrh	r3, [r3, #0]
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	2203      	movs	r2, #3
 800a1da:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a1dc:	4b41      	ldr	r3, [pc, #260]	@ (800a2e4 <tcp_listen_input+0x1e0>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	1c5a      	adds	r2, r3, #1
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800a1ee:	6978      	ldr	r0, [r7, #20]
 800a1f0:	f7ff fa58 	bl	80096a4 <tcp_next_iss>
 800a1f4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	693a      	ldr	r2, [r7, #16]
 800a1fa:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	693a      	ldr	r2, [r7, #16]
 800a200:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	693a      	ldr	r2, [r7, #16]
 800a206:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	693a      	ldr	r2, [r7, #16]
 800a20c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a20e:	4b35      	ldr	r3, [pc, #212]	@ (800a2e4 <tcp_listen_input+0x1e0>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	1e5a      	subs	r2, r3, #1
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	691a      	ldr	r2, [r3, #16]
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	7a5b      	ldrb	r3, [r3, #9]
 800a22a:	f003 030c 	and.w	r3, r3, #12
 800a22e:	b2da      	uxtb	r2, r3
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	7a1a      	ldrb	r2, [r3, #8]
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a23c:	4b2e      	ldr	r3, [pc, #184]	@ (800a2f8 <tcp_listen_input+0x1f4>)
 800a23e:	681a      	ldr	r2, [r3, #0]
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	60da      	str	r2, [r3, #12]
 800a244:	4a2c      	ldr	r2, [pc, #176]	@ (800a2f8 <tcp_listen_input+0x1f4>)
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	6013      	str	r3, [r2, #0]
 800a24a:	f003 f8cb 	bl	800d3e4 <tcp_timer_needed>
 800a24e:	4b2b      	ldr	r3, [pc, #172]	@ (800a2fc <tcp_listen_input+0x1f8>)
 800a250:	2201      	movs	r2, #1
 800a252:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a254:	6978      	ldr	r0, [r7, #20]
 800a256:	f001 fd8b 	bl	800bd70 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a25a:	4b23      	ldr	r3, [pc, #140]	@ (800a2e8 <tcp_listen_input+0x1e4>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	89db      	ldrh	r3, [r3, #14]
 800a260:	b29a      	uxth	r2, r3
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	3304      	adds	r3, #4
 800a27c:	4618      	mov	r0, r3
 800a27e:	f004 ff3d 	bl	800f0fc <ip4_route>
 800a282:	4601      	mov	r1, r0
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	3304      	adds	r3, #4
 800a288:	461a      	mov	r2, r3
 800a28a:	4620      	mov	r0, r4
 800a28c:	f7ff fa30 	bl	80096f0 <tcp_eff_send_mss_netif>
 800a290:	4603      	mov	r3, r0
 800a292:	461a      	mov	r2, r3
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a298:	2112      	movs	r1, #18
 800a29a:	6978      	ldr	r0, [r7, #20]
 800a29c:	f002 f83e 	bl	800c31c <tcp_enqueue_flags>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a2a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d004      	beq.n	800a2b6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	6978      	ldr	r0, [r7, #20]
 800a2b0:	f7fe f97c 	bl	80085ac <tcp_abandon>
      return;
 800a2b4:	e006      	b.n	800a2c4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a2b6:	6978      	ldr	r0, [r7, #20]
 800a2b8:	f002 f91e 	bl	800c4f8 <tcp_output>
  return;
 800a2bc:	e001      	b.n	800a2c2 <tcp_listen_input+0x1be>
    return;
 800a2be:	bf00      	nop
 800a2c0:	e000      	b.n	800a2c4 <tcp_listen_input+0x1c0>
  return;
 800a2c2:	bf00      	nop
}
 800a2c4:	371c      	adds	r7, #28
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd90      	pop	{r4, r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	20008860 	.word	0x20008860
 800a2d0:	08012cf4 	.word	0x08012cf4
 800a2d4:	08012eec 	.word	0x08012eec
 800a2d8:	08012d40 	.word	0x08012d40
 800a2dc:	20008858 	.word	0x20008858
 800a2e0:	2000885e 	.word	0x2000885e
 800a2e4:	20008854 	.word	0x20008854
 800a2e8:	20008844 	.word	0x20008844
 800a2ec:	200052bc 	.word	0x200052bc
 800a2f0:	200052c0 	.word	0x200052c0
 800a2f4:	200052ac 	.word	0x200052ac
 800a2f8:	20008828 	.word	0x20008828
 800a2fc:	20008830 	.word	0x20008830

0800a300 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b086      	sub	sp, #24
 800a304:	af04      	add	r7, sp, #16
 800a306:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a308:	4b2f      	ldr	r3, [pc, #188]	@ (800a3c8 <tcp_timewait_input+0xc8>)
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	f003 0304 	and.w	r3, r3, #4
 800a310:	2b00      	cmp	r3, #0
 800a312:	d153      	bne.n	800a3bc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d106      	bne.n	800a328 <tcp_timewait_input+0x28>
 800a31a:	4b2c      	ldr	r3, [pc, #176]	@ (800a3cc <tcp_timewait_input+0xcc>)
 800a31c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800a320:	492b      	ldr	r1, [pc, #172]	@ (800a3d0 <tcp_timewait_input+0xd0>)
 800a322:	482c      	ldr	r0, [pc, #176]	@ (800a3d4 <tcp_timewait_input+0xd4>)
 800a324:	f006 fa56 	bl	80107d4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a328:	4b27      	ldr	r3, [pc, #156]	@ (800a3c8 <tcp_timewait_input+0xc8>)
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	f003 0302 	and.w	r3, r3, #2
 800a330:	2b00      	cmp	r3, #0
 800a332:	d02a      	beq.n	800a38a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a334:	4b28      	ldr	r3, [pc, #160]	@ (800a3d8 <tcp_timewait_input+0xd8>)
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a33c:	1ad3      	subs	r3, r2, r3
 800a33e:	2b00      	cmp	r3, #0
 800a340:	db2d      	blt.n	800a39e <tcp_timewait_input+0x9e>
 800a342:	4b25      	ldr	r3, [pc, #148]	@ (800a3d8 <tcp_timewait_input+0xd8>)
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a34a:	6879      	ldr	r1, [r7, #4]
 800a34c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a34e:	440b      	add	r3, r1
 800a350:	1ad3      	subs	r3, r2, r3
 800a352:	2b00      	cmp	r3, #0
 800a354:	dc23      	bgt.n	800a39e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a356:	4b21      	ldr	r3, [pc, #132]	@ (800a3dc <tcp_timewait_input+0xdc>)
 800a358:	6819      	ldr	r1, [r3, #0]
 800a35a:	4b21      	ldr	r3, [pc, #132]	@ (800a3e0 <tcp_timewait_input+0xe0>)
 800a35c:	881b      	ldrh	r3, [r3, #0]
 800a35e:	461a      	mov	r2, r3
 800a360:	4b1d      	ldr	r3, [pc, #116]	@ (800a3d8 <tcp_timewait_input+0xd8>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a366:	4b1f      	ldr	r3, [pc, #124]	@ (800a3e4 <tcp_timewait_input+0xe4>)
 800a368:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a36a:	885b      	ldrh	r3, [r3, #2]
 800a36c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a36e:	4a1d      	ldr	r2, [pc, #116]	@ (800a3e4 <tcp_timewait_input+0xe4>)
 800a370:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a372:	8812      	ldrh	r2, [r2, #0]
 800a374:	b292      	uxth	r2, r2
 800a376:	9202      	str	r2, [sp, #8]
 800a378:	9301      	str	r3, [sp, #4]
 800a37a:	4b1b      	ldr	r3, [pc, #108]	@ (800a3e8 <tcp_timewait_input+0xe8>)
 800a37c:	9300      	str	r3, [sp, #0]
 800a37e:	4b1b      	ldr	r3, [pc, #108]	@ (800a3ec <tcp_timewait_input+0xec>)
 800a380:	4602      	mov	r2, r0
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f002 fe6c 	bl	800d060 <tcp_rst>
      return;
 800a388:	e01b      	b.n	800a3c2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a38a:	4b0f      	ldr	r3, [pc, #60]	@ (800a3c8 <tcp_timewait_input+0xc8>)
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	f003 0301 	and.w	r3, r3, #1
 800a392:	2b00      	cmp	r3, #0
 800a394:	d003      	beq.n	800a39e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a396:	4b16      	ldr	r3, [pc, #88]	@ (800a3f0 <tcp_timewait_input+0xf0>)
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a39e:	4b10      	ldr	r3, [pc, #64]	@ (800a3e0 <tcp_timewait_input+0xe0>)
 800a3a0:	881b      	ldrh	r3, [r3, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00c      	beq.n	800a3c0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	8b5b      	ldrh	r3, [r3, #26]
 800a3aa:	f043 0302 	orr.w	r3, r3, #2
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f002 f89f 	bl	800c4f8 <tcp_output>
  }
  return;
 800a3ba:	e001      	b.n	800a3c0 <tcp_timewait_input+0xc0>
    return;
 800a3bc:	bf00      	nop
 800a3be:	e000      	b.n	800a3c2 <tcp_timewait_input+0xc2>
  return;
 800a3c0:	bf00      	nop
}
 800a3c2:	3708      	adds	r7, #8
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	20008860 	.word	0x20008860
 800a3cc:	08012cf4 	.word	0x08012cf4
 800a3d0:	08012f0c 	.word	0x08012f0c
 800a3d4:	08012d40 	.word	0x08012d40
 800a3d8:	20008854 	.word	0x20008854
 800a3dc:	20008858 	.word	0x20008858
 800a3e0:	2000885e 	.word	0x2000885e
 800a3e4:	20008844 	.word	0x20008844
 800a3e8:	200052bc 	.word	0x200052bc
 800a3ec:	200052c0 	.word	0x200052c0
 800a3f0:	2000881c 	.word	0x2000881c

0800a3f4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a3f4:	b590      	push	{r4, r7, lr}
 800a3f6:	b08d      	sub	sp, #52	@ 0x34
 800a3f8:	af04      	add	r7, sp, #16
 800a3fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a400:	2300      	movs	r3, #0
 800a402:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d106      	bne.n	800a418 <tcp_process+0x24>
 800a40a:	4b9d      	ldr	r3, [pc, #628]	@ (800a680 <tcp_process+0x28c>)
 800a40c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800a410:	499c      	ldr	r1, [pc, #624]	@ (800a684 <tcp_process+0x290>)
 800a412:	489d      	ldr	r0, [pc, #628]	@ (800a688 <tcp_process+0x294>)
 800a414:	f006 f9de 	bl	80107d4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a418:	4b9c      	ldr	r3, [pc, #624]	@ (800a68c <tcp_process+0x298>)
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	f003 0304 	and.w	r3, r3, #4
 800a420:	2b00      	cmp	r3, #0
 800a422:	d04e      	beq.n	800a4c2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	7d1b      	ldrb	r3, [r3, #20]
 800a428:	2b02      	cmp	r3, #2
 800a42a:	d108      	bne.n	800a43e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a430:	4b97      	ldr	r3, [pc, #604]	@ (800a690 <tcp_process+0x29c>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	429a      	cmp	r2, r3
 800a436:	d123      	bne.n	800a480 <tcp_process+0x8c>
        acceptable = 1;
 800a438:	2301      	movs	r3, #1
 800a43a:	76fb      	strb	r3, [r7, #27]
 800a43c:	e020      	b.n	800a480 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a442:	4b94      	ldr	r3, [pc, #592]	@ (800a694 <tcp_process+0x2a0>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	429a      	cmp	r2, r3
 800a448:	d102      	bne.n	800a450 <tcp_process+0x5c>
        acceptable = 1;
 800a44a:	2301      	movs	r3, #1
 800a44c:	76fb      	strb	r3, [r7, #27]
 800a44e:	e017      	b.n	800a480 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a450:	4b90      	ldr	r3, [pc, #576]	@ (800a694 <tcp_process+0x2a0>)
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a458:	1ad3      	subs	r3, r2, r3
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	db10      	blt.n	800a480 <tcp_process+0x8c>
 800a45e:	4b8d      	ldr	r3, [pc, #564]	@ (800a694 <tcp_process+0x2a0>)
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a466:	6879      	ldr	r1, [r7, #4]
 800a468:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a46a:	440b      	add	r3, r1
 800a46c:	1ad3      	subs	r3, r2, r3
 800a46e:	2b00      	cmp	r3, #0
 800a470:	dc06      	bgt.n	800a480 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	8b5b      	ldrh	r3, [r3, #26]
 800a476:	f043 0302 	orr.w	r3, r3, #2
 800a47a:	b29a      	uxth	r2, r3
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a480:	7efb      	ldrb	r3, [r7, #27]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d01b      	beq.n	800a4be <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	7d1b      	ldrb	r3, [r3, #20]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d106      	bne.n	800a49c <tcp_process+0xa8>
 800a48e:	4b7c      	ldr	r3, [pc, #496]	@ (800a680 <tcp_process+0x28c>)
 800a490:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800a494:	4980      	ldr	r1, [pc, #512]	@ (800a698 <tcp_process+0x2a4>)
 800a496:	487c      	ldr	r0, [pc, #496]	@ (800a688 <tcp_process+0x294>)
 800a498:	f006 f99c 	bl	80107d4 <iprintf>
      recv_flags |= TF_RESET;
 800a49c:	4b7f      	ldr	r3, [pc, #508]	@ (800a69c <tcp_process+0x2a8>)
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	f043 0308 	orr.w	r3, r3, #8
 800a4a4:	b2da      	uxtb	r2, r3
 800a4a6:	4b7d      	ldr	r3, [pc, #500]	@ (800a69c <tcp_process+0x2a8>)
 800a4a8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	8b5b      	ldrh	r3, [r3, #26]
 800a4ae:	f023 0301 	bic.w	r3, r3, #1
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a4b8:	f06f 030d 	mvn.w	r3, #13
 800a4bc:	e37a      	b.n	800abb4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	e378      	b.n	800abb4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a4c2:	4b72      	ldr	r3, [pc, #456]	@ (800a68c <tcp_process+0x298>)
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	f003 0302 	and.w	r3, r3, #2
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d010      	beq.n	800a4f0 <tcp_process+0xfc>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	7d1b      	ldrb	r3, [r3, #20]
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	d00c      	beq.n	800a4f0 <tcp_process+0xfc>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	7d1b      	ldrb	r3, [r3, #20]
 800a4da:	2b03      	cmp	r3, #3
 800a4dc:	d008      	beq.n	800a4f0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	8b5b      	ldrh	r3, [r3, #26]
 800a4e2:	f043 0302 	orr.w	r3, r3, #2
 800a4e6:	b29a      	uxth	r2, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	e361      	b.n	800abb4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	8b5b      	ldrh	r3, [r3, #26]
 800a4f4:	f003 0310 	and.w	r3, r3, #16
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d103      	bne.n	800a504 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a4fc:	4b68      	ldr	r3, [pc, #416]	@ (800a6a0 <tcp_process+0x2ac>)
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f001 fc2b 	bl	800bd70 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	7d1b      	ldrb	r3, [r3, #20]
 800a51e:	3b02      	subs	r3, #2
 800a520:	2b07      	cmp	r3, #7
 800a522:	f200 8337 	bhi.w	800ab94 <tcp_process+0x7a0>
 800a526:	a201      	add	r2, pc, #4	@ (adr r2, 800a52c <tcp_process+0x138>)
 800a528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a52c:	0800a54d 	.word	0x0800a54d
 800a530:	0800a77d 	.word	0x0800a77d
 800a534:	0800a8f5 	.word	0x0800a8f5
 800a538:	0800a91f 	.word	0x0800a91f
 800a53c:	0800aa43 	.word	0x0800aa43
 800a540:	0800a8f5 	.word	0x0800a8f5
 800a544:	0800aacf 	.word	0x0800aacf
 800a548:	0800ab5f 	.word	0x0800ab5f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a54c:	4b4f      	ldr	r3, [pc, #316]	@ (800a68c <tcp_process+0x298>)
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	f003 0310 	and.w	r3, r3, #16
 800a554:	2b00      	cmp	r3, #0
 800a556:	f000 80e4 	beq.w	800a722 <tcp_process+0x32e>
 800a55a:	4b4c      	ldr	r3, [pc, #304]	@ (800a68c <tcp_process+0x298>)
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	f003 0302 	and.w	r3, r3, #2
 800a562:	2b00      	cmp	r3, #0
 800a564:	f000 80dd 	beq.w	800a722 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a56c:	1c5a      	adds	r2, r3, #1
 800a56e:	4b48      	ldr	r3, [pc, #288]	@ (800a690 <tcp_process+0x29c>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	429a      	cmp	r2, r3
 800a574:	f040 80d5 	bne.w	800a722 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a578:	4b46      	ldr	r3, [pc, #280]	@ (800a694 <tcp_process+0x2a0>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	1c5a      	adds	r2, r3, #1
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800a58a:	4b41      	ldr	r3, [pc, #260]	@ (800a690 <tcp_process+0x29c>)
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a592:	4b44      	ldr	r3, [pc, #272]	@ (800a6a4 <tcp_process+0x2b0>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	89db      	ldrh	r3, [r3, #14]
 800a598:	b29a      	uxth	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a5ac:	4b39      	ldr	r3, [pc, #228]	@ (800a694 <tcp_process+0x2a0>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	1e5a      	subs	r2, r3, #1
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2204      	movs	r2, #4
 800a5ba:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	3304      	adds	r3, #4
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f004 fd99 	bl	800f0fc <ip4_route>
 800a5ca:	4601      	mov	r1, r0
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	3304      	adds	r3, #4
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	f7ff f88c 	bl	80096f0 <tcp_eff_send_mss_netif>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	461a      	mov	r2, r3
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a5e4:	009a      	lsls	r2, r3, #2
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a5ea:	005b      	lsls	r3, r3, #1
 800a5ec:	f241 111c 	movw	r1, #4380	@ 0x111c
 800a5f0:	428b      	cmp	r3, r1
 800a5f2:	bf38      	it	cc
 800a5f4:	460b      	movcc	r3, r1
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d204      	bcs.n	800a604 <tcp_process+0x210>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	b29b      	uxth	r3, r3
 800a602:	e00d      	b.n	800a620 <tcp_process+0x22c>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a608:	005b      	lsls	r3, r3, #1
 800a60a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800a60e:	4293      	cmp	r3, r2
 800a610:	d904      	bls.n	800a61c <tcp_process+0x228>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a616:	005b      	lsls	r3, r3, #1
 800a618:	b29b      	uxth	r3, r3
 800a61a:	e001      	b.n	800a620 <tcp_process+0x22c>
 800a61c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d106      	bne.n	800a63e <tcp_process+0x24a>
 800a630:	4b13      	ldr	r3, [pc, #76]	@ (800a680 <tcp_process+0x28c>)
 800a632:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800a636:	491c      	ldr	r1, [pc, #112]	@ (800a6a8 <tcp_process+0x2b4>)
 800a638:	4813      	ldr	r0, [pc, #76]	@ (800a688 <tcp_process+0x294>)
 800a63a:	f006 f8cb 	bl	80107d4 <iprintf>
        --pcb->snd_queuelen;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a644:	3b01      	subs	r3, #1
 800a646:	b29a      	uxth	r2, r3
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a652:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d12a      	bne.n	800a6b0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a65e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a660:	69fb      	ldr	r3, [r7, #28]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d106      	bne.n	800a674 <tcp_process+0x280>
 800a666:	4b06      	ldr	r3, [pc, #24]	@ (800a680 <tcp_process+0x28c>)
 800a668:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800a66c:	490f      	ldr	r1, [pc, #60]	@ (800a6ac <tcp_process+0x2b8>)
 800a66e:	4806      	ldr	r0, [pc, #24]	@ (800a688 <tcp_process+0x294>)
 800a670:	f006 f8b0 	bl	80107d4 <iprintf>
          pcb->unsent = rseg->next;
 800a674:	69fb      	ldr	r3, [r7, #28]
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a67c:	e01c      	b.n	800a6b8 <tcp_process+0x2c4>
 800a67e:	bf00      	nop
 800a680:	08012cf4 	.word	0x08012cf4
 800a684:	08012f2c 	.word	0x08012f2c
 800a688:	08012d40 	.word	0x08012d40
 800a68c:	20008860 	.word	0x20008860
 800a690:	20008858 	.word	0x20008858
 800a694:	20008854 	.word	0x20008854
 800a698:	08012f48 	.word	0x08012f48
 800a69c:	20008861 	.word	0x20008861
 800a6a0:	2000881c 	.word	0x2000881c
 800a6a4:	20008844 	.word	0x20008844
 800a6a8:	08012f68 	.word	0x08012f68
 800a6ac:	08012f80 	.word	0x08012f80
        } else {
          pcb->unacked = rseg->next;
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800a6b8:	69f8      	ldr	r0, [r7, #28]
 800a6ba:	f7fe fd22 	bl	8009102 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d104      	bne.n	800a6d0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a6cc:	861a      	strh	r2, [r3, #48]	@ 0x30
 800a6ce:	e006      	b.n	800a6de <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00a      	beq.n	800a6fe <tcp_process+0x30a>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	6910      	ldr	r0, [r2, #16]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	6879      	ldr	r1, [r7, #4]
 800a6f6:	4798      	blx	r3
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	76bb      	strb	r3, [r7, #26]
 800a6fc:	e001      	b.n	800a702 <tcp_process+0x30e>
 800a6fe:	2300      	movs	r3, #0
 800a700:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a702:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a706:	f113 0f0d 	cmn.w	r3, #13
 800a70a:	d102      	bne.n	800a712 <tcp_process+0x31e>
          return ERR_ABRT;
 800a70c:	f06f 030c 	mvn.w	r3, #12
 800a710:	e250      	b.n	800abb4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	8b5b      	ldrh	r3, [r3, #26]
 800a716:	f043 0302 	orr.w	r3, r3, #2
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a720:	e23a      	b.n	800ab98 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a722:	4b98      	ldr	r3, [pc, #608]	@ (800a984 <tcp_process+0x590>)
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	f003 0310 	and.w	r3, r3, #16
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	f000 8234 	beq.w	800ab98 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a730:	4b95      	ldr	r3, [pc, #596]	@ (800a988 <tcp_process+0x594>)
 800a732:	6819      	ldr	r1, [r3, #0]
 800a734:	4b95      	ldr	r3, [pc, #596]	@ (800a98c <tcp_process+0x598>)
 800a736:	881b      	ldrh	r3, [r3, #0]
 800a738:	461a      	mov	r2, r3
 800a73a:	4b95      	ldr	r3, [pc, #596]	@ (800a990 <tcp_process+0x59c>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a740:	4b94      	ldr	r3, [pc, #592]	@ (800a994 <tcp_process+0x5a0>)
 800a742:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a744:	885b      	ldrh	r3, [r3, #2]
 800a746:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a748:	4a92      	ldr	r2, [pc, #584]	@ (800a994 <tcp_process+0x5a0>)
 800a74a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a74c:	8812      	ldrh	r2, [r2, #0]
 800a74e:	b292      	uxth	r2, r2
 800a750:	9202      	str	r2, [sp, #8]
 800a752:	9301      	str	r3, [sp, #4]
 800a754:	4b90      	ldr	r3, [pc, #576]	@ (800a998 <tcp_process+0x5a4>)
 800a756:	9300      	str	r3, [sp, #0]
 800a758:	4b90      	ldr	r3, [pc, #576]	@ (800a99c <tcp_process+0x5a8>)
 800a75a:	4602      	mov	r2, r0
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f002 fc7f 	bl	800d060 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a768:	2b05      	cmp	r3, #5
 800a76a:	f200 8215 	bhi.w	800ab98 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f002 fa4b 	bl	800cc10 <tcp_rexmit_rto>
      break;
 800a77a:	e20d      	b.n	800ab98 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800a77c:	4b81      	ldr	r3, [pc, #516]	@ (800a984 <tcp_process+0x590>)
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	f003 0310 	and.w	r3, r3, #16
 800a784:	2b00      	cmp	r3, #0
 800a786:	f000 80a1 	beq.w	800a8cc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a78a:	4b7f      	ldr	r3, [pc, #508]	@ (800a988 <tcp_process+0x594>)
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a792:	1ad3      	subs	r3, r2, r3
 800a794:	3b01      	subs	r3, #1
 800a796:	2b00      	cmp	r3, #0
 800a798:	db7e      	blt.n	800a898 <tcp_process+0x4a4>
 800a79a:	4b7b      	ldr	r3, [pc, #492]	@ (800a988 <tcp_process+0x594>)
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7a2:	1ad3      	subs	r3, r2, r3
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	dc77      	bgt.n	800a898 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2204      	movs	r2, #4
 800a7ac:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d102      	bne.n	800a7bc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a7b6:	23fa      	movs	r3, #250	@ 0xfa
 800a7b8:	76bb      	strb	r3, [r7, #26]
 800a7ba:	e01d      	b.n	800a7f8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7c0:	699b      	ldr	r3, [r3, #24]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d106      	bne.n	800a7d4 <tcp_process+0x3e0>
 800a7c6:	4b76      	ldr	r3, [pc, #472]	@ (800a9a0 <tcp_process+0x5ac>)
 800a7c8:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800a7cc:	4975      	ldr	r1, [pc, #468]	@ (800a9a4 <tcp_process+0x5b0>)
 800a7ce:	4876      	ldr	r0, [pc, #472]	@ (800a9a8 <tcp_process+0x5b4>)
 800a7d0:	f006 f800 	bl	80107d4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7d8:	699b      	ldr	r3, [r3, #24]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d00a      	beq.n	800a7f4 <tcp_process+0x400>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7e2:	699b      	ldr	r3, [r3, #24]
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	6910      	ldr	r0, [r2, #16]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	6879      	ldr	r1, [r7, #4]
 800a7ec:	4798      	blx	r3
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	76bb      	strb	r3, [r7, #26]
 800a7f2:	e001      	b.n	800a7f8 <tcp_process+0x404>
 800a7f4:	23f0      	movs	r3, #240	@ 0xf0
 800a7f6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800a7f8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d00a      	beq.n	800a816 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a800:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a804:	f113 0f0d 	cmn.w	r3, #13
 800a808:	d002      	beq.n	800a810 <tcp_process+0x41c>
              tcp_abort(pcb);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f7fd ff8c 	bl	8008728 <tcp_abort>
            }
            return ERR_ABRT;
 800a810:	f06f 030c 	mvn.w	r3, #12
 800a814:	e1ce      	b.n	800abb4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 fae0 	bl	800addc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a81c:	4b63      	ldr	r3, [pc, #396]	@ (800a9ac <tcp_process+0x5b8>)
 800a81e:	881b      	ldrh	r3, [r3, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d005      	beq.n	800a830 <tcp_process+0x43c>
            recv_acked--;
 800a824:	4b61      	ldr	r3, [pc, #388]	@ (800a9ac <tcp_process+0x5b8>)
 800a826:	881b      	ldrh	r3, [r3, #0]
 800a828:	3b01      	subs	r3, #1
 800a82a:	b29a      	uxth	r2, r3
 800a82c:	4b5f      	ldr	r3, [pc, #380]	@ (800a9ac <tcp_process+0x5b8>)
 800a82e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a834:	009a      	lsls	r2, r3, #2
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a83a:	005b      	lsls	r3, r3, #1
 800a83c:	f241 111c 	movw	r1, #4380	@ 0x111c
 800a840:	428b      	cmp	r3, r1
 800a842:	bf38      	it	cc
 800a844:	460b      	movcc	r3, r1
 800a846:	429a      	cmp	r2, r3
 800a848:	d204      	bcs.n	800a854 <tcp_process+0x460>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	b29b      	uxth	r3, r3
 800a852:	e00d      	b.n	800a870 <tcp_process+0x47c>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a858:	005b      	lsls	r3, r3, #1
 800a85a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800a85e:	4293      	cmp	r3, r2
 800a860:	d904      	bls.n	800a86c <tcp_process+0x478>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a866:	005b      	lsls	r3, r3, #1
 800a868:	b29b      	uxth	r3, r3
 800a86a:	e001      	b.n	800a870 <tcp_process+0x47c>
 800a86c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a876:	4b4e      	ldr	r3, [pc, #312]	@ (800a9b0 <tcp_process+0x5bc>)
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	f003 0320 	and.w	r3, r3, #32
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d037      	beq.n	800a8f2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	8b5b      	ldrh	r3, [r3, #26]
 800a886:	f043 0302 	orr.w	r3, r3, #2
 800a88a:	b29a      	uxth	r2, r3
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2207      	movs	r2, #7
 800a894:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a896:	e02c      	b.n	800a8f2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a898:	4b3b      	ldr	r3, [pc, #236]	@ (800a988 <tcp_process+0x594>)
 800a89a:	6819      	ldr	r1, [r3, #0]
 800a89c:	4b3b      	ldr	r3, [pc, #236]	@ (800a98c <tcp_process+0x598>)
 800a89e:	881b      	ldrh	r3, [r3, #0]
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	4b3b      	ldr	r3, [pc, #236]	@ (800a990 <tcp_process+0x59c>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a8a8:	4b3a      	ldr	r3, [pc, #232]	@ (800a994 <tcp_process+0x5a0>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a8ac:	885b      	ldrh	r3, [r3, #2]
 800a8ae:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a8b0:	4a38      	ldr	r2, [pc, #224]	@ (800a994 <tcp_process+0x5a0>)
 800a8b2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a8b4:	8812      	ldrh	r2, [r2, #0]
 800a8b6:	b292      	uxth	r2, r2
 800a8b8:	9202      	str	r2, [sp, #8]
 800a8ba:	9301      	str	r3, [sp, #4]
 800a8bc:	4b36      	ldr	r3, [pc, #216]	@ (800a998 <tcp_process+0x5a4>)
 800a8be:	9300      	str	r3, [sp, #0]
 800a8c0:	4b36      	ldr	r3, [pc, #216]	@ (800a99c <tcp_process+0x5a8>)
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f002 fbcb 	bl	800d060 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800a8ca:	e167      	b.n	800ab9c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a8cc:	4b2d      	ldr	r3, [pc, #180]	@ (800a984 <tcp_process+0x590>)
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	f003 0302 	and.w	r3, r3, #2
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f000 8161 	beq.w	800ab9c <tcp_process+0x7a8>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8de:	1e5a      	subs	r2, r3, #1
 800a8e0:	4b2b      	ldr	r3, [pc, #172]	@ (800a990 <tcp_process+0x59c>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	f040 8159 	bne.w	800ab9c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f002 f9b2 	bl	800cc54 <tcp_rexmit>
      break;
 800a8f0:	e154      	b.n	800ab9c <tcp_process+0x7a8>
 800a8f2:	e153      	b.n	800ab9c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 fa71 	bl	800addc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a8fa:	4b2d      	ldr	r3, [pc, #180]	@ (800a9b0 <tcp_process+0x5bc>)
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	f003 0320 	and.w	r3, r3, #32
 800a902:	2b00      	cmp	r3, #0
 800a904:	f000 814c 	beq.w	800aba0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	8b5b      	ldrh	r3, [r3, #26]
 800a90c:	f043 0302 	orr.w	r3, r3, #2
 800a910:	b29a      	uxth	r2, r3
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2207      	movs	r2, #7
 800a91a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a91c:	e140      	b.n	800aba0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 fa5c 	bl	800addc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a924:	4b22      	ldr	r3, [pc, #136]	@ (800a9b0 <tcp_process+0x5bc>)
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	f003 0320 	and.w	r3, r3, #32
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d071      	beq.n	800aa14 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a930:	4b14      	ldr	r3, [pc, #80]	@ (800a984 <tcp_process+0x590>)
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	f003 0310 	and.w	r3, r3, #16
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d060      	beq.n	800a9fe <tcp_process+0x60a>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a940:	4b11      	ldr	r3, [pc, #68]	@ (800a988 <tcp_process+0x594>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	429a      	cmp	r2, r3
 800a946:	d15a      	bne.n	800a9fe <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d156      	bne.n	800a9fe <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	8b5b      	ldrh	r3, [r3, #26]
 800a954:	f043 0302 	orr.w	r3, r3, #2
 800a958:	b29a      	uxth	r2, r3
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f7fe fdbc 	bl	80094dc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a964:	4b13      	ldr	r3, [pc, #76]	@ (800a9b4 <tcp_process+0x5c0>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d105      	bne.n	800a97a <tcp_process+0x586>
 800a96e:	4b11      	ldr	r3, [pc, #68]	@ (800a9b4 <tcp_process+0x5c0>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	4a0f      	ldr	r2, [pc, #60]	@ (800a9b4 <tcp_process+0x5c0>)
 800a976:	6013      	str	r3, [r2, #0]
 800a978:	e02e      	b.n	800a9d8 <tcp_process+0x5e4>
 800a97a:	4b0e      	ldr	r3, [pc, #56]	@ (800a9b4 <tcp_process+0x5c0>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	617b      	str	r3, [r7, #20]
 800a980:	e027      	b.n	800a9d2 <tcp_process+0x5de>
 800a982:	bf00      	nop
 800a984:	20008860 	.word	0x20008860
 800a988:	20008858 	.word	0x20008858
 800a98c:	2000885e 	.word	0x2000885e
 800a990:	20008854 	.word	0x20008854
 800a994:	20008844 	.word	0x20008844
 800a998:	200052bc 	.word	0x200052bc
 800a99c:	200052c0 	.word	0x200052c0
 800a9a0:	08012cf4 	.word	0x08012cf4
 800a9a4:	08012f94 	.word	0x08012f94
 800a9a8:	08012d40 	.word	0x08012d40
 800a9ac:	2000885c 	.word	0x2000885c
 800a9b0:	20008861 	.word	0x20008861
 800a9b4:	20008828 	.word	0x20008828
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	68db      	ldr	r3, [r3, #12]
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d104      	bne.n	800a9cc <tcp_process+0x5d8>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	68da      	ldr	r2, [r3, #12]
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	60da      	str	r2, [r3, #12]
 800a9ca:	e005      	b.n	800a9d8 <tcp_process+0x5e4>
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	617b      	str	r3, [r7, #20]
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d1ef      	bne.n	800a9b8 <tcp_process+0x5c4>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	60da      	str	r2, [r3, #12]
 800a9de:	4b77      	ldr	r3, [pc, #476]	@ (800abbc <tcp_process+0x7c8>)
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	220a      	movs	r2, #10
 800a9e8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800a9ea:	4b75      	ldr	r3, [pc, #468]	@ (800abc0 <tcp_process+0x7cc>)
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	60da      	str	r2, [r3, #12]
 800a9f2:	4a73      	ldr	r2, [pc, #460]	@ (800abc0 <tcp_process+0x7cc>)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6013      	str	r3, [r2, #0]
 800a9f8:	f002 fcf4 	bl	800d3e4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800a9fc:	e0d2      	b.n	800aba4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	8b5b      	ldrh	r3, [r3, #26]
 800aa02:	f043 0302 	orr.w	r3, r3, #2
 800aa06:	b29a      	uxth	r2, r3
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2208      	movs	r2, #8
 800aa10:	751a      	strb	r2, [r3, #20]
      break;
 800aa12:	e0c7      	b.n	800aba4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aa14:	4b6b      	ldr	r3, [pc, #428]	@ (800abc4 <tcp_process+0x7d0>)
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	f003 0310 	and.w	r3, r3, #16
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	f000 80c1 	beq.w	800aba4 <tcp_process+0x7b0>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aa26:	4b68      	ldr	r3, [pc, #416]	@ (800abc8 <tcp_process+0x7d4>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	f040 80ba 	bne.w	800aba4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f040 80b5 	bne.w	800aba4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2206      	movs	r2, #6
 800aa3e:	751a      	strb	r2, [r3, #20]
      break;
 800aa40:	e0b0      	b.n	800aba4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 f9ca 	bl	800addc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800aa48:	4b60      	ldr	r3, [pc, #384]	@ (800abcc <tcp_process+0x7d8>)
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	f003 0320 	and.w	r3, r3, #32
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f000 80a9 	beq.w	800aba8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	8b5b      	ldrh	r3, [r3, #26]
 800aa5a:	f043 0302 	orr.w	r3, r3, #2
 800aa5e:	b29a      	uxth	r2, r3
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f7fe fd39 	bl	80094dc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800aa6a:	4b59      	ldr	r3, [pc, #356]	@ (800abd0 <tcp_process+0x7dc>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d105      	bne.n	800aa80 <tcp_process+0x68c>
 800aa74:	4b56      	ldr	r3, [pc, #344]	@ (800abd0 <tcp_process+0x7dc>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	68db      	ldr	r3, [r3, #12]
 800aa7a:	4a55      	ldr	r2, [pc, #340]	@ (800abd0 <tcp_process+0x7dc>)
 800aa7c:	6013      	str	r3, [r2, #0]
 800aa7e:	e013      	b.n	800aaa8 <tcp_process+0x6b4>
 800aa80:	4b53      	ldr	r3, [pc, #332]	@ (800abd0 <tcp_process+0x7dc>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	613b      	str	r3, [r7, #16]
 800aa86:	e00c      	b.n	800aaa2 <tcp_process+0x6ae>
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d104      	bne.n	800aa9c <tcp_process+0x6a8>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	68da      	ldr	r2, [r3, #12]
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	60da      	str	r2, [r3, #12]
 800aa9a:	e005      	b.n	800aaa8 <tcp_process+0x6b4>
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	613b      	str	r3, [r7, #16]
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d1ef      	bne.n	800aa88 <tcp_process+0x694>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	60da      	str	r2, [r3, #12]
 800aaae:	4b43      	ldr	r3, [pc, #268]	@ (800abbc <tcp_process+0x7c8>)
 800aab0:	2201      	movs	r2, #1
 800aab2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	220a      	movs	r2, #10
 800aab8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800aaba:	4b41      	ldr	r3, [pc, #260]	@ (800abc0 <tcp_process+0x7cc>)
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	60da      	str	r2, [r3, #12]
 800aac2:	4a3f      	ldr	r2, [pc, #252]	@ (800abc0 <tcp_process+0x7cc>)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6013      	str	r3, [r2, #0]
 800aac8:	f002 fc8c 	bl	800d3e4 <tcp_timer_needed>
      }
      break;
 800aacc:	e06c      	b.n	800aba8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 f984 	bl	800addc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800aad4:	4b3b      	ldr	r3, [pc, #236]	@ (800abc4 <tcp_process+0x7d0>)
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	f003 0310 	and.w	r3, r3, #16
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d065      	beq.n	800abac <tcp_process+0x7b8>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aae4:	4b38      	ldr	r3, [pc, #224]	@ (800abc8 <tcp_process+0x7d4>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d15f      	bne.n	800abac <tcp_process+0x7b8>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d15b      	bne.n	800abac <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f7fe fcf1 	bl	80094dc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800aafa:	4b35      	ldr	r3, [pc, #212]	@ (800abd0 <tcp_process+0x7dc>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d105      	bne.n	800ab10 <tcp_process+0x71c>
 800ab04:	4b32      	ldr	r3, [pc, #200]	@ (800abd0 <tcp_process+0x7dc>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	4a31      	ldr	r2, [pc, #196]	@ (800abd0 <tcp_process+0x7dc>)
 800ab0c:	6013      	str	r3, [r2, #0]
 800ab0e:	e013      	b.n	800ab38 <tcp_process+0x744>
 800ab10:	4b2f      	ldr	r3, [pc, #188]	@ (800abd0 <tcp_process+0x7dc>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	60fb      	str	r3, [r7, #12]
 800ab16:	e00c      	b.n	800ab32 <tcp_process+0x73e>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d104      	bne.n	800ab2c <tcp_process+0x738>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	68da      	ldr	r2, [r3, #12]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	60da      	str	r2, [r3, #12]
 800ab2a:	e005      	b.n	800ab38 <tcp_process+0x744>
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	60fb      	str	r3, [r7, #12]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d1ef      	bne.n	800ab18 <tcp_process+0x724>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	60da      	str	r2, [r3, #12]
 800ab3e:	4b1f      	ldr	r3, [pc, #124]	@ (800abbc <tcp_process+0x7c8>)
 800ab40:	2201      	movs	r2, #1
 800ab42:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	220a      	movs	r2, #10
 800ab48:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ab4a:	4b1d      	ldr	r3, [pc, #116]	@ (800abc0 <tcp_process+0x7cc>)
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	60da      	str	r2, [r3, #12]
 800ab52:	4a1b      	ldr	r2, [pc, #108]	@ (800abc0 <tcp_process+0x7cc>)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6013      	str	r3, [r2, #0]
 800ab58:	f002 fc44 	bl	800d3e4 <tcp_timer_needed>
      }
      break;
 800ab5c:	e026      	b.n	800abac <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 f93c 	bl	800addc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ab64:	4b17      	ldr	r3, [pc, #92]	@ (800abc4 <tcp_process+0x7d0>)
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	f003 0310 	and.w	r3, r3, #16
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d01f      	beq.n	800abb0 <tcp_process+0x7bc>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ab74:	4b14      	ldr	r3, [pc, #80]	@ (800abc8 <tcp_process+0x7d4>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d119      	bne.n	800abb0 <tcp_process+0x7bc>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d115      	bne.n	800abb0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ab84:	4b11      	ldr	r3, [pc, #68]	@ (800abcc <tcp_process+0x7d8>)
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	f043 0310 	orr.w	r3, r3, #16
 800ab8c:	b2da      	uxtb	r2, r3
 800ab8e:	4b0f      	ldr	r3, [pc, #60]	@ (800abcc <tcp_process+0x7d8>)
 800ab90:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ab92:	e00d      	b.n	800abb0 <tcp_process+0x7bc>
    default:
      break;
 800ab94:	bf00      	nop
 800ab96:	e00c      	b.n	800abb2 <tcp_process+0x7be>
      break;
 800ab98:	bf00      	nop
 800ab9a:	e00a      	b.n	800abb2 <tcp_process+0x7be>
      break;
 800ab9c:	bf00      	nop
 800ab9e:	e008      	b.n	800abb2 <tcp_process+0x7be>
      break;
 800aba0:	bf00      	nop
 800aba2:	e006      	b.n	800abb2 <tcp_process+0x7be>
      break;
 800aba4:	bf00      	nop
 800aba6:	e004      	b.n	800abb2 <tcp_process+0x7be>
      break;
 800aba8:	bf00      	nop
 800abaa:	e002      	b.n	800abb2 <tcp_process+0x7be>
      break;
 800abac:	bf00      	nop
 800abae:	e000      	b.n	800abb2 <tcp_process+0x7be>
      break;
 800abb0:	bf00      	nop
  }
  return ERR_OK;
 800abb2:	2300      	movs	r3, #0
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3724      	adds	r7, #36	@ 0x24
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd90      	pop	{r4, r7, pc}
 800abbc:	20008830 	.word	0x20008830
 800abc0:	2000882c 	.word	0x2000882c
 800abc4:	20008860 	.word	0x20008860
 800abc8:	20008858 	.word	0x20008858
 800abcc:	20008861 	.word	0x20008861
 800abd0:	20008828 	.word	0x20008828

0800abd4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800abd4:	b590      	push	{r4, r7, lr}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d106      	bne.n	800abf2 <tcp_oos_insert_segment+0x1e>
 800abe4:	4b3b      	ldr	r3, [pc, #236]	@ (800acd4 <tcp_oos_insert_segment+0x100>)
 800abe6:	f240 421f 	movw	r2, #1055	@ 0x41f
 800abea:	493b      	ldr	r1, [pc, #236]	@ (800acd8 <tcp_oos_insert_segment+0x104>)
 800abec:	483b      	ldr	r0, [pc, #236]	@ (800acdc <tcp_oos_insert_segment+0x108>)
 800abee:	f005 fdf1 	bl	80107d4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	899b      	ldrh	r3, [r3, #12]
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7fb fc0c 	bl	8006418 <lwip_htons>
 800ac00:	4603      	mov	r3, r0
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	f003 0301 	and.w	r3, r3, #1
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d028      	beq.n	800ac5e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ac0c:	6838      	ldr	r0, [r7, #0]
 800ac0e:	f7fe fa63 	bl	80090d8 <tcp_segs_free>
    next = NULL;
 800ac12:	2300      	movs	r3, #0
 800ac14:	603b      	str	r3, [r7, #0]
 800ac16:	e056      	b.n	800acc6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	68db      	ldr	r3, [r3, #12]
 800ac1c:	899b      	ldrh	r3, [r3, #12]
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7fb fbf9 	bl	8006418 <lwip_htons>
 800ac26:	4603      	mov	r3, r0
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	f003 0301 	and.w	r3, r3, #1
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d00d      	beq.n	800ac4e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	68db      	ldr	r3, [r3, #12]
 800ac36:	899b      	ldrh	r3, [r3, #12]
 800ac38:	b29c      	uxth	r4, r3
 800ac3a:	2001      	movs	r0, #1
 800ac3c:	f7fb fbec 	bl	8006418 <lwip_htons>
 800ac40:	4603      	mov	r3, r0
 800ac42:	461a      	mov	r2, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	4322      	orrs	r2, r4
 800ac4a:	b292      	uxth	r2, r2
 800ac4c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ac58:	68f8      	ldr	r0, [r7, #12]
 800ac5a:	f7fe fa52 	bl	8009102 <tcp_seg_free>
    while (next &&
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d00e      	beq.n	800ac82 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	891b      	ldrh	r3, [r3, #8]
 800ac68:	461a      	mov	r2, r3
 800ac6a:	4b1d      	ldr	r3, [pc, #116]	@ (800ace0 <tcp_oos_insert_segment+0x10c>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	441a      	add	r2, r3
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	6839      	ldr	r1, [r7, #0]
 800ac78:	8909      	ldrh	r1, [r1, #8]
 800ac7a:	440b      	add	r3, r1
 800ac7c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	daca      	bge.n	800ac18 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d01e      	beq.n	800acc6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	891b      	ldrh	r3, [r3, #8]
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	4b14      	ldr	r3, [pc, #80]	@ (800ace0 <tcp_oos_insert_segment+0x10c>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	441a      	add	r2, r3
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	dd12      	ble.n	800acc6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	b29a      	uxth	r2, r3
 800aca8:	4b0d      	ldr	r3, [pc, #52]	@ (800ace0 <tcp_oos_insert_segment+0x10c>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	b29b      	uxth	r3, r3
 800acae:	1ad3      	subs	r3, r2, r3
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	685a      	ldr	r2, [r3, #4]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	891b      	ldrh	r3, [r3, #8]
 800acbe:	4619      	mov	r1, r3
 800acc0:	4610      	mov	r0, r2
 800acc2:	f7fc fd81 	bl	80077c8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	683a      	ldr	r2, [r7, #0]
 800acca:	601a      	str	r2, [r3, #0]
}
 800accc:	bf00      	nop
 800acce:	3714      	adds	r7, #20
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd90      	pop	{r4, r7, pc}
 800acd4:	08012cf4 	.word	0x08012cf4
 800acd8:	08012fb4 	.word	0x08012fb4
 800acdc:	08012d40 	.word	0x08012d40
 800ace0:	20008854 	.word	0x20008854

0800ace4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ace4:	b5b0      	push	{r4, r5, r7, lr}
 800ace6:	b086      	sub	sp, #24
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	607a      	str	r2, [r7, #4]
 800acf0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800acf2:	e03e      	b.n	800ad72 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7fc ff6e 	bl	8007be4 <pbuf_clen>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ad12:	8a7a      	ldrh	r2, [r7, #18]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d906      	bls.n	800ad26 <tcp_free_acked_segments+0x42>
 800ad18:	4b2a      	ldr	r3, [pc, #168]	@ (800adc4 <tcp_free_acked_segments+0xe0>)
 800ad1a:	f240 4257 	movw	r2, #1111	@ 0x457
 800ad1e:	492a      	ldr	r1, [pc, #168]	@ (800adc8 <tcp_free_acked_segments+0xe4>)
 800ad20:	482a      	ldr	r0, [pc, #168]	@ (800adcc <tcp_free_acked_segments+0xe8>)
 800ad22:	f005 fd57 	bl	80107d4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800ad2c:	8a7b      	ldrh	r3, [r7, #18]
 800ad2e:	1ad3      	subs	r3, r2, r3
 800ad30:	b29a      	uxth	r2, r3
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	891a      	ldrh	r2, [r3, #8]
 800ad3c:	4b24      	ldr	r3, [pc, #144]	@ (800add0 <tcp_free_acked_segments+0xec>)
 800ad3e:	881b      	ldrh	r3, [r3, #0]
 800ad40:	4413      	add	r3, r2
 800ad42:	b29a      	uxth	r2, r3
 800ad44:	4b22      	ldr	r3, [pc, #136]	@ (800add0 <tcp_free_acked_segments+0xec>)
 800ad46:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ad48:	6978      	ldr	r0, [r7, #20]
 800ad4a:	f7fe f9da 	bl	8009102 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00c      	beq.n	800ad72 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d109      	bne.n	800ad72 <tcp_free_acked_segments+0x8e>
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d106      	bne.n	800ad72 <tcp_free_acked_segments+0x8e>
 800ad64:	4b17      	ldr	r3, [pc, #92]	@ (800adc4 <tcp_free_acked_segments+0xe0>)
 800ad66:	f240 4261 	movw	r2, #1121	@ 0x461
 800ad6a:	491a      	ldr	r1, [pc, #104]	@ (800add4 <tcp_free_acked_segments+0xf0>)
 800ad6c:	4817      	ldr	r0, [pc, #92]	@ (800adcc <tcp_free_acked_segments+0xe8>)
 800ad6e:	f005 fd31 	bl	80107d4 <iprintf>
  while (seg_list != NULL &&
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d020      	beq.n	800adba <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7fb fb5f 	bl	8006442 <lwip_htonl>
 800ad84:	4604      	mov	r4, r0
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	891b      	ldrh	r3, [r3, #8]
 800ad8a:	461d      	mov	r5, r3
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	899b      	ldrh	r3, [r3, #12]
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7fb fb3f 	bl	8006418 <lwip_htons>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	f003 0303 	and.w	r3, r3, #3
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d001      	beq.n	800adaa <tcp_free_acked_segments+0xc6>
 800ada6:	2301      	movs	r3, #1
 800ada8:	e000      	b.n	800adac <tcp_free_acked_segments+0xc8>
 800adaa:	2300      	movs	r3, #0
 800adac:	442b      	add	r3, r5
 800adae:	18e2      	adds	r2, r4, r3
 800adb0:	4b09      	ldr	r3, [pc, #36]	@ (800add8 <tcp_free_acked_segments+0xf4>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	dd9c      	ble.n	800acf4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800adba:	68bb      	ldr	r3, [r7, #8]
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3718      	adds	r7, #24
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bdb0      	pop	{r4, r5, r7, pc}
 800adc4:	08012cf4 	.word	0x08012cf4
 800adc8:	08012fdc 	.word	0x08012fdc
 800adcc:	08012d40 	.word	0x08012d40
 800add0:	2000885c 	.word	0x2000885c
 800add4:	08013004 	.word	0x08013004
 800add8:	20008858 	.word	0x20008858

0800addc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800addc:	b5b0      	push	{r4, r5, r7, lr}
 800adde:	b094      	sub	sp, #80	@ 0x50
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ade4:	2300      	movs	r3, #0
 800ade6:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d106      	bne.n	800adfc <tcp_receive+0x20>
 800adee:	4b91      	ldr	r3, [pc, #580]	@ (800b034 <tcp_receive+0x258>)
 800adf0:	f240 427b 	movw	r2, #1147	@ 0x47b
 800adf4:	4990      	ldr	r1, [pc, #576]	@ (800b038 <tcp_receive+0x25c>)
 800adf6:	4891      	ldr	r0, [pc, #580]	@ (800b03c <tcp_receive+0x260>)
 800adf8:	f005 fcec 	bl	80107d4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	7d1b      	ldrb	r3, [r3, #20]
 800ae00:	2b03      	cmp	r3, #3
 800ae02:	d806      	bhi.n	800ae12 <tcp_receive+0x36>
 800ae04:	4b8b      	ldr	r3, [pc, #556]	@ (800b034 <tcp_receive+0x258>)
 800ae06:	f240 427c 	movw	r2, #1148	@ 0x47c
 800ae0a:	498d      	ldr	r1, [pc, #564]	@ (800b040 <tcp_receive+0x264>)
 800ae0c:	488b      	ldr	r0, [pc, #556]	@ (800b03c <tcp_receive+0x260>)
 800ae0e:	f005 fce1 	bl	80107d4 <iprintf>

  if (flags & TCP_ACK) {
 800ae12:	4b8c      	ldr	r3, [pc, #560]	@ (800b044 <tcp_receive+0x268>)
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	f003 0310 	and.w	r3, r3, #16
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	f000 8264 	beq.w	800b2e8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae26:	461a      	mov	r2, r3
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae2c:	4413      	add	r3, r2
 800ae2e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ae34:	4b84      	ldr	r3, [pc, #528]	@ (800b048 <tcp_receive+0x26c>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	1ad3      	subs	r3, r2, r3
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	db1b      	blt.n	800ae76 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ae42:	4b81      	ldr	r3, [pc, #516]	@ (800b048 <tcp_receive+0x26c>)
 800ae44:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d106      	bne.n	800ae58 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ae4e:	4b7f      	ldr	r3, [pc, #508]	@ (800b04c <tcp_receive+0x270>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	1ad3      	subs	r3, r2, r3
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	db0e      	blt.n	800ae76 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ae5c:	4b7b      	ldr	r3, [pc, #492]	@ (800b04c <tcp_receive+0x270>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d125      	bne.n	800aeb0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ae64:	4b7a      	ldr	r3, [pc, #488]	@ (800b050 <tcp_receive+0x274>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	89db      	ldrh	r3, [r3, #14]
 800ae6a:	b29a      	uxth	r2, r3
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d91c      	bls.n	800aeb0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ae76:	4b76      	ldr	r3, [pc, #472]	@ (800b050 <tcp_receive+0x274>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	89db      	ldrh	r3, [r3, #14]
 800ae7c:	b29a      	uxth	r2, r3
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d205      	bcs.n	800aea0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800aea0:	4b69      	ldr	r3, [pc, #420]	@ (800b048 <tcp_receive+0x26c>)
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800aea8:	4b68      	ldr	r3, [pc, #416]	@ (800b04c <tcp_receive+0x270>)
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800aeb0:	4b66      	ldr	r3, [pc, #408]	@ (800b04c <tcp_receive+0x270>)
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aeb8:	1ad3      	subs	r3, r2, r3
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	dc58      	bgt.n	800af70 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800aebe:	4b65      	ldr	r3, [pc, #404]	@ (800b054 <tcp_receive+0x278>)
 800aec0:	881b      	ldrh	r3, [r3, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d14b      	bne.n	800af5e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800aed0:	4413      	add	r3, r2
 800aed2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d142      	bne.n	800af5e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800aede:	2b00      	cmp	r3, #0
 800aee0:	db3d      	blt.n	800af5e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aee6:	4b59      	ldr	r3, [pc, #356]	@ (800b04c <tcp_receive+0x270>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d137      	bne.n	800af5e <tcp_receive+0x182>
              found_dupack = 1;
 800aeee:	2301      	movs	r3, #1
 800aef0:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800aef8:	2bff      	cmp	r3, #255	@ 0xff
 800aefa:	d007      	beq.n	800af0c <tcp_receive+0x130>
                ++pcb->dupacks;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800af02:	3301      	adds	r3, #1
 800af04:	b2da      	uxtb	r2, r3
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800af12:	2b03      	cmp	r3, #3
 800af14:	d91b      	bls.n	800af4e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800af20:	4413      	add	r3, r2
 800af22:	b29a      	uxth	r2, r3
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d30a      	bcc.n	800af44 <tcp_receive+0x168>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800af38:	4413      	add	r3, r2
 800af3a:	b29a      	uxth	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800af42:	e004      	b.n	800af4e <tcp_receive+0x172>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800af4a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800af54:	2b02      	cmp	r3, #2
 800af56:	d902      	bls.n	800af5e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f001 fee7 	bl	800cd2c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800af5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af60:	2b00      	cmp	r3, #0
 800af62:	f040 8161 	bne.w	800b228 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2200      	movs	r2, #0
 800af6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800af6e:	e15b      	b.n	800b228 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800af70:	4b36      	ldr	r3, [pc, #216]	@ (800b04c <tcp_receive+0x270>)
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af78:	1ad3      	subs	r3, r2, r3
 800af7a:	3b01      	subs	r3, #1
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	f2c0 814e 	blt.w	800b21e <tcp_receive+0x442>
 800af82:	4b32      	ldr	r3, [pc, #200]	@ (800b04c <tcp_receive+0x270>)
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af8a:	1ad3      	subs	r3, r2, r3
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f300 8146 	bgt.w	800b21e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	8b5b      	ldrh	r3, [r3, #26]
 800af96:	f003 0304 	and.w	r3, r3, #4
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d010      	beq.n	800afc0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	8b5b      	ldrh	r3, [r3, #26]
 800afa2:	f023 0304 	bic.w	r3, r3, #4
 800afa6:	b29a      	uxth	r2, r3
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800afce:	10db      	asrs	r3, r3, #3
 800afd0:	b21b      	sxth	r3, r3
 800afd2:	b29a      	uxth	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800afda:	b29b      	uxth	r3, r3
 800afdc:	4413      	add	r3, r2
 800afde:	b29b      	uxth	r3, r3
 800afe0:	b21a      	sxth	r2, r3
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800afe8:	4b18      	ldr	r3, [pc, #96]	@ (800b04c <tcp_receive+0x270>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	b29a      	uxth	r2, r3
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	1ad3      	subs	r3, r2, r3
 800aff6:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2200      	movs	r2, #0
 800affc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800b000:	4b12      	ldr	r3, [pc, #72]	@ (800b04c <tcp_receive+0x270>)
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	7d1b      	ldrb	r3, [r3, #20]
 800b00c:	2b03      	cmp	r3, #3
 800b00e:	f240 8097 	bls.w	800b140 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800b01e:	429a      	cmp	r2, r3
 800b020:	d245      	bcs.n	800b0ae <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	8b5b      	ldrh	r3, [r3, #26]
 800b026:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d014      	beq.n	800b058 <tcp_receive+0x27c>
 800b02e:	2301      	movs	r3, #1
 800b030:	e013      	b.n	800b05a <tcp_receive+0x27e>
 800b032:	bf00      	nop
 800b034:	08012cf4 	.word	0x08012cf4
 800b038:	08013024 	.word	0x08013024
 800b03c:	08012d40 	.word	0x08012d40
 800b040:	08013040 	.word	0x08013040
 800b044:	20008860 	.word	0x20008860
 800b048:	20008854 	.word	0x20008854
 800b04c:	20008858 	.word	0x20008858
 800b050:	20008844 	.word	0x20008844
 800b054:	2000885e 	.word	0x2000885e
 800b058:	2302      	movs	r3, #2
 800b05a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b05e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800b062:	b29a      	uxth	r2, r3
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b068:	fb12 f303 	smulbb	r3, r2, r3
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b070:	4293      	cmp	r3, r2
 800b072:	bf28      	it	cs
 800b074:	4613      	movcs	r3, r2
 800b076:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b07e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b080:	4413      	add	r3, r2
 800b082:	b29a      	uxth	r2, r3
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d309      	bcc.n	800b0a2 <tcp_receive+0x2c6>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b094:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b096:	4413      	add	r3, r2
 800b098:	b29a      	uxth	r2, r3
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b0a0:	e04e      	b.n	800b140 <tcp_receive+0x364>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b0a8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b0ac:	e048      	b.n	800b140 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b0b4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b0b6:	4413      	add	r3, r2
 800b0b8:	b29a      	uxth	r2, r3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d309      	bcc.n	800b0d8 <tcp_receive+0x2fc>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b0ca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b0cc:	4413      	add	r3, r2
 800b0ce:	b29a      	uxth	r2, r3
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b0d6:	e004      	b.n	800b0e2 <tcp_receive+0x306>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b0de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d326      	bcc.n	800b140 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b0fe:	1ad3      	subs	r3, r2, r3
 800b100:	b29a      	uxth	r2, r3
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b112:	4413      	add	r3, r2
 800b114:	b29a      	uxth	r2, r3
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d30a      	bcc.n	800b136 <tcp_receive+0x35a>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b12a:	4413      	add	r3, r2
 800b12c:	b29a      	uxth	r2, r3
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b134:	e004      	b.n	800b140 <tcp_receive+0x364>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b13c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b148:	4a98      	ldr	r2, [pc, #608]	@ (800b3ac <tcp_receive+0x5d0>)
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f7ff fdca 	bl	800ace4 <tcp_free_acked_segments>
 800b150:	4602      	mov	r2, r0
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b15e:	4a94      	ldr	r2, [pc, #592]	@ (800b3b0 <tcp_receive+0x5d4>)
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f7ff fdbf 	bl	800ace4 <tcp_free_acked_segments>
 800b166:	4602      	mov	r2, r0
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b170:	2b00      	cmp	r3, #0
 800b172:	d104      	bne.n	800b17e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b17a:	861a      	strh	r2, [r3, #48]	@ 0x30
 800b17c:	e002      	b.n	800b184 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2200      	movs	r2, #0
 800b182:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2200      	movs	r2, #0
 800b188:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d103      	bne.n	800b19a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800b1a0:	4b84      	ldr	r3, [pc, #528]	@ (800b3b4 <tcp_receive+0x5d8>)
 800b1a2:	881b      	ldrh	r3, [r3, #0]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	b29a      	uxth	r2, r3
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	8b5b      	ldrh	r3, [r3, #26]
 800b1b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d035      	beq.n	800b226 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d118      	bne.n	800b1f4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00c      	beq.n	800b1e4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7fb f933 	bl	8006442 <lwip_htonl>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	dc20      	bgt.n	800b226 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	8b5b      	ldrh	r3, [r3, #26]
 800b1e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b1ec:	b29a      	uxth	r2, r3
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b1f2:	e018      	b.n	800b226 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	4618      	mov	r0, r3
 800b202:	f7fb f91e 	bl	8006442 <lwip_htonl>
 800b206:	4603      	mov	r3, r0
 800b208:	1ae3      	subs	r3, r4, r3
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	dc0b      	bgt.n	800b226 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	8b5b      	ldrh	r3, [r3, #26]
 800b212:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b216:	b29a      	uxth	r2, r3
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b21c:	e003      	b.n	800b226 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f001 ff70 	bl	800d104 <tcp_send_empty_ack>
 800b224:	e000      	b.n	800b228 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b226:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d05b      	beq.n	800b2e8 <tcp_receive+0x50c>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b234:	4b60      	ldr	r3, [pc, #384]	@ (800b3b8 <tcp_receive+0x5dc>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	1ad3      	subs	r3, r2, r3
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	da54      	bge.n	800b2e8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b23e:	4b5f      	ldr	r3, [pc, #380]	@ (800b3bc <tcp_receive+0x5e0>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	b29a      	uxth	r2, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b248:	b29b      	uxth	r3, r3
 800b24a:	1ad3      	subs	r3, r2, r3
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b252:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b25c:	10db      	asrs	r3, r3, #3
 800b25e:	b21b      	sxth	r3, r3
 800b260:	b29b      	uxth	r3, r3
 800b262:	1ad3      	subs	r3, r2, r3
 800b264:	b29b      	uxth	r3, r3
 800b266:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b270:	b29a      	uxth	r2, r3
 800b272:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b276:	4413      	add	r3, r2
 800b278:	b29b      	uxth	r3, r3
 800b27a:	b21a      	sxth	r2, r3
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800b280:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800b284:	2b00      	cmp	r3, #0
 800b286:	da05      	bge.n	800b294 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800b288:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b28c:	425b      	negs	r3, r3
 800b28e:	b29b      	uxth	r3, r3
 800b290:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b294:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b29e:	109b      	asrs	r3, r3, #2
 800b2a0:	b21b      	sxth	r3, r3
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	1ad3      	subs	r3, r2, r3
 800b2a6:	b29b      	uxth	r3, r3
 800b2a8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b2b2:	b29a      	uxth	r2, r3
 800b2b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b2b8:	4413      	add	r3, r2
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	b21a      	sxth	r2, r3
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b2c8:	10db      	asrs	r3, r3, #3
 800b2ca:	b21b      	sxth	r3, r3
 800b2cc:	b29a      	uxth	r2, r3
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	4413      	add	r3, r2
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	b21a      	sxth	r2, r3
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b2e8:	4b35      	ldr	r3, [pc, #212]	@ (800b3c0 <tcp_receive+0x5e4>)
 800b2ea:	881b      	ldrh	r3, [r3, #0]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f000 84df 	beq.w	800bcb0 <tcp_receive+0xed4>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	7d1b      	ldrb	r3, [r3, #20]
 800b2f6:	2b06      	cmp	r3, #6
 800b2f8:	f200 84da 	bhi.w	800bcb0 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b300:	4b30      	ldr	r3, [pc, #192]	@ (800b3c4 <tcp_receive+0x5e8>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	1ad3      	subs	r3, r2, r3
 800b306:	3b01      	subs	r3, #1
 800b308:	2b00      	cmp	r3, #0
 800b30a:	f2c0 808f 	blt.w	800b42c <tcp_receive+0x650>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b312:	4b2b      	ldr	r3, [pc, #172]	@ (800b3c0 <tcp_receive+0x5e4>)
 800b314:	881b      	ldrh	r3, [r3, #0]
 800b316:	4619      	mov	r1, r3
 800b318:	4b2a      	ldr	r3, [pc, #168]	@ (800b3c4 <tcp_receive+0x5e8>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	440b      	add	r3, r1
 800b31e:	1ad3      	subs	r3, r2, r3
 800b320:	3301      	adds	r3, #1
 800b322:	2b00      	cmp	r3, #0
 800b324:	f300 8082 	bgt.w	800b42c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b328:	4b27      	ldr	r3, [pc, #156]	@ (800b3c8 <tcp_receive+0x5ec>)
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b332:	4b24      	ldr	r3, [pc, #144]	@ (800b3c4 <tcp_receive+0x5e8>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	1ad3      	subs	r3, r2, r3
 800b338:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b33a:	4b23      	ldr	r3, [pc, #140]	@ (800b3c8 <tcp_receive+0x5ec>)
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d106      	bne.n	800b350 <tcp_receive+0x574>
 800b342:	4b22      	ldr	r3, [pc, #136]	@ (800b3cc <tcp_receive+0x5f0>)
 800b344:	f240 5294 	movw	r2, #1428	@ 0x594
 800b348:	4921      	ldr	r1, [pc, #132]	@ (800b3d0 <tcp_receive+0x5f4>)
 800b34a:	4822      	ldr	r0, [pc, #136]	@ (800b3d4 <tcp_receive+0x5f8>)
 800b34c:	f005 fa42 	bl	80107d4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b352:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b356:	4293      	cmp	r3, r2
 800b358:	d906      	bls.n	800b368 <tcp_receive+0x58c>
 800b35a:	4b1c      	ldr	r3, [pc, #112]	@ (800b3cc <tcp_receive+0x5f0>)
 800b35c:	f240 5295 	movw	r2, #1429	@ 0x595
 800b360:	491d      	ldr	r1, [pc, #116]	@ (800b3d8 <tcp_receive+0x5fc>)
 800b362:	481c      	ldr	r0, [pc, #112]	@ (800b3d4 <tcp_receive+0x5f8>)
 800b364:	f005 fa36 	bl	80107d4 <iprintf>
      off = (u16_t)off32;
 800b368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b36a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b36e:	4b16      	ldr	r3, [pc, #88]	@ (800b3c8 <tcp_receive+0x5ec>)
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	891b      	ldrh	r3, [r3, #8]
 800b374:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b378:	429a      	cmp	r2, r3
 800b37a:	d906      	bls.n	800b38a <tcp_receive+0x5ae>
 800b37c:	4b13      	ldr	r3, [pc, #76]	@ (800b3cc <tcp_receive+0x5f0>)
 800b37e:	f240 5297 	movw	r2, #1431	@ 0x597
 800b382:	4916      	ldr	r1, [pc, #88]	@ (800b3dc <tcp_receive+0x600>)
 800b384:	4813      	ldr	r0, [pc, #76]	@ (800b3d4 <tcp_receive+0x5f8>)
 800b386:	f005 fa25 	bl	80107d4 <iprintf>
      inseg.len -= off;
 800b38a:	4b0f      	ldr	r3, [pc, #60]	@ (800b3c8 <tcp_receive+0x5ec>)
 800b38c:	891a      	ldrh	r2, [r3, #8]
 800b38e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b392:	1ad3      	subs	r3, r2, r3
 800b394:	b29a      	uxth	r2, r3
 800b396:	4b0c      	ldr	r3, [pc, #48]	@ (800b3c8 <tcp_receive+0x5ec>)
 800b398:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b39a:	4b0b      	ldr	r3, [pc, #44]	@ (800b3c8 <tcp_receive+0x5ec>)
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	891a      	ldrh	r2, [r3, #8]
 800b3a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b3a4:	1ad3      	subs	r3, r2, r3
 800b3a6:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800b3a8:	e02a      	b.n	800b400 <tcp_receive+0x624>
 800b3aa:	bf00      	nop
 800b3ac:	0801305c 	.word	0x0801305c
 800b3b0:	08013064 	.word	0x08013064
 800b3b4:	2000885c 	.word	0x2000885c
 800b3b8:	20008858 	.word	0x20008858
 800b3bc:	2000881c 	.word	0x2000881c
 800b3c0:	2000885e 	.word	0x2000885e
 800b3c4:	20008854 	.word	0x20008854
 800b3c8:	20008834 	.word	0x20008834
 800b3cc:	08012cf4 	.word	0x08012cf4
 800b3d0:	0801306c 	.word	0x0801306c
 800b3d4:	08012d40 	.word	0x08012d40
 800b3d8:	0801307c 	.word	0x0801307c
 800b3dc:	0801308c 	.word	0x0801308c
        off -= p->len;
 800b3e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3e2:	895b      	ldrh	r3, [r3, #10]
 800b3e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b3e8:	1ad3      	subs	r3, r2, r3
 800b3ea:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b3ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3f0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b3f2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b3f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b3fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800b400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b402:	895b      	ldrh	r3, [r3, #10]
 800b404:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b408:	429a      	cmp	r2, r3
 800b40a:	d8e9      	bhi.n	800b3e0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b40c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b410:	4619      	mov	r1, r3
 800b412:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b414:	f7fc fad8 	bl	80079c8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b41c:	4a90      	ldr	r2, [pc, #576]	@ (800b660 <tcp_receive+0x884>)
 800b41e:	6013      	str	r3, [r2, #0]
 800b420:	4b90      	ldr	r3, [pc, #576]	@ (800b664 <tcp_receive+0x888>)
 800b422:	68db      	ldr	r3, [r3, #12]
 800b424:	4a8e      	ldr	r2, [pc, #568]	@ (800b660 <tcp_receive+0x884>)
 800b426:	6812      	ldr	r2, [r2, #0]
 800b428:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b42a:	e00d      	b.n	800b448 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b42c:	4b8c      	ldr	r3, [pc, #560]	@ (800b660 <tcp_receive+0x884>)
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b434:	1ad3      	subs	r3, r2, r3
 800b436:	2b00      	cmp	r3, #0
 800b438:	da06      	bge.n	800b448 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	8b5b      	ldrh	r3, [r3, #26]
 800b43e:	f043 0302 	orr.w	r3, r3, #2
 800b442:	b29a      	uxth	r2, r3
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b448:	4b85      	ldr	r3, [pc, #532]	@ (800b660 <tcp_receive+0x884>)
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b450:	1ad3      	subs	r3, r2, r3
 800b452:	2b00      	cmp	r3, #0
 800b454:	f2c0 8427 	blt.w	800bca6 <tcp_receive+0xeca>
 800b458:	4b81      	ldr	r3, [pc, #516]	@ (800b660 <tcp_receive+0x884>)
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b460:	6879      	ldr	r1, [r7, #4]
 800b462:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b464:	440b      	add	r3, r1
 800b466:	1ad3      	subs	r3, r2, r3
 800b468:	3301      	adds	r3, #1
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	f300 841b 	bgt.w	800bca6 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b474:	4b7a      	ldr	r3, [pc, #488]	@ (800b660 <tcp_receive+0x884>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	429a      	cmp	r2, r3
 800b47a:	f040 8298 	bne.w	800b9ae <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b47e:	4b79      	ldr	r3, [pc, #484]	@ (800b664 <tcp_receive+0x888>)
 800b480:	891c      	ldrh	r4, [r3, #8]
 800b482:	4b78      	ldr	r3, [pc, #480]	@ (800b664 <tcp_receive+0x888>)
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	899b      	ldrh	r3, [r3, #12]
 800b488:	b29b      	uxth	r3, r3
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7fa ffc4 	bl	8006418 <lwip_htons>
 800b490:	4603      	mov	r3, r0
 800b492:	b2db      	uxtb	r3, r3
 800b494:	f003 0303 	and.w	r3, r3, #3
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d001      	beq.n	800b4a0 <tcp_receive+0x6c4>
 800b49c:	2301      	movs	r3, #1
 800b49e:	e000      	b.n	800b4a2 <tcp_receive+0x6c6>
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	4423      	add	r3, r4
 800b4a4:	b29a      	uxth	r2, r3
 800b4a6:	4b70      	ldr	r3, [pc, #448]	@ (800b668 <tcp_receive+0x88c>)
 800b4a8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b4ae:	4b6e      	ldr	r3, [pc, #440]	@ (800b668 <tcp_receive+0x88c>)
 800b4b0:	881b      	ldrh	r3, [r3, #0]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d274      	bcs.n	800b5a0 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b4b6:	4b6b      	ldr	r3, [pc, #428]	@ (800b664 <tcp_receive+0x888>)
 800b4b8:	68db      	ldr	r3, [r3, #12]
 800b4ba:	899b      	ldrh	r3, [r3, #12]
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7fa ffaa 	bl	8006418 <lwip_htons>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	f003 0301 	and.w	r3, r3, #1
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d01e      	beq.n	800b50e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b4d0:	4b64      	ldr	r3, [pc, #400]	@ (800b664 <tcp_receive+0x888>)
 800b4d2:	68db      	ldr	r3, [r3, #12]
 800b4d4:	899b      	ldrh	r3, [r3, #12]
 800b4d6:	b29b      	uxth	r3, r3
 800b4d8:	b21b      	sxth	r3, r3
 800b4da:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b4de:	b21c      	sxth	r4, r3
 800b4e0:	4b60      	ldr	r3, [pc, #384]	@ (800b664 <tcp_receive+0x888>)
 800b4e2:	68db      	ldr	r3, [r3, #12]
 800b4e4:	899b      	ldrh	r3, [r3, #12]
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7fa ff95 	bl	8006418 <lwip_htons>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	b2db      	uxtb	r3, r3
 800b4f2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7fa ff8d 	bl	8006418 <lwip_htons>
 800b4fe:	4603      	mov	r3, r0
 800b500:	b21b      	sxth	r3, r3
 800b502:	4323      	orrs	r3, r4
 800b504:	b21a      	sxth	r2, r3
 800b506:	4b57      	ldr	r3, [pc, #348]	@ (800b664 <tcp_receive+0x888>)
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	b292      	uxth	r2, r2
 800b50c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b512:	4b54      	ldr	r3, [pc, #336]	@ (800b664 <tcp_receive+0x888>)
 800b514:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b516:	4b53      	ldr	r3, [pc, #332]	@ (800b664 <tcp_receive+0x888>)
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	899b      	ldrh	r3, [r3, #12]
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	4618      	mov	r0, r3
 800b520:	f7fa ff7a 	bl	8006418 <lwip_htons>
 800b524:	4603      	mov	r3, r0
 800b526:	b2db      	uxtb	r3, r3
 800b528:	f003 0302 	and.w	r3, r3, #2
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d005      	beq.n	800b53c <tcp_receive+0x760>
            inseg.len -= 1;
 800b530:	4b4c      	ldr	r3, [pc, #304]	@ (800b664 <tcp_receive+0x888>)
 800b532:	891b      	ldrh	r3, [r3, #8]
 800b534:	3b01      	subs	r3, #1
 800b536:	b29a      	uxth	r2, r3
 800b538:	4b4a      	ldr	r3, [pc, #296]	@ (800b664 <tcp_receive+0x888>)
 800b53a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b53c:	4b49      	ldr	r3, [pc, #292]	@ (800b664 <tcp_receive+0x888>)
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	4a48      	ldr	r2, [pc, #288]	@ (800b664 <tcp_receive+0x888>)
 800b542:	8912      	ldrh	r2, [r2, #8]
 800b544:	4611      	mov	r1, r2
 800b546:	4618      	mov	r0, r3
 800b548:	f7fc f93e 	bl	80077c8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b54c:	4b45      	ldr	r3, [pc, #276]	@ (800b664 <tcp_receive+0x888>)
 800b54e:	891c      	ldrh	r4, [r3, #8]
 800b550:	4b44      	ldr	r3, [pc, #272]	@ (800b664 <tcp_receive+0x888>)
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	899b      	ldrh	r3, [r3, #12]
 800b556:	b29b      	uxth	r3, r3
 800b558:	4618      	mov	r0, r3
 800b55a:	f7fa ff5d 	bl	8006418 <lwip_htons>
 800b55e:	4603      	mov	r3, r0
 800b560:	b2db      	uxtb	r3, r3
 800b562:	f003 0303 	and.w	r3, r3, #3
 800b566:	2b00      	cmp	r3, #0
 800b568:	d001      	beq.n	800b56e <tcp_receive+0x792>
 800b56a:	2301      	movs	r3, #1
 800b56c:	e000      	b.n	800b570 <tcp_receive+0x794>
 800b56e:	2300      	movs	r3, #0
 800b570:	4423      	add	r3, r4
 800b572:	b29a      	uxth	r2, r3
 800b574:	4b3c      	ldr	r3, [pc, #240]	@ (800b668 <tcp_receive+0x88c>)
 800b576:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b578:	4b3b      	ldr	r3, [pc, #236]	@ (800b668 <tcp_receive+0x88c>)
 800b57a:	881b      	ldrh	r3, [r3, #0]
 800b57c:	461a      	mov	r2, r3
 800b57e:	4b38      	ldr	r3, [pc, #224]	@ (800b660 <tcp_receive+0x884>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	441a      	add	r2, r3
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b588:	6879      	ldr	r1, [r7, #4]
 800b58a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b58c:	440b      	add	r3, r1
 800b58e:	429a      	cmp	r2, r3
 800b590:	d006      	beq.n	800b5a0 <tcp_receive+0x7c4>
 800b592:	4b36      	ldr	r3, [pc, #216]	@ (800b66c <tcp_receive+0x890>)
 800b594:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800b598:	4935      	ldr	r1, [pc, #212]	@ (800b670 <tcp_receive+0x894>)
 800b59a:	4836      	ldr	r0, [pc, #216]	@ (800b674 <tcp_receive+0x898>)
 800b59c:	f005 f91a 	bl	80107d4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f000 80e6 	beq.w	800b776 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b5aa:	4b2e      	ldr	r3, [pc, #184]	@ (800b664 <tcp_receive+0x888>)
 800b5ac:	68db      	ldr	r3, [r3, #12]
 800b5ae:	899b      	ldrh	r3, [r3, #12]
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7fa ff30 	bl	8006418 <lwip_htons>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	f003 0301 	and.w	r3, r3, #1
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d010      	beq.n	800b5e6 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b5c4:	e00a      	b.n	800b5dc <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5ca:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5d0:	681a      	ldr	r2, [r3, #0]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800b5d6:	68f8      	ldr	r0, [r7, #12]
 800b5d8:	f7fd fd93 	bl	8009102 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d1f0      	bne.n	800b5c6 <tcp_receive+0x7ea>
 800b5e4:	e0c7      	b.n	800b776 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b5ec:	e051      	b.n	800b692 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b5ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5f0:	68db      	ldr	r3, [r3, #12]
 800b5f2:	899b      	ldrh	r3, [r3, #12]
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7fa ff0e 	bl	8006418 <lwip_htons>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	f003 0301 	and.w	r3, r3, #1
 800b604:	2b00      	cmp	r3, #0
 800b606:	d03c      	beq.n	800b682 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b608:	4b16      	ldr	r3, [pc, #88]	@ (800b664 <tcp_receive+0x888>)
 800b60a:	68db      	ldr	r3, [r3, #12]
 800b60c:	899b      	ldrh	r3, [r3, #12]
 800b60e:	b29b      	uxth	r3, r3
 800b610:	4618      	mov	r0, r3
 800b612:	f7fa ff01 	bl	8006418 <lwip_htons>
 800b616:	4603      	mov	r3, r0
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d12f      	bne.n	800b682 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b622:	4b10      	ldr	r3, [pc, #64]	@ (800b664 <tcp_receive+0x888>)
 800b624:	68db      	ldr	r3, [r3, #12]
 800b626:	899b      	ldrh	r3, [r3, #12]
 800b628:	b29c      	uxth	r4, r3
 800b62a:	2001      	movs	r0, #1
 800b62c:	f7fa fef4 	bl	8006418 <lwip_htons>
 800b630:	4603      	mov	r3, r0
 800b632:	461a      	mov	r2, r3
 800b634:	4b0b      	ldr	r3, [pc, #44]	@ (800b664 <tcp_receive+0x888>)
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	4322      	orrs	r2, r4
 800b63a:	b292      	uxth	r2, r2
 800b63c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b63e:	4b09      	ldr	r3, [pc, #36]	@ (800b664 <tcp_receive+0x888>)
 800b640:	891c      	ldrh	r4, [r3, #8]
 800b642:	4b08      	ldr	r3, [pc, #32]	@ (800b664 <tcp_receive+0x888>)
 800b644:	68db      	ldr	r3, [r3, #12]
 800b646:	899b      	ldrh	r3, [r3, #12]
 800b648:	b29b      	uxth	r3, r3
 800b64a:	4618      	mov	r0, r3
 800b64c:	f7fa fee4 	bl	8006418 <lwip_htons>
 800b650:	4603      	mov	r3, r0
 800b652:	b2db      	uxtb	r3, r3
 800b654:	f003 0303 	and.w	r3, r3, #3
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d00d      	beq.n	800b678 <tcp_receive+0x89c>
 800b65c:	2301      	movs	r3, #1
 800b65e:	e00c      	b.n	800b67a <tcp_receive+0x89e>
 800b660:	20008854 	.word	0x20008854
 800b664:	20008834 	.word	0x20008834
 800b668:	2000885e 	.word	0x2000885e
 800b66c:	08012cf4 	.word	0x08012cf4
 800b670:	0801309c 	.word	0x0801309c
 800b674:	08012d40 	.word	0x08012d40
 800b678:	2300      	movs	r3, #0
 800b67a:	4423      	add	r3, r4
 800b67c:	b29a      	uxth	r2, r3
 800b67e:	4b98      	ldr	r3, [pc, #608]	@ (800b8e0 <tcp_receive+0xb04>)
 800b680:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b684:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800b68c:	6938      	ldr	r0, [r7, #16]
 800b68e:	f7fd fd38 	bl	8009102 <tcp_seg_free>
            while (next &&
 800b692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b694:	2b00      	cmp	r3, #0
 800b696:	d00e      	beq.n	800b6b6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b698:	4b91      	ldr	r3, [pc, #580]	@ (800b8e0 <tcp_receive+0xb04>)
 800b69a:	881b      	ldrh	r3, [r3, #0]
 800b69c:	461a      	mov	r2, r3
 800b69e:	4b91      	ldr	r3, [pc, #580]	@ (800b8e4 <tcp_receive+0xb08>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	441a      	add	r2, r3
 800b6a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b6ac:	8909      	ldrh	r1, [r1, #8]
 800b6ae:	440b      	add	r3, r1
 800b6b0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	da9b      	bge.n	800b5ee <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b6b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d059      	beq.n	800b770 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800b6bc:	4b88      	ldr	r3, [pc, #544]	@ (800b8e0 <tcp_receive+0xb04>)
 800b6be:	881b      	ldrh	r3, [r3, #0]
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	4b88      	ldr	r3, [pc, #544]	@ (800b8e4 <tcp_receive+0xb08>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	441a      	add	r2, r3
 800b6c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6ca:	68db      	ldr	r3, [r3, #12]
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	dd4d      	ble.n	800b770 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b6d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	b29a      	uxth	r2, r3
 800b6dc:	4b81      	ldr	r3, [pc, #516]	@ (800b8e4 <tcp_receive+0xb08>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	b29b      	uxth	r3, r3
 800b6e2:	1ad3      	subs	r3, r2, r3
 800b6e4:	b29a      	uxth	r2, r3
 800b6e6:	4b80      	ldr	r3, [pc, #512]	@ (800b8e8 <tcp_receive+0xb0c>)
 800b6e8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b6ea:	4b7f      	ldr	r3, [pc, #508]	@ (800b8e8 <tcp_receive+0xb0c>)
 800b6ec:	68db      	ldr	r3, [r3, #12]
 800b6ee:	899b      	ldrh	r3, [r3, #12]
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f7fa fe90 	bl	8006418 <lwip_htons>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	f003 0302 	and.w	r3, r3, #2
 800b700:	2b00      	cmp	r3, #0
 800b702:	d005      	beq.n	800b710 <tcp_receive+0x934>
                inseg.len -= 1;
 800b704:	4b78      	ldr	r3, [pc, #480]	@ (800b8e8 <tcp_receive+0xb0c>)
 800b706:	891b      	ldrh	r3, [r3, #8]
 800b708:	3b01      	subs	r3, #1
 800b70a:	b29a      	uxth	r2, r3
 800b70c:	4b76      	ldr	r3, [pc, #472]	@ (800b8e8 <tcp_receive+0xb0c>)
 800b70e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b710:	4b75      	ldr	r3, [pc, #468]	@ (800b8e8 <tcp_receive+0xb0c>)
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	4a74      	ldr	r2, [pc, #464]	@ (800b8e8 <tcp_receive+0xb0c>)
 800b716:	8912      	ldrh	r2, [r2, #8]
 800b718:	4611      	mov	r1, r2
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7fc f854 	bl	80077c8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b720:	4b71      	ldr	r3, [pc, #452]	@ (800b8e8 <tcp_receive+0xb0c>)
 800b722:	891c      	ldrh	r4, [r3, #8]
 800b724:	4b70      	ldr	r3, [pc, #448]	@ (800b8e8 <tcp_receive+0xb0c>)
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	899b      	ldrh	r3, [r3, #12]
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7fa fe73 	bl	8006418 <lwip_htons>
 800b732:	4603      	mov	r3, r0
 800b734:	b2db      	uxtb	r3, r3
 800b736:	f003 0303 	and.w	r3, r3, #3
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d001      	beq.n	800b742 <tcp_receive+0x966>
 800b73e:	2301      	movs	r3, #1
 800b740:	e000      	b.n	800b744 <tcp_receive+0x968>
 800b742:	2300      	movs	r3, #0
 800b744:	4423      	add	r3, r4
 800b746:	b29a      	uxth	r2, r3
 800b748:	4b65      	ldr	r3, [pc, #404]	@ (800b8e0 <tcp_receive+0xb04>)
 800b74a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b74c:	4b64      	ldr	r3, [pc, #400]	@ (800b8e0 <tcp_receive+0xb04>)
 800b74e:	881b      	ldrh	r3, [r3, #0]
 800b750:	461a      	mov	r2, r3
 800b752:	4b64      	ldr	r3, [pc, #400]	@ (800b8e4 <tcp_receive+0xb08>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	441a      	add	r2, r3
 800b758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b75a:	68db      	ldr	r3, [r3, #12]
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	429a      	cmp	r2, r3
 800b760:	d006      	beq.n	800b770 <tcp_receive+0x994>
 800b762:	4b62      	ldr	r3, [pc, #392]	@ (800b8ec <tcp_receive+0xb10>)
 800b764:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800b768:	4961      	ldr	r1, [pc, #388]	@ (800b8f0 <tcp_receive+0xb14>)
 800b76a:	4862      	ldr	r0, [pc, #392]	@ (800b8f4 <tcp_receive+0xb18>)
 800b76c:	f005 f832 	bl	80107d4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b774:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b776:	4b5a      	ldr	r3, [pc, #360]	@ (800b8e0 <tcp_receive+0xb04>)
 800b778:	881b      	ldrh	r3, [r3, #0]
 800b77a:	461a      	mov	r2, r3
 800b77c:	4b59      	ldr	r3, [pc, #356]	@ (800b8e4 <tcp_receive+0xb08>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	441a      	add	r2, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b78a:	4b55      	ldr	r3, [pc, #340]	@ (800b8e0 <tcp_receive+0xb04>)
 800b78c:	881b      	ldrh	r3, [r3, #0]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d206      	bcs.n	800b7a0 <tcp_receive+0x9c4>
 800b792:	4b56      	ldr	r3, [pc, #344]	@ (800b8ec <tcp_receive+0xb10>)
 800b794:	f240 6207 	movw	r2, #1543	@ 0x607
 800b798:	4957      	ldr	r1, [pc, #348]	@ (800b8f8 <tcp_receive+0xb1c>)
 800b79a:	4856      	ldr	r0, [pc, #344]	@ (800b8f4 <tcp_receive+0xb18>)
 800b79c:	f005 f81a 	bl	80107d4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b7a4:	4b4e      	ldr	r3, [pc, #312]	@ (800b8e0 <tcp_receive+0xb04>)
 800b7a6:	881b      	ldrh	r3, [r3, #0]
 800b7a8:	1ad3      	subs	r3, r2, r3
 800b7aa:	b29a      	uxth	r2, r3
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f7fc ffc5 	bl	8008740 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b7b6:	4b4c      	ldr	r3, [pc, #304]	@ (800b8e8 <tcp_receive+0xb0c>)
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	891b      	ldrh	r3, [r3, #8]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d006      	beq.n	800b7ce <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800b7c0:	4b49      	ldr	r3, [pc, #292]	@ (800b8e8 <tcp_receive+0xb0c>)
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	4a4d      	ldr	r2, [pc, #308]	@ (800b8fc <tcp_receive+0xb20>)
 800b7c6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b7c8:	4b47      	ldr	r3, [pc, #284]	@ (800b8e8 <tcp_receive+0xb0c>)
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b7ce:	4b46      	ldr	r3, [pc, #280]	@ (800b8e8 <tcp_receive+0xb0c>)
 800b7d0:	68db      	ldr	r3, [r3, #12]
 800b7d2:	899b      	ldrh	r3, [r3, #12]
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7fa fe1e 	bl	8006418 <lwip_htons>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	b2db      	uxtb	r3, r3
 800b7e0:	f003 0301 	and.w	r3, r3, #1
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	f000 80b8 	beq.w	800b95a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b7ea:	4b45      	ldr	r3, [pc, #276]	@ (800b900 <tcp_receive+0xb24>)
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	f043 0320 	orr.w	r3, r3, #32
 800b7f2:	b2da      	uxtb	r2, r3
 800b7f4:	4b42      	ldr	r3, [pc, #264]	@ (800b900 <tcp_receive+0xb24>)
 800b7f6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b7f8:	e0af      	b.n	800b95a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7fe:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b804:	68db      	ldr	r3, [r3, #12]
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	4a36      	ldr	r2, [pc, #216]	@ (800b8e4 <tcp_receive+0xb08>)
 800b80a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	891b      	ldrh	r3, [r3, #8]
 800b810:	461c      	mov	r4, r3
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	899b      	ldrh	r3, [r3, #12]
 800b818:	b29b      	uxth	r3, r3
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7fa fdfc 	bl	8006418 <lwip_htons>
 800b820:	4603      	mov	r3, r0
 800b822:	b2db      	uxtb	r3, r3
 800b824:	f003 0303 	and.w	r3, r3, #3
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d001      	beq.n	800b830 <tcp_receive+0xa54>
 800b82c:	2301      	movs	r3, #1
 800b82e:	e000      	b.n	800b832 <tcp_receive+0xa56>
 800b830:	2300      	movs	r3, #0
 800b832:	191a      	adds	r2, r3, r4
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b838:	441a      	add	r2, r3
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b842:	461c      	mov	r4, r3
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	891b      	ldrh	r3, [r3, #8]
 800b848:	461d      	mov	r5, r3
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	68db      	ldr	r3, [r3, #12]
 800b84e:	899b      	ldrh	r3, [r3, #12]
 800b850:	b29b      	uxth	r3, r3
 800b852:	4618      	mov	r0, r3
 800b854:	f7fa fde0 	bl	8006418 <lwip_htons>
 800b858:	4603      	mov	r3, r0
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	f003 0303 	and.w	r3, r3, #3
 800b860:	2b00      	cmp	r3, #0
 800b862:	d001      	beq.n	800b868 <tcp_receive+0xa8c>
 800b864:	2301      	movs	r3, #1
 800b866:	e000      	b.n	800b86a <tcp_receive+0xa8e>
 800b868:	2300      	movs	r3, #0
 800b86a:	442b      	add	r3, r5
 800b86c:	429c      	cmp	r4, r3
 800b86e:	d206      	bcs.n	800b87e <tcp_receive+0xaa2>
 800b870:	4b1e      	ldr	r3, [pc, #120]	@ (800b8ec <tcp_receive+0xb10>)
 800b872:	f240 622b 	movw	r2, #1579	@ 0x62b
 800b876:	4923      	ldr	r1, [pc, #140]	@ (800b904 <tcp_receive+0xb28>)
 800b878:	481e      	ldr	r0, [pc, #120]	@ (800b8f4 <tcp_receive+0xb18>)
 800b87a:	f004 ffab 	bl	80107d4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	891b      	ldrh	r3, [r3, #8]
 800b882:	461c      	mov	r4, r3
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	68db      	ldr	r3, [r3, #12]
 800b888:	899b      	ldrh	r3, [r3, #12]
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7fa fdc3 	bl	8006418 <lwip_htons>
 800b892:	4603      	mov	r3, r0
 800b894:	b2db      	uxtb	r3, r3
 800b896:	f003 0303 	and.w	r3, r3, #3
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d001      	beq.n	800b8a2 <tcp_receive+0xac6>
 800b89e:	2301      	movs	r3, #1
 800b8a0:	e000      	b.n	800b8a4 <tcp_receive+0xac8>
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	1919      	adds	r1, r3, r4
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b8aa:	b28b      	uxth	r3, r1
 800b8ac:	1ad3      	subs	r3, r2, r3
 800b8ae:	b29a      	uxth	r2, r3
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f7fc ff43 	bl	8008740 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	891b      	ldrh	r3, [r3, #8]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d028      	beq.n	800b916 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b8c4:	4b0d      	ldr	r3, [pc, #52]	@ (800b8fc <tcp_receive+0xb20>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d01d      	beq.n	800b908 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800b8cc:	4b0b      	ldr	r3, [pc, #44]	@ (800b8fc <tcp_receive+0xb20>)
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	4610      	mov	r0, r2
 800b8d8:	f7fc f9be 	bl	8007c58 <pbuf_cat>
 800b8dc:	e018      	b.n	800b910 <tcp_receive+0xb34>
 800b8de:	bf00      	nop
 800b8e0:	2000885e 	.word	0x2000885e
 800b8e4:	20008854 	.word	0x20008854
 800b8e8:	20008834 	.word	0x20008834
 800b8ec:	08012cf4 	.word	0x08012cf4
 800b8f0:	080130d4 	.word	0x080130d4
 800b8f4:	08012d40 	.word	0x08012d40
 800b8f8:	08013110 	.word	0x08013110
 800b8fc:	20008864 	.word	0x20008864
 800b900:	20008861 	.word	0x20008861
 800b904:	08013130 	.word	0x08013130
            } else {
              recv_data = cseg->p;
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	4a70      	ldr	r2, [pc, #448]	@ (800bad0 <tcp_receive+0xcf4>)
 800b90e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	2200      	movs	r2, #0
 800b914:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	68db      	ldr	r3, [r3, #12]
 800b91a:	899b      	ldrh	r3, [r3, #12]
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	4618      	mov	r0, r3
 800b920:	f7fa fd7a 	bl	8006418 <lwip_htons>
 800b924:	4603      	mov	r3, r0
 800b926:	b2db      	uxtb	r3, r3
 800b928:	f003 0301 	and.w	r3, r3, #1
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d00d      	beq.n	800b94c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b930:	4b68      	ldr	r3, [pc, #416]	@ (800bad4 <tcp_receive+0xcf8>)
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	f043 0320 	orr.w	r3, r3, #32
 800b938:	b2da      	uxtb	r2, r3
 800b93a:	4b66      	ldr	r3, [pc, #408]	@ (800bad4 <tcp_receive+0xcf8>)
 800b93c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	7d1b      	ldrb	r3, [r3, #20]
 800b942:	2b04      	cmp	r3, #4
 800b944:	d102      	bne.n	800b94c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2207      	movs	r2, #7
 800b94a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800b954:	68b8      	ldr	r0, [r7, #8]
 800b956:	f7fd fbd4 	bl	8009102 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d008      	beq.n	800b974 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	685a      	ldr	r2, [r3, #4]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800b96e:	429a      	cmp	r2, r3
 800b970:	f43f af43 	beq.w	800b7fa <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	8b5b      	ldrh	r3, [r3, #26]
 800b978:	f003 0301 	and.w	r3, r3, #1
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00e      	beq.n	800b99e <tcp_receive+0xbc2>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	8b5b      	ldrh	r3, [r3, #26]
 800b984:	f023 0301 	bic.w	r3, r3, #1
 800b988:	b29a      	uxth	r2, r3
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	835a      	strh	r2, [r3, #26]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	8b5b      	ldrh	r3, [r3, #26]
 800b992:	f043 0302 	orr.w	r3, r3, #2
 800b996:	b29a      	uxth	r2, r3
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b99c:	e187      	b.n	800bcae <tcp_receive+0xed2>
        tcp_ack(pcb);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	8b5b      	ldrh	r3, [r3, #26]
 800b9a2:	f043 0301 	orr.w	r3, r3, #1
 800b9a6:	b29a      	uxth	r2, r3
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b9ac:	e17f      	b.n	800bcae <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d106      	bne.n	800b9c4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b9b6:	4848      	ldr	r0, [pc, #288]	@ (800bad8 <tcp_receive+0xcfc>)
 800b9b8:	f7fd fbbc 	bl	8009134 <tcp_seg_copy>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	675a      	str	r2, [r3, #116]	@ 0x74
 800b9c2:	e16c      	b.n	800bc9e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b9ce:	e156      	b.n	800bc7e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800b9d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9d2:	68db      	ldr	r3, [r3, #12]
 800b9d4:	685a      	ldr	r2, [r3, #4]
 800b9d6:	4b41      	ldr	r3, [pc, #260]	@ (800badc <tcp_receive+0xd00>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d11d      	bne.n	800ba1a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b9de:	4b3e      	ldr	r3, [pc, #248]	@ (800bad8 <tcp_receive+0xcfc>)
 800b9e0:	891a      	ldrh	r2, [r3, #8]
 800b9e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9e4:	891b      	ldrh	r3, [r3, #8]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	f240 814e 	bls.w	800bc88 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b9ec:	483a      	ldr	r0, [pc, #232]	@ (800bad8 <tcp_receive+0xcfc>)
 800b9ee:	f7fd fba1 	bl	8009134 <tcp_seg_copy>
 800b9f2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	f000 8148 	beq.w	800bc8c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800b9fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d003      	beq.n	800ba0a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ba02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba04:	697a      	ldr	r2, [r7, #20]
 800ba06:	601a      	str	r2, [r3, #0]
 800ba08:	e002      	b.n	800ba10 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	697a      	ldr	r2, [r7, #20]
 800ba0e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ba10:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ba12:	6978      	ldr	r0, [r7, #20]
 800ba14:	f7ff f8de 	bl	800abd4 <tcp_oos_insert_segment>
                }
                break;
 800ba18:	e138      	b.n	800bc8c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ba1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d117      	bne.n	800ba50 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ba20:	4b2e      	ldr	r3, [pc, #184]	@ (800badc <tcp_receive+0xd00>)
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba26:	68db      	ldr	r3, [r3, #12]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	1ad3      	subs	r3, r2, r3
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	da57      	bge.n	800bae0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ba30:	4829      	ldr	r0, [pc, #164]	@ (800bad8 <tcp_receive+0xcfc>)
 800ba32:	f7fd fb7f 	bl	8009134 <tcp_seg_copy>
 800ba36:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	f000 8128 	beq.w	800bc90 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	69ba      	ldr	r2, [r7, #24]
 800ba44:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ba46:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ba48:	69b8      	ldr	r0, [r7, #24]
 800ba4a:	f7ff f8c3 	bl	800abd4 <tcp_oos_insert_segment>
                  }
                  break;
 800ba4e:	e11f      	b.n	800bc90 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ba50:	4b22      	ldr	r3, [pc, #136]	@ (800badc <tcp_receive+0xd00>)
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba56:	68db      	ldr	r3, [r3, #12]
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	1ad3      	subs	r3, r2, r3
 800ba5c:	3b01      	subs	r3, #1
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	db3e      	blt.n	800bae0 <tcp_receive+0xd04>
 800ba62:	4b1e      	ldr	r3, [pc, #120]	@ (800badc <tcp_receive+0xd00>)
 800ba64:	681a      	ldr	r2, [r3, #0]
 800ba66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba68:	68db      	ldr	r3, [r3, #12]
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	1ad3      	subs	r3, r2, r3
 800ba6e:	3301      	adds	r3, #1
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	dc35      	bgt.n	800bae0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ba74:	4818      	ldr	r0, [pc, #96]	@ (800bad8 <tcp_receive+0xcfc>)
 800ba76:	f7fd fb5d 	bl	8009134 <tcp_seg_copy>
 800ba7a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ba7c:	69fb      	ldr	r3, [r7, #28]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	f000 8108 	beq.w	800bc94 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ba84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba86:	68db      	ldr	r3, [r3, #12]
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ba8c:	8912      	ldrh	r2, [r2, #8]
 800ba8e:	441a      	add	r2, r3
 800ba90:	4b12      	ldr	r3, [pc, #72]	@ (800badc <tcp_receive+0xd00>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	1ad3      	subs	r3, r2, r3
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	dd12      	ble.n	800bac0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ba9a:	4b10      	ldr	r3, [pc, #64]	@ (800badc <tcp_receive+0xd00>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	1ad3      	subs	r3, r2, r3
 800baaa:	b29a      	uxth	r2, r3
 800baac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baae:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800bab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bab2:	685a      	ldr	r2, [r3, #4]
 800bab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bab6:	891b      	ldrh	r3, [r3, #8]
 800bab8:	4619      	mov	r1, r3
 800baba:	4610      	mov	r0, r2
 800babc:	f7fb fe84 	bl	80077c8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800bac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bac2:	69fa      	ldr	r2, [r7, #28]
 800bac4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800bac6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bac8:	69f8      	ldr	r0, [r7, #28]
 800baca:	f7ff f883 	bl	800abd4 <tcp_oos_insert_segment>
                  }
                  break;
 800bace:	e0e1      	b.n	800bc94 <tcp_receive+0xeb8>
 800bad0:	20008864 	.word	0x20008864
 800bad4:	20008861 	.word	0x20008861
 800bad8:	20008834 	.word	0x20008834
 800badc:	20008854 	.word	0x20008854
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800bae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae2:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800bae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	f040 80c5 	bne.w	800bc78 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800baee:	4b7f      	ldr	r3, [pc, #508]	@ (800bcec <tcp_receive+0xf10>)
 800baf0:	681a      	ldr	r2, [r3, #0]
 800baf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf4:	68db      	ldr	r3, [r3, #12]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	f340 80bc 	ble.w	800bc78 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bb00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb02:	68db      	ldr	r3, [r3, #12]
 800bb04:	899b      	ldrh	r3, [r3, #12]
 800bb06:	b29b      	uxth	r3, r3
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f7fa fc85 	bl	8006418 <lwip_htons>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	f003 0301 	and.w	r3, r3, #1
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	f040 80be 	bne.w	800bc98 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800bb1c:	4874      	ldr	r0, [pc, #464]	@ (800bcf0 <tcp_receive+0xf14>)
 800bb1e:	f7fd fb09 	bl	8009134 <tcp_seg_copy>
 800bb22:	4602      	mov	r2, r0
 800bb24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb26:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800bb28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	f000 80b5 	beq.w	800bc9c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800bb32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb34:	68db      	ldr	r3, [r3, #12]
 800bb36:	685b      	ldr	r3, [r3, #4]
 800bb38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb3a:	8912      	ldrh	r2, [r2, #8]
 800bb3c:	441a      	add	r2, r3
 800bb3e:	4b6b      	ldr	r3, [pc, #428]	@ (800bcec <tcp_receive+0xf10>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	1ad3      	subs	r3, r2, r3
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	dd12      	ble.n	800bb6e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800bb48:	4b68      	ldr	r3, [pc, #416]	@ (800bcec <tcp_receive+0xf10>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	b29a      	uxth	r2, r3
 800bb4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	1ad3      	subs	r3, r2, r3
 800bb58:	b29a      	uxth	r2, r3
 800bb5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb5c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800bb5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb60:	685a      	ldr	r2, [r3, #4]
 800bb62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb64:	891b      	ldrh	r3, [r3, #8]
 800bb66:	4619      	mov	r1, r3
 800bb68:	4610      	mov	r0, r2
 800bb6a:	f7fb fe2d 	bl	80077c8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800bb6e:	4b61      	ldr	r3, [pc, #388]	@ (800bcf4 <tcp_receive+0xf18>)
 800bb70:	881b      	ldrh	r3, [r3, #0]
 800bb72:	461a      	mov	r2, r3
 800bb74:	4b5d      	ldr	r3, [pc, #372]	@ (800bcec <tcp_receive+0xf10>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	441a      	add	r2, r3
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb7e:	6879      	ldr	r1, [r7, #4]
 800bb80:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bb82:	440b      	add	r3, r1
 800bb84:	1ad3      	subs	r3, r2, r3
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	f340 8088 	ble.w	800bc9c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800bb8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	899b      	ldrh	r3, [r3, #12]
 800bb94:	b29b      	uxth	r3, r3
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7fa fc3e 	bl	8006418 <lwip_htons>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	f003 0301 	and.w	r3, r3, #1
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d021      	beq.n	800bbec <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800bba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	68db      	ldr	r3, [r3, #12]
 800bbae:	899b      	ldrh	r3, [r3, #12]
 800bbb0:	b29b      	uxth	r3, r3
 800bbb2:	b21b      	sxth	r3, r3
 800bbb4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bbb8:	b21c      	sxth	r4, r3
 800bbba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	68db      	ldr	r3, [r3, #12]
 800bbc0:	899b      	ldrh	r3, [r3, #12]
 800bbc2:	b29b      	uxth	r3, r3
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f7fa fc27 	bl	8006418 <lwip_htons>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	b2db      	uxtb	r3, r3
 800bbce:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f7fa fc1f 	bl	8006418 <lwip_htons>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	b21b      	sxth	r3, r3
 800bbde:	4323      	orrs	r3, r4
 800bbe0:	b21a      	sxth	r2, r3
 800bbe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	b292      	uxth	r2, r2
 800bbea:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbf0:	b29a      	uxth	r2, r3
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bbf6:	4413      	add	r3, r2
 800bbf8:	b299      	uxth	r1, r3
 800bbfa:	4b3c      	ldr	r3, [pc, #240]	@ (800bcec <tcp_receive+0xf10>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	b29a      	uxth	r2, r3
 800bc00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	1a8a      	subs	r2, r1, r2
 800bc06:	b292      	uxth	r2, r2
 800bc08:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800bc0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	685a      	ldr	r2, [r3, #4]
 800bc10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	891b      	ldrh	r3, [r3, #8]
 800bc16:	4619      	mov	r1, r3
 800bc18:	4610      	mov	r0, r2
 800bc1a:	f7fb fdd5 	bl	80077c8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800bc1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	891c      	ldrh	r4, [r3, #8]
 800bc24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	68db      	ldr	r3, [r3, #12]
 800bc2a:	899b      	ldrh	r3, [r3, #12]
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7fa fbf2 	bl	8006418 <lwip_htons>
 800bc34:	4603      	mov	r3, r0
 800bc36:	b2db      	uxtb	r3, r3
 800bc38:	f003 0303 	and.w	r3, r3, #3
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d001      	beq.n	800bc44 <tcp_receive+0xe68>
 800bc40:	2301      	movs	r3, #1
 800bc42:	e000      	b.n	800bc46 <tcp_receive+0xe6a>
 800bc44:	2300      	movs	r3, #0
 800bc46:	4423      	add	r3, r4
 800bc48:	b29a      	uxth	r2, r3
 800bc4a:	4b2a      	ldr	r3, [pc, #168]	@ (800bcf4 <tcp_receive+0xf18>)
 800bc4c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bc4e:	4b29      	ldr	r3, [pc, #164]	@ (800bcf4 <tcp_receive+0xf18>)
 800bc50:	881b      	ldrh	r3, [r3, #0]
 800bc52:	461a      	mov	r2, r3
 800bc54:	4b25      	ldr	r3, [pc, #148]	@ (800bcec <tcp_receive+0xf10>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	441a      	add	r2, r3
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc5e:	6879      	ldr	r1, [r7, #4]
 800bc60:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bc62:	440b      	add	r3, r1
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d019      	beq.n	800bc9c <tcp_receive+0xec0>
 800bc68:	4b23      	ldr	r3, [pc, #140]	@ (800bcf8 <tcp_receive+0xf1c>)
 800bc6a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800bc6e:	4923      	ldr	r1, [pc, #140]	@ (800bcfc <tcp_receive+0xf20>)
 800bc70:	4823      	ldr	r0, [pc, #140]	@ (800bd00 <tcp_receive+0xf24>)
 800bc72:	f004 fdaf 	bl	80107d4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800bc76:	e011      	b.n	800bc9c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bc78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bc7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	f47f aea5 	bne.w	800b9d0 <tcp_receive+0xbf4>
 800bc86:	e00a      	b.n	800bc9e <tcp_receive+0xec2>
                break;
 800bc88:	bf00      	nop
 800bc8a:	e008      	b.n	800bc9e <tcp_receive+0xec2>
                break;
 800bc8c:	bf00      	nop
 800bc8e:	e006      	b.n	800bc9e <tcp_receive+0xec2>
                  break;
 800bc90:	bf00      	nop
 800bc92:	e004      	b.n	800bc9e <tcp_receive+0xec2>
                  break;
 800bc94:	bf00      	nop
 800bc96:	e002      	b.n	800bc9e <tcp_receive+0xec2>
                  break;
 800bc98:	bf00      	nop
 800bc9a:	e000      	b.n	800bc9e <tcp_receive+0xec2>
                break;
 800bc9c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f001 fa30 	bl	800d104 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800bca4:	e003      	b.n	800bcae <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f001 fa2c 	bl	800d104 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bcac:	e01a      	b.n	800bce4 <tcp_receive+0xf08>
 800bcae:	e019      	b.n	800bce4 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800bcb0:	4b0e      	ldr	r3, [pc, #56]	@ (800bcec <tcp_receive+0xf10>)
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcb8:	1ad3      	subs	r3, r2, r3
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	db0a      	blt.n	800bcd4 <tcp_receive+0xef8>
 800bcbe:	4b0b      	ldr	r3, [pc, #44]	@ (800bcec <tcp_receive+0xf10>)
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcc6:	6879      	ldr	r1, [r7, #4]
 800bcc8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bcca:	440b      	add	r3, r1
 800bccc:	1ad3      	subs	r3, r2, r3
 800bcce:	3301      	adds	r3, #1
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	dd07      	ble.n	800bce4 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	8b5b      	ldrh	r3, [r3, #26]
 800bcd8:	f043 0302 	orr.w	r3, r3, #2
 800bcdc:	b29a      	uxth	r2, r3
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800bce2:	e7ff      	b.n	800bce4 <tcp_receive+0xf08>
 800bce4:	bf00      	nop
 800bce6:	3750      	adds	r7, #80	@ 0x50
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bdb0      	pop	{r4, r5, r7, pc}
 800bcec:	20008854 	.word	0x20008854
 800bcf0:	20008834 	.word	0x20008834
 800bcf4:	2000885e 	.word	0x2000885e
 800bcf8:	08012cf4 	.word	0x08012cf4
 800bcfc:	0801309c 	.word	0x0801309c
 800bd00:	08012d40 	.word	0x08012d40

0800bd04 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800bd0a:	4b15      	ldr	r3, [pc, #84]	@ (800bd60 <tcp_get_next_optbyte+0x5c>)
 800bd0c:	881b      	ldrh	r3, [r3, #0]
 800bd0e:	1c5a      	adds	r2, r3, #1
 800bd10:	b291      	uxth	r1, r2
 800bd12:	4a13      	ldr	r2, [pc, #76]	@ (800bd60 <tcp_get_next_optbyte+0x5c>)
 800bd14:	8011      	strh	r1, [r2, #0]
 800bd16:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800bd18:	4b12      	ldr	r3, [pc, #72]	@ (800bd64 <tcp_get_next_optbyte+0x60>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d004      	beq.n	800bd2a <tcp_get_next_optbyte+0x26>
 800bd20:	4b11      	ldr	r3, [pc, #68]	@ (800bd68 <tcp_get_next_optbyte+0x64>)
 800bd22:	881b      	ldrh	r3, [r3, #0]
 800bd24:	88fa      	ldrh	r2, [r7, #6]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d208      	bcs.n	800bd3c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800bd2a:	4b10      	ldr	r3, [pc, #64]	@ (800bd6c <tcp_get_next_optbyte+0x68>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	3314      	adds	r3, #20
 800bd30:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800bd32:	88fb      	ldrh	r3, [r7, #6]
 800bd34:	683a      	ldr	r2, [r7, #0]
 800bd36:	4413      	add	r3, r2
 800bd38:	781b      	ldrb	r3, [r3, #0]
 800bd3a:	e00b      	b.n	800bd54 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800bd3c:	88fb      	ldrh	r3, [r7, #6]
 800bd3e:	b2da      	uxtb	r2, r3
 800bd40:	4b09      	ldr	r3, [pc, #36]	@ (800bd68 <tcp_get_next_optbyte+0x64>)
 800bd42:	881b      	ldrh	r3, [r3, #0]
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	1ad3      	subs	r3, r2, r3
 800bd48:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800bd4a:	4b06      	ldr	r3, [pc, #24]	@ (800bd64 <tcp_get_next_optbyte+0x60>)
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	797b      	ldrb	r3, [r7, #5]
 800bd50:	4413      	add	r3, r2
 800bd52:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr
 800bd60:	20008850 	.word	0x20008850
 800bd64:	2000884c 	.word	0x2000884c
 800bd68:	2000884a 	.word	0x2000884a
 800bd6c:	20008844 	.word	0x20008844

0800bd70 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b084      	sub	sp, #16
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d106      	bne.n	800bd8c <tcp_parseopt+0x1c>
 800bd7e:	4b32      	ldr	r3, [pc, #200]	@ (800be48 <tcp_parseopt+0xd8>)
 800bd80:	f240 727d 	movw	r2, #1917	@ 0x77d
 800bd84:	4931      	ldr	r1, [pc, #196]	@ (800be4c <tcp_parseopt+0xdc>)
 800bd86:	4832      	ldr	r0, [pc, #200]	@ (800be50 <tcp_parseopt+0xe0>)
 800bd88:	f004 fd24 	bl	80107d4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800bd8c:	4b31      	ldr	r3, [pc, #196]	@ (800be54 <tcp_parseopt+0xe4>)
 800bd8e:	881b      	ldrh	r3, [r3, #0]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d056      	beq.n	800be42 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bd94:	4b30      	ldr	r3, [pc, #192]	@ (800be58 <tcp_parseopt+0xe8>)
 800bd96:	2200      	movs	r2, #0
 800bd98:	801a      	strh	r2, [r3, #0]
 800bd9a:	e046      	b.n	800be2a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800bd9c:	f7ff ffb2 	bl	800bd04 <tcp_get_next_optbyte>
 800bda0:	4603      	mov	r3, r0
 800bda2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800bda4:	7bfb      	ldrb	r3, [r7, #15]
 800bda6:	2b02      	cmp	r3, #2
 800bda8:	d006      	beq.n	800bdb8 <tcp_parseopt+0x48>
 800bdaa:	2b02      	cmp	r3, #2
 800bdac:	dc2a      	bgt.n	800be04 <tcp_parseopt+0x94>
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d042      	beq.n	800be38 <tcp_parseopt+0xc8>
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d038      	beq.n	800be28 <tcp_parseopt+0xb8>
 800bdb6:	e025      	b.n	800be04 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800bdb8:	f7ff ffa4 	bl	800bd04 <tcp_get_next_optbyte>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b04      	cmp	r3, #4
 800bdc0:	d13c      	bne.n	800be3c <tcp_parseopt+0xcc>
 800bdc2:	4b25      	ldr	r3, [pc, #148]	@ (800be58 <tcp_parseopt+0xe8>)
 800bdc4:	881b      	ldrh	r3, [r3, #0]
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	4a22      	ldr	r2, [pc, #136]	@ (800be54 <tcp_parseopt+0xe4>)
 800bdca:	8812      	ldrh	r2, [r2, #0]
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	da35      	bge.n	800be3c <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800bdd0:	f7ff ff98 	bl	800bd04 <tcp_get_next_optbyte>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	021b      	lsls	r3, r3, #8
 800bdd8:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800bdda:	f7ff ff93 	bl	800bd04 <tcp_get_next_optbyte>
 800bdde:	4603      	mov	r3, r0
 800bde0:	461a      	mov	r2, r3
 800bde2:	89bb      	ldrh	r3, [r7, #12]
 800bde4:	4313      	orrs	r3, r2
 800bde6:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800bde8:	89bb      	ldrh	r3, [r7, #12]
 800bdea:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800bdee:	d804      	bhi.n	800bdfa <tcp_parseopt+0x8a>
 800bdf0:	89bb      	ldrh	r3, [r7, #12]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d001      	beq.n	800bdfa <tcp_parseopt+0x8a>
 800bdf6:	89ba      	ldrh	r2, [r7, #12]
 800bdf8:	e001      	b.n	800bdfe <tcp_parseopt+0x8e>
 800bdfa:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800be02:	e012      	b.n	800be2a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800be04:	f7ff ff7e 	bl	800bd04 <tcp_get_next_optbyte>
 800be08:	4603      	mov	r3, r0
 800be0a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800be0c:	7afb      	ldrb	r3, [r7, #11]
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d916      	bls.n	800be40 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800be12:	7afb      	ldrb	r3, [r7, #11]
 800be14:	b29a      	uxth	r2, r3
 800be16:	4b10      	ldr	r3, [pc, #64]	@ (800be58 <tcp_parseopt+0xe8>)
 800be18:	881b      	ldrh	r3, [r3, #0]
 800be1a:	4413      	add	r3, r2
 800be1c:	b29b      	uxth	r3, r3
 800be1e:	3b02      	subs	r3, #2
 800be20:	b29a      	uxth	r2, r3
 800be22:	4b0d      	ldr	r3, [pc, #52]	@ (800be58 <tcp_parseopt+0xe8>)
 800be24:	801a      	strh	r2, [r3, #0]
 800be26:	e000      	b.n	800be2a <tcp_parseopt+0xba>
          break;
 800be28:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800be2a:	4b0b      	ldr	r3, [pc, #44]	@ (800be58 <tcp_parseopt+0xe8>)
 800be2c:	881a      	ldrh	r2, [r3, #0]
 800be2e:	4b09      	ldr	r3, [pc, #36]	@ (800be54 <tcp_parseopt+0xe4>)
 800be30:	881b      	ldrh	r3, [r3, #0]
 800be32:	429a      	cmp	r2, r3
 800be34:	d3b2      	bcc.n	800bd9c <tcp_parseopt+0x2c>
 800be36:	e004      	b.n	800be42 <tcp_parseopt+0xd2>
          return;
 800be38:	bf00      	nop
 800be3a:	e002      	b.n	800be42 <tcp_parseopt+0xd2>
            return;
 800be3c:	bf00      	nop
 800be3e:	e000      	b.n	800be42 <tcp_parseopt+0xd2>
            return;
 800be40:	bf00      	nop
      }
    }
  }
}
 800be42:	3710      	adds	r7, #16
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	08012cf4 	.word	0x08012cf4
 800be4c:	08013158 	.word	0x08013158
 800be50:	08012d40 	.word	0x08012d40
 800be54:	20008848 	.word	0x20008848
 800be58:	20008850 	.word	0x20008850

0800be5c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800be5c:	b480      	push	{r7}
 800be5e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800be60:	4b05      	ldr	r3, [pc, #20]	@ (800be78 <tcp_trigger_input_pcb_close+0x1c>)
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	f043 0310 	orr.w	r3, r3, #16
 800be68:	b2da      	uxtb	r2, r3
 800be6a:	4b03      	ldr	r3, [pc, #12]	@ (800be78 <tcp_trigger_input_pcb_close+0x1c>)
 800be6c:	701a      	strb	r2, [r3, #0]
}
 800be6e:	bf00      	nop
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr
 800be78:	20008861 	.word	0x20008861

0800be7c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b084      	sub	sp, #16
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d00a      	beq.n	800bea4 <tcp_route+0x28>
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	7a1b      	ldrb	r3, [r3, #8]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d006      	beq.n	800bea4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	7a1b      	ldrb	r3, [r3, #8]
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7fb faba 	bl	8007414 <netif_get_by_index>
 800bea0:	4603      	mov	r3, r0
 800bea2:	e003      	b.n	800beac <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f003 f929 	bl	800f0fc <ip4_route>
 800beaa:	4603      	mov	r3, r0
  }
}
 800beac:	4618      	mov	r0, r3
 800beae:	3710      	adds	r7, #16
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}

0800beb4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800beb4:	b590      	push	{r4, r7, lr}
 800beb6:	b087      	sub	sp, #28
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	603b      	str	r3, [r7, #0]
 800bec0:	4613      	mov	r3, r2
 800bec2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d105      	bne.n	800bed6 <tcp_create_segment+0x22>
 800beca:	4b43      	ldr	r3, [pc, #268]	@ (800bfd8 <tcp_create_segment+0x124>)
 800becc:	22a3      	movs	r2, #163	@ 0xa3
 800bece:	4943      	ldr	r1, [pc, #268]	@ (800bfdc <tcp_create_segment+0x128>)
 800bed0:	4843      	ldr	r0, [pc, #268]	@ (800bfe0 <tcp_create_segment+0x12c>)
 800bed2:	f004 fc7f 	bl	80107d4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d105      	bne.n	800bee8 <tcp_create_segment+0x34>
 800bedc:	4b3e      	ldr	r3, [pc, #248]	@ (800bfd8 <tcp_create_segment+0x124>)
 800bede:	22a4      	movs	r2, #164	@ 0xa4
 800bee0:	4940      	ldr	r1, [pc, #256]	@ (800bfe4 <tcp_create_segment+0x130>)
 800bee2:	483f      	ldr	r0, [pc, #252]	@ (800bfe0 <tcp_create_segment+0x12c>)
 800bee4:	f004 fc76 	bl	80107d4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bee8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800beec:	009b      	lsls	r3, r3, #2
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	f003 0304 	and.w	r3, r3, #4
 800bef4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800bef6:	2003      	movs	r0, #3
 800bef8:	f7fa ff06 	bl	8006d08 <memp_malloc>
 800befc:	6138      	str	r0, [r7, #16]
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d104      	bne.n	800bf0e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800bf04:	68b8      	ldr	r0, [r7, #8]
 800bf06:	f7fb fde5 	bl	8007ad4 <pbuf_free>
    return NULL;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	e060      	b.n	800bfd0 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800bf14:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	68ba      	ldr	r2, [r7, #8]
 800bf20:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	891a      	ldrh	r2, [r3, #8]
 800bf26:	7dfb      	ldrb	r3, [r7, #23]
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d205      	bcs.n	800bf3a <tcp_create_segment+0x86>
 800bf2e:	4b2a      	ldr	r3, [pc, #168]	@ (800bfd8 <tcp_create_segment+0x124>)
 800bf30:	22b0      	movs	r2, #176	@ 0xb0
 800bf32:	492d      	ldr	r1, [pc, #180]	@ (800bfe8 <tcp_create_segment+0x134>)
 800bf34:	482a      	ldr	r0, [pc, #168]	@ (800bfe0 <tcp_create_segment+0x12c>)
 800bf36:	f004 fc4d 	bl	80107d4 <iprintf>
  seg->len = p->tot_len - optlen;
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	891a      	ldrh	r2, [r3, #8]
 800bf3e:	7dfb      	ldrb	r3, [r7, #23]
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	1ad3      	subs	r3, r2, r3
 800bf44:	b29a      	uxth	r2, r3
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800bf4a:	2114      	movs	r1, #20
 800bf4c:	68b8      	ldr	r0, [r7, #8]
 800bf4e:	f7fb fd2b 	bl	80079a8 <pbuf_add_header>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d004      	beq.n	800bf62 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800bf58:	6938      	ldr	r0, [r7, #16]
 800bf5a:	f7fd f8d2 	bl	8009102 <tcp_seg_free>
    return NULL;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	e036      	b.n	800bfd0 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	685a      	ldr	r2, [r3, #4]
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	8ada      	ldrh	r2, [r3, #22]
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	68dc      	ldr	r4, [r3, #12]
 800bf74:	4610      	mov	r0, r2
 800bf76:	f7fa fa4f 	bl	8006418 <lwip_htons>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	8b1a      	ldrh	r2, [r3, #24]
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	68dc      	ldr	r4, [r3, #12]
 800bf86:	4610      	mov	r0, r2
 800bf88:	f7fa fa46 	bl	8006418 <lwip_htons>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	68dc      	ldr	r4, [r3, #12]
 800bf94:	6838      	ldr	r0, [r7, #0]
 800bf96:	f7fa fa54 	bl	8006442 <lwip_htonl>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800bf9e:	7dfb      	ldrb	r3, [r7, #23]
 800bfa0:	089b      	lsrs	r3, r3, #2
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	3305      	adds	r3, #5
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	031b      	lsls	r3, r3, #12
 800bfaa:	b29a      	uxth	r2, r3
 800bfac:	79fb      	ldrb	r3, [r7, #7]
 800bfae:	b29b      	uxth	r3, r3
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	b29a      	uxth	r2, r3
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	68dc      	ldr	r4, [r3, #12]
 800bfb8:	4610      	mov	r0, r2
 800bfba:	f7fa fa2d 	bl	8006418 <lwip_htons>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	68db      	ldr	r3, [r3, #12]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	749a      	strb	r2, [r3, #18]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	74da      	strb	r2, [r3, #19]
  return seg;
 800bfce:	693b      	ldr	r3, [r7, #16]
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	371c      	adds	r7, #28
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd90      	pop	{r4, r7, pc}
 800bfd8:	08013174 	.word	0x08013174
 800bfdc:	080131a8 	.word	0x080131a8
 800bfe0:	080131c8 	.word	0x080131c8
 800bfe4:	080131f0 	.word	0x080131f0
 800bfe8:	08013214 	.word	0x08013214

0800bfec <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800bfec:	b590      	push	{r4, r7, lr}
 800bfee:	b08b      	sub	sp, #44	@ 0x2c
 800bff0:	af02      	add	r7, sp, #8
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	460b      	mov	r3, r1
 800bff6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800bff8:	2300      	movs	r3, #0
 800bffa:	61fb      	str	r3, [r7, #28]
 800bffc:	2300      	movs	r3, #0
 800bffe:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c000:	2300      	movs	r3, #0
 800c002:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d106      	bne.n	800c018 <tcp_split_unsent_seg+0x2c>
 800c00a:	4b95      	ldr	r3, [pc, #596]	@ (800c260 <tcp_split_unsent_seg+0x274>)
 800c00c:	f240 324b 	movw	r2, #843	@ 0x34b
 800c010:	4994      	ldr	r1, [pc, #592]	@ (800c264 <tcp_split_unsent_seg+0x278>)
 800c012:	4895      	ldr	r0, [pc, #596]	@ (800c268 <tcp_split_unsent_seg+0x27c>)
 800c014:	f004 fbde 	bl	80107d4 <iprintf>

  useg = pcb->unsent;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c01c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d102      	bne.n	800c02a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c024:	f04f 33ff 	mov.w	r3, #4294967295
 800c028:	e116      	b.n	800c258 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800c02a:	887b      	ldrh	r3, [r7, #2]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d109      	bne.n	800c044 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c030:	4b8b      	ldr	r3, [pc, #556]	@ (800c260 <tcp_split_unsent_seg+0x274>)
 800c032:	f240 3253 	movw	r2, #851	@ 0x353
 800c036:	498d      	ldr	r1, [pc, #564]	@ (800c26c <tcp_split_unsent_seg+0x280>)
 800c038:	488b      	ldr	r0, [pc, #556]	@ (800c268 <tcp_split_unsent_seg+0x27c>)
 800c03a:	f004 fbcb 	bl	80107d4 <iprintf>
    return ERR_VAL;
 800c03e:	f06f 0305 	mvn.w	r3, #5
 800c042:	e109      	b.n	800c258 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	891b      	ldrh	r3, [r3, #8]
 800c048:	887a      	ldrh	r2, [r7, #2]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d301      	bcc.n	800c052 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c04e:	2300      	movs	r3, #0
 800c050:	e102      	b.n	800c258 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c056:	887a      	ldrh	r2, [r7, #2]
 800c058:	429a      	cmp	r2, r3
 800c05a:	d906      	bls.n	800c06a <tcp_split_unsent_seg+0x7e>
 800c05c:	4b80      	ldr	r3, [pc, #512]	@ (800c260 <tcp_split_unsent_seg+0x274>)
 800c05e:	f240 325b 	movw	r2, #859	@ 0x35b
 800c062:	4983      	ldr	r1, [pc, #524]	@ (800c270 <tcp_split_unsent_seg+0x284>)
 800c064:	4880      	ldr	r0, [pc, #512]	@ (800c268 <tcp_split_unsent_seg+0x27c>)
 800c066:	f004 fbb5 	bl	80107d4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	891b      	ldrh	r3, [r3, #8]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d106      	bne.n	800c080 <tcp_split_unsent_seg+0x94>
 800c072:	4b7b      	ldr	r3, [pc, #492]	@ (800c260 <tcp_split_unsent_seg+0x274>)
 800c074:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800c078:	497e      	ldr	r1, [pc, #504]	@ (800c274 <tcp_split_unsent_seg+0x288>)
 800c07a:	487b      	ldr	r0, [pc, #492]	@ (800c268 <tcp_split_unsent_seg+0x27c>)
 800c07c:	f004 fbaa 	bl	80107d4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	7a9b      	ldrb	r3, [r3, #10]
 800c084:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c086:	7bfb      	ldrb	r3, [r7, #15]
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	b2db      	uxtb	r3, r3
 800c08c:	f003 0304 	and.w	r3, r3, #4
 800c090:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	891a      	ldrh	r2, [r3, #8]
 800c096:	887b      	ldrh	r3, [r7, #2]
 800c098:	1ad3      	subs	r3, r2, r3
 800c09a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c09c:	7bbb      	ldrb	r3, [r7, #14]
 800c09e:	b29a      	uxth	r2, r3
 800c0a0:	89bb      	ldrh	r3, [r7, #12]
 800c0a2:	4413      	add	r3, r2
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	2036      	movs	r0, #54	@ 0x36
 800c0ae:	f7fb fa2d 	bl	800750c <pbuf_alloc>
 800c0b2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	f000 80b7 	beq.w	800c22a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	891a      	ldrh	r2, [r3, #8]
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	891b      	ldrh	r3, [r3, #8]
 800c0c6:	1ad3      	subs	r3, r2, r3
 800c0c8:	b29a      	uxth	r2, r3
 800c0ca:	887b      	ldrh	r3, [r7, #2]
 800c0cc:	4413      	add	r3, r2
 800c0ce:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	6858      	ldr	r0, [r3, #4]
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	685a      	ldr	r2, [r3, #4]
 800c0d8:	7bbb      	ldrb	r3, [r7, #14]
 800c0da:	18d1      	adds	r1, r2, r3
 800c0dc:	897b      	ldrh	r3, [r7, #10]
 800c0de:	89ba      	ldrh	r2, [r7, #12]
 800c0e0:	f7fb fef2 	bl	8007ec8 <pbuf_copy_partial>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	89bb      	ldrh	r3, [r7, #12]
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	f040 809f 	bne.w	800c22e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	899b      	ldrh	r3, [r3, #12]
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7fa f98d 	bl	8006418 <lwip_htons>
 800c0fe:	4603      	mov	r3, r0
 800c100:	b2db      	uxtb	r3, r3
 800c102:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c106:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c108:	2300      	movs	r3, #0
 800c10a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c10c:	7efb      	ldrb	r3, [r7, #27]
 800c10e:	f003 0308 	and.w	r3, r3, #8
 800c112:	2b00      	cmp	r3, #0
 800c114:	d007      	beq.n	800c126 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c116:	7efb      	ldrb	r3, [r7, #27]
 800c118:	f023 0308 	bic.w	r3, r3, #8
 800c11c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c11e:	7ebb      	ldrb	r3, [r7, #26]
 800c120:	f043 0308 	orr.w	r3, r3, #8
 800c124:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c126:	7efb      	ldrb	r3, [r7, #27]
 800c128:	f003 0301 	and.w	r3, r3, #1
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d007      	beq.n	800c140 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c130:	7efb      	ldrb	r3, [r7, #27]
 800c132:	f023 0301 	bic.w	r3, r3, #1
 800c136:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800c138:	7ebb      	ldrb	r3, [r7, #26]
 800c13a:	f043 0301 	orr.w	r3, r3, #1
 800c13e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	68db      	ldr	r3, [r3, #12]
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	4618      	mov	r0, r3
 800c148:	f7fa f97b 	bl	8006442 <lwip_htonl>
 800c14c:	4602      	mov	r2, r0
 800c14e:	887b      	ldrh	r3, [r7, #2]
 800c150:	18d1      	adds	r1, r2, r3
 800c152:	7eba      	ldrb	r2, [r7, #26]
 800c154:	7bfb      	ldrb	r3, [r7, #15]
 800c156:	9300      	str	r3, [sp, #0]
 800c158:	460b      	mov	r3, r1
 800c15a:	6939      	ldr	r1, [r7, #16]
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f7ff fea9 	bl	800beb4 <tcp_create_segment>
 800c162:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800c164:	69fb      	ldr	r3, [r7, #28]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d063      	beq.n	800c232 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	685b      	ldr	r3, [r3, #4]
 800c16e:	4618      	mov	r0, r3
 800c170:	f7fb fd38 	bl	8007be4 <pbuf_clen>
 800c174:	4603      	mov	r3, r0
 800c176:	461a      	mov	r2, r3
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c17e:	1a9b      	subs	r3, r3, r2
 800c180:	b29a      	uxth	r2, r3
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	6858      	ldr	r0, [r3, #4]
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	891a      	ldrh	r2, [r3, #8]
 800c192:	89bb      	ldrh	r3, [r7, #12]
 800c194:	1ad3      	subs	r3, r2, r3
 800c196:	b29b      	uxth	r3, r3
 800c198:	4619      	mov	r1, r3
 800c19a:	f7fb fb15 	bl	80077c8 <pbuf_realloc>
  useg->len -= remainder;
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	891a      	ldrh	r2, [r3, #8]
 800c1a2:	89bb      	ldrh	r3, [r7, #12]
 800c1a4:	1ad3      	subs	r3, r2, r3
 800c1a6:	b29a      	uxth	r2, r3
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	68db      	ldr	r3, [r3, #12]
 800c1b0:	899b      	ldrh	r3, [r3, #12]
 800c1b2:	b29c      	uxth	r4, r3
 800c1b4:	7efb      	ldrb	r3, [r7, #27]
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7fa f92d 	bl	8006418 <lwip_htons>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	68db      	ldr	r3, [r3, #12]
 800c1c6:	4322      	orrs	r2, r4
 800c1c8:	b292      	uxth	r2, r2
 800c1ca:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7fb fd07 	bl	8007be4 <pbuf_clen>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	461a      	mov	r2, r3
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c1e0:	4413      	add	r3, r2
 800c1e2:	b29a      	uxth	r2, r3
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c1ea:	69fb      	ldr	r3, [r7, #28]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7fb fcf8 	bl	8007be4 <pbuf_clen>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c1fe:	4413      	add	r3, r2
 800c200:	b29a      	uxth	r2, r3
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	681a      	ldr	r2, [r3, #0]
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	69fa      	ldr	r2, [r7, #28]
 800c214:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c216:	69fb      	ldr	r3, [r7, #28]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d103      	bne.n	800c226 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c226:	2300      	movs	r3, #0
 800c228:	e016      	b.n	800c258 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800c22a:	bf00      	nop
 800c22c:	e002      	b.n	800c234 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c22e:	bf00      	nop
 800c230:	e000      	b.n	800c234 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c232:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d006      	beq.n	800c248 <tcp_split_unsent_seg+0x25c>
 800c23a:	4b09      	ldr	r3, [pc, #36]	@ (800c260 <tcp_split_unsent_seg+0x274>)
 800c23c:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800c240:	490d      	ldr	r1, [pc, #52]	@ (800c278 <tcp_split_unsent_seg+0x28c>)
 800c242:	4809      	ldr	r0, [pc, #36]	@ (800c268 <tcp_split_unsent_seg+0x27c>)
 800c244:	f004 fac6 	bl	80107d4 <iprintf>
  if (p != NULL) {
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d002      	beq.n	800c254 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800c24e:	6938      	ldr	r0, [r7, #16]
 800c250:	f7fb fc40 	bl	8007ad4 <pbuf_free>
  }

  return ERR_MEM;
 800c254:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3724      	adds	r7, #36	@ 0x24
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd90      	pop	{r4, r7, pc}
 800c260:	08013174 	.word	0x08013174
 800c264:	08013508 	.word	0x08013508
 800c268:	080131c8 	.word	0x080131c8
 800c26c:	0801352c 	.word	0x0801352c
 800c270:	08013550 	.word	0x08013550
 800c274:	08013560 	.word	0x08013560
 800c278:	08013570 	.word	0x08013570

0800c27c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c27c:	b590      	push	{r4, r7, lr}
 800c27e:	b085      	sub	sp, #20
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d106      	bne.n	800c298 <tcp_send_fin+0x1c>
 800c28a:	4b21      	ldr	r3, [pc, #132]	@ (800c310 <tcp_send_fin+0x94>)
 800c28c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800c290:	4920      	ldr	r1, [pc, #128]	@ (800c314 <tcp_send_fin+0x98>)
 800c292:	4821      	ldr	r0, [pc, #132]	@ (800c318 <tcp_send_fin+0x9c>)
 800c294:	f004 fa9e 	bl	80107d4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d02e      	beq.n	800c2fe <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2a4:	60fb      	str	r3, [r7, #12]
 800c2a6:	e002      	b.n	800c2ae <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d1f8      	bne.n	800c2a8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	68db      	ldr	r3, [r3, #12]
 800c2ba:	899b      	ldrh	r3, [r3, #12]
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7fa f8aa 	bl	8006418 <lwip_htons>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	f003 0307 	and.w	r3, r3, #7
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d116      	bne.n	800c2fe <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	899b      	ldrh	r3, [r3, #12]
 800c2d6:	b29c      	uxth	r4, r3
 800c2d8:	2001      	movs	r0, #1
 800c2da:	f7fa f89d 	bl	8006418 <lwip_htons>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	68db      	ldr	r3, [r3, #12]
 800c2e6:	4322      	orrs	r2, r4
 800c2e8:	b292      	uxth	r2, r2
 800c2ea:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	8b5b      	ldrh	r3, [r3, #26]
 800c2f0:	f043 0320 	orr.w	r3, r3, #32
 800c2f4:	b29a      	uxth	r2, r3
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	e004      	b.n	800c308 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c2fe:	2101      	movs	r1, #1
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 f80b 	bl	800c31c <tcp_enqueue_flags>
 800c306:	4603      	mov	r3, r0
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3714      	adds	r7, #20
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd90      	pop	{r4, r7, pc}
 800c310:	08013174 	.word	0x08013174
 800c314:	0801357c 	.word	0x0801357c
 800c318:	080131c8 	.word	0x080131c8

0800c31c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b08a      	sub	sp, #40	@ 0x28
 800c320:	af02      	add	r7, sp, #8
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	460b      	mov	r3, r1
 800c326:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c328:	2300      	movs	r3, #0
 800c32a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c32c:	2300      	movs	r3, #0
 800c32e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c330:	78fb      	ldrb	r3, [r7, #3]
 800c332:	f003 0303 	and.w	r3, r3, #3
 800c336:	2b00      	cmp	r3, #0
 800c338:	d106      	bne.n	800c348 <tcp_enqueue_flags+0x2c>
 800c33a:	4b67      	ldr	r3, [pc, #412]	@ (800c4d8 <tcp_enqueue_flags+0x1bc>)
 800c33c:	f240 4211 	movw	r2, #1041	@ 0x411
 800c340:	4966      	ldr	r1, [pc, #408]	@ (800c4dc <tcp_enqueue_flags+0x1c0>)
 800c342:	4867      	ldr	r0, [pc, #412]	@ (800c4e0 <tcp_enqueue_flags+0x1c4>)
 800c344:	f004 fa46 	bl	80107d4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d106      	bne.n	800c35c <tcp_enqueue_flags+0x40>
 800c34e:	4b62      	ldr	r3, [pc, #392]	@ (800c4d8 <tcp_enqueue_flags+0x1bc>)
 800c350:	f240 4213 	movw	r2, #1043	@ 0x413
 800c354:	4963      	ldr	r1, [pc, #396]	@ (800c4e4 <tcp_enqueue_flags+0x1c8>)
 800c356:	4862      	ldr	r0, [pc, #392]	@ (800c4e0 <tcp_enqueue_flags+0x1c4>)
 800c358:	f004 fa3c 	bl	80107d4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c35c:	78fb      	ldrb	r3, [r7, #3]
 800c35e:	f003 0302 	and.w	r3, r3, #2
 800c362:	2b00      	cmp	r3, #0
 800c364:	d001      	beq.n	800c36a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c366:	2301      	movs	r3, #1
 800c368:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c36a:	7ffb      	ldrb	r3, [r7, #31]
 800c36c:	009b      	lsls	r3, r3, #2
 800c36e:	b2db      	uxtb	r3, r3
 800c370:	f003 0304 	and.w	r3, r3, #4
 800c374:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c376:	7dfb      	ldrb	r3, [r7, #23]
 800c378:	b29b      	uxth	r3, r3
 800c37a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c37e:	4619      	mov	r1, r3
 800c380:	2036      	movs	r0, #54	@ 0x36
 800c382:	f7fb f8c3 	bl	800750c <pbuf_alloc>
 800c386:	6138      	str	r0, [r7, #16]
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d109      	bne.n	800c3a2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	8b5b      	ldrh	r3, [r3, #26]
 800c392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c396:	b29a      	uxth	r2, r3
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c39c:	f04f 33ff 	mov.w	r3, #4294967295
 800c3a0:	e095      	b.n	800c4ce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	895a      	ldrh	r2, [r3, #10]
 800c3a6:	7dfb      	ldrb	r3, [r7, #23]
 800c3a8:	b29b      	uxth	r3, r3
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d206      	bcs.n	800c3bc <tcp_enqueue_flags+0xa0>
 800c3ae:	4b4a      	ldr	r3, [pc, #296]	@ (800c4d8 <tcp_enqueue_flags+0x1bc>)
 800c3b0:	f240 4239 	movw	r2, #1081	@ 0x439
 800c3b4:	494c      	ldr	r1, [pc, #304]	@ (800c4e8 <tcp_enqueue_flags+0x1cc>)
 800c3b6:	484a      	ldr	r0, [pc, #296]	@ (800c4e0 <tcp_enqueue_flags+0x1c4>)
 800c3b8:	f004 fa0c 	bl	80107d4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800c3c0:	78fa      	ldrb	r2, [r7, #3]
 800c3c2:	7ffb      	ldrb	r3, [r7, #31]
 800c3c4:	9300      	str	r3, [sp, #0]
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	6939      	ldr	r1, [r7, #16]
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f7ff fd72 	bl	800beb4 <tcp_create_segment>
 800c3d0:	60f8      	str	r0, [r7, #12]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d109      	bne.n	800c3ec <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	8b5b      	ldrh	r3, [r3, #26]
 800c3dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3e0:	b29a      	uxth	r2, r3
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c3e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c3ea:	e070      	b.n	800c4ce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	f003 0303 	and.w	r3, r3, #3
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d006      	beq.n	800c406 <tcp_enqueue_flags+0xea>
 800c3f8:	4b37      	ldr	r3, [pc, #220]	@ (800c4d8 <tcp_enqueue_flags+0x1bc>)
 800c3fa:	f240 4242 	movw	r2, #1090	@ 0x442
 800c3fe:	493b      	ldr	r1, [pc, #236]	@ (800c4ec <tcp_enqueue_flags+0x1d0>)
 800c400:	4837      	ldr	r0, [pc, #220]	@ (800c4e0 <tcp_enqueue_flags+0x1c4>)
 800c402:	f004 f9e7 	bl	80107d4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	891b      	ldrh	r3, [r3, #8]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d006      	beq.n	800c41c <tcp_enqueue_flags+0x100>
 800c40e:	4b32      	ldr	r3, [pc, #200]	@ (800c4d8 <tcp_enqueue_flags+0x1bc>)
 800c410:	f240 4243 	movw	r2, #1091	@ 0x443
 800c414:	4936      	ldr	r1, [pc, #216]	@ (800c4f0 <tcp_enqueue_flags+0x1d4>)
 800c416:	4832      	ldr	r0, [pc, #200]	@ (800c4e0 <tcp_enqueue_flags+0x1c4>)
 800c418:	f004 f9dc 	bl	80107d4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c420:	2b00      	cmp	r3, #0
 800c422:	d103      	bne.n	800c42c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	68fa      	ldr	r2, [r7, #12]
 800c428:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c42a:	e00d      	b.n	800c448 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c430:	61bb      	str	r3, [r7, #24]
 800c432:	e002      	b.n	800c43a <tcp_enqueue_flags+0x11e>
 800c434:	69bb      	ldr	r3, [r7, #24]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	61bb      	str	r3, [r7, #24]
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d1f8      	bne.n	800c434 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800c442:	69bb      	ldr	r3, [r7, #24]
 800c444:	68fa      	ldr	r2, [r7, #12]
 800c446:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2200      	movs	r2, #0
 800c44c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c450:	78fb      	ldrb	r3, [r7, #3]
 800c452:	f003 0302 	and.w	r3, r3, #2
 800c456:	2b00      	cmp	r3, #0
 800c458:	d104      	bne.n	800c464 <tcp_enqueue_flags+0x148>
 800c45a:	78fb      	ldrb	r3, [r7, #3]
 800c45c:	f003 0301 	and.w	r3, r3, #1
 800c460:	2b00      	cmp	r3, #0
 800c462:	d004      	beq.n	800c46e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c468:	1c5a      	adds	r2, r3, #1
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c46e:	78fb      	ldrb	r3, [r7, #3]
 800c470:	f003 0301 	and.w	r3, r3, #1
 800c474:	2b00      	cmp	r3, #0
 800c476:	d006      	beq.n	800c486 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	8b5b      	ldrh	r3, [r3, #26]
 800c47c:	f043 0320 	orr.w	r3, r3, #32
 800c480:	b29a      	uxth	r2, r3
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7fb fbaa 	bl	8007be4 <pbuf_clen>
 800c490:	4603      	mov	r3, r0
 800c492:	461a      	mov	r2, r3
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c49a:	4413      	add	r3, r2
 800c49c:	b29a      	uxth	r2, r3
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00e      	beq.n	800c4cc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d10a      	bne.n	800c4cc <tcp_enqueue_flags+0x1b0>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d106      	bne.n	800c4cc <tcp_enqueue_flags+0x1b0>
 800c4be:	4b06      	ldr	r3, [pc, #24]	@ (800c4d8 <tcp_enqueue_flags+0x1bc>)
 800c4c0:	f240 4265 	movw	r2, #1125	@ 0x465
 800c4c4:	490b      	ldr	r1, [pc, #44]	@ (800c4f4 <tcp_enqueue_flags+0x1d8>)
 800c4c6:	4806      	ldr	r0, [pc, #24]	@ (800c4e0 <tcp_enqueue_flags+0x1c4>)
 800c4c8:	f004 f984 	bl	80107d4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c4cc:	2300      	movs	r3, #0
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3720      	adds	r7, #32
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	08013174 	.word	0x08013174
 800c4dc:	08013598 	.word	0x08013598
 800c4e0:	080131c8 	.word	0x080131c8
 800c4e4:	080135f0 	.word	0x080135f0
 800c4e8:	08013610 	.word	0x08013610
 800c4ec:	0801364c 	.word	0x0801364c
 800c4f0:	08013664 	.word	0x08013664
 800c4f4:	08013690 	.word	0x08013690

0800c4f8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c4f8:	b5b0      	push	{r4, r5, r7, lr}
 800c4fa:	b08a      	sub	sp, #40	@ 0x28
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d106      	bne.n	800c514 <tcp_output+0x1c>
 800c506:	4b8a      	ldr	r3, [pc, #552]	@ (800c730 <tcp_output+0x238>)
 800c508:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800c50c:	4989      	ldr	r1, [pc, #548]	@ (800c734 <tcp_output+0x23c>)
 800c50e:	488a      	ldr	r0, [pc, #552]	@ (800c738 <tcp_output+0x240>)
 800c510:	f004 f960 	bl	80107d4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	7d1b      	ldrb	r3, [r3, #20]
 800c518:	2b01      	cmp	r3, #1
 800c51a:	d106      	bne.n	800c52a <tcp_output+0x32>
 800c51c:	4b84      	ldr	r3, [pc, #528]	@ (800c730 <tcp_output+0x238>)
 800c51e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800c522:	4986      	ldr	r1, [pc, #536]	@ (800c73c <tcp_output+0x244>)
 800c524:	4884      	ldr	r0, [pc, #528]	@ (800c738 <tcp_output+0x240>)
 800c526:	f004 f955 	bl	80107d4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c52a:	4b85      	ldr	r3, [pc, #532]	@ (800c740 <tcp_output+0x248>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	687a      	ldr	r2, [r7, #4]
 800c530:	429a      	cmp	r2, r3
 800c532:	d101      	bne.n	800c538 <tcp_output+0x40>
    return ERR_OK;
 800c534:	2300      	movs	r3, #0
 800c536:	e1ce      	b.n	800c8d6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c544:	4293      	cmp	r3, r2
 800c546:	bf28      	it	cs
 800c548:	4613      	movcs	r3, r2
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c552:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800c554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c556:	2b00      	cmp	r3, #0
 800c558:	d10b      	bne.n	800c572 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	8b5b      	ldrh	r3, [r3, #26]
 800c55e:	f003 0302 	and.w	r3, r3, #2
 800c562:	2b00      	cmp	r3, #0
 800c564:	f000 81aa 	beq.w	800c8bc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 fdcb 	bl	800d104 <tcp_send_empty_ack>
 800c56e:	4603      	mov	r3, r0
 800c570:	e1b1      	b.n	800c8d6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c572:	6879      	ldr	r1, [r7, #4]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	3304      	adds	r3, #4
 800c578:	461a      	mov	r2, r3
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f7ff fc7e 	bl	800be7c <tcp_route>
 800c580:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d102      	bne.n	800c58e <tcp_output+0x96>
    return ERR_RTE;
 800c588:	f06f 0303 	mvn.w	r3, #3
 800c58c:	e1a3      	b.n	800c8d6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d003      	beq.n	800c59c <tcp_output+0xa4>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d111      	bne.n	800c5c0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d002      	beq.n	800c5a8 <tcp_output+0xb0>
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	3304      	adds	r3, #4
 800c5a6:	e000      	b.n	800c5aa <tcp_output+0xb2>
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d102      	bne.n	800c5b8 <tcp_output+0xc0>
      return ERR_RTE;
 800c5b2:	f06f 0303 	mvn.w	r3, #3
 800c5b6:	e18e      	b.n	800c8d6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c5c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c2:	68db      	ldr	r3, [r3, #12]
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7f9 ff3b 	bl	8006442 <lwip_htonl>
 800c5cc:	4602      	mov	r2, r0
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5d2:	1ad3      	subs	r3, r2, r3
 800c5d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5d6:	8912      	ldrh	r2, [r2, #8]
 800c5d8:	4413      	add	r3, r2
 800c5da:	69ba      	ldr	r2, [r7, #24]
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	d227      	bcs.n	800c630 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	69bb      	ldr	r3, [r7, #24]
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d114      	bne.n	800c618 <tcp_output+0x120>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d110      	bne.n	800c618 <tcp_output+0x120>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d10b      	bne.n	800c618 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2200      	movs	r2, #0
 800c604:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2201      	movs	r2, #1
 800c60c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2200      	movs	r2, #0
 800c614:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	8b5b      	ldrh	r3, [r3, #26]
 800c61c:	f003 0302 	and.w	r3, r3, #2
 800c620:	2b00      	cmp	r3, #0
 800c622:	f000 814d 	beq.w	800c8c0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f000 fd6c 	bl	800d104 <tcp_send_empty_ack>
 800c62c:	4603      	mov	r3, r0
 800c62e:	e152      	b.n	800c8d6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2200      	movs	r2, #0
 800c634:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c63c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c63e:	6a3b      	ldr	r3, [r7, #32]
 800c640:	2b00      	cmp	r3, #0
 800c642:	f000 811c 	beq.w	800c87e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800c646:	e002      	b.n	800c64e <tcp_output+0x156>
 800c648:	6a3b      	ldr	r3, [r7, #32]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	623b      	str	r3, [r7, #32]
 800c64e:	6a3b      	ldr	r3, [r7, #32]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d1f8      	bne.n	800c648 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c656:	e112      	b.n	800c87e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c65a:	68db      	ldr	r3, [r3, #12]
 800c65c:	899b      	ldrh	r3, [r3, #12]
 800c65e:	b29b      	uxth	r3, r3
 800c660:	4618      	mov	r0, r3
 800c662:	f7f9 fed9 	bl	8006418 <lwip_htons>
 800c666:	4603      	mov	r3, r0
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	f003 0304 	and.w	r3, r3, #4
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d006      	beq.n	800c680 <tcp_output+0x188>
 800c672:	4b2f      	ldr	r3, [pc, #188]	@ (800c730 <tcp_output+0x238>)
 800c674:	f240 5236 	movw	r2, #1334	@ 0x536
 800c678:	4932      	ldr	r1, [pc, #200]	@ (800c744 <tcp_output+0x24c>)
 800c67a:	482f      	ldr	r0, [pc, #188]	@ (800c738 <tcp_output+0x240>)
 800c67c:	f004 f8aa 	bl	80107d4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c684:	2b00      	cmp	r3, #0
 800c686:	d01f      	beq.n	800c6c8 <tcp_output+0x1d0>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	8b5b      	ldrh	r3, [r3, #26]
 800c68c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800c690:	2b00      	cmp	r3, #0
 800c692:	d119      	bne.n	800c6c8 <tcp_output+0x1d0>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d00b      	beq.n	800c6b4 <tcp_output+0x1bc>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d110      	bne.n	800c6c8 <tcp_output+0x1d0>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6aa:	891a      	ldrh	r2, [r3, #8]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d209      	bcs.n	800c6c8 <tcp_output+0x1d0>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d004      	beq.n	800c6c8 <tcp_output+0x1d0>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c6c4:	2b08      	cmp	r3, #8
 800c6c6:	d901      	bls.n	800c6cc <tcp_output+0x1d4>
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	e000      	b.n	800c6ce <tcp_output+0x1d6>
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d106      	bne.n	800c6e0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	8b5b      	ldrh	r3, [r3, #26]
 800c6d6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	f000 80e4 	beq.w	800c8a8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	7d1b      	ldrb	r3, [r3, #20]
 800c6e4:	2b02      	cmp	r3, #2
 800c6e6:	d00d      	beq.n	800c704 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ea:	68db      	ldr	r3, [r3, #12]
 800c6ec:	899b      	ldrh	r3, [r3, #12]
 800c6ee:	b29c      	uxth	r4, r3
 800c6f0:	2010      	movs	r0, #16
 800c6f2:	f7f9 fe91 	bl	8006418 <lwip_htons>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	461a      	mov	r2, r3
 800c6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fc:	68db      	ldr	r3, [r3, #12]
 800c6fe:	4322      	orrs	r2, r4
 800c700:	b292      	uxth	r2, r2
 800c702:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c704:	697a      	ldr	r2, [r7, #20]
 800c706:	6879      	ldr	r1, [r7, #4]
 800c708:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c70a:	f000 f909 	bl	800c920 <tcp_output_segment>
 800c70e:	4603      	mov	r3, r0
 800c710:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d016      	beq.n	800c748 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	8b5b      	ldrh	r3, [r3, #26]
 800c71e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c722:	b29a      	uxth	r2, r3
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	835a      	strh	r2, [r3, #26]
      return err;
 800c728:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c72c:	e0d3      	b.n	800c8d6 <tcp_output+0x3de>
 800c72e:	bf00      	nop
 800c730:	08013174 	.word	0x08013174
 800c734:	080136b8 	.word	0x080136b8
 800c738:	080131c8 	.word	0x080131c8
 800c73c:	080136d0 	.word	0x080136d0
 800c740:	20008868 	.word	0x20008868
 800c744:	080136f8 	.word	0x080136f8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c74a:	681a      	ldr	r2, [r3, #0]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	7d1b      	ldrb	r3, [r3, #20]
 800c754:	2b02      	cmp	r3, #2
 800c756:	d006      	beq.n	800c766 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	8b5b      	ldrh	r3, [r3, #26]
 800c75c:	f023 0303 	bic.w	r3, r3, #3
 800c760:	b29a      	uxth	r2, r3
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c768:	68db      	ldr	r3, [r3, #12]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7f9 fe68 	bl	8006442 <lwip_htonl>
 800c772:	4604      	mov	r4, r0
 800c774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c776:	891b      	ldrh	r3, [r3, #8]
 800c778:	461d      	mov	r5, r3
 800c77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c77c:	68db      	ldr	r3, [r3, #12]
 800c77e:	899b      	ldrh	r3, [r3, #12]
 800c780:	b29b      	uxth	r3, r3
 800c782:	4618      	mov	r0, r3
 800c784:	f7f9 fe48 	bl	8006418 <lwip_htons>
 800c788:	4603      	mov	r3, r0
 800c78a:	b2db      	uxtb	r3, r3
 800c78c:	f003 0303 	and.w	r3, r3, #3
 800c790:	2b00      	cmp	r3, #0
 800c792:	d001      	beq.n	800c798 <tcp_output+0x2a0>
 800c794:	2301      	movs	r3, #1
 800c796:	e000      	b.n	800c79a <tcp_output+0x2a2>
 800c798:	2300      	movs	r3, #0
 800c79a:	442b      	add	r3, r5
 800c79c:	4423      	add	r3, r4
 800c79e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	1ad3      	subs	r3, r2, r3
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	da02      	bge.n	800c7b2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	68ba      	ldr	r2, [r7, #8]
 800c7b0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7b4:	891b      	ldrh	r3, [r3, #8]
 800c7b6:	461c      	mov	r4, r3
 800c7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ba:	68db      	ldr	r3, [r3, #12]
 800c7bc:	899b      	ldrh	r3, [r3, #12]
 800c7be:	b29b      	uxth	r3, r3
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f7f9 fe29 	bl	8006418 <lwip_htons>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	f003 0303 	and.w	r3, r3, #3
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d001      	beq.n	800c7d6 <tcp_output+0x2de>
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	e000      	b.n	800c7d8 <tcp_output+0x2e0>
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	4423      	add	r3, r4
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d049      	beq.n	800c872 <tcp_output+0x37a>
      seg->next = NULL;
 800c7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d105      	bne.n	800c7f8 <tcp_output+0x300>
        pcb->unacked = seg;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7f0:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800c7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f4:	623b      	str	r3, [r7, #32]
 800c7f6:	e03f      	b.n	800c878 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7fa:	68db      	ldr	r3, [r3, #12]
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	4618      	mov	r0, r3
 800c800:	f7f9 fe1f 	bl	8006442 <lwip_htonl>
 800c804:	4604      	mov	r4, r0
 800c806:	6a3b      	ldr	r3, [r7, #32]
 800c808:	68db      	ldr	r3, [r3, #12]
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7f9 fe18 	bl	8006442 <lwip_htonl>
 800c812:	4603      	mov	r3, r0
 800c814:	1ae3      	subs	r3, r4, r3
 800c816:	2b00      	cmp	r3, #0
 800c818:	da24      	bge.n	800c864 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	3370      	adds	r3, #112	@ 0x70
 800c81e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c820:	e002      	b.n	800c828 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c822:	69fb      	ldr	r3, [r7, #28]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c828:	69fb      	ldr	r3, [r7, #28]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d011      	beq.n	800c854 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c830:	69fb      	ldr	r3, [r7, #28]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	68db      	ldr	r3, [r3, #12]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	4618      	mov	r0, r3
 800c83a:	f7f9 fe02 	bl	8006442 <lwip_htonl>
 800c83e:	4604      	mov	r4, r0
 800c840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	4618      	mov	r0, r3
 800c848:	f7f9 fdfb 	bl	8006442 <lwip_htonl>
 800c84c:	4603      	mov	r3, r0
 800c84e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c850:	2b00      	cmp	r3, #0
 800c852:	dbe6      	blt.n	800c822 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800c854:	69fb      	ldr	r3, [r7, #28]
 800c856:	681a      	ldr	r2, [r3, #0]
 800c858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c85a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c860:	601a      	str	r2, [r3, #0]
 800c862:	e009      	b.n	800c878 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c864:	6a3b      	ldr	r3, [r7, #32]
 800c866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c868:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c86a:	6a3b      	ldr	r3, [r7, #32]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	623b      	str	r3, [r7, #32]
 800c870:	e002      	b.n	800c878 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c872:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c874:	f7fc fc45 	bl	8009102 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c87c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800c87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c880:	2b00      	cmp	r3, #0
 800c882:	d012      	beq.n	800c8aa <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c886:	68db      	ldr	r3, [r3, #12]
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7f9 fdd9 	bl	8006442 <lwip_htonl>
 800c890:	4602      	mov	r2, r0
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c896:	1ad3      	subs	r3, r2, r3
 800c898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c89a:	8912      	ldrh	r2, [r2, #8]
 800c89c:	4413      	add	r3, r2
  while (seg != NULL &&
 800c89e:	69ba      	ldr	r2, [r7, #24]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	f4bf aed9 	bcs.w	800c658 <tcp_output+0x160>
 800c8a6:	e000      	b.n	800c8aa <tcp_output+0x3b2>
      break;
 800c8a8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d108      	bne.n	800c8c4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800c8ba:	e004      	b.n	800c8c6 <tcp_output+0x3ce>
    goto output_done;
 800c8bc:	bf00      	nop
 800c8be:	e002      	b.n	800c8c6 <tcp_output+0x3ce>
    goto output_done;
 800c8c0:	bf00      	nop
 800c8c2:	e000      	b.n	800c8c6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800c8c4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	8b5b      	ldrh	r3, [r3, #26]
 800c8ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c8ce:	b29a      	uxth	r2, r3
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c8d4:	2300      	movs	r3, #0
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3728      	adds	r7, #40	@ 0x28
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bdb0      	pop	{r4, r5, r7, pc}
 800c8de:	bf00      	nop

0800c8e0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b082      	sub	sp, #8
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d106      	bne.n	800c8fc <tcp_output_segment_busy+0x1c>
 800c8ee:	4b09      	ldr	r3, [pc, #36]	@ (800c914 <tcp_output_segment_busy+0x34>)
 800c8f0:	f240 529a 	movw	r2, #1434	@ 0x59a
 800c8f4:	4908      	ldr	r1, [pc, #32]	@ (800c918 <tcp_output_segment_busy+0x38>)
 800c8f6:	4809      	ldr	r0, [pc, #36]	@ (800c91c <tcp_output_segment_busy+0x3c>)
 800c8f8:	f003 ff6c 	bl	80107d4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	7b9b      	ldrb	r3, [r3, #14]
 800c902:	2b01      	cmp	r3, #1
 800c904:	d001      	beq.n	800c90a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800c906:	2301      	movs	r3, #1
 800c908:	e000      	b.n	800c90c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800c90a:	2300      	movs	r3, #0
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3708      	adds	r7, #8
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}
 800c914:	08013174 	.word	0x08013174
 800c918:	08013710 	.word	0x08013710
 800c91c:	080131c8 	.word	0x080131c8

0800c920 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c920:	b5b0      	push	{r4, r5, r7, lr}
 800c922:	b08c      	sub	sp, #48	@ 0x30
 800c924:	af04      	add	r7, sp, #16
 800c926:	60f8      	str	r0, [r7, #12]
 800c928:	60b9      	str	r1, [r7, #8]
 800c92a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d106      	bne.n	800c940 <tcp_output_segment+0x20>
 800c932:	4b64      	ldr	r3, [pc, #400]	@ (800cac4 <tcp_output_segment+0x1a4>)
 800c934:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800c938:	4963      	ldr	r1, [pc, #396]	@ (800cac8 <tcp_output_segment+0x1a8>)
 800c93a:	4864      	ldr	r0, [pc, #400]	@ (800cacc <tcp_output_segment+0x1ac>)
 800c93c:	f003 ff4a 	bl	80107d4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d106      	bne.n	800c954 <tcp_output_segment+0x34>
 800c946:	4b5f      	ldr	r3, [pc, #380]	@ (800cac4 <tcp_output_segment+0x1a4>)
 800c948:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800c94c:	4960      	ldr	r1, [pc, #384]	@ (800cad0 <tcp_output_segment+0x1b0>)
 800c94e:	485f      	ldr	r0, [pc, #380]	@ (800cacc <tcp_output_segment+0x1ac>)
 800c950:	f003 ff40 	bl	80107d4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d106      	bne.n	800c968 <tcp_output_segment+0x48>
 800c95a:	4b5a      	ldr	r3, [pc, #360]	@ (800cac4 <tcp_output_segment+0x1a4>)
 800c95c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800c960:	495c      	ldr	r1, [pc, #368]	@ (800cad4 <tcp_output_segment+0x1b4>)
 800c962:	485a      	ldr	r0, [pc, #360]	@ (800cacc <tcp_output_segment+0x1ac>)
 800c964:	f003 ff36 	bl	80107d4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800c968:	68f8      	ldr	r0, [r7, #12]
 800c96a:	f7ff ffb9 	bl	800c8e0 <tcp_output_segment_busy>
 800c96e:	4603      	mov	r3, r0
 800c970:	2b00      	cmp	r3, #0
 800c972:	d001      	beq.n	800c978 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c974:	2300      	movs	r3, #0
 800c976:	e0a1      	b.n	800cabc <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	68dc      	ldr	r4, [r3, #12]
 800c980:	4610      	mov	r0, r2
 800c982:	f7f9 fd5e 	bl	8006442 <lwip_htonl>
 800c986:	4603      	mov	r3, r0
 800c988:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	68dc      	ldr	r4, [r3, #12]
 800c992:	4610      	mov	r0, r2
 800c994:	f7f9 fd40 	bl	8006418 <lwip_htons>
 800c998:	4603      	mov	r3, r0
 800c99a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9a0:	68ba      	ldr	r2, [r7, #8]
 800c9a2:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800c9a4:	441a      	add	r2, r3
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	68db      	ldr	r3, [r3, #12]
 800c9ae:	3314      	adds	r3, #20
 800c9b0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	7a9b      	ldrb	r3, [r3, #10]
 800c9b6:	f003 0301 	and.w	r3, r3, #1
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d015      	beq.n	800c9ea <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	3304      	adds	r3, #4
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	6879      	ldr	r1, [r7, #4]
 800c9c6:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800c9ca:	f7fc fe91 	bl	80096f0 <tcp_eff_send_mss_netif>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c9d2:	8b7b      	ldrh	r3, [r7, #26]
 800c9d4:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7f9 fd32 	bl	8006442 <lwip_htonl>
 800c9de:	4602      	mov	r2, r0
 800c9e0:	69fb      	ldr	r3, [r7, #28]
 800c9e2:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c9e4:	69fb      	ldr	r3, [r7, #28]
 800c9e6:	3304      	adds	r3, #4
 800c9e8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	da02      	bge.n	800c9fa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d10c      	bne.n	800ca1c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ca02:	4b35      	ldr	r3, [pc, #212]	@ (800cad8 <tcp_output_segment+0x1b8>)
 800ca04:	681a      	ldr	r2, [r3, #0]
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	68db      	ldr	r3, [r3, #12]
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7f9 fd16 	bl	8006442 <lwip_htonl>
 800ca16:	4602      	mov	r2, r0
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	68da      	ldr	r2, [r3, #12]
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	685b      	ldr	r3, [r3, #4]
 800ca26:	1ad3      	subs	r3, r2, r3
 800ca28:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	8959      	ldrh	r1, [r3, #10]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	685b      	ldr	r3, [r3, #4]
 800ca34:	8b3a      	ldrh	r2, [r7, #24]
 800ca36:	1a8a      	subs	r2, r1, r2
 800ca38:	b292      	uxth	r2, r2
 800ca3a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	8919      	ldrh	r1, [r3, #8]
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	685b      	ldr	r3, [r3, #4]
 800ca46:	8b3a      	ldrh	r2, [r7, #24]
 800ca48:	1a8a      	subs	r2, r1, r2
 800ca4a:	b292      	uxth	r2, r2
 800ca4c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	685b      	ldr	r3, [r3, #4]
 800ca52:	68fa      	ldr	r2, [r7, #12]
 800ca54:	68d2      	ldr	r2, [r2, #12]
 800ca56:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	68db      	ldr	r3, [r3, #12]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	741a      	strb	r2, [r3, #16]
 800ca60:	2200      	movs	r2, #0
 800ca62:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	68da      	ldr	r2, [r3, #12]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	7a9b      	ldrb	r3, [r3, #10]
 800ca6c:	f003 0301 	and.w	r3, r3, #1
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d001      	beq.n	800ca78 <tcp_output_segment+0x158>
 800ca74:	2318      	movs	r3, #24
 800ca76:	e000      	b.n	800ca7a <tcp_output_segment+0x15a>
 800ca78:	2314      	movs	r3, #20
 800ca7a:	4413      	add	r3, r2
 800ca7c:	69fa      	ldr	r2, [r7, #28]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d006      	beq.n	800ca90 <tcp_output_segment+0x170>
 800ca82:	4b10      	ldr	r3, [pc, #64]	@ (800cac4 <tcp_output_segment+0x1a4>)
 800ca84:	f240 621c 	movw	r2, #1564	@ 0x61c
 800ca88:	4914      	ldr	r1, [pc, #80]	@ (800cadc <tcp_output_segment+0x1bc>)
 800ca8a:	4810      	ldr	r0, [pc, #64]	@ (800cacc <tcp_output_segment+0x1ac>)
 800ca8c:	f003 fea2 	bl	80107d4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	6858      	ldr	r0, [r3, #4]
 800ca94:	68b9      	ldr	r1, [r7, #8]
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	1d1c      	adds	r4, r3, #4
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	7add      	ldrb	r5, [r3, #11]
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	7a9b      	ldrb	r3, [r3, #10]
 800caa2:	687a      	ldr	r2, [r7, #4]
 800caa4:	9202      	str	r2, [sp, #8]
 800caa6:	2206      	movs	r2, #6
 800caa8:	9201      	str	r2, [sp, #4]
 800caaa:	9300      	str	r3, [sp, #0]
 800caac:	462b      	mov	r3, r5
 800caae:	4622      	mov	r2, r4
 800cab0:	f002 fce2 	bl	800f478 <ip4_output_if>
 800cab4:	4603      	mov	r3, r0
 800cab6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800cab8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3720      	adds	r7, #32
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bdb0      	pop	{r4, r5, r7, pc}
 800cac4:	08013174 	.word	0x08013174
 800cac8:	08013738 	.word	0x08013738
 800cacc:	080131c8 	.word	0x080131c8
 800cad0:	08013758 	.word	0x08013758
 800cad4:	08013778 	.word	0x08013778
 800cad8:	2000881c 	.word	0x2000881c
 800cadc:	0801379c 	.word	0x0801379c

0800cae0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800cae0:	b5b0      	push	{r4, r5, r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d106      	bne.n	800cafc <tcp_rexmit_rto_prepare+0x1c>
 800caee:	4b31      	ldr	r3, [pc, #196]	@ (800cbb4 <tcp_rexmit_rto_prepare+0xd4>)
 800caf0:	f240 6263 	movw	r2, #1635	@ 0x663
 800caf4:	4930      	ldr	r1, [pc, #192]	@ (800cbb8 <tcp_rexmit_rto_prepare+0xd8>)
 800caf6:	4831      	ldr	r0, [pc, #196]	@ (800cbbc <tcp_rexmit_rto_prepare+0xdc>)
 800caf8:	f003 fe6c 	bl	80107d4 <iprintf>

  if (pcb->unacked == NULL) {
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d102      	bne.n	800cb0a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800cb04:	f06f 0305 	mvn.w	r3, #5
 800cb08:	e050      	b.n	800cbac <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cb0e:	60fb      	str	r3, [r7, #12]
 800cb10:	e00b      	b.n	800cb2a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800cb12:	68f8      	ldr	r0, [r7, #12]
 800cb14:	f7ff fee4 	bl	800c8e0 <tcp_output_segment_busy>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d002      	beq.n	800cb24 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800cb1e:	f06f 0305 	mvn.w	r3, #5
 800cb22:	e043      	b.n	800cbac <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	60fb      	str	r3, [r7, #12]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d1ef      	bne.n	800cb12 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800cb32:	68f8      	ldr	r0, [r7, #12]
 800cb34:	f7ff fed4 	bl	800c8e0 <tcp_output_segment_busy>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d002      	beq.n	800cb44 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800cb3e:	f06f 0305 	mvn.w	r3, #5
 800cb42:	e033      	b.n	800cbac <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2200      	movs	r2, #0
 800cb58:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	8b5b      	ldrh	r3, [r3, #26]
 800cb5e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800cb62:	b29a      	uxth	r2, r3
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	68db      	ldr	r3, [r3, #12]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7f9 fc67 	bl	8006442 <lwip_htonl>
 800cb74:	4604      	mov	r4, r0
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	891b      	ldrh	r3, [r3, #8]
 800cb7a:	461d      	mov	r5, r3
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	68db      	ldr	r3, [r3, #12]
 800cb80:	899b      	ldrh	r3, [r3, #12]
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	4618      	mov	r0, r3
 800cb86:	f7f9 fc47 	bl	8006418 <lwip_htons>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	f003 0303 	and.w	r3, r3, #3
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d001      	beq.n	800cb9a <tcp_rexmit_rto_prepare+0xba>
 800cb96:	2301      	movs	r3, #1
 800cb98:	e000      	b.n	800cb9c <tcp_rexmit_rto_prepare+0xbc>
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	442b      	add	r3, r5
 800cb9e:	18e2      	adds	r2, r4, r3
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2200      	movs	r2, #0
 800cba8:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800cbaa:	2300      	movs	r3, #0
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3710      	adds	r7, #16
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bdb0      	pop	{r4, r5, r7, pc}
 800cbb4:	08013174 	.word	0x08013174
 800cbb8:	080137b0 	.word	0x080137b0
 800cbbc:	080131c8 	.word	0x080131c8

0800cbc0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d106      	bne.n	800cbdc <tcp_rexmit_rto_commit+0x1c>
 800cbce:	4b0d      	ldr	r3, [pc, #52]	@ (800cc04 <tcp_rexmit_rto_commit+0x44>)
 800cbd0:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800cbd4:	490c      	ldr	r1, [pc, #48]	@ (800cc08 <tcp_rexmit_rto_commit+0x48>)
 800cbd6:	480d      	ldr	r0, [pc, #52]	@ (800cc0c <tcp_rexmit_rto_commit+0x4c>)
 800cbd8:	f003 fdfc 	bl	80107d4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cbe2:	2bff      	cmp	r3, #255	@ 0xff
 800cbe4:	d007      	beq.n	800cbf6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cbec:	3301      	adds	r3, #1
 800cbee:	b2da      	uxtb	r2, r3
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f7ff fc7e 	bl	800c4f8 <tcp_output>
}
 800cbfc:	bf00      	nop
 800cbfe:	3708      	adds	r7, #8
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	08013174 	.word	0x08013174
 800cc08:	080137d4 	.word	0x080137d4
 800cc0c:	080131c8 	.word	0x080131c8

0800cc10 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d106      	bne.n	800cc2c <tcp_rexmit_rto+0x1c>
 800cc1e:	4b0a      	ldr	r3, [pc, #40]	@ (800cc48 <tcp_rexmit_rto+0x38>)
 800cc20:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800cc24:	4909      	ldr	r1, [pc, #36]	@ (800cc4c <tcp_rexmit_rto+0x3c>)
 800cc26:	480a      	ldr	r0, [pc, #40]	@ (800cc50 <tcp_rexmit_rto+0x40>)
 800cc28:	f003 fdd4 	bl	80107d4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f7ff ff57 	bl	800cae0 <tcp_rexmit_rto_prepare>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d102      	bne.n	800cc3e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f7ff ffc1 	bl	800cbc0 <tcp_rexmit_rto_commit>
  }
}
 800cc3e:	bf00      	nop
 800cc40:	3708      	adds	r7, #8
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
 800cc46:	bf00      	nop
 800cc48:	08013174 	.word	0x08013174
 800cc4c:	080137f8 	.word	0x080137f8
 800cc50:	080131c8 	.word	0x080131c8

0800cc54 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800cc54:	b590      	push	{r4, r7, lr}
 800cc56:	b085      	sub	sp, #20
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d106      	bne.n	800cc70 <tcp_rexmit+0x1c>
 800cc62:	4b2f      	ldr	r3, [pc, #188]	@ (800cd20 <tcp_rexmit+0xcc>)
 800cc64:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800cc68:	492e      	ldr	r1, [pc, #184]	@ (800cd24 <tcp_rexmit+0xd0>)
 800cc6a:	482f      	ldr	r0, [pc, #188]	@ (800cd28 <tcp_rexmit+0xd4>)
 800cc6c:	f003 fdb2 	bl	80107d4 <iprintf>

  if (pcb->unacked == NULL) {
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d102      	bne.n	800cc7e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800cc78:	f06f 0305 	mvn.w	r3, #5
 800cc7c:	e04c      	b.n	800cd18 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc82:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800cc84:	68b8      	ldr	r0, [r7, #8]
 800cc86:	f7ff fe2b 	bl	800c8e0 <tcp_output_segment_busy>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d002      	beq.n	800cc96 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800cc90:	f06f 0305 	mvn.w	r3, #5
 800cc94:	e040      	b.n	800cd18 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	681a      	ldr	r2, [r3, #0]
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	336c      	adds	r3, #108	@ 0x6c
 800cca2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cca4:	e002      	b.n	800ccac <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d011      	beq.n	800ccd8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	68db      	ldr	r3, [r3, #12]
 800ccba:	685b      	ldr	r3, [r3, #4]
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7f9 fbc0 	bl	8006442 <lwip_htonl>
 800ccc2:	4604      	mov	r4, r0
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	68db      	ldr	r3, [r3, #12]
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	4618      	mov	r0, r3
 800cccc:	f7f9 fbb9 	bl	8006442 <lwip_htonl>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	dbe6      	blt.n	800cca6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	681a      	ldr	r2, [r3, #0]
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	68ba      	ldr	r2, [r7, #8]
 800cce4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d103      	bne.n	800ccf6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ccfc:	2bff      	cmp	r3, #255	@ 0xff
 800ccfe:	d007      	beq.n	800cd10 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cd06:	3301      	adds	r3, #1
 800cd08:	b2da      	uxtb	r2, r3
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800cd16:	2300      	movs	r3, #0
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3714      	adds	r7, #20
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd90      	pop	{r4, r7, pc}
 800cd20:	08013174 	.word	0x08013174
 800cd24:	08013814 	.word	0x08013814
 800cd28:	080131c8 	.word	0x080131c8

0800cd2c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d106      	bne.n	800cd48 <tcp_rexmit_fast+0x1c>
 800cd3a:	4b2a      	ldr	r3, [pc, #168]	@ (800cde4 <tcp_rexmit_fast+0xb8>)
 800cd3c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800cd40:	4929      	ldr	r1, [pc, #164]	@ (800cde8 <tcp_rexmit_fast+0xbc>)
 800cd42:	482a      	ldr	r0, [pc, #168]	@ (800cdec <tcp_rexmit_fast+0xc0>)
 800cd44:	f003 fd46 	bl	80107d4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d045      	beq.n	800cddc <tcp_rexmit_fast+0xb0>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	8b5b      	ldrh	r3, [r3, #26]
 800cd54:	f003 0304 	and.w	r3, r3, #4
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d13f      	bne.n	800cddc <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f7ff ff79 	bl	800cc54 <tcp_rexmit>
 800cd62:	4603      	mov	r3, r0
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d139      	bne.n	800cddc <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800cd74:	4293      	cmp	r3, r2
 800cd76:	bf28      	it	cs
 800cd78:	4613      	movcs	r3, r2
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	da00      	bge.n	800cd82 <tcp_rexmit_fast+0x56>
 800cd80:	3301      	adds	r3, #1
 800cd82:	105b      	asrs	r3, r3, #1
 800cd84:	b29a      	uxth	r2, r3
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800cd92:	461a      	mov	r2, r3
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cd98:	005b      	lsls	r3, r3, #1
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d206      	bcs.n	800cdac <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cda2:	005b      	lsls	r3, r3, #1
 800cda4:	b29a      	uxth	r2, r3
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	0049      	lsls	r1, r1, #1
 800cdba:	440b      	add	r3, r1
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	4413      	add	r3, r2
 800cdc0:	b29a      	uxth	r2, r3
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	8b5b      	ldrh	r3, [r3, #26]
 800cdcc:	f043 0304 	orr.w	r3, r3, #4
 800cdd0:	b29a      	uxth	r2, r3
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800cddc:	bf00      	nop
 800cdde:	3708      	adds	r7, #8
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}
 800cde4:	08013174 	.word	0x08013174
 800cde8:	0801382c 	.word	0x0801382c
 800cdec:	080131c8 	.word	0x080131c8

0800cdf0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b086      	sub	sp, #24
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	607b      	str	r3, [r7, #4]
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	817b      	strh	r3, [r7, #10]
 800cdfe:	4613      	mov	r3, r2
 800ce00:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ce02:	897a      	ldrh	r2, [r7, #10]
 800ce04:	893b      	ldrh	r3, [r7, #8]
 800ce06:	4413      	add	r3, r2
 800ce08:	b29b      	uxth	r3, r3
 800ce0a:	3314      	adds	r3, #20
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ce12:	4619      	mov	r1, r3
 800ce14:	2022      	movs	r0, #34	@ 0x22
 800ce16:	f7fa fb79 	bl	800750c <pbuf_alloc>
 800ce1a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d04d      	beq.n	800cebe <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ce22:	897b      	ldrh	r3, [r7, #10]
 800ce24:	3313      	adds	r3, #19
 800ce26:	697a      	ldr	r2, [r7, #20]
 800ce28:	8952      	ldrh	r2, [r2, #10]
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	db06      	blt.n	800ce3c <tcp_output_alloc_header_common+0x4c>
 800ce2e:	4b26      	ldr	r3, [pc, #152]	@ (800cec8 <tcp_output_alloc_header_common+0xd8>)
 800ce30:	f240 7223 	movw	r2, #1827	@ 0x723
 800ce34:	4925      	ldr	r1, [pc, #148]	@ (800cecc <tcp_output_alloc_header_common+0xdc>)
 800ce36:	4826      	ldr	r0, [pc, #152]	@ (800ced0 <tcp_output_alloc_header_common+0xe0>)
 800ce38:	f003 fccc 	bl	80107d4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800ce42:	8c3b      	ldrh	r3, [r7, #32]
 800ce44:	4618      	mov	r0, r3
 800ce46:	f7f9 fae7 	bl	8006418 <lwip_htons>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ce52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7f9 fadf 	bl	8006418 <lwip_htons>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ce68:	68f8      	ldr	r0, [r7, #12]
 800ce6a:	f7f9 faea 	bl	8006442 <lwip_htonl>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ce74:	897b      	ldrh	r3, [r7, #10]
 800ce76:	089b      	lsrs	r3, r3, #2
 800ce78:	b29b      	uxth	r3, r3
 800ce7a:	3305      	adds	r3, #5
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	031b      	lsls	r3, r3, #12
 800ce80:	b29a      	uxth	r2, r3
 800ce82:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	4313      	orrs	r3, r2
 800ce8a:	b29b      	uxth	r3, r3
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7f9 fac3 	bl	8006418 <lwip_htons>
 800ce92:	4603      	mov	r3, r0
 800ce94:	461a      	mov	r2, r3
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ce9a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7f9 fabb 	bl	8006418 <lwip_htons>
 800cea2:	4603      	mov	r3, r0
 800cea4:	461a      	mov	r2, r3
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	2200      	movs	r2, #0
 800ceae:	741a      	strb	r2, [r3, #16]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	749a      	strb	r2, [r3, #18]
 800ceba:	2200      	movs	r2, #0
 800cebc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800cebe:	697b      	ldr	r3, [r7, #20]
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3718      	adds	r7, #24
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}
 800cec8:	08013174 	.word	0x08013174
 800cecc:	0801384c 	.word	0x0801384c
 800ced0:	080131c8 	.word	0x080131c8

0800ced4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ced4:	b5b0      	push	{r4, r5, r7, lr}
 800ced6:	b08a      	sub	sp, #40	@ 0x28
 800ced8:	af04      	add	r7, sp, #16
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	607b      	str	r3, [r7, #4]
 800cede:	460b      	mov	r3, r1
 800cee0:	817b      	strh	r3, [r7, #10]
 800cee2:	4613      	mov	r3, r2
 800cee4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d106      	bne.n	800cefa <tcp_output_alloc_header+0x26>
 800ceec:	4b15      	ldr	r3, [pc, #84]	@ (800cf44 <tcp_output_alloc_header+0x70>)
 800ceee:	f240 7242 	movw	r2, #1858	@ 0x742
 800cef2:	4915      	ldr	r1, [pc, #84]	@ (800cf48 <tcp_output_alloc_header+0x74>)
 800cef4:	4815      	ldr	r0, [pc, #84]	@ (800cf4c <tcp_output_alloc_header+0x78>)
 800cef6:	f003 fc6d 	bl	80107d4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	8adb      	ldrh	r3, [r3, #22]
 800cf02:	68fa      	ldr	r2, [r7, #12]
 800cf04:	8b12      	ldrh	r2, [r2, #24]
 800cf06:	68f9      	ldr	r1, [r7, #12]
 800cf08:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800cf0a:	893d      	ldrh	r5, [r7, #8]
 800cf0c:	897c      	ldrh	r4, [r7, #10]
 800cf0e:	9103      	str	r1, [sp, #12]
 800cf10:	2110      	movs	r1, #16
 800cf12:	9102      	str	r1, [sp, #8]
 800cf14:	9201      	str	r2, [sp, #4]
 800cf16:	9300      	str	r3, [sp, #0]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	462a      	mov	r2, r5
 800cf1c:	4621      	mov	r1, r4
 800cf1e:	f7ff ff67 	bl	800cdf0 <tcp_output_alloc_header_common>
 800cf22:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d006      	beq.n	800cf38 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf2e:	68fa      	ldr	r2, [r7, #12]
 800cf30:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800cf32:	441a      	add	r2, r3
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800cf38:	697b      	ldr	r3, [r7, #20]
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3718      	adds	r7, #24
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bdb0      	pop	{r4, r5, r7, pc}
 800cf42:	bf00      	nop
 800cf44:	08013174 	.word	0x08013174
 800cf48:	0801387c 	.word	0x0801387c
 800cf4c:	080131c8 	.word	0x080131c8

0800cf50 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b088      	sub	sp, #32
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	60f8      	str	r0, [r7, #12]
 800cf58:	60b9      	str	r1, [r7, #8]
 800cf5a:	4611      	mov	r1, r2
 800cf5c:	461a      	mov	r2, r3
 800cf5e:	460b      	mov	r3, r1
 800cf60:	71fb      	strb	r3, [r7, #7]
 800cf62:	4613      	mov	r3, r2
 800cf64:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800cf66:	2300      	movs	r3, #0
 800cf68:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d106      	bne.n	800cf7e <tcp_output_fill_options+0x2e>
 800cf70:	4b12      	ldr	r3, [pc, #72]	@ (800cfbc <tcp_output_fill_options+0x6c>)
 800cf72:	f240 7256 	movw	r2, #1878	@ 0x756
 800cf76:	4912      	ldr	r1, [pc, #72]	@ (800cfc0 <tcp_output_fill_options+0x70>)
 800cf78:	4812      	ldr	r0, [pc, #72]	@ (800cfc4 <tcp_output_fill_options+0x74>)
 800cf7a:	f003 fc2b 	bl	80107d4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	685b      	ldr	r3, [r3, #4]
 800cf82:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800cf84:	69bb      	ldr	r3, [r7, #24]
 800cf86:	3314      	adds	r3, #20
 800cf88:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800cf8a:	8bfb      	ldrh	r3, [r7, #30]
 800cf8c:	009b      	lsls	r3, r3, #2
 800cf8e:	461a      	mov	r2, r3
 800cf90:	79fb      	ldrb	r3, [r7, #7]
 800cf92:	009b      	lsls	r3, r3, #2
 800cf94:	f003 0304 	and.w	r3, r3, #4
 800cf98:	4413      	add	r3, r2
 800cf9a:	3314      	adds	r3, #20
 800cf9c:	69ba      	ldr	r2, [r7, #24]
 800cf9e:	4413      	add	r3, r2
 800cfa0:	697a      	ldr	r2, [r7, #20]
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d006      	beq.n	800cfb4 <tcp_output_fill_options+0x64>
 800cfa6:	4b05      	ldr	r3, [pc, #20]	@ (800cfbc <tcp_output_fill_options+0x6c>)
 800cfa8:	f240 7275 	movw	r2, #1909	@ 0x775
 800cfac:	4906      	ldr	r1, [pc, #24]	@ (800cfc8 <tcp_output_fill_options+0x78>)
 800cfae:	4805      	ldr	r0, [pc, #20]	@ (800cfc4 <tcp_output_fill_options+0x74>)
 800cfb0:	f003 fc10 	bl	80107d4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800cfb4:	bf00      	nop
 800cfb6:	3720      	adds	r7, #32
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}
 800cfbc:	08013174 	.word	0x08013174
 800cfc0:	080138a4 	.word	0x080138a4
 800cfc4:	080131c8 	.word	0x080131c8
 800cfc8:	0801379c 	.word	0x0801379c

0800cfcc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b08a      	sub	sp, #40	@ 0x28
 800cfd0:	af04      	add	r7, sp, #16
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	607a      	str	r2, [r7, #4]
 800cfd8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d106      	bne.n	800cfee <tcp_output_control_segment+0x22>
 800cfe0:	4b1c      	ldr	r3, [pc, #112]	@ (800d054 <tcp_output_control_segment+0x88>)
 800cfe2:	f240 7287 	movw	r2, #1927	@ 0x787
 800cfe6:	491c      	ldr	r1, [pc, #112]	@ (800d058 <tcp_output_control_segment+0x8c>)
 800cfe8:	481c      	ldr	r0, [pc, #112]	@ (800d05c <tcp_output_control_segment+0x90>)
 800cfea:	f003 fbf3 	bl	80107d4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800cfee:	683a      	ldr	r2, [r7, #0]
 800cff0:	6879      	ldr	r1, [r7, #4]
 800cff2:	68f8      	ldr	r0, [r7, #12]
 800cff4:	f7fe ff42 	bl	800be7c <tcp_route>
 800cff8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d102      	bne.n	800d006 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d000:	23fc      	movs	r3, #252	@ 0xfc
 800d002:	75fb      	strb	r3, [r7, #23]
 800d004:	e01c      	b.n	800d040 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d006      	beq.n	800d01a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	7adb      	ldrb	r3, [r3, #11]
 800d010:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	7a9b      	ldrb	r3, [r3, #10]
 800d016:	757b      	strb	r3, [r7, #21]
 800d018:	e003      	b.n	800d022 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d01a:	23ff      	movs	r3, #255	@ 0xff
 800d01c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d01e:	2300      	movs	r3, #0
 800d020:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d022:	7dba      	ldrb	r2, [r7, #22]
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	9302      	str	r3, [sp, #8]
 800d028:	2306      	movs	r3, #6
 800d02a:	9301      	str	r3, [sp, #4]
 800d02c:	7d7b      	ldrb	r3, [r7, #21]
 800d02e:	9300      	str	r3, [sp, #0]
 800d030:	4613      	mov	r3, r2
 800d032:	683a      	ldr	r2, [r7, #0]
 800d034:	6879      	ldr	r1, [r7, #4]
 800d036:	68b8      	ldr	r0, [r7, #8]
 800d038:	f002 fa1e 	bl	800f478 <ip4_output_if>
 800d03c:	4603      	mov	r3, r0
 800d03e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d040:	68b8      	ldr	r0, [r7, #8]
 800d042:	f7fa fd47 	bl	8007ad4 <pbuf_free>
  return err;
 800d046:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3718      	adds	r7, #24
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop
 800d054:	08013174 	.word	0x08013174
 800d058:	080138cc 	.word	0x080138cc
 800d05c:	080131c8 	.word	0x080131c8

0800d060 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d060:	b590      	push	{r4, r7, lr}
 800d062:	b08b      	sub	sp, #44	@ 0x2c
 800d064:	af04      	add	r7, sp, #16
 800d066:	60f8      	str	r0, [r7, #12]
 800d068:	60b9      	str	r1, [r7, #8]
 800d06a:	607a      	str	r2, [r7, #4]
 800d06c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d106      	bne.n	800d082 <tcp_rst+0x22>
 800d074:	4b1f      	ldr	r3, [pc, #124]	@ (800d0f4 <tcp_rst+0x94>)
 800d076:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800d07a:	491f      	ldr	r1, [pc, #124]	@ (800d0f8 <tcp_rst+0x98>)
 800d07c:	481f      	ldr	r0, [pc, #124]	@ (800d0fc <tcp_rst+0x9c>)
 800d07e:	f003 fba9 	bl	80107d4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d084:	2b00      	cmp	r3, #0
 800d086:	d106      	bne.n	800d096 <tcp_rst+0x36>
 800d088:	4b1a      	ldr	r3, [pc, #104]	@ (800d0f4 <tcp_rst+0x94>)
 800d08a:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800d08e:	491c      	ldr	r1, [pc, #112]	@ (800d100 <tcp_rst+0xa0>)
 800d090:	481a      	ldr	r0, [pc, #104]	@ (800d0fc <tcp_rst+0x9c>)
 800d092:	f003 fb9f 	bl	80107d4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d096:	2300      	movs	r3, #0
 800d098:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d09a:	f246 0308 	movw	r3, #24584	@ 0x6008
 800d09e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d0a0:	7dfb      	ldrb	r3, [r7, #23]
 800d0a2:	b29c      	uxth	r4, r3
 800d0a4:	68b8      	ldr	r0, [r7, #8]
 800d0a6:	f7f9 f9cc 	bl	8006442 <lwip_htonl>
 800d0aa:	4602      	mov	r2, r0
 800d0ac:	8abb      	ldrh	r3, [r7, #20]
 800d0ae:	9303      	str	r3, [sp, #12]
 800d0b0:	2314      	movs	r3, #20
 800d0b2:	9302      	str	r3, [sp, #8]
 800d0b4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d0b6:	9301      	str	r3, [sp, #4]
 800d0b8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d0ba:	9300      	str	r3, [sp, #0]
 800d0bc:	4613      	mov	r3, r2
 800d0be:	2200      	movs	r2, #0
 800d0c0:	4621      	mov	r1, r4
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f7ff fe94 	bl	800cdf0 <tcp_output_alloc_header_common>
 800d0c8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d00c      	beq.n	800d0ea <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d0d0:	7dfb      	ldrb	r3, [r7, #23]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	6939      	ldr	r1, [r7, #16]
 800d0d6:	68f8      	ldr	r0, [r7, #12]
 800d0d8:	f7ff ff3a 	bl	800cf50 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0de:	683a      	ldr	r2, [r7, #0]
 800d0e0:	6939      	ldr	r1, [r7, #16]
 800d0e2:	68f8      	ldr	r0, [r7, #12]
 800d0e4:	f7ff ff72 	bl	800cfcc <tcp_output_control_segment>
 800d0e8:	e000      	b.n	800d0ec <tcp_rst+0x8c>
    return;
 800d0ea:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d0ec:	371c      	adds	r7, #28
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd90      	pop	{r4, r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	08013174 	.word	0x08013174
 800d0f8:	080138f8 	.word	0x080138f8
 800d0fc:	080131c8 	.word	0x080131c8
 800d100:	08013914 	.word	0x08013914

0800d104 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d104:	b590      	push	{r4, r7, lr}
 800d106:	b087      	sub	sp, #28
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d10c:	2300      	movs	r3, #0
 800d10e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d110:	2300      	movs	r3, #0
 800d112:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d106      	bne.n	800d128 <tcp_send_empty_ack+0x24>
 800d11a:	4b28      	ldr	r3, [pc, #160]	@ (800d1bc <tcp_send_empty_ack+0xb8>)
 800d11c:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800d120:	4927      	ldr	r1, [pc, #156]	@ (800d1c0 <tcp_send_empty_ack+0xbc>)
 800d122:	4828      	ldr	r0, [pc, #160]	@ (800d1c4 <tcp_send_empty_ack+0xc0>)
 800d124:	f003 fb56 	bl	80107d4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d128:	7dfb      	ldrb	r3, [r7, #23]
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	b2db      	uxtb	r3, r3
 800d12e:	f003 0304 	and.w	r3, r3, #4
 800d132:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d134:	7d7b      	ldrb	r3, [r7, #21]
 800d136:	b29c      	uxth	r4, r3
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d13c:	4618      	mov	r0, r3
 800d13e:	f7f9 f980 	bl	8006442 <lwip_htonl>
 800d142:	4603      	mov	r3, r0
 800d144:	2200      	movs	r2, #0
 800d146:	4621      	mov	r1, r4
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f7ff fec3 	bl	800ced4 <tcp_output_alloc_header>
 800d14e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d150:	693b      	ldr	r3, [r7, #16]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d109      	bne.n	800d16a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	8b5b      	ldrh	r3, [r3, #26]
 800d15a:	f043 0303 	orr.w	r3, r3, #3
 800d15e:	b29a      	uxth	r2, r3
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d164:	f06f 0301 	mvn.w	r3, #1
 800d168:	e023      	b.n	800d1b2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d16a:	7dbb      	ldrb	r3, [r7, #22]
 800d16c:	7dfa      	ldrb	r2, [r7, #23]
 800d16e:	6939      	ldr	r1, [r7, #16]
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f7ff feed 	bl	800cf50 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d176:	687a      	ldr	r2, [r7, #4]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	3304      	adds	r3, #4
 800d17c:	6939      	ldr	r1, [r7, #16]
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f7ff ff24 	bl	800cfcc <tcp_output_control_segment>
 800d184:	4603      	mov	r3, r0
 800d186:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d007      	beq.n	800d1a0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	8b5b      	ldrh	r3, [r3, #26]
 800d194:	f043 0303 	orr.w	r3, r3, #3
 800d198:	b29a      	uxth	r2, r3
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	835a      	strh	r2, [r3, #26]
 800d19e:	e006      	b.n	800d1ae <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	8b5b      	ldrh	r3, [r3, #26]
 800d1a4:	f023 0303 	bic.w	r3, r3, #3
 800d1a8:	b29a      	uxth	r2, r3
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d1ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	371c      	adds	r7, #28
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd90      	pop	{r4, r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	08013174 	.word	0x08013174
 800d1c0:	08013930 	.word	0x08013930
 800d1c4:	080131c8 	.word	0x080131c8

0800d1c8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d1c8:	b590      	push	{r4, r7, lr}
 800d1ca:	b087      	sub	sp, #28
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d106      	bne.n	800d1e8 <tcp_keepalive+0x20>
 800d1da:	4b18      	ldr	r3, [pc, #96]	@ (800d23c <tcp_keepalive+0x74>)
 800d1dc:	f640 0224 	movw	r2, #2084	@ 0x824
 800d1e0:	4917      	ldr	r1, [pc, #92]	@ (800d240 <tcp_keepalive+0x78>)
 800d1e2:	4818      	ldr	r0, [pc, #96]	@ (800d244 <tcp_keepalive+0x7c>)
 800d1e4:	f003 faf6 	bl	80107d4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d1e8:	7dfb      	ldrb	r3, [r7, #23]
 800d1ea:	b29c      	uxth	r4, r3
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1f0:	3b01      	subs	r3, #1
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7f9 f925 	bl	8006442 <lwip_htonl>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	4621      	mov	r1, r4
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f7ff fe68 	bl	800ced4 <tcp_output_alloc_header>
 800d204:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d102      	bne.n	800d212 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d20c:	f04f 33ff 	mov.w	r3, #4294967295
 800d210:	e010      	b.n	800d234 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d212:	7dfb      	ldrb	r3, [r7, #23]
 800d214:	2200      	movs	r2, #0
 800d216:	6939      	ldr	r1, [r7, #16]
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f7ff fe99 	bl	800cf50 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d21e:	687a      	ldr	r2, [r7, #4]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	3304      	adds	r3, #4
 800d224:	6939      	ldr	r1, [r7, #16]
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f7ff fed0 	bl	800cfcc <tcp_output_control_segment>
 800d22c:	4603      	mov	r3, r0
 800d22e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d230:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d234:	4618      	mov	r0, r3
 800d236:	371c      	adds	r7, #28
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd90      	pop	{r4, r7, pc}
 800d23c:	08013174 	.word	0x08013174
 800d240:	08013950 	.word	0x08013950
 800d244:	080131c8 	.word	0x080131c8

0800d248 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d248:	b590      	push	{r4, r7, lr}
 800d24a:	b08b      	sub	sp, #44	@ 0x2c
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d250:	2300      	movs	r3, #0
 800d252:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d106      	bne.n	800d26a <tcp_zero_window_probe+0x22>
 800d25c:	4b4c      	ldr	r3, [pc, #304]	@ (800d390 <tcp_zero_window_probe+0x148>)
 800d25e:	f640 024f 	movw	r2, #2127	@ 0x84f
 800d262:	494c      	ldr	r1, [pc, #304]	@ (800d394 <tcp_zero_window_probe+0x14c>)
 800d264:	484c      	ldr	r0, [pc, #304]	@ (800d398 <tcp_zero_window_probe+0x150>)
 800d266:	f003 fab5 	bl	80107d4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d26e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d270:	6a3b      	ldr	r3, [r7, #32]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d101      	bne.n	800d27a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d276:	2300      	movs	r3, #0
 800d278:	e086      	b.n	800d388 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800d280:	2bff      	cmp	r3, #255	@ 0xff
 800d282:	d007      	beq.n	800d294 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800d28a:	3301      	adds	r3, #1
 800d28c:	b2da      	uxtb	r2, r3
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d294:	6a3b      	ldr	r3, [r7, #32]
 800d296:	68db      	ldr	r3, [r3, #12]
 800d298:	899b      	ldrh	r3, [r3, #12]
 800d29a:	b29b      	uxth	r3, r3
 800d29c:	4618      	mov	r0, r3
 800d29e:	f7f9 f8bb 	bl	8006418 <lwip_htons>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	b2db      	uxtb	r3, r3
 800d2a6:	f003 0301 	and.w	r3, r3, #1
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d005      	beq.n	800d2ba <tcp_zero_window_probe+0x72>
 800d2ae:	6a3b      	ldr	r3, [r7, #32]
 800d2b0:	891b      	ldrh	r3, [r3, #8]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d101      	bne.n	800d2ba <tcp_zero_window_probe+0x72>
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	e000      	b.n	800d2bc <tcp_zero_window_probe+0x74>
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d2be:	7ffb      	ldrb	r3, [r7, #31]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	bf0c      	ite	eq
 800d2c4:	2301      	moveq	r3, #1
 800d2c6:	2300      	movne	r3, #0
 800d2c8:	b2db      	uxtb	r3, r3
 800d2ca:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d2cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d2d0:	b299      	uxth	r1, r3
 800d2d2:	6a3b      	ldr	r3, [r7, #32]
 800d2d4:	68db      	ldr	r3, [r3, #12]
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	8bba      	ldrh	r2, [r7, #28]
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f7ff fdfa 	bl	800ced4 <tcp_output_alloc_header>
 800d2e0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d2e2:	69bb      	ldr	r3, [r7, #24]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d102      	bne.n	800d2ee <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d2e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d2ec:	e04c      	b.n	800d388 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d2ee:	69bb      	ldr	r3, [r7, #24]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d2f4:	7ffb      	ldrb	r3, [r7, #31]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d011      	beq.n	800d31e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	899b      	ldrh	r3, [r3, #12]
 800d2fe:	b29b      	uxth	r3, r3
 800d300:	b21b      	sxth	r3, r3
 800d302:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d306:	b21c      	sxth	r4, r3
 800d308:	2011      	movs	r0, #17
 800d30a:	f7f9 f885 	bl	8006418 <lwip_htons>
 800d30e:	4603      	mov	r3, r0
 800d310:	b21b      	sxth	r3, r3
 800d312:	4323      	orrs	r3, r4
 800d314:	b21b      	sxth	r3, r3
 800d316:	b29a      	uxth	r2, r3
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	819a      	strh	r2, [r3, #12]
 800d31c:	e010      	b.n	800d340 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d31e:	69bb      	ldr	r3, [r7, #24]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	3314      	adds	r3, #20
 800d324:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d326:	6a3b      	ldr	r3, [r7, #32]
 800d328:	6858      	ldr	r0, [r3, #4]
 800d32a:	6a3b      	ldr	r3, [r7, #32]
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	891a      	ldrh	r2, [r3, #8]
 800d330:	6a3b      	ldr	r3, [r7, #32]
 800d332:	891b      	ldrh	r3, [r3, #8]
 800d334:	1ad3      	subs	r3, r2, r3
 800d336:	b29b      	uxth	r3, r3
 800d338:	2201      	movs	r2, #1
 800d33a:	6939      	ldr	r1, [r7, #16]
 800d33c:	f7fa fdc4 	bl	8007ec8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d340:	6a3b      	ldr	r3, [r7, #32]
 800d342:	68db      	ldr	r3, [r3, #12]
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	4618      	mov	r0, r3
 800d348:	f7f9 f87b 	bl	8006442 <lwip_htonl>
 800d34c:	4603      	mov	r3, r0
 800d34e:	3301      	adds	r3, #1
 800d350:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	1ad3      	subs	r3, r2, r3
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	da02      	bge.n	800d364 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	68fa      	ldr	r2, [r7, #12]
 800d362:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d364:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d368:	2200      	movs	r2, #0
 800d36a:	69b9      	ldr	r1, [r7, #24]
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f7ff fdef 	bl	800cf50 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d372:	687a      	ldr	r2, [r7, #4]
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	3304      	adds	r3, #4
 800d378:	69b9      	ldr	r1, [r7, #24]
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f7ff fe26 	bl	800cfcc <tcp_output_control_segment>
 800d380:	4603      	mov	r3, r0
 800d382:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d384:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d388:	4618      	mov	r0, r3
 800d38a:	372c      	adds	r7, #44	@ 0x2c
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd90      	pop	{r4, r7, pc}
 800d390:	08013174 	.word	0x08013174
 800d394:	0801396c 	.word	0x0801396c
 800d398:	080131c8 	.word	0x080131c8

0800d39c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b082      	sub	sp, #8
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d3a4:	f7fa ff10 	bl	80081c8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d3a8:	4b0a      	ldr	r3, [pc, #40]	@ (800d3d4 <tcpip_tcp_timer+0x38>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d103      	bne.n	800d3b8 <tcpip_tcp_timer+0x1c>
 800d3b0:	4b09      	ldr	r3, [pc, #36]	@ (800d3d8 <tcpip_tcp_timer+0x3c>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d005      	beq.n	800d3c4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	4908      	ldr	r1, [pc, #32]	@ (800d3dc <tcpip_tcp_timer+0x40>)
 800d3bc:	20fa      	movs	r0, #250	@ 0xfa
 800d3be:	f000 f8f3 	bl	800d5a8 <sys_timeout>
 800d3c2:	e003      	b.n	800d3cc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d3c4:	4b06      	ldr	r3, [pc, #24]	@ (800d3e0 <tcpip_tcp_timer+0x44>)
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	601a      	str	r2, [r3, #0]
  }
}
 800d3ca:	bf00      	nop
 800d3cc:	bf00      	nop
 800d3ce:	3708      	adds	r7, #8
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}
 800d3d4:	20008828 	.word	0x20008828
 800d3d8:	2000882c 	.word	0x2000882c
 800d3dc:	0800d39d 	.word	0x0800d39d
 800d3e0:	20008874 	.word	0x20008874

0800d3e4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d3e8:	4b0a      	ldr	r3, [pc, #40]	@ (800d414 <tcp_timer_needed+0x30>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d10f      	bne.n	800d410 <tcp_timer_needed+0x2c>
 800d3f0:	4b09      	ldr	r3, [pc, #36]	@ (800d418 <tcp_timer_needed+0x34>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d103      	bne.n	800d400 <tcp_timer_needed+0x1c>
 800d3f8:	4b08      	ldr	r3, [pc, #32]	@ (800d41c <tcp_timer_needed+0x38>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d007      	beq.n	800d410 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d400:	4b04      	ldr	r3, [pc, #16]	@ (800d414 <tcp_timer_needed+0x30>)
 800d402:	2201      	movs	r2, #1
 800d404:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d406:	2200      	movs	r2, #0
 800d408:	4905      	ldr	r1, [pc, #20]	@ (800d420 <tcp_timer_needed+0x3c>)
 800d40a:	20fa      	movs	r0, #250	@ 0xfa
 800d40c:	f000 f8cc 	bl	800d5a8 <sys_timeout>
  }
}
 800d410:	bf00      	nop
 800d412:	bd80      	pop	{r7, pc}
 800d414:	20008874 	.word	0x20008874
 800d418:	20008828 	.word	0x20008828
 800d41c:	2000882c 	.word	0x2000882c
 800d420:	0800d39d 	.word	0x0800d39d

0800d424 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b086      	sub	sp, #24
 800d428:	af00      	add	r7, sp, #0
 800d42a:	60f8      	str	r0, [r7, #12]
 800d42c:	60b9      	str	r1, [r7, #8]
 800d42e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d430:	2006      	movs	r0, #6
 800d432:	f7f9 fc69 	bl	8006d08 <memp_malloc>
 800d436:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d109      	bne.n	800d452 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d151      	bne.n	800d4e8 <sys_timeout_abs+0xc4>
 800d444:	4b2a      	ldr	r3, [pc, #168]	@ (800d4f0 <sys_timeout_abs+0xcc>)
 800d446:	22be      	movs	r2, #190	@ 0xbe
 800d448:	492a      	ldr	r1, [pc, #168]	@ (800d4f4 <sys_timeout_abs+0xd0>)
 800d44a:	482b      	ldr	r0, [pc, #172]	@ (800d4f8 <sys_timeout_abs+0xd4>)
 800d44c:	f003 f9c2 	bl	80107d4 <iprintf>
    return;
 800d450:	e04a      	b.n	800d4e8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	2200      	movs	r2, #0
 800d456:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	68ba      	ldr	r2, [r7, #8]
 800d45c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	687a      	ldr	r2, [r7, #4]
 800d462:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	68fa      	ldr	r2, [r7, #12]
 800d468:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d46a:	4b24      	ldr	r3, [pc, #144]	@ (800d4fc <sys_timeout_abs+0xd8>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d103      	bne.n	800d47a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d472:	4a22      	ldr	r2, [pc, #136]	@ (800d4fc <sys_timeout_abs+0xd8>)
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	6013      	str	r3, [r2, #0]
    return;
 800d478:	e037      	b.n	800d4ea <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	685a      	ldr	r2, [r3, #4]
 800d47e:	4b1f      	ldr	r3, [pc, #124]	@ (800d4fc <sys_timeout_abs+0xd8>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	1ad3      	subs	r3, r2, r3
 800d486:	0fdb      	lsrs	r3, r3, #31
 800d488:	f003 0301 	and.w	r3, r3, #1
 800d48c:	b2db      	uxtb	r3, r3
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d007      	beq.n	800d4a2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d492:	4b1a      	ldr	r3, [pc, #104]	@ (800d4fc <sys_timeout_abs+0xd8>)
 800d494:	681a      	ldr	r2, [r3, #0]
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d49a:	4a18      	ldr	r2, [pc, #96]	@ (800d4fc <sys_timeout_abs+0xd8>)
 800d49c:	693b      	ldr	r3, [r7, #16]
 800d49e:	6013      	str	r3, [r2, #0]
 800d4a0:	e023      	b.n	800d4ea <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d4a2:	4b16      	ldr	r3, [pc, #88]	@ (800d4fc <sys_timeout_abs+0xd8>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	617b      	str	r3, [r7, #20]
 800d4a8:	e01a      	b.n	800d4e0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d00b      	beq.n	800d4ca <sys_timeout_abs+0xa6>
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	685a      	ldr	r2, [r3, #4]
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	1ad3      	subs	r3, r2, r3
 800d4be:	0fdb      	lsrs	r3, r3, #31
 800d4c0:	f003 0301 	and.w	r3, r3, #1
 800d4c4:	b2db      	uxtb	r3, r3
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d007      	beq.n	800d4da <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	681a      	ldr	r2, [r3, #0]
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	693a      	ldr	r2, [r7, #16]
 800d4d6:	601a      	str	r2, [r3, #0]
        break;
 800d4d8:	e007      	b.n	800d4ea <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	617b      	str	r3, [r7, #20]
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d1e1      	bne.n	800d4aa <sys_timeout_abs+0x86>
 800d4e6:	e000      	b.n	800d4ea <sys_timeout_abs+0xc6>
    return;
 800d4e8:	bf00      	nop
      }
    }
  }
}
 800d4ea:	3718      	adds	r7, #24
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}
 800d4f0:	08013990 	.word	0x08013990
 800d4f4:	080139c4 	.word	0x080139c4
 800d4f8:	08013a04 	.word	0x08013a04
 800d4fc:	2000886c 	.word	0x2000886c

0800d500 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b086      	sub	sp, #24
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	4798      	blx	r3

  now = sys_now();
 800d512:	f7f8 fd6d 	bl	8005ff0 <sys_now>
 800d516:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	681a      	ldr	r2, [r3, #0]
 800d51c:	4b0f      	ldr	r3, [pc, #60]	@ (800d55c <lwip_cyclic_timer+0x5c>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4413      	add	r3, r2
 800d522:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d524:	68fa      	ldr	r2, [r7, #12]
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	1ad3      	subs	r3, r2, r3
 800d52a:	0fdb      	lsrs	r3, r3, #31
 800d52c:	f003 0301 	and.w	r3, r3, #1
 800d530:	b2db      	uxtb	r3, r3
 800d532:	2b00      	cmp	r3, #0
 800d534:	d009      	beq.n	800d54a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	681a      	ldr	r2, [r3, #0]
 800d53a:	693b      	ldr	r3, [r7, #16]
 800d53c:	4413      	add	r3, r2
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	4907      	ldr	r1, [pc, #28]	@ (800d560 <lwip_cyclic_timer+0x60>)
 800d542:	4618      	mov	r0, r3
 800d544:	f7ff ff6e 	bl	800d424 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d548:	e004      	b.n	800d554 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d54a:	687a      	ldr	r2, [r7, #4]
 800d54c:	4904      	ldr	r1, [pc, #16]	@ (800d560 <lwip_cyclic_timer+0x60>)
 800d54e:	68f8      	ldr	r0, [r7, #12]
 800d550:	f7ff ff68 	bl	800d424 <sys_timeout_abs>
}
 800d554:	bf00      	nop
 800d556:	3718      	adds	r7, #24
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}
 800d55c:	20008870 	.word	0x20008870
 800d560:	0800d501 	.word	0x0800d501

0800d564 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d56a:	2301      	movs	r3, #1
 800d56c:	607b      	str	r3, [r7, #4]
 800d56e:	e00e      	b.n	800d58e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d570:	4a0b      	ldr	r2, [pc, #44]	@ (800d5a0 <sys_timeouts_init+0x3c>)
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	00db      	lsls	r3, r3, #3
 800d57c:	4a08      	ldr	r2, [pc, #32]	@ (800d5a0 <sys_timeouts_init+0x3c>)
 800d57e:	4413      	add	r3, r2
 800d580:	461a      	mov	r2, r3
 800d582:	4908      	ldr	r1, [pc, #32]	@ (800d5a4 <sys_timeouts_init+0x40>)
 800d584:	f000 f810 	bl	800d5a8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	3301      	adds	r3, #1
 800d58c:	607b      	str	r3, [r7, #4]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2b02      	cmp	r3, #2
 800d592:	d9ed      	bls.n	800d570 <sys_timeouts_init+0xc>
  }
}
 800d594:	bf00      	nop
 800d596:	bf00      	nop
 800d598:	3708      	adds	r7, #8
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}
 800d59e:	bf00      	nop
 800d5a0:	0801457c 	.word	0x0801457c
 800d5a4:	0800d501 	.word	0x0800d501

0800d5a8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b086      	sub	sp, #24
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	60f8      	str	r0, [r7, #12]
 800d5b0:	60b9      	str	r1, [r7, #8]
 800d5b2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d5ba:	d306      	bcc.n	800d5ca <sys_timeout+0x22>
 800d5bc:	4b0a      	ldr	r3, [pc, #40]	@ (800d5e8 <sys_timeout+0x40>)
 800d5be:	f240 1229 	movw	r2, #297	@ 0x129
 800d5c2:	490a      	ldr	r1, [pc, #40]	@ (800d5ec <sys_timeout+0x44>)
 800d5c4:	480a      	ldr	r0, [pc, #40]	@ (800d5f0 <sys_timeout+0x48>)
 800d5c6:	f003 f905 	bl	80107d4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d5ca:	f7f8 fd11 	bl	8005ff0 <sys_now>
 800d5ce:	4602      	mov	r2, r0
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	4413      	add	r3, r2
 800d5d4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d5d6:	687a      	ldr	r2, [r7, #4]
 800d5d8:	68b9      	ldr	r1, [r7, #8]
 800d5da:	6978      	ldr	r0, [r7, #20]
 800d5dc:	f7ff ff22 	bl	800d424 <sys_timeout_abs>
#endif
}
 800d5e0:	bf00      	nop
 800d5e2:	3718      	adds	r7, #24
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	08013990 	.word	0x08013990
 800d5ec:	08013a2c 	.word	0x08013a2c
 800d5f0:	08013a04 	.word	0x08013a04

0800d5f4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b084      	sub	sp, #16
 800d5f8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d5fa:	f7f8 fcf9 	bl	8005ff0 <sys_now>
 800d5fe:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d600:	4b1a      	ldr	r3, [pc, #104]	@ (800d66c <sys_check_timeouts+0x78>)
 800d602:	781b      	ldrb	r3, [r3, #0]
 800d604:	b2db      	uxtb	r3, r3
 800d606:	2b00      	cmp	r3, #0
 800d608:	d001      	beq.n	800d60e <sys_check_timeouts+0x1a>
 800d60a:	f7f9 ff29 	bl	8007460 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d60e:	4b18      	ldr	r3, [pc, #96]	@ (800d670 <sys_check_timeouts+0x7c>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d022      	beq.n	800d660 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	685b      	ldr	r3, [r3, #4]
 800d61e:	68fa      	ldr	r2, [r7, #12]
 800d620:	1ad3      	subs	r3, r2, r3
 800d622:	0fdb      	lsrs	r3, r3, #31
 800d624:	f003 0301 	and.w	r3, r3, #1
 800d628:	b2db      	uxtb	r3, r3
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d11a      	bne.n	800d664 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	4a0f      	ldr	r2, [pc, #60]	@ (800d670 <sys_check_timeouts+0x7c>)
 800d634:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	689b      	ldr	r3, [r3, #8]
 800d63a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	68db      	ldr	r3, [r3, #12]
 800d640:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	685b      	ldr	r3, [r3, #4]
 800d646:	4a0b      	ldr	r2, [pc, #44]	@ (800d674 <sys_check_timeouts+0x80>)
 800d648:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d64a:	68b9      	ldr	r1, [r7, #8]
 800d64c:	2006      	movs	r0, #6
 800d64e:	f7f9 fbcb 	bl	8006de8 <memp_free>
    if (handler != NULL) {
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d0d3      	beq.n	800d600 <sys_check_timeouts+0xc>
      handler(arg);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6838      	ldr	r0, [r7, #0]
 800d65c:	4798      	blx	r3
  do {
 800d65e:	e7cf      	b.n	800d600 <sys_check_timeouts+0xc>
      return;
 800d660:	bf00      	nop
 800d662:	e000      	b.n	800d666 <sys_check_timeouts+0x72>
      return;
 800d664:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d666:	3710      	adds	r7, #16
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}
 800d66c:	20008819 	.word	0x20008819
 800d670:	2000886c 	.word	0x2000886c
 800d674:	20008870 	.word	0x20008870

0800d678 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d67c:	f002 ffaa 	bl	80105d4 <rand>
 800d680:	4603      	mov	r3, r0
 800d682:	b29b      	uxth	r3, r3
 800d684:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d688:	b29b      	uxth	r3, r3
 800d68a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800d68e:	b29a      	uxth	r2, r3
 800d690:	4b01      	ldr	r3, [pc, #4]	@ (800d698 <udp_init+0x20>)
 800d692:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d694:	bf00      	nop
 800d696:	bd80      	pop	{r7, pc}
 800d698:	20000028 	.word	0x20000028

0800d69c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800d69c:	b480      	push	{r7}
 800d69e:	b083      	sub	sp, #12
 800d6a0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d6a6:	4b17      	ldr	r3, [pc, #92]	@ (800d704 <udp_new_port+0x68>)
 800d6a8:	881b      	ldrh	r3, [r3, #0]
 800d6aa:	1c5a      	adds	r2, r3, #1
 800d6ac:	b291      	uxth	r1, r2
 800d6ae:	4a15      	ldr	r2, [pc, #84]	@ (800d704 <udp_new_port+0x68>)
 800d6b0:	8011      	strh	r1, [r2, #0]
 800d6b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	d103      	bne.n	800d6c2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d6ba:	4b12      	ldr	r3, [pc, #72]	@ (800d704 <udp_new_port+0x68>)
 800d6bc:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800d6c0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d6c2:	4b11      	ldr	r3, [pc, #68]	@ (800d708 <udp_new_port+0x6c>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	603b      	str	r3, [r7, #0]
 800d6c8:	e011      	b.n	800d6ee <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	8a5a      	ldrh	r2, [r3, #18]
 800d6ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d704 <udp_new_port+0x68>)
 800d6d0:	881b      	ldrh	r3, [r3, #0]
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d108      	bne.n	800d6e8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d6d6:	88fb      	ldrh	r3, [r7, #6]
 800d6d8:	3301      	adds	r3, #1
 800d6da:	80fb      	strh	r3, [r7, #6]
 800d6dc:	88fb      	ldrh	r3, [r7, #6]
 800d6de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d6e2:	d3e0      	bcc.n	800d6a6 <udp_new_port+0xa>
        return 0;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	e007      	b.n	800d6f8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	603b      	str	r3, [r7, #0]
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d1ea      	bne.n	800d6ca <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800d6f4:	4b03      	ldr	r3, [pc, #12]	@ (800d704 <udp_new_port+0x68>)
 800d6f6:	881b      	ldrh	r3, [r3, #0]
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	370c      	adds	r7, #12
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d702:	4770      	bx	lr
 800d704:	20000028 	.word	0x20000028
 800d708:	20008878 	.word	0x20008878

0800d70c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	4613      	mov	r3, r2
 800d718:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d105      	bne.n	800d72c <udp_input_local_match+0x20>
 800d720:	4b27      	ldr	r3, [pc, #156]	@ (800d7c0 <udp_input_local_match+0xb4>)
 800d722:	2287      	movs	r2, #135	@ 0x87
 800d724:	4927      	ldr	r1, [pc, #156]	@ (800d7c4 <udp_input_local_match+0xb8>)
 800d726:	4828      	ldr	r0, [pc, #160]	@ (800d7c8 <udp_input_local_match+0xbc>)
 800d728:	f003 f854 	bl	80107d4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d105      	bne.n	800d73e <udp_input_local_match+0x32>
 800d732:	4b23      	ldr	r3, [pc, #140]	@ (800d7c0 <udp_input_local_match+0xb4>)
 800d734:	2288      	movs	r2, #136	@ 0x88
 800d736:	4925      	ldr	r1, [pc, #148]	@ (800d7cc <udp_input_local_match+0xc0>)
 800d738:	4823      	ldr	r0, [pc, #140]	@ (800d7c8 <udp_input_local_match+0xbc>)
 800d73a:	f003 f84b 	bl	80107d4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	7a1b      	ldrb	r3, [r3, #8]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d00b      	beq.n	800d75e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	7a1a      	ldrb	r2, [r3, #8]
 800d74a:	4b21      	ldr	r3, [pc, #132]	@ (800d7d0 <udp_input_local_match+0xc4>)
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d752:	3301      	adds	r3, #1
 800d754:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d756:	429a      	cmp	r2, r3
 800d758:	d001      	beq.n	800d75e <udp_input_local_match+0x52>
    return 0;
 800d75a:	2300      	movs	r3, #0
 800d75c:	e02b      	b.n	800d7b6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d75e:	79fb      	ldrb	r3, [r7, #7]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d018      	beq.n	800d796 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d013      	beq.n	800d792 <udp_input_local_match+0x86>
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d00f      	beq.n	800d792 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d772:	4b17      	ldr	r3, [pc, #92]	@ (800d7d0 <udp_input_local_match+0xc4>)
 800d774:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d77a:	d00a      	beq.n	800d792 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	681a      	ldr	r2, [r3, #0]
 800d780:	4b13      	ldr	r3, [pc, #76]	@ (800d7d0 <udp_input_local_match+0xc4>)
 800d782:	695b      	ldr	r3, [r3, #20]
 800d784:	405a      	eors	r2, r3
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	3308      	adds	r3, #8
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d110      	bne.n	800d7b4 <udp_input_local_match+0xa8>
          return 1;
 800d792:	2301      	movs	r3, #1
 800d794:	e00f      	b.n	800d7b6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d009      	beq.n	800d7b0 <udp_input_local_match+0xa4>
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d005      	beq.n	800d7b0 <udp_input_local_match+0xa4>
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681a      	ldr	r2, [r3, #0]
 800d7a8:	4b09      	ldr	r3, [pc, #36]	@ (800d7d0 <udp_input_local_match+0xc4>)
 800d7aa:	695b      	ldr	r3, [r3, #20]
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d101      	bne.n	800d7b4 <udp_input_local_match+0xa8>
        return 1;
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e000      	b.n	800d7b6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800d7b4:	2300      	movs	r3, #0
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3710      	adds	r7, #16
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}
 800d7be:	bf00      	nop
 800d7c0:	08013a78 	.word	0x08013a78
 800d7c4:	08013aa8 	.word	0x08013aa8
 800d7c8:	08013acc 	.word	0x08013acc
 800d7cc:	08013af4 	.word	0x08013af4
 800d7d0:	200052ac 	.word	0x200052ac

0800d7d4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d7d4:	b590      	push	{r4, r7, lr}
 800d7d6:	b08d      	sub	sp, #52	@ 0x34
 800d7d8:	af02      	add	r7, sp, #8
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d105      	bne.n	800d7f4 <udp_input+0x20>
 800d7e8:	4b7c      	ldr	r3, [pc, #496]	@ (800d9dc <udp_input+0x208>)
 800d7ea:	22cf      	movs	r2, #207	@ 0xcf
 800d7ec:	497c      	ldr	r1, [pc, #496]	@ (800d9e0 <udp_input+0x20c>)
 800d7ee:	487d      	ldr	r0, [pc, #500]	@ (800d9e4 <udp_input+0x210>)
 800d7f0:	f002 fff0 	bl	80107d4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d105      	bne.n	800d806 <udp_input+0x32>
 800d7fa:	4b78      	ldr	r3, [pc, #480]	@ (800d9dc <udp_input+0x208>)
 800d7fc:	22d0      	movs	r2, #208	@ 0xd0
 800d7fe:	497a      	ldr	r1, [pc, #488]	@ (800d9e8 <udp_input+0x214>)
 800d800:	4878      	ldr	r0, [pc, #480]	@ (800d9e4 <udp_input+0x210>)
 800d802:	f002 ffe7 	bl	80107d4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	895b      	ldrh	r3, [r3, #10]
 800d80a:	2b07      	cmp	r3, #7
 800d80c:	d803      	bhi.n	800d816 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f7fa f960 	bl	8007ad4 <pbuf_free>
    goto end;
 800d814:	e0de      	b.n	800d9d4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	685b      	ldr	r3, [r3, #4]
 800d81a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d81c:	4b73      	ldr	r3, [pc, #460]	@ (800d9ec <udp_input+0x218>)
 800d81e:	695b      	ldr	r3, [r3, #20]
 800d820:	4a72      	ldr	r2, [pc, #456]	@ (800d9ec <udp_input+0x218>)
 800d822:	6812      	ldr	r2, [r2, #0]
 800d824:	4611      	mov	r1, r2
 800d826:	4618      	mov	r0, r3
 800d828:	f001 fefe 	bl	800f628 <ip4_addr_isbroadcast_u32>
 800d82c:	4603      	mov	r3, r0
 800d82e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	881b      	ldrh	r3, [r3, #0]
 800d834:	b29b      	uxth	r3, r3
 800d836:	4618      	mov	r0, r3
 800d838:	f7f8 fdee 	bl	8006418 <lwip_htons>
 800d83c:	4603      	mov	r3, r0
 800d83e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	885b      	ldrh	r3, [r3, #2]
 800d844:	b29b      	uxth	r3, r3
 800d846:	4618      	mov	r0, r3
 800d848:	f7f8 fde6 	bl	8006418 <lwip_htons>
 800d84c:	4603      	mov	r3, r0
 800d84e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d850:	2300      	movs	r3, #0
 800d852:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800d854:	2300      	movs	r3, #0
 800d856:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d858:	2300      	movs	r3, #0
 800d85a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d85c:	4b64      	ldr	r3, [pc, #400]	@ (800d9f0 <udp_input+0x21c>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	627b      	str	r3, [r7, #36]	@ 0x24
 800d862:	e054      	b.n	800d90e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d866:	8a5b      	ldrh	r3, [r3, #18]
 800d868:	89fa      	ldrh	r2, [r7, #14]
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d14a      	bne.n	800d904 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d86e:	7cfb      	ldrb	r3, [r7, #19]
 800d870:	461a      	mov	r2, r3
 800d872:	6839      	ldr	r1, [r7, #0]
 800d874:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d876:	f7ff ff49 	bl	800d70c <udp_input_local_match>
 800d87a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d041      	beq.n	800d904 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d882:	7c1b      	ldrb	r3, [r3, #16]
 800d884:	f003 0304 	and.w	r3, r3, #4
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d11d      	bne.n	800d8c8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800d88c:	69fb      	ldr	r3, [r7, #28]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d102      	bne.n	800d898 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800d892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d894:	61fb      	str	r3, [r7, #28]
 800d896:	e017      	b.n	800d8c8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d898:	7cfb      	ldrb	r3, [r7, #19]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d014      	beq.n	800d8c8 <udp_input+0xf4>
 800d89e:	4b53      	ldr	r3, [pc, #332]	@ (800d9ec <udp_input+0x218>)
 800d8a0:	695b      	ldr	r3, [r3, #20]
 800d8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8a6:	d10f      	bne.n	800d8c8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d8a8:	69fb      	ldr	r3, [r7, #28]
 800d8aa:	681a      	ldr	r2, [r3, #0]
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	3304      	adds	r3, #4
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d008      	beq.n	800d8c8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b8:	681a      	ldr	r2, [r3, #0]
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	3304      	adds	r3, #4
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d101      	bne.n	800d8c8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800d8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ca:	8a9b      	ldrh	r3, [r3, #20]
 800d8cc:	8a3a      	ldrh	r2, [r7, #16]
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d118      	bne.n	800d904 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d8d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d005      	beq.n	800d8e6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8dc:	685a      	ldr	r2, [r3, #4]
 800d8de:	4b43      	ldr	r3, [pc, #268]	@ (800d9ec <udp_input+0x218>)
 800d8e0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d10e      	bne.n	800d904 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d8e6:	6a3b      	ldr	r3, [r7, #32]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d014      	beq.n	800d916 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ee:	68da      	ldr	r2, [r3, #12]
 800d8f0:	6a3b      	ldr	r3, [r7, #32]
 800d8f2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d8f4:	4b3e      	ldr	r3, [pc, #248]	@ (800d9f0 <udp_input+0x21c>)
 800d8f6:	681a      	ldr	r2, [r3, #0]
 800d8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8fa:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d8fc:	4a3c      	ldr	r2, [pc, #240]	@ (800d9f0 <udp_input+0x21c>)
 800d8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d900:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d902:	e008      	b.n	800d916 <udp_input+0x142>
      }
    }

    prev = pcb;
 800d904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d906:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d90a:	68db      	ldr	r3, [r3, #12]
 800d90c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d910:	2b00      	cmp	r3, #0
 800d912:	d1a7      	bne.n	800d864 <udp_input+0x90>
 800d914:	e000      	b.n	800d918 <udp_input+0x144>
        break;
 800d916:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d101      	bne.n	800d922 <udp_input+0x14e>
    pcb = uncon_pcb;
 800d91e:	69fb      	ldr	r3, [r7, #28]
 800d920:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d924:	2b00      	cmp	r3, #0
 800d926:	d002      	beq.n	800d92e <udp_input+0x15a>
    for_us = 1;
 800d928:	2301      	movs	r3, #1
 800d92a:	76fb      	strb	r3, [r7, #27]
 800d92c:	e00a      	b.n	800d944 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	3304      	adds	r3, #4
 800d932:	681a      	ldr	r2, [r3, #0]
 800d934:	4b2d      	ldr	r3, [pc, #180]	@ (800d9ec <udp_input+0x218>)
 800d936:	695b      	ldr	r3, [r3, #20]
 800d938:	429a      	cmp	r2, r3
 800d93a:	bf0c      	ite	eq
 800d93c:	2301      	moveq	r3, #1
 800d93e:	2300      	movne	r3, #0
 800d940:	b2db      	uxtb	r3, r3
 800d942:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d944:	7efb      	ldrb	r3, [r7, #27]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d041      	beq.n	800d9ce <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d94a:	2108      	movs	r1, #8
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f7fa f83b 	bl	80079c8 <pbuf_remove_header>
 800d952:	4603      	mov	r3, r0
 800d954:	2b00      	cmp	r3, #0
 800d956:	d00a      	beq.n	800d96e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d958:	4b20      	ldr	r3, [pc, #128]	@ (800d9dc <udp_input+0x208>)
 800d95a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800d95e:	4925      	ldr	r1, [pc, #148]	@ (800d9f4 <udp_input+0x220>)
 800d960:	4820      	ldr	r0, [pc, #128]	@ (800d9e4 <udp_input+0x210>)
 800d962:	f002 ff37 	bl	80107d4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f7fa f8b4 	bl	8007ad4 <pbuf_free>
      goto end;
 800d96c:	e032      	b.n	800d9d4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800d96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d970:	2b00      	cmp	r3, #0
 800d972:	d012      	beq.n	800d99a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d976:	699b      	ldr	r3, [r3, #24]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d00a      	beq.n	800d992 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d97e:	699c      	ldr	r4, [r3, #24]
 800d980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d982:	69d8      	ldr	r0, [r3, #28]
 800d984:	8a3b      	ldrh	r3, [r7, #16]
 800d986:	9300      	str	r3, [sp, #0]
 800d988:	4b1b      	ldr	r3, [pc, #108]	@ (800d9f8 <udp_input+0x224>)
 800d98a:	687a      	ldr	r2, [r7, #4]
 800d98c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d98e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800d990:	e021      	b.n	800d9d6 <udp_input+0x202>
        pbuf_free(p);
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f7fa f89e 	bl	8007ad4 <pbuf_free>
        goto end;
 800d998:	e01c      	b.n	800d9d4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d99a:	7cfb      	ldrb	r3, [r7, #19]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d112      	bne.n	800d9c6 <udp_input+0x1f2>
 800d9a0:	4b12      	ldr	r3, [pc, #72]	@ (800d9ec <udp_input+0x218>)
 800d9a2:	695b      	ldr	r3, [r3, #20]
 800d9a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d9a8:	2be0      	cmp	r3, #224	@ 0xe0
 800d9aa:	d00c      	beq.n	800d9c6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d9ac:	4b0f      	ldr	r3, [pc, #60]	@ (800d9ec <udp_input+0x218>)
 800d9ae:	899b      	ldrh	r3, [r3, #12]
 800d9b0:	3308      	adds	r3, #8
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	b21b      	sxth	r3, r3
 800d9b6:	4619      	mov	r1, r3
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f7fa f878 	bl	8007aae <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d9be:	2103      	movs	r1, #3
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f001 fb11 	bl	800efe8 <icmp_dest_unreach>
      pbuf_free(p);
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f7fa f884 	bl	8007ad4 <pbuf_free>
  return;
 800d9cc:	e003      	b.n	800d9d6 <udp_input+0x202>
    pbuf_free(p);
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f7fa f880 	bl	8007ad4 <pbuf_free>
  return;
 800d9d4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d9d6:	372c      	adds	r7, #44	@ 0x2c
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd90      	pop	{r4, r7, pc}
 800d9dc:	08013a78 	.word	0x08013a78
 800d9e0:	08013b1c 	.word	0x08013b1c
 800d9e4:	08013acc 	.word	0x08013acc
 800d9e8:	08013b34 	.word	0x08013b34
 800d9ec:	200052ac 	.word	0x200052ac
 800d9f0:	20008878 	.word	0x20008878
 800d9f4:	08013b50 	.word	0x08013b50
 800d9f8:	200052bc 	.word	0x200052bc

0800d9fc <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b088      	sub	sp, #32
 800da00:	af02      	add	r7, sp, #8
 800da02:	60f8      	str	r0, [r7, #12]
 800da04:	60b9      	str	r1, [r7, #8]
 800da06:	607a      	str	r2, [r7, #4]
 800da08:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d109      	bne.n	800da24 <udp_sendto+0x28>
 800da10:	4b23      	ldr	r3, [pc, #140]	@ (800daa0 <udp_sendto+0xa4>)
 800da12:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800da16:	4923      	ldr	r1, [pc, #140]	@ (800daa4 <udp_sendto+0xa8>)
 800da18:	4823      	ldr	r0, [pc, #140]	@ (800daa8 <udp_sendto+0xac>)
 800da1a:	f002 fedb 	bl	80107d4 <iprintf>
 800da1e:	f06f 030f 	mvn.w	r3, #15
 800da22:	e038      	b.n	800da96 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d109      	bne.n	800da3e <udp_sendto+0x42>
 800da2a:	4b1d      	ldr	r3, [pc, #116]	@ (800daa0 <udp_sendto+0xa4>)
 800da2c:	f240 2219 	movw	r2, #537	@ 0x219
 800da30:	491e      	ldr	r1, [pc, #120]	@ (800daac <udp_sendto+0xb0>)
 800da32:	481d      	ldr	r0, [pc, #116]	@ (800daa8 <udp_sendto+0xac>)
 800da34:	f002 fece 	bl	80107d4 <iprintf>
 800da38:	f06f 030f 	mvn.w	r3, #15
 800da3c:	e02b      	b.n	800da96 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d109      	bne.n	800da58 <udp_sendto+0x5c>
 800da44:	4b16      	ldr	r3, [pc, #88]	@ (800daa0 <udp_sendto+0xa4>)
 800da46:	f240 221a 	movw	r2, #538	@ 0x21a
 800da4a:	4919      	ldr	r1, [pc, #100]	@ (800dab0 <udp_sendto+0xb4>)
 800da4c:	4816      	ldr	r0, [pc, #88]	@ (800daa8 <udp_sendto+0xac>)
 800da4e:	f002 fec1 	bl	80107d4 <iprintf>
 800da52:	f06f 030f 	mvn.w	r3, #15
 800da56:	e01e      	b.n	800da96 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	7a1b      	ldrb	r3, [r3, #8]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d006      	beq.n	800da6e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	7a1b      	ldrb	r3, [r3, #8]
 800da64:	4618      	mov	r0, r3
 800da66:	f7f9 fcd5 	bl	8007414 <netif_get_by_index>
 800da6a:	6178      	str	r0, [r7, #20]
 800da6c:	e003      	b.n	800da76 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f001 fb44 	bl	800f0fc <ip4_route>
 800da74:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d102      	bne.n	800da82 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800da7c:	f06f 0303 	mvn.w	r3, #3
 800da80:	e009      	b.n	800da96 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800da82:	887a      	ldrh	r2, [r7, #2]
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	9300      	str	r3, [sp, #0]
 800da88:	4613      	mov	r3, r2
 800da8a:	687a      	ldr	r2, [r7, #4]
 800da8c:	68b9      	ldr	r1, [r7, #8]
 800da8e:	68f8      	ldr	r0, [r7, #12]
 800da90:	f000 f810 	bl	800dab4 <udp_sendto_if>
 800da94:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800da96:	4618      	mov	r0, r3
 800da98:	3718      	adds	r7, #24
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}
 800da9e:	bf00      	nop
 800daa0:	08013a78 	.word	0x08013a78
 800daa4:	08013b9c 	.word	0x08013b9c
 800daa8:	08013acc 	.word	0x08013acc
 800daac:	08013bb4 	.word	0x08013bb4
 800dab0:	08013bd0 	.word	0x08013bd0

0800dab4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b088      	sub	sp, #32
 800dab8:	af02      	add	r7, sp, #8
 800daba:	60f8      	str	r0, [r7, #12]
 800dabc:	60b9      	str	r1, [r7, #8]
 800dabe:	607a      	str	r2, [r7, #4]
 800dac0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d109      	bne.n	800dadc <udp_sendto_if+0x28>
 800dac8:	4b2e      	ldr	r3, [pc, #184]	@ (800db84 <udp_sendto_if+0xd0>)
 800daca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dace:	492e      	ldr	r1, [pc, #184]	@ (800db88 <udp_sendto_if+0xd4>)
 800dad0:	482e      	ldr	r0, [pc, #184]	@ (800db8c <udp_sendto_if+0xd8>)
 800dad2:	f002 fe7f 	bl	80107d4 <iprintf>
 800dad6:	f06f 030f 	mvn.w	r3, #15
 800dada:	e04f      	b.n	800db7c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d109      	bne.n	800daf6 <udp_sendto_if+0x42>
 800dae2:	4b28      	ldr	r3, [pc, #160]	@ (800db84 <udp_sendto_if+0xd0>)
 800dae4:	f240 2281 	movw	r2, #641	@ 0x281
 800dae8:	4929      	ldr	r1, [pc, #164]	@ (800db90 <udp_sendto_if+0xdc>)
 800daea:	4828      	ldr	r0, [pc, #160]	@ (800db8c <udp_sendto_if+0xd8>)
 800daec:	f002 fe72 	bl	80107d4 <iprintf>
 800daf0:	f06f 030f 	mvn.w	r3, #15
 800daf4:	e042      	b.n	800db7c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d109      	bne.n	800db10 <udp_sendto_if+0x5c>
 800dafc:	4b21      	ldr	r3, [pc, #132]	@ (800db84 <udp_sendto_if+0xd0>)
 800dafe:	f240 2282 	movw	r2, #642	@ 0x282
 800db02:	4924      	ldr	r1, [pc, #144]	@ (800db94 <udp_sendto_if+0xe0>)
 800db04:	4821      	ldr	r0, [pc, #132]	@ (800db8c <udp_sendto_if+0xd8>)
 800db06:	f002 fe65 	bl	80107d4 <iprintf>
 800db0a:	f06f 030f 	mvn.w	r3, #15
 800db0e:	e035      	b.n	800db7c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800db10:	6a3b      	ldr	r3, [r7, #32]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d109      	bne.n	800db2a <udp_sendto_if+0x76>
 800db16:	4b1b      	ldr	r3, [pc, #108]	@ (800db84 <udp_sendto_if+0xd0>)
 800db18:	f240 2283 	movw	r2, #643	@ 0x283
 800db1c:	491e      	ldr	r1, [pc, #120]	@ (800db98 <udp_sendto_if+0xe4>)
 800db1e:	481b      	ldr	r0, [pc, #108]	@ (800db8c <udp_sendto_if+0xd8>)
 800db20:	f002 fe58 	bl	80107d4 <iprintf>
 800db24:	f06f 030f 	mvn.w	r3, #15
 800db28:	e028      	b.n	800db7c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d009      	beq.n	800db44 <udp_sendto_if+0x90>
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d005      	beq.n	800db44 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800db40:	2be0      	cmp	r3, #224	@ 0xe0
 800db42:	d103      	bne.n	800db4c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800db44:	6a3b      	ldr	r3, [r7, #32]
 800db46:	3304      	adds	r3, #4
 800db48:	617b      	str	r3, [r7, #20]
 800db4a:	e00b      	b.n	800db64 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	6a3b      	ldr	r3, [r7, #32]
 800db52:	3304      	adds	r3, #4
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	429a      	cmp	r2, r3
 800db58:	d002      	beq.n	800db60 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800db5a:	f06f 0303 	mvn.w	r3, #3
 800db5e:	e00d      	b.n	800db7c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800db64:	887a      	ldrh	r2, [r7, #2]
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	9301      	str	r3, [sp, #4]
 800db6a:	6a3b      	ldr	r3, [r7, #32]
 800db6c:	9300      	str	r3, [sp, #0]
 800db6e:	4613      	mov	r3, r2
 800db70:	687a      	ldr	r2, [r7, #4]
 800db72:	68b9      	ldr	r1, [r7, #8]
 800db74:	68f8      	ldr	r0, [r7, #12]
 800db76:	f000 f811 	bl	800db9c <udp_sendto_if_src>
 800db7a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	3718      	adds	r7, #24
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}
 800db84:	08013a78 	.word	0x08013a78
 800db88:	08013bec 	.word	0x08013bec
 800db8c:	08013acc 	.word	0x08013acc
 800db90:	08013c08 	.word	0x08013c08
 800db94:	08013c24 	.word	0x08013c24
 800db98:	08013c44 	.word	0x08013c44

0800db9c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b08c      	sub	sp, #48	@ 0x30
 800dba0:	af04      	add	r7, sp, #16
 800dba2:	60f8      	str	r0, [r7, #12]
 800dba4:	60b9      	str	r1, [r7, #8]
 800dba6:	607a      	str	r2, [r7, #4]
 800dba8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d109      	bne.n	800dbc4 <udp_sendto_if_src+0x28>
 800dbb0:	4b65      	ldr	r3, [pc, #404]	@ (800dd48 <udp_sendto_if_src+0x1ac>)
 800dbb2:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800dbb6:	4965      	ldr	r1, [pc, #404]	@ (800dd4c <udp_sendto_if_src+0x1b0>)
 800dbb8:	4865      	ldr	r0, [pc, #404]	@ (800dd50 <udp_sendto_if_src+0x1b4>)
 800dbba:	f002 fe0b 	bl	80107d4 <iprintf>
 800dbbe:	f06f 030f 	mvn.w	r3, #15
 800dbc2:	e0bc      	b.n	800dd3e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d109      	bne.n	800dbde <udp_sendto_if_src+0x42>
 800dbca:	4b5f      	ldr	r3, [pc, #380]	@ (800dd48 <udp_sendto_if_src+0x1ac>)
 800dbcc:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800dbd0:	4960      	ldr	r1, [pc, #384]	@ (800dd54 <udp_sendto_if_src+0x1b8>)
 800dbd2:	485f      	ldr	r0, [pc, #380]	@ (800dd50 <udp_sendto_if_src+0x1b4>)
 800dbd4:	f002 fdfe 	bl	80107d4 <iprintf>
 800dbd8:	f06f 030f 	mvn.w	r3, #15
 800dbdc:	e0af      	b.n	800dd3e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d109      	bne.n	800dbf8 <udp_sendto_if_src+0x5c>
 800dbe4:	4b58      	ldr	r3, [pc, #352]	@ (800dd48 <udp_sendto_if_src+0x1ac>)
 800dbe6:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800dbea:	495b      	ldr	r1, [pc, #364]	@ (800dd58 <udp_sendto_if_src+0x1bc>)
 800dbec:	4858      	ldr	r0, [pc, #352]	@ (800dd50 <udp_sendto_if_src+0x1b4>)
 800dbee:	f002 fdf1 	bl	80107d4 <iprintf>
 800dbf2:	f06f 030f 	mvn.w	r3, #15
 800dbf6:	e0a2      	b.n	800dd3e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800dbf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d109      	bne.n	800dc12 <udp_sendto_if_src+0x76>
 800dbfe:	4b52      	ldr	r3, [pc, #328]	@ (800dd48 <udp_sendto_if_src+0x1ac>)
 800dc00:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800dc04:	4955      	ldr	r1, [pc, #340]	@ (800dd5c <udp_sendto_if_src+0x1c0>)
 800dc06:	4852      	ldr	r0, [pc, #328]	@ (800dd50 <udp_sendto_if_src+0x1b4>)
 800dc08:	f002 fde4 	bl	80107d4 <iprintf>
 800dc0c:	f06f 030f 	mvn.w	r3, #15
 800dc10:	e095      	b.n	800dd3e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800dc12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d109      	bne.n	800dc2c <udp_sendto_if_src+0x90>
 800dc18:	4b4b      	ldr	r3, [pc, #300]	@ (800dd48 <udp_sendto_if_src+0x1ac>)
 800dc1a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800dc1e:	4950      	ldr	r1, [pc, #320]	@ (800dd60 <udp_sendto_if_src+0x1c4>)
 800dc20:	484b      	ldr	r0, [pc, #300]	@ (800dd50 <udp_sendto_if_src+0x1b4>)
 800dc22:	f002 fdd7 	bl	80107d4 <iprintf>
 800dc26:	f06f 030f 	mvn.w	r3, #15
 800dc2a:	e088      	b.n	800dd3e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	8a5b      	ldrh	r3, [r3, #18]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d10f      	bne.n	800dc54 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800dc34:	68f9      	ldr	r1, [r7, #12]
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	8a5b      	ldrh	r3, [r3, #18]
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	68f8      	ldr	r0, [r7, #12]
 800dc3e:	f000 f893 	bl	800dd68 <udp_bind>
 800dc42:	4603      	mov	r3, r0
 800dc44:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800dc46:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d002      	beq.n	800dc54 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800dc4e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800dc52:	e074      	b.n	800dd3e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	891b      	ldrh	r3, [r3, #8]
 800dc58:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	d902      	bls.n	800dc66 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800dc60:	f04f 33ff 	mov.w	r3, #4294967295
 800dc64:	e06b      	b.n	800dd3e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800dc66:	2108      	movs	r1, #8
 800dc68:	68b8      	ldr	r0, [r7, #8]
 800dc6a:	f7f9 fe9d 	bl	80079a8 <pbuf_add_header>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d015      	beq.n	800dca0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800dc74:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dc78:	2108      	movs	r1, #8
 800dc7a:	2022      	movs	r0, #34	@ 0x22
 800dc7c:	f7f9 fc46 	bl	800750c <pbuf_alloc>
 800dc80:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800dc82:	69fb      	ldr	r3, [r7, #28]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d102      	bne.n	800dc8e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800dc88:	f04f 33ff 	mov.w	r3, #4294967295
 800dc8c:	e057      	b.n	800dd3e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	891b      	ldrh	r3, [r3, #8]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d006      	beq.n	800dca4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800dc96:	68b9      	ldr	r1, [r7, #8]
 800dc98:	69f8      	ldr	r0, [r7, #28]
 800dc9a:	f7fa f833 	bl	8007d04 <pbuf_chain>
 800dc9e:	e001      	b.n	800dca4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800dca4:	69fb      	ldr	r3, [r7, #28]
 800dca6:	895b      	ldrh	r3, [r3, #10]
 800dca8:	2b07      	cmp	r3, #7
 800dcaa:	d806      	bhi.n	800dcba <udp_sendto_if_src+0x11e>
 800dcac:	4b26      	ldr	r3, [pc, #152]	@ (800dd48 <udp_sendto_if_src+0x1ac>)
 800dcae:	f240 320d 	movw	r2, #781	@ 0x30d
 800dcb2:	492c      	ldr	r1, [pc, #176]	@ (800dd64 <udp_sendto_if_src+0x1c8>)
 800dcb4:	4826      	ldr	r0, [pc, #152]	@ (800dd50 <udp_sendto_if_src+0x1b4>)
 800dcb6:	f002 fd8d 	bl	80107d4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800dcba:	69fb      	ldr	r3, [r7, #28]
 800dcbc:	685b      	ldr	r3, [r3, #4]
 800dcbe:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	8a5b      	ldrh	r3, [r3, #18]
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7f8 fba7 	bl	8006418 <lwip_htons>
 800dcca:	4603      	mov	r3, r0
 800dccc:	461a      	mov	r2, r3
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800dcd2:	887b      	ldrh	r3, [r7, #2]
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7f8 fb9f 	bl	8006418 <lwip_htons>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	461a      	mov	r2, r3
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	2200      	movs	r2, #0
 800dce6:	719a      	strb	r2, [r3, #6]
 800dce8:	2200      	movs	r2, #0
 800dcea:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800dcec:	69fb      	ldr	r3, [r7, #28]
 800dcee:	891b      	ldrh	r3, [r3, #8]
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7f8 fb91 	bl	8006418 <lwip_htons>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	461a      	mov	r2, r3
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800dcfe:	2311      	movs	r3, #17
 800dd00:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	7adb      	ldrb	r3, [r3, #11]
 800dd06:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	7a9b      	ldrb	r3, [r3, #10]
 800dd0c:	7cb9      	ldrb	r1, [r7, #18]
 800dd0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd10:	9202      	str	r2, [sp, #8]
 800dd12:	7cfa      	ldrb	r2, [r7, #19]
 800dd14:	9201      	str	r2, [sp, #4]
 800dd16:	9300      	str	r3, [sp, #0]
 800dd18:	460b      	mov	r3, r1
 800dd1a:	687a      	ldr	r2, [r7, #4]
 800dd1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dd1e:	69f8      	ldr	r0, [r7, #28]
 800dd20:	f001 fbd4 	bl	800f4cc <ip4_output_if_src>
 800dd24:	4603      	mov	r3, r0
 800dd26:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800dd28:	69fa      	ldr	r2, [r7, #28]
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d004      	beq.n	800dd3a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800dd30:	69f8      	ldr	r0, [r7, #28]
 800dd32:	f7f9 fecf 	bl	8007ad4 <pbuf_free>
    q = NULL;
 800dd36:	2300      	movs	r3, #0
 800dd38:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800dd3a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3720      	adds	r7, #32
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop
 800dd48:	08013a78 	.word	0x08013a78
 800dd4c:	08013c64 	.word	0x08013c64
 800dd50:	08013acc 	.word	0x08013acc
 800dd54:	08013c84 	.word	0x08013c84
 800dd58:	08013ca4 	.word	0x08013ca4
 800dd5c:	08013cc8 	.word	0x08013cc8
 800dd60:	08013cec 	.word	0x08013cec
 800dd64:	08013d10 	.word	0x08013d10

0800dd68 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b086      	sub	sp, #24
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	60f8      	str	r0, [r7, #12]
 800dd70:	60b9      	str	r1, [r7, #8]
 800dd72:	4613      	mov	r3, r2
 800dd74:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d101      	bne.n	800dd80 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800dd7c:	4b39      	ldr	r3, [pc, #228]	@ (800de64 <udp_bind+0xfc>)
 800dd7e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d109      	bne.n	800dd9a <udp_bind+0x32>
 800dd86:	4b38      	ldr	r3, [pc, #224]	@ (800de68 <udp_bind+0x100>)
 800dd88:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800dd8c:	4937      	ldr	r1, [pc, #220]	@ (800de6c <udp_bind+0x104>)
 800dd8e:	4838      	ldr	r0, [pc, #224]	@ (800de70 <udp_bind+0x108>)
 800dd90:	f002 fd20 	bl	80107d4 <iprintf>
 800dd94:	f06f 030f 	mvn.w	r3, #15
 800dd98:	e060      	b.n	800de5c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dd9e:	4b35      	ldr	r3, [pc, #212]	@ (800de74 <udp_bind+0x10c>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	617b      	str	r3, [r7, #20]
 800dda4:	e009      	b.n	800ddba <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800dda6:	68fa      	ldr	r2, [r7, #12]
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d102      	bne.n	800ddb4 <udp_bind+0x4c>
      rebind = 1;
 800ddae:	2301      	movs	r3, #1
 800ddb0:	74fb      	strb	r3, [r7, #19]
      break;
 800ddb2:	e005      	b.n	800ddc0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	68db      	ldr	r3, [r3, #12]
 800ddb8:	617b      	str	r3, [r7, #20]
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d1f2      	bne.n	800dda6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800ddc0:	88fb      	ldrh	r3, [r7, #6]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d109      	bne.n	800ddda <udp_bind+0x72>
    port = udp_new_port();
 800ddc6:	f7ff fc69 	bl	800d69c <udp_new_port>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ddce:	88fb      	ldrh	r3, [r7, #6]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d12c      	bne.n	800de2e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800ddd4:	f06f 0307 	mvn.w	r3, #7
 800ddd8:	e040      	b.n	800de5c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ddda:	4b26      	ldr	r3, [pc, #152]	@ (800de74 <udp_bind+0x10c>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	617b      	str	r3, [r7, #20]
 800dde0:	e022      	b.n	800de28 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800dde2:	68fa      	ldr	r2, [r7, #12]
 800dde4:	697b      	ldr	r3, [r7, #20]
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d01b      	beq.n	800de22 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	8a5b      	ldrh	r3, [r3, #18]
 800ddee:	88fa      	ldrh	r2, [r7, #6]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d116      	bne.n	800de22 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	681a      	ldr	r2, [r3, #0]
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d00d      	beq.n	800de1c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d00a      	beq.n	800de1c <udp_bind+0xb4>
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d006      	beq.n	800de1c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800de0e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800de10:	2b00      	cmp	r3, #0
 800de12:	d003      	beq.n	800de1c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d102      	bne.n	800de22 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800de1c:	f06f 0307 	mvn.w	r3, #7
 800de20:	e01c      	b.n	800de5c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	68db      	ldr	r3, [r3, #12]
 800de26:	617b      	str	r3, [r7, #20]
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d1d9      	bne.n	800dde2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d002      	beq.n	800de3a <udp_bind+0xd2>
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	e000      	b.n	800de3c <udp_bind+0xd4>
 800de3a:	2300      	movs	r3, #0
 800de3c:	68fa      	ldr	r2, [r7, #12]
 800de3e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	88fa      	ldrh	r2, [r7, #6]
 800de44:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800de46:	7cfb      	ldrb	r3, [r7, #19]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d106      	bne.n	800de5a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800de4c:	4b09      	ldr	r3, [pc, #36]	@ (800de74 <udp_bind+0x10c>)
 800de4e:	681a      	ldr	r2, [r3, #0]
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800de54:	4a07      	ldr	r2, [pc, #28]	@ (800de74 <udp_bind+0x10c>)
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800de5a:	2300      	movs	r3, #0
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3718      	adds	r7, #24
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}
 800de64:	08014594 	.word	0x08014594
 800de68:	08013a78 	.word	0x08013a78
 800de6c:	08013d40 	.word	0x08013d40
 800de70:	08013acc 	.word	0x08013acc
 800de74:	20008878 	.word	0x20008878

0800de78 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b084      	sub	sp, #16
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	60f8      	str	r0, [r7, #12]
 800de80:	60b9      	str	r1, [r7, #8]
 800de82:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d107      	bne.n	800de9a <udp_recv+0x22>
 800de8a:	4b08      	ldr	r3, [pc, #32]	@ (800deac <udp_recv+0x34>)
 800de8c:	f240 428a 	movw	r2, #1162	@ 0x48a
 800de90:	4907      	ldr	r1, [pc, #28]	@ (800deb0 <udp_recv+0x38>)
 800de92:	4808      	ldr	r0, [pc, #32]	@ (800deb4 <udp_recv+0x3c>)
 800de94:	f002 fc9e 	bl	80107d4 <iprintf>
 800de98:	e005      	b.n	800dea6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	68ba      	ldr	r2, [r7, #8]
 800de9e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	687a      	ldr	r2, [r7, #4]
 800dea4:	61da      	str	r2, [r3, #28]
}
 800dea6:	3710      	adds	r7, #16
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}
 800deac:	08013a78 	.word	0x08013a78
 800deb0:	08013dac 	.word	0x08013dac
 800deb4:	08013acc 	.word	0x08013acc

0800deb8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800debe:	2000      	movs	r0, #0
 800dec0:	f7f8 ff22 	bl	8006d08 <memp_malloc>
 800dec4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d007      	beq.n	800dedc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800decc:	2220      	movs	r2, #32
 800dece:	2100      	movs	r1, #0
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f002 fd1e 	bl	8010912 <memset>
    pcb->ttl = UDP_TTL;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	22ff      	movs	r2, #255	@ 0xff
 800deda:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800dedc:	687b      	ldr	r3, [r7, #4]
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3708      	adds	r7, #8
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
	...

0800dee8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dee8:	b480      	push	{r7}
 800deea:	b085      	sub	sp, #20
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d01e      	beq.n	800df36 <udp_netif_ip_addr_changed+0x4e>
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d01a      	beq.n	800df36 <udp_netif_ip_addr_changed+0x4e>
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d017      	beq.n	800df36 <udp_netif_ip_addr_changed+0x4e>
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d013      	beq.n	800df36 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800df0e:	4b0d      	ldr	r3, [pc, #52]	@ (800df44 <udp_netif_ip_addr_changed+0x5c>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	60fb      	str	r3, [r7, #12]
 800df14:	e00c      	b.n	800df30 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	681a      	ldr	r2, [r3, #0]
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	429a      	cmp	r2, r3
 800df20:	d103      	bne.n	800df2a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	681a      	ldr	r2, [r3, #0]
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	68db      	ldr	r3, [r3, #12]
 800df2e:	60fb      	str	r3, [r7, #12]
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d1ef      	bne.n	800df16 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800df36:	bf00      	nop
 800df38:	3714      	adds	r7, #20
 800df3a:	46bd      	mov	sp, r7
 800df3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df40:	4770      	bx	lr
 800df42:	bf00      	nop
 800df44:	20008878 	.word	0x20008878

0800df48 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800df50:	4915      	ldr	r1, [pc, #84]	@ (800dfa8 <etharp_free_entry+0x60>)
 800df52:	687a      	ldr	r2, [r7, #4]
 800df54:	4613      	mov	r3, r2
 800df56:	005b      	lsls	r3, r3, #1
 800df58:	4413      	add	r3, r2
 800df5a:	00db      	lsls	r3, r3, #3
 800df5c:	440b      	add	r3, r1
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d013      	beq.n	800df8c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800df64:	4910      	ldr	r1, [pc, #64]	@ (800dfa8 <etharp_free_entry+0x60>)
 800df66:	687a      	ldr	r2, [r7, #4]
 800df68:	4613      	mov	r3, r2
 800df6a:	005b      	lsls	r3, r3, #1
 800df6c:	4413      	add	r3, r2
 800df6e:	00db      	lsls	r3, r3, #3
 800df70:	440b      	add	r3, r1
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	4618      	mov	r0, r3
 800df76:	f7f9 fdad 	bl	8007ad4 <pbuf_free>
    arp_table[i].q = NULL;
 800df7a:	490b      	ldr	r1, [pc, #44]	@ (800dfa8 <etharp_free_entry+0x60>)
 800df7c:	687a      	ldr	r2, [r7, #4]
 800df7e:	4613      	mov	r3, r2
 800df80:	005b      	lsls	r3, r3, #1
 800df82:	4413      	add	r3, r2
 800df84:	00db      	lsls	r3, r3, #3
 800df86:	440b      	add	r3, r1
 800df88:	2200      	movs	r2, #0
 800df8a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800df8c:	4906      	ldr	r1, [pc, #24]	@ (800dfa8 <etharp_free_entry+0x60>)
 800df8e:	687a      	ldr	r2, [r7, #4]
 800df90:	4613      	mov	r3, r2
 800df92:	005b      	lsls	r3, r3, #1
 800df94:	4413      	add	r3, r2
 800df96:	00db      	lsls	r3, r3, #3
 800df98:	440b      	add	r3, r1
 800df9a:	3314      	adds	r3, #20
 800df9c:	2200      	movs	r2, #0
 800df9e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800dfa0:	bf00      	nop
 800dfa2:	3708      	adds	r7, #8
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}
 800dfa8:	2000887c 	.word	0x2000887c

0800dfac <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	607b      	str	r3, [r7, #4]
 800dfb6:	e096      	b.n	800e0e6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800dfb8:	494f      	ldr	r1, [pc, #316]	@ (800e0f8 <etharp_tmr+0x14c>)
 800dfba:	687a      	ldr	r2, [r7, #4]
 800dfbc:	4613      	mov	r3, r2
 800dfbe:	005b      	lsls	r3, r3, #1
 800dfc0:	4413      	add	r3, r2
 800dfc2:	00db      	lsls	r3, r3, #3
 800dfc4:	440b      	add	r3, r1
 800dfc6:	3314      	adds	r3, #20
 800dfc8:	781b      	ldrb	r3, [r3, #0]
 800dfca:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800dfcc:	78fb      	ldrb	r3, [r7, #3]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	f000 8086 	beq.w	800e0e0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800dfd4:	4948      	ldr	r1, [pc, #288]	@ (800e0f8 <etharp_tmr+0x14c>)
 800dfd6:	687a      	ldr	r2, [r7, #4]
 800dfd8:	4613      	mov	r3, r2
 800dfda:	005b      	lsls	r3, r3, #1
 800dfdc:	4413      	add	r3, r2
 800dfde:	00db      	lsls	r3, r3, #3
 800dfe0:	440b      	add	r3, r1
 800dfe2:	3312      	adds	r3, #18
 800dfe4:	881b      	ldrh	r3, [r3, #0]
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	b298      	uxth	r0, r3
 800dfea:	4943      	ldr	r1, [pc, #268]	@ (800e0f8 <etharp_tmr+0x14c>)
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	4613      	mov	r3, r2
 800dff0:	005b      	lsls	r3, r3, #1
 800dff2:	4413      	add	r3, r2
 800dff4:	00db      	lsls	r3, r3, #3
 800dff6:	440b      	add	r3, r1
 800dff8:	3312      	adds	r3, #18
 800dffa:	4602      	mov	r2, r0
 800dffc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800dffe:	493e      	ldr	r1, [pc, #248]	@ (800e0f8 <etharp_tmr+0x14c>)
 800e000:	687a      	ldr	r2, [r7, #4]
 800e002:	4613      	mov	r3, r2
 800e004:	005b      	lsls	r3, r3, #1
 800e006:	4413      	add	r3, r2
 800e008:	00db      	lsls	r3, r3, #3
 800e00a:	440b      	add	r3, r1
 800e00c:	3312      	adds	r3, #18
 800e00e:	881b      	ldrh	r3, [r3, #0]
 800e010:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800e014:	d215      	bcs.n	800e042 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e016:	4938      	ldr	r1, [pc, #224]	@ (800e0f8 <etharp_tmr+0x14c>)
 800e018:	687a      	ldr	r2, [r7, #4]
 800e01a:	4613      	mov	r3, r2
 800e01c:	005b      	lsls	r3, r3, #1
 800e01e:	4413      	add	r3, r2
 800e020:	00db      	lsls	r3, r3, #3
 800e022:	440b      	add	r3, r1
 800e024:	3314      	adds	r3, #20
 800e026:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e028:	2b01      	cmp	r3, #1
 800e02a:	d10e      	bne.n	800e04a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e02c:	4932      	ldr	r1, [pc, #200]	@ (800e0f8 <etharp_tmr+0x14c>)
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	4613      	mov	r3, r2
 800e032:	005b      	lsls	r3, r3, #1
 800e034:	4413      	add	r3, r2
 800e036:	00db      	lsls	r3, r3, #3
 800e038:	440b      	add	r3, r1
 800e03a:	3312      	adds	r3, #18
 800e03c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e03e:	2b04      	cmp	r3, #4
 800e040:	d903      	bls.n	800e04a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f7ff ff80 	bl	800df48 <etharp_free_entry>
 800e048:	e04a      	b.n	800e0e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e04a:	492b      	ldr	r1, [pc, #172]	@ (800e0f8 <etharp_tmr+0x14c>)
 800e04c:	687a      	ldr	r2, [r7, #4]
 800e04e:	4613      	mov	r3, r2
 800e050:	005b      	lsls	r3, r3, #1
 800e052:	4413      	add	r3, r2
 800e054:	00db      	lsls	r3, r3, #3
 800e056:	440b      	add	r3, r1
 800e058:	3314      	adds	r3, #20
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	2b03      	cmp	r3, #3
 800e05e:	d10a      	bne.n	800e076 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e060:	4925      	ldr	r1, [pc, #148]	@ (800e0f8 <etharp_tmr+0x14c>)
 800e062:	687a      	ldr	r2, [r7, #4]
 800e064:	4613      	mov	r3, r2
 800e066:	005b      	lsls	r3, r3, #1
 800e068:	4413      	add	r3, r2
 800e06a:	00db      	lsls	r3, r3, #3
 800e06c:	440b      	add	r3, r1
 800e06e:	3314      	adds	r3, #20
 800e070:	2204      	movs	r2, #4
 800e072:	701a      	strb	r2, [r3, #0]
 800e074:	e034      	b.n	800e0e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e076:	4920      	ldr	r1, [pc, #128]	@ (800e0f8 <etharp_tmr+0x14c>)
 800e078:	687a      	ldr	r2, [r7, #4]
 800e07a:	4613      	mov	r3, r2
 800e07c:	005b      	lsls	r3, r3, #1
 800e07e:	4413      	add	r3, r2
 800e080:	00db      	lsls	r3, r3, #3
 800e082:	440b      	add	r3, r1
 800e084:	3314      	adds	r3, #20
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	2b04      	cmp	r3, #4
 800e08a:	d10a      	bne.n	800e0a2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e08c:	491a      	ldr	r1, [pc, #104]	@ (800e0f8 <etharp_tmr+0x14c>)
 800e08e:	687a      	ldr	r2, [r7, #4]
 800e090:	4613      	mov	r3, r2
 800e092:	005b      	lsls	r3, r3, #1
 800e094:	4413      	add	r3, r2
 800e096:	00db      	lsls	r3, r3, #3
 800e098:	440b      	add	r3, r1
 800e09a:	3314      	adds	r3, #20
 800e09c:	2202      	movs	r2, #2
 800e09e:	701a      	strb	r2, [r3, #0]
 800e0a0:	e01e      	b.n	800e0e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e0a2:	4915      	ldr	r1, [pc, #84]	@ (800e0f8 <etharp_tmr+0x14c>)
 800e0a4:	687a      	ldr	r2, [r7, #4]
 800e0a6:	4613      	mov	r3, r2
 800e0a8:	005b      	lsls	r3, r3, #1
 800e0aa:	4413      	add	r3, r2
 800e0ac:	00db      	lsls	r3, r3, #3
 800e0ae:	440b      	add	r3, r1
 800e0b0:	3314      	adds	r3, #20
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d113      	bne.n	800e0e0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e0b8:	490f      	ldr	r1, [pc, #60]	@ (800e0f8 <etharp_tmr+0x14c>)
 800e0ba:	687a      	ldr	r2, [r7, #4]
 800e0bc:	4613      	mov	r3, r2
 800e0be:	005b      	lsls	r3, r3, #1
 800e0c0:	4413      	add	r3, r2
 800e0c2:	00db      	lsls	r3, r3, #3
 800e0c4:	440b      	add	r3, r1
 800e0c6:	3308      	adds	r3, #8
 800e0c8:	6818      	ldr	r0, [r3, #0]
 800e0ca:	687a      	ldr	r2, [r7, #4]
 800e0cc:	4613      	mov	r3, r2
 800e0ce:	005b      	lsls	r3, r3, #1
 800e0d0:	4413      	add	r3, r2
 800e0d2:	00db      	lsls	r3, r3, #3
 800e0d4:	4a08      	ldr	r2, [pc, #32]	@ (800e0f8 <etharp_tmr+0x14c>)
 800e0d6:	4413      	add	r3, r2
 800e0d8:	3304      	adds	r3, #4
 800e0da:	4619      	mov	r1, r3
 800e0dc:	f000 fe6e 	bl	800edbc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	607b      	str	r3, [r7, #4]
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2b09      	cmp	r3, #9
 800e0ea:	f77f af65 	ble.w	800dfb8 <etharp_tmr+0xc>
      }
    }
  }
}
 800e0ee:	bf00      	nop
 800e0f0:	bf00      	nop
 800e0f2:	3708      	adds	r7, #8
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}
 800e0f8:	2000887c 	.word	0x2000887c

0800e0fc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b08a      	sub	sp, #40	@ 0x28
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	460b      	mov	r3, r1
 800e106:	607a      	str	r2, [r7, #4]
 800e108:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e10a:	230a      	movs	r3, #10
 800e10c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e10e:	230a      	movs	r3, #10
 800e110:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800e112:	230a      	movs	r3, #10
 800e114:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800e116:	2300      	movs	r3, #0
 800e118:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800e11a:	230a      	movs	r3, #10
 800e11c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e11e:	2300      	movs	r3, #0
 800e120:	83bb      	strh	r3, [r7, #28]
 800e122:	2300      	movs	r3, #0
 800e124:	837b      	strh	r3, [r7, #26]
 800e126:	2300      	movs	r3, #0
 800e128:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e12a:	2300      	movs	r3, #0
 800e12c:	843b      	strh	r3, [r7, #32]
 800e12e:	e0ae      	b.n	800e28e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800e130:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e134:	49a6      	ldr	r1, [pc, #664]	@ (800e3d0 <etharp_find_entry+0x2d4>)
 800e136:	4613      	mov	r3, r2
 800e138:	005b      	lsls	r3, r3, #1
 800e13a:	4413      	add	r3, r2
 800e13c:	00db      	lsls	r3, r3, #3
 800e13e:	440b      	add	r3, r1
 800e140:	3314      	adds	r3, #20
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e146:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800e14a:	2b0a      	cmp	r3, #10
 800e14c:	d105      	bne.n	800e15a <etharp_find_entry+0x5e>
 800e14e:	7dfb      	ldrb	r3, [r7, #23]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d102      	bne.n	800e15a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e154:	8c3b      	ldrh	r3, [r7, #32]
 800e156:	847b      	strh	r3, [r7, #34]	@ 0x22
 800e158:	e095      	b.n	800e286 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e15a:	7dfb      	ldrb	r3, [r7, #23]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	f000 8092 	beq.w	800e286 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e162:	7dfb      	ldrb	r3, [r7, #23]
 800e164:	2b01      	cmp	r3, #1
 800e166:	d009      	beq.n	800e17c <etharp_find_entry+0x80>
 800e168:	7dfb      	ldrb	r3, [r7, #23]
 800e16a:	2b01      	cmp	r3, #1
 800e16c:	d806      	bhi.n	800e17c <etharp_find_entry+0x80>
 800e16e:	4b99      	ldr	r3, [pc, #612]	@ (800e3d4 <etharp_find_entry+0x2d8>)
 800e170:	f240 1223 	movw	r2, #291	@ 0x123
 800e174:	4998      	ldr	r1, [pc, #608]	@ (800e3d8 <etharp_find_entry+0x2dc>)
 800e176:	4899      	ldr	r0, [pc, #612]	@ (800e3dc <etharp_find_entry+0x2e0>)
 800e178:	f002 fb2c 	bl	80107d4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d020      	beq.n	800e1c4 <etharp_find_entry+0xc8>
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	6819      	ldr	r1, [r3, #0]
 800e186:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e18a:	4891      	ldr	r0, [pc, #580]	@ (800e3d0 <etharp_find_entry+0x2d4>)
 800e18c:	4613      	mov	r3, r2
 800e18e:	005b      	lsls	r3, r3, #1
 800e190:	4413      	add	r3, r2
 800e192:	00db      	lsls	r3, r3, #3
 800e194:	4403      	add	r3, r0
 800e196:	3304      	adds	r3, #4
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	4299      	cmp	r1, r3
 800e19c:	d112      	bne.n	800e1c4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d00c      	beq.n	800e1be <etharp_find_entry+0xc2>
 800e1a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e1a8:	4989      	ldr	r1, [pc, #548]	@ (800e3d0 <etharp_find_entry+0x2d4>)
 800e1aa:	4613      	mov	r3, r2
 800e1ac:	005b      	lsls	r3, r3, #1
 800e1ae:	4413      	add	r3, r2
 800e1b0:	00db      	lsls	r3, r3, #3
 800e1b2:	440b      	add	r3, r1
 800e1b4:	3308      	adds	r3, #8
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	687a      	ldr	r2, [r7, #4]
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d102      	bne.n	800e1c4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e1be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e1c2:	e100      	b.n	800e3c6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e1c4:	7dfb      	ldrb	r3, [r7, #23]
 800e1c6:	2b01      	cmp	r3, #1
 800e1c8:	d140      	bne.n	800e24c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e1ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e1ce:	4980      	ldr	r1, [pc, #512]	@ (800e3d0 <etharp_find_entry+0x2d4>)
 800e1d0:	4613      	mov	r3, r2
 800e1d2:	005b      	lsls	r3, r3, #1
 800e1d4:	4413      	add	r3, r2
 800e1d6:	00db      	lsls	r3, r3, #3
 800e1d8:	440b      	add	r3, r1
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d01a      	beq.n	800e216 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e1e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e1e4:	497a      	ldr	r1, [pc, #488]	@ (800e3d0 <etharp_find_entry+0x2d4>)
 800e1e6:	4613      	mov	r3, r2
 800e1e8:	005b      	lsls	r3, r3, #1
 800e1ea:	4413      	add	r3, r2
 800e1ec:	00db      	lsls	r3, r3, #3
 800e1ee:	440b      	add	r3, r1
 800e1f0:	3312      	adds	r3, #18
 800e1f2:	881b      	ldrh	r3, [r3, #0]
 800e1f4:	8bba      	ldrh	r2, [r7, #28]
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d845      	bhi.n	800e286 <etharp_find_entry+0x18a>
            old_queue = i;
 800e1fa:	8c3b      	ldrh	r3, [r7, #32]
 800e1fc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e1fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e202:	4973      	ldr	r1, [pc, #460]	@ (800e3d0 <etharp_find_entry+0x2d4>)
 800e204:	4613      	mov	r3, r2
 800e206:	005b      	lsls	r3, r3, #1
 800e208:	4413      	add	r3, r2
 800e20a:	00db      	lsls	r3, r3, #3
 800e20c:	440b      	add	r3, r1
 800e20e:	3312      	adds	r3, #18
 800e210:	881b      	ldrh	r3, [r3, #0]
 800e212:	83bb      	strh	r3, [r7, #28]
 800e214:	e037      	b.n	800e286 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e216:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e21a:	496d      	ldr	r1, [pc, #436]	@ (800e3d0 <etharp_find_entry+0x2d4>)
 800e21c:	4613      	mov	r3, r2
 800e21e:	005b      	lsls	r3, r3, #1
 800e220:	4413      	add	r3, r2
 800e222:	00db      	lsls	r3, r3, #3
 800e224:	440b      	add	r3, r1
 800e226:	3312      	adds	r3, #18
 800e228:	881b      	ldrh	r3, [r3, #0]
 800e22a:	8b7a      	ldrh	r2, [r7, #26]
 800e22c:	429a      	cmp	r2, r3
 800e22e:	d82a      	bhi.n	800e286 <etharp_find_entry+0x18a>
            old_pending = i;
 800e230:	8c3b      	ldrh	r3, [r7, #32]
 800e232:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800e234:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e238:	4965      	ldr	r1, [pc, #404]	@ (800e3d0 <etharp_find_entry+0x2d4>)
 800e23a:	4613      	mov	r3, r2
 800e23c:	005b      	lsls	r3, r3, #1
 800e23e:	4413      	add	r3, r2
 800e240:	00db      	lsls	r3, r3, #3
 800e242:	440b      	add	r3, r1
 800e244:	3312      	adds	r3, #18
 800e246:	881b      	ldrh	r3, [r3, #0]
 800e248:	837b      	strh	r3, [r7, #26]
 800e24a:	e01c      	b.n	800e286 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e24c:	7dfb      	ldrb	r3, [r7, #23]
 800e24e:	2b01      	cmp	r3, #1
 800e250:	d919      	bls.n	800e286 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e252:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e256:	495e      	ldr	r1, [pc, #376]	@ (800e3d0 <etharp_find_entry+0x2d4>)
 800e258:	4613      	mov	r3, r2
 800e25a:	005b      	lsls	r3, r3, #1
 800e25c:	4413      	add	r3, r2
 800e25e:	00db      	lsls	r3, r3, #3
 800e260:	440b      	add	r3, r1
 800e262:	3312      	adds	r3, #18
 800e264:	881b      	ldrh	r3, [r3, #0]
 800e266:	8b3a      	ldrh	r2, [r7, #24]
 800e268:	429a      	cmp	r2, r3
 800e26a:	d80c      	bhi.n	800e286 <etharp_find_entry+0x18a>
            old_stable = i;
 800e26c:	8c3b      	ldrh	r3, [r7, #32]
 800e26e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800e270:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e274:	4956      	ldr	r1, [pc, #344]	@ (800e3d0 <etharp_find_entry+0x2d4>)
 800e276:	4613      	mov	r3, r2
 800e278:	005b      	lsls	r3, r3, #1
 800e27a:	4413      	add	r3, r2
 800e27c:	00db      	lsls	r3, r3, #3
 800e27e:	440b      	add	r3, r1
 800e280:	3312      	adds	r3, #18
 800e282:	881b      	ldrh	r3, [r3, #0]
 800e284:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e286:	8c3b      	ldrh	r3, [r7, #32]
 800e288:	3301      	adds	r3, #1
 800e28a:	b29b      	uxth	r3, r3
 800e28c:	843b      	strh	r3, [r7, #32]
 800e28e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e292:	2b09      	cmp	r3, #9
 800e294:	f77f af4c 	ble.w	800e130 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e298:	7afb      	ldrb	r3, [r7, #11]
 800e29a:	f003 0302 	and.w	r3, r3, #2
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d108      	bne.n	800e2b4 <etharp_find_entry+0x1b8>
 800e2a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800e2a6:	2b0a      	cmp	r3, #10
 800e2a8:	d107      	bne.n	800e2ba <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e2aa:	7afb      	ldrb	r3, [r7, #11]
 800e2ac:	f003 0301 	and.w	r3, r3, #1
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d102      	bne.n	800e2ba <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e2b4:	f04f 33ff 	mov.w	r3, #4294967295
 800e2b8:	e085      	b.n	800e3c6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e2ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800e2be:	2b09      	cmp	r3, #9
 800e2c0:	dc02      	bgt.n	800e2c8 <etharp_find_entry+0x1cc>
    i = empty;
 800e2c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e2c4:	843b      	strh	r3, [r7, #32]
 800e2c6:	e039      	b.n	800e33c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e2c8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800e2cc:	2b09      	cmp	r3, #9
 800e2ce:	dc14      	bgt.n	800e2fa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e2d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e2d2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e2d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e2d8:	493d      	ldr	r1, [pc, #244]	@ (800e3d0 <etharp_find_entry+0x2d4>)
 800e2da:	4613      	mov	r3, r2
 800e2dc:	005b      	lsls	r3, r3, #1
 800e2de:	4413      	add	r3, r2
 800e2e0:	00db      	lsls	r3, r3, #3
 800e2e2:	440b      	add	r3, r1
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d018      	beq.n	800e31c <etharp_find_entry+0x220>
 800e2ea:	4b3a      	ldr	r3, [pc, #232]	@ (800e3d4 <etharp_find_entry+0x2d8>)
 800e2ec:	f240 126d 	movw	r2, #365	@ 0x16d
 800e2f0:	493b      	ldr	r1, [pc, #236]	@ (800e3e0 <etharp_find_entry+0x2e4>)
 800e2f2:	483a      	ldr	r0, [pc, #232]	@ (800e3dc <etharp_find_entry+0x2e0>)
 800e2f4:	f002 fa6e 	bl	80107d4 <iprintf>
 800e2f8:	e010      	b.n	800e31c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e2fa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800e2fe:	2b09      	cmp	r3, #9
 800e300:	dc02      	bgt.n	800e308 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800e302:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e304:	843b      	strh	r3, [r7, #32]
 800e306:	e009      	b.n	800e31c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e308:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e30c:	2b09      	cmp	r3, #9
 800e30e:	dc02      	bgt.n	800e316 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e310:	8bfb      	ldrh	r3, [r7, #30]
 800e312:	843b      	strh	r3, [r7, #32]
 800e314:	e002      	b.n	800e31c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800e316:	f04f 33ff 	mov.w	r3, #4294967295
 800e31a:	e054      	b.n	800e3c6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e31c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e320:	2b09      	cmp	r3, #9
 800e322:	dd06      	ble.n	800e332 <etharp_find_entry+0x236>
 800e324:	4b2b      	ldr	r3, [pc, #172]	@ (800e3d4 <etharp_find_entry+0x2d8>)
 800e326:	f240 127f 	movw	r2, #383	@ 0x17f
 800e32a:	492e      	ldr	r1, [pc, #184]	@ (800e3e4 <etharp_find_entry+0x2e8>)
 800e32c:	482b      	ldr	r0, [pc, #172]	@ (800e3dc <etharp_find_entry+0x2e0>)
 800e32e:	f002 fa51 	bl	80107d4 <iprintf>
    etharp_free_entry(i);
 800e332:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e336:	4618      	mov	r0, r3
 800e338:	f7ff fe06 	bl	800df48 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e33c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e340:	2b09      	cmp	r3, #9
 800e342:	dd06      	ble.n	800e352 <etharp_find_entry+0x256>
 800e344:	4b23      	ldr	r3, [pc, #140]	@ (800e3d4 <etharp_find_entry+0x2d8>)
 800e346:	f240 1283 	movw	r2, #387	@ 0x183
 800e34a:	4926      	ldr	r1, [pc, #152]	@ (800e3e4 <etharp_find_entry+0x2e8>)
 800e34c:	4823      	ldr	r0, [pc, #140]	@ (800e3dc <etharp_find_entry+0x2e0>)
 800e34e:	f002 fa41 	bl	80107d4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e352:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e356:	491e      	ldr	r1, [pc, #120]	@ (800e3d0 <etharp_find_entry+0x2d4>)
 800e358:	4613      	mov	r3, r2
 800e35a:	005b      	lsls	r3, r3, #1
 800e35c:	4413      	add	r3, r2
 800e35e:	00db      	lsls	r3, r3, #3
 800e360:	440b      	add	r3, r1
 800e362:	3314      	adds	r3, #20
 800e364:	781b      	ldrb	r3, [r3, #0]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d006      	beq.n	800e378 <etharp_find_entry+0x27c>
 800e36a:	4b1a      	ldr	r3, [pc, #104]	@ (800e3d4 <etharp_find_entry+0x2d8>)
 800e36c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800e370:	491d      	ldr	r1, [pc, #116]	@ (800e3e8 <etharp_find_entry+0x2ec>)
 800e372:	481a      	ldr	r0, [pc, #104]	@ (800e3dc <etharp_find_entry+0x2e0>)
 800e374:	f002 fa2e 	bl	80107d4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d00b      	beq.n	800e396 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e37e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	6819      	ldr	r1, [r3, #0]
 800e386:	4812      	ldr	r0, [pc, #72]	@ (800e3d0 <etharp_find_entry+0x2d4>)
 800e388:	4613      	mov	r3, r2
 800e38a:	005b      	lsls	r3, r3, #1
 800e38c:	4413      	add	r3, r2
 800e38e:	00db      	lsls	r3, r3, #3
 800e390:	4403      	add	r3, r0
 800e392:	3304      	adds	r3, #4
 800e394:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800e396:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e39a:	490d      	ldr	r1, [pc, #52]	@ (800e3d0 <etharp_find_entry+0x2d4>)
 800e39c:	4613      	mov	r3, r2
 800e39e:	005b      	lsls	r3, r3, #1
 800e3a0:	4413      	add	r3, r2
 800e3a2:	00db      	lsls	r3, r3, #3
 800e3a4:	440b      	add	r3, r1
 800e3a6:	3312      	adds	r3, #18
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e3ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e3b0:	4907      	ldr	r1, [pc, #28]	@ (800e3d0 <etharp_find_entry+0x2d4>)
 800e3b2:	4613      	mov	r3, r2
 800e3b4:	005b      	lsls	r3, r3, #1
 800e3b6:	4413      	add	r3, r2
 800e3b8:	00db      	lsls	r3, r3, #3
 800e3ba:	440b      	add	r3, r1
 800e3bc:	3308      	adds	r3, #8
 800e3be:	687a      	ldr	r2, [r7, #4]
 800e3c0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800e3c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3728      	adds	r7, #40	@ 0x28
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
 800e3ce:	bf00      	nop
 800e3d0:	2000887c 	.word	0x2000887c
 800e3d4:	08013ddc 	.word	0x08013ddc
 800e3d8:	08013e14 	.word	0x08013e14
 800e3dc:	08013e54 	.word	0x08013e54
 800e3e0:	08013e7c 	.word	0x08013e7c
 800e3e4:	08013e94 	.word	0x08013e94
 800e3e8:	08013ea8 	.word	0x08013ea8

0800e3ec <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b088      	sub	sp, #32
 800e3f0:	af02      	add	r7, sp, #8
 800e3f2:	60f8      	str	r0, [r7, #12]
 800e3f4:	60b9      	str	r1, [r7, #8]
 800e3f6:	607a      	str	r2, [r7, #4]
 800e3f8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e400:	2b06      	cmp	r3, #6
 800e402:	d006      	beq.n	800e412 <etharp_update_arp_entry+0x26>
 800e404:	4b48      	ldr	r3, [pc, #288]	@ (800e528 <etharp_update_arp_entry+0x13c>)
 800e406:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800e40a:	4948      	ldr	r1, [pc, #288]	@ (800e52c <etharp_update_arp_entry+0x140>)
 800e40c:	4848      	ldr	r0, [pc, #288]	@ (800e530 <etharp_update_arp_entry+0x144>)
 800e40e:	f002 f9e1 	bl	80107d4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d012      	beq.n	800e43e <etharp_update_arp_entry+0x52>
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d00e      	beq.n	800e43e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	68f9      	ldr	r1, [r7, #12]
 800e426:	4618      	mov	r0, r3
 800e428:	f001 f8fe 	bl	800f628 <ip4_addr_isbroadcast_u32>
 800e42c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d105      	bne.n	800e43e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e43a:	2be0      	cmp	r3, #224	@ 0xe0
 800e43c:	d102      	bne.n	800e444 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e43e:	f06f 030f 	mvn.w	r3, #15
 800e442:	e06c      	b.n	800e51e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e444:	78fb      	ldrb	r3, [r7, #3]
 800e446:	68fa      	ldr	r2, [r7, #12]
 800e448:	4619      	mov	r1, r3
 800e44a:	68b8      	ldr	r0, [r7, #8]
 800e44c:	f7ff fe56 	bl	800e0fc <etharp_find_entry>
 800e450:	4603      	mov	r3, r0
 800e452:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e454:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	da02      	bge.n	800e462 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e45c:	8afb      	ldrh	r3, [r7, #22]
 800e45e:	b25b      	sxtb	r3, r3
 800e460:	e05d      	b.n	800e51e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e462:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e466:	4933      	ldr	r1, [pc, #204]	@ (800e534 <etharp_update_arp_entry+0x148>)
 800e468:	4613      	mov	r3, r2
 800e46a:	005b      	lsls	r3, r3, #1
 800e46c:	4413      	add	r3, r2
 800e46e:	00db      	lsls	r3, r3, #3
 800e470:	440b      	add	r3, r1
 800e472:	3314      	adds	r3, #20
 800e474:	2202      	movs	r2, #2
 800e476:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e478:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e47c:	492d      	ldr	r1, [pc, #180]	@ (800e534 <etharp_update_arp_entry+0x148>)
 800e47e:	4613      	mov	r3, r2
 800e480:	005b      	lsls	r3, r3, #1
 800e482:	4413      	add	r3, r2
 800e484:	00db      	lsls	r3, r3, #3
 800e486:	440b      	add	r3, r1
 800e488:	3308      	adds	r3, #8
 800e48a:	68fa      	ldr	r2, [r7, #12]
 800e48c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e48e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e492:	4613      	mov	r3, r2
 800e494:	005b      	lsls	r3, r3, #1
 800e496:	4413      	add	r3, r2
 800e498:	00db      	lsls	r3, r3, #3
 800e49a:	3308      	adds	r3, #8
 800e49c:	4a25      	ldr	r2, [pc, #148]	@ (800e534 <etharp_update_arp_entry+0x148>)
 800e49e:	4413      	add	r3, r2
 800e4a0:	3304      	adds	r3, #4
 800e4a2:	2206      	movs	r2, #6
 800e4a4:	6879      	ldr	r1, [r7, #4]
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f002 fae5 	bl	8010a76 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e4ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e4b0:	4920      	ldr	r1, [pc, #128]	@ (800e534 <etharp_update_arp_entry+0x148>)
 800e4b2:	4613      	mov	r3, r2
 800e4b4:	005b      	lsls	r3, r3, #1
 800e4b6:	4413      	add	r3, r2
 800e4b8:	00db      	lsls	r3, r3, #3
 800e4ba:	440b      	add	r3, r1
 800e4bc:	3312      	adds	r3, #18
 800e4be:	2200      	movs	r2, #0
 800e4c0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e4c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e4c6:	491b      	ldr	r1, [pc, #108]	@ (800e534 <etharp_update_arp_entry+0x148>)
 800e4c8:	4613      	mov	r3, r2
 800e4ca:	005b      	lsls	r3, r3, #1
 800e4cc:	4413      	add	r3, r2
 800e4ce:	00db      	lsls	r3, r3, #3
 800e4d0:	440b      	add	r3, r1
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d021      	beq.n	800e51c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e4d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e4dc:	4915      	ldr	r1, [pc, #84]	@ (800e534 <etharp_update_arp_entry+0x148>)
 800e4de:	4613      	mov	r3, r2
 800e4e0:	005b      	lsls	r3, r3, #1
 800e4e2:	4413      	add	r3, r2
 800e4e4:	00db      	lsls	r3, r3, #3
 800e4e6:	440b      	add	r3, r1
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e4ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e4f0:	4910      	ldr	r1, [pc, #64]	@ (800e534 <etharp_update_arp_entry+0x148>)
 800e4f2:	4613      	mov	r3, r2
 800e4f4:	005b      	lsls	r3, r3, #1
 800e4f6:	4413      	add	r3, r2
 800e4f8:	00db      	lsls	r3, r3, #3
 800e4fa:	440b      	add	r3, r1
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800e506:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e50a:	9300      	str	r3, [sp, #0]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	6939      	ldr	r1, [r7, #16]
 800e510:	68f8      	ldr	r0, [r7, #12]
 800e512:	f002 f817 	bl	8010544 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e516:	6938      	ldr	r0, [r7, #16]
 800e518:	f7f9 fadc 	bl	8007ad4 <pbuf_free>
  }
  return ERR_OK;
 800e51c:	2300      	movs	r3, #0
}
 800e51e:	4618      	mov	r0, r3
 800e520:	3718      	adds	r7, #24
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
 800e526:	bf00      	nop
 800e528:	08013ddc 	.word	0x08013ddc
 800e52c:	08013ed4 	.word	0x08013ed4
 800e530:	08013e54 	.word	0x08013e54
 800e534:	2000887c 	.word	0x2000887c

0800e538 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b084      	sub	sp, #16
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e540:	2300      	movs	r3, #0
 800e542:	60fb      	str	r3, [r7, #12]
 800e544:	e01e      	b.n	800e584 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e546:	4913      	ldr	r1, [pc, #76]	@ (800e594 <etharp_cleanup_netif+0x5c>)
 800e548:	68fa      	ldr	r2, [r7, #12]
 800e54a:	4613      	mov	r3, r2
 800e54c:	005b      	lsls	r3, r3, #1
 800e54e:	4413      	add	r3, r2
 800e550:	00db      	lsls	r3, r3, #3
 800e552:	440b      	add	r3, r1
 800e554:	3314      	adds	r3, #20
 800e556:	781b      	ldrb	r3, [r3, #0]
 800e558:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e55a:	7afb      	ldrb	r3, [r7, #11]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d00e      	beq.n	800e57e <etharp_cleanup_netif+0x46>
 800e560:	490c      	ldr	r1, [pc, #48]	@ (800e594 <etharp_cleanup_netif+0x5c>)
 800e562:	68fa      	ldr	r2, [r7, #12]
 800e564:	4613      	mov	r3, r2
 800e566:	005b      	lsls	r3, r3, #1
 800e568:	4413      	add	r3, r2
 800e56a:	00db      	lsls	r3, r3, #3
 800e56c:	440b      	add	r3, r1
 800e56e:	3308      	adds	r3, #8
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	687a      	ldr	r2, [r7, #4]
 800e574:	429a      	cmp	r2, r3
 800e576:	d102      	bne.n	800e57e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e578:	68f8      	ldr	r0, [r7, #12]
 800e57a:	f7ff fce5 	bl	800df48 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	3301      	adds	r3, #1
 800e582:	60fb      	str	r3, [r7, #12]
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2b09      	cmp	r3, #9
 800e588:	dddd      	ble.n	800e546 <etharp_cleanup_netif+0xe>
    }
  }
}
 800e58a:	bf00      	nop
 800e58c:	bf00      	nop
 800e58e:	3710      	adds	r7, #16
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}
 800e594:	2000887c 	.word	0x2000887c

0800e598 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e598:	b5b0      	push	{r4, r5, r7, lr}
 800e59a:	b08a      	sub	sp, #40	@ 0x28
 800e59c:	af04      	add	r7, sp, #16
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d107      	bne.n	800e5b8 <etharp_input+0x20>
 800e5a8:	4b3d      	ldr	r3, [pc, #244]	@ (800e6a0 <etharp_input+0x108>)
 800e5aa:	f240 228a 	movw	r2, #650	@ 0x28a
 800e5ae:	493d      	ldr	r1, [pc, #244]	@ (800e6a4 <etharp_input+0x10c>)
 800e5b0:	483d      	ldr	r0, [pc, #244]	@ (800e6a8 <etharp_input+0x110>)
 800e5b2:	f002 f90f 	bl	80107d4 <iprintf>
 800e5b6:	e06f      	b.n	800e698 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	881b      	ldrh	r3, [r3, #0]
 800e5c2:	b29b      	uxth	r3, r3
 800e5c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e5c8:	d10c      	bne.n	800e5e4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e5ce:	2b06      	cmp	r3, #6
 800e5d0:	d108      	bne.n	800e5e4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e5d6:	2b04      	cmp	r3, #4
 800e5d8:	d104      	bne.n	800e5e4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	885b      	ldrh	r3, [r3, #2]
 800e5de:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e5e0:	2b08      	cmp	r3, #8
 800e5e2:	d003      	beq.n	800e5ec <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f7f9 fa75 	bl	8007ad4 <pbuf_free>
    return;
 800e5ea:	e055      	b.n	800e698 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	330e      	adds	r3, #14
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	3318      	adds	r3, #24
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	3304      	adds	r3, #4
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d102      	bne.n	800e60c <etharp_input+0x74>
    for_us = 0;
 800e606:	2300      	movs	r3, #0
 800e608:	75fb      	strb	r3, [r7, #23]
 800e60a:	e009      	b.n	800e620 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e60c:	68ba      	ldr	r2, [r7, #8]
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	3304      	adds	r3, #4
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	429a      	cmp	r2, r3
 800e616:	bf0c      	ite	eq
 800e618:	2301      	moveq	r3, #1
 800e61a:	2300      	movne	r3, #0
 800e61c:	b2db      	uxtb	r3, r3
 800e61e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e620:	693b      	ldr	r3, [r7, #16]
 800e622:	f103 0208 	add.w	r2, r3, #8
 800e626:	7dfb      	ldrb	r3, [r7, #23]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d001      	beq.n	800e630 <etharp_input+0x98>
 800e62c:	2301      	movs	r3, #1
 800e62e:	e000      	b.n	800e632 <etharp_input+0x9a>
 800e630:	2302      	movs	r3, #2
 800e632:	f107 010c 	add.w	r1, r7, #12
 800e636:	6838      	ldr	r0, [r7, #0]
 800e638:	f7ff fed8 	bl	800e3ec <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	88db      	ldrh	r3, [r3, #6]
 800e640:	b29b      	uxth	r3, r3
 800e642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e646:	d003      	beq.n	800e650 <etharp_input+0xb8>
 800e648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e64c:	d01e      	beq.n	800e68c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800e64e:	e020      	b.n	800e692 <etharp_input+0xfa>
      if (for_us) {
 800e650:	7dfb      	ldrb	r3, [r7, #23]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d01c      	beq.n	800e690 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800e66c:	693a      	ldr	r2, [r7, #16]
 800e66e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800e670:	2102      	movs	r1, #2
 800e672:	9103      	str	r1, [sp, #12]
 800e674:	f107 010c 	add.w	r1, r7, #12
 800e678:	9102      	str	r1, [sp, #8]
 800e67a:	9201      	str	r2, [sp, #4]
 800e67c:	9300      	str	r3, [sp, #0]
 800e67e:	462b      	mov	r3, r5
 800e680:	4622      	mov	r2, r4
 800e682:	4601      	mov	r1, r0
 800e684:	6838      	ldr	r0, [r7, #0]
 800e686:	f000 faeb 	bl	800ec60 <etharp_raw>
      break;
 800e68a:	e001      	b.n	800e690 <etharp_input+0xf8>
      break;
 800e68c:	bf00      	nop
 800e68e:	e000      	b.n	800e692 <etharp_input+0xfa>
      break;
 800e690:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f7f9 fa1e 	bl	8007ad4 <pbuf_free>
}
 800e698:	3718      	adds	r7, #24
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bdb0      	pop	{r4, r5, r7, pc}
 800e69e:	bf00      	nop
 800e6a0:	08013ddc 	.word	0x08013ddc
 800e6a4:	08013f2c 	.word	0x08013f2c
 800e6a8:	08013e54 	.word	0x08013e54

0800e6ac <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b086      	sub	sp, #24
 800e6b0:	af02      	add	r7, sp, #8
 800e6b2:	60f8      	str	r0, [r7, #12]
 800e6b4:	60b9      	str	r1, [r7, #8]
 800e6b6:	4613      	mov	r3, r2
 800e6b8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e6ba:	79fa      	ldrb	r2, [r7, #7]
 800e6bc:	4944      	ldr	r1, [pc, #272]	@ (800e7d0 <etharp_output_to_arp_index+0x124>)
 800e6be:	4613      	mov	r3, r2
 800e6c0:	005b      	lsls	r3, r3, #1
 800e6c2:	4413      	add	r3, r2
 800e6c4:	00db      	lsls	r3, r3, #3
 800e6c6:	440b      	add	r3, r1
 800e6c8:	3314      	adds	r3, #20
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	2b01      	cmp	r3, #1
 800e6ce:	d806      	bhi.n	800e6de <etharp_output_to_arp_index+0x32>
 800e6d0:	4b40      	ldr	r3, [pc, #256]	@ (800e7d4 <etharp_output_to_arp_index+0x128>)
 800e6d2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800e6d6:	4940      	ldr	r1, [pc, #256]	@ (800e7d8 <etharp_output_to_arp_index+0x12c>)
 800e6d8:	4840      	ldr	r0, [pc, #256]	@ (800e7dc <etharp_output_to_arp_index+0x130>)
 800e6da:	f002 f87b 	bl	80107d4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e6de:	79fa      	ldrb	r2, [r7, #7]
 800e6e0:	493b      	ldr	r1, [pc, #236]	@ (800e7d0 <etharp_output_to_arp_index+0x124>)
 800e6e2:	4613      	mov	r3, r2
 800e6e4:	005b      	lsls	r3, r3, #1
 800e6e6:	4413      	add	r3, r2
 800e6e8:	00db      	lsls	r3, r3, #3
 800e6ea:	440b      	add	r3, r1
 800e6ec:	3314      	adds	r3, #20
 800e6ee:	781b      	ldrb	r3, [r3, #0]
 800e6f0:	2b02      	cmp	r3, #2
 800e6f2:	d153      	bne.n	800e79c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e6f4:	79fa      	ldrb	r2, [r7, #7]
 800e6f6:	4936      	ldr	r1, [pc, #216]	@ (800e7d0 <etharp_output_to_arp_index+0x124>)
 800e6f8:	4613      	mov	r3, r2
 800e6fa:	005b      	lsls	r3, r3, #1
 800e6fc:	4413      	add	r3, r2
 800e6fe:	00db      	lsls	r3, r3, #3
 800e700:	440b      	add	r3, r1
 800e702:	3312      	adds	r3, #18
 800e704:	881b      	ldrh	r3, [r3, #0]
 800e706:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800e70a:	d919      	bls.n	800e740 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e70c:	79fa      	ldrb	r2, [r7, #7]
 800e70e:	4613      	mov	r3, r2
 800e710:	005b      	lsls	r3, r3, #1
 800e712:	4413      	add	r3, r2
 800e714:	00db      	lsls	r3, r3, #3
 800e716:	4a2e      	ldr	r2, [pc, #184]	@ (800e7d0 <etharp_output_to_arp_index+0x124>)
 800e718:	4413      	add	r3, r2
 800e71a:	3304      	adds	r3, #4
 800e71c:	4619      	mov	r1, r3
 800e71e:	68f8      	ldr	r0, [r7, #12]
 800e720:	f000 fb4c 	bl	800edbc <etharp_request>
 800e724:	4603      	mov	r3, r0
 800e726:	2b00      	cmp	r3, #0
 800e728:	d138      	bne.n	800e79c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e72a:	79fa      	ldrb	r2, [r7, #7]
 800e72c:	4928      	ldr	r1, [pc, #160]	@ (800e7d0 <etharp_output_to_arp_index+0x124>)
 800e72e:	4613      	mov	r3, r2
 800e730:	005b      	lsls	r3, r3, #1
 800e732:	4413      	add	r3, r2
 800e734:	00db      	lsls	r3, r3, #3
 800e736:	440b      	add	r3, r1
 800e738:	3314      	adds	r3, #20
 800e73a:	2203      	movs	r2, #3
 800e73c:	701a      	strb	r2, [r3, #0]
 800e73e:	e02d      	b.n	800e79c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e740:	79fa      	ldrb	r2, [r7, #7]
 800e742:	4923      	ldr	r1, [pc, #140]	@ (800e7d0 <etharp_output_to_arp_index+0x124>)
 800e744:	4613      	mov	r3, r2
 800e746:	005b      	lsls	r3, r3, #1
 800e748:	4413      	add	r3, r2
 800e74a:	00db      	lsls	r3, r3, #3
 800e74c:	440b      	add	r3, r1
 800e74e:	3312      	adds	r3, #18
 800e750:	881b      	ldrh	r3, [r3, #0]
 800e752:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800e756:	d321      	bcc.n	800e79c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e758:	79fa      	ldrb	r2, [r7, #7]
 800e75a:	4613      	mov	r3, r2
 800e75c:	005b      	lsls	r3, r3, #1
 800e75e:	4413      	add	r3, r2
 800e760:	00db      	lsls	r3, r3, #3
 800e762:	4a1b      	ldr	r2, [pc, #108]	@ (800e7d0 <etharp_output_to_arp_index+0x124>)
 800e764:	4413      	add	r3, r2
 800e766:	1d19      	adds	r1, r3, #4
 800e768:	79fa      	ldrb	r2, [r7, #7]
 800e76a:	4613      	mov	r3, r2
 800e76c:	005b      	lsls	r3, r3, #1
 800e76e:	4413      	add	r3, r2
 800e770:	00db      	lsls	r3, r3, #3
 800e772:	3308      	adds	r3, #8
 800e774:	4a16      	ldr	r2, [pc, #88]	@ (800e7d0 <etharp_output_to_arp_index+0x124>)
 800e776:	4413      	add	r3, r2
 800e778:	3304      	adds	r3, #4
 800e77a:	461a      	mov	r2, r3
 800e77c:	68f8      	ldr	r0, [r7, #12]
 800e77e:	f000 fafb 	bl	800ed78 <etharp_request_dst>
 800e782:	4603      	mov	r3, r0
 800e784:	2b00      	cmp	r3, #0
 800e786:	d109      	bne.n	800e79c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e788:	79fa      	ldrb	r2, [r7, #7]
 800e78a:	4911      	ldr	r1, [pc, #68]	@ (800e7d0 <etharp_output_to_arp_index+0x124>)
 800e78c:	4613      	mov	r3, r2
 800e78e:	005b      	lsls	r3, r3, #1
 800e790:	4413      	add	r3, r2
 800e792:	00db      	lsls	r3, r3, #3
 800e794:	440b      	add	r3, r1
 800e796:	3314      	adds	r3, #20
 800e798:	2203      	movs	r2, #3
 800e79a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800e7a2:	79fa      	ldrb	r2, [r7, #7]
 800e7a4:	4613      	mov	r3, r2
 800e7a6:	005b      	lsls	r3, r3, #1
 800e7a8:	4413      	add	r3, r2
 800e7aa:	00db      	lsls	r3, r3, #3
 800e7ac:	3308      	adds	r3, #8
 800e7ae:	4a08      	ldr	r2, [pc, #32]	@ (800e7d0 <etharp_output_to_arp_index+0x124>)
 800e7b0:	4413      	add	r3, r2
 800e7b2:	3304      	adds	r3, #4
 800e7b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e7b8:	9200      	str	r2, [sp, #0]
 800e7ba:	460a      	mov	r2, r1
 800e7bc:	68b9      	ldr	r1, [r7, #8]
 800e7be:	68f8      	ldr	r0, [r7, #12]
 800e7c0:	f001 fec0 	bl	8010544 <ethernet_output>
 800e7c4:	4603      	mov	r3, r0
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3710      	adds	r7, #16
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
 800e7ce:	bf00      	nop
 800e7d0:	2000887c 	.word	0x2000887c
 800e7d4:	08013ddc 	.word	0x08013ddc
 800e7d8:	08013f4c 	.word	0x08013f4c
 800e7dc:	08013e54 	.word	0x08013e54

0800e7e0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b08a      	sub	sp, #40	@ 0x28
 800e7e4:	af02      	add	r7, sp, #8
 800e7e6:	60f8      	str	r0, [r7, #12]
 800e7e8:	60b9      	str	r1, [r7, #8]
 800e7ea:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d106      	bne.n	800e804 <etharp_output+0x24>
 800e7f6:	4b73      	ldr	r3, [pc, #460]	@ (800e9c4 <etharp_output+0x1e4>)
 800e7f8:	f240 321e 	movw	r2, #798	@ 0x31e
 800e7fc:	4972      	ldr	r1, [pc, #456]	@ (800e9c8 <etharp_output+0x1e8>)
 800e7fe:	4873      	ldr	r0, [pc, #460]	@ (800e9cc <etharp_output+0x1ec>)
 800e800:	f001 ffe8 	bl	80107d4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d106      	bne.n	800e818 <etharp_output+0x38>
 800e80a:	4b6e      	ldr	r3, [pc, #440]	@ (800e9c4 <etharp_output+0x1e4>)
 800e80c:	f240 321f 	movw	r2, #799	@ 0x31f
 800e810:	496f      	ldr	r1, [pc, #444]	@ (800e9d0 <etharp_output+0x1f0>)
 800e812:	486e      	ldr	r0, [pc, #440]	@ (800e9cc <etharp_output+0x1ec>)
 800e814:	f001 ffde 	bl	80107d4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d106      	bne.n	800e82c <etharp_output+0x4c>
 800e81e:	4b69      	ldr	r3, [pc, #420]	@ (800e9c4 <etharp_output+0x1e4>)
 800e820:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800e824:	496b      	ldr	r1, [pc, #428]	@ (800e9d4 <etharp_output+0x1f4>)
 800e826:	4869      	ldr	r0, [pc, #420]	@ (800e9cc <etharp_output+0x1ec>)
 800e828:	f001 ffd4 	bl	80107d4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	68f9      	ldr	r1, [r7, #12]
 800e832:	4618      	mov	r0, r3
 800e834:	f000 fef8 	bl	800f628 <ip4_addr_isbroadcast_u32>
 800e838:	4603      	mov	r3, r0
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d002      	beq.n	800e844 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e83e:	4b66      	ldr	r3, [pc, #408]	@ (800e9d8 <etharp_output+0x1f8>)
 800e840:	61fb      	str	r3, [r7, #28]
 800e842:	e0af      	b.n	800e9a4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e84c:	2be0      	cmp	r3, #224	@ 0xe0
 800e84e:	d118      	bne.n	800e882 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e850:	2301      	movs	r3, #1
 800e852:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e854:	2300      	movs	r3, #0
 800e856:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e858:	235e      	movs	r3, #94	@ 0x5e
 800e85a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	3301      	adds	r3, #1
 800e860:	781b      	ldrb	r3, [r3, #0]
 800e862:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e866:	b2db      	uxtb	r3, r3
 800e868:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	3302      	adds	r3, #2
 800e86e:	781b      	ldrb	r3, [r3, #0]
 800e870:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	3303      	adds	r3, #3
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e87a:	f107 0310 	add.w	r3, r7, #16
 800e87e:	61fb      	str	r3, [r7, #28]
 800e880:	e090      	b.n	800e9a4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681a      	ldr	r2, [r3, #0]
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	3304      	adds	r3, #4
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	405a      	eors	r2, r3
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	3308      	adds	r3, #8
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4013      	ands	r3, r2
 800e896:	2b00      	cmp	r3, #0
 800e898:	d012      	beq.n	800e8c0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e8a0:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d00b      	beq.n	800e8c0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	330c      	adds	r3, #12
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d003      	beq.n	800e8ba <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	330c      	adds	r3, #12
 800e8b6:	61bb      	str	r3, [r7, #24]
 800e8b8:	e002      	b.n	800e8c0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e8ba:	f06f 0303 	mvn.w	r3, #3
 800e8be:	e07d      	b.n	800e9bc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e8c0:	4b46      	ldr	r3, [pc, #280]	@ (800e9dc <etharp_output+0x1fc>)
 800e8c2:	781b      	ldrb	r3, [r3, #0]
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	4a46      	ldr	r2, [pc, #280]	@ (800e9e0 <etharp_output+0x200>)
 800e8c8:	460b      	mov	r3, r1
 800e8ca:	005b      	lsls	r3, r3, #1
 800e8cc:	440b      	add	r3, r1
 800e8ce:	00db      	lsls	r3, r3, #3
 800e8d0:	4413      	add	r3, r2
 800e8d2:	3314      	adds	r3, #20
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	2b01      	cmp	r3, #1
 800e8d8:	d925      	bls.n	800e926 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e8da:	4b40      	ldr	r3, [pc, #256]	@ (800e9dc <etharp_output+0x1fc>)
 800e8dc:	781b      	ldrb	r3, [r3, #0]
 800e8de:	4619      	mov	r1, r3
 800e8e0:	4a3f      	ldr	r2, [pc, #252]	@ (800e9e0 <etharp_output+0x200>)
 800e8e2:	460b      	mov	r3, r1
 800e8e4:	005b      	lsls	r3, r3, #1
 800e8e6:	440b      	add	r3, r1
 800e8e8:	00db      	lsls	r3, r3, #3
 800e8ea:	4413      	add	r3, r2
 800e8ec:	3308      	adds	r3, #8
 800e8ee:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e8f0:	68fa      	ldr	r2, [r7, #12]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d117      	bne.n	800e926 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e8f6:	69bb      	ldr	r3, [r7, #24]
 800e8f8:	681a      	ldr	r2, [r3, #0]
 800e8fa:	4b38      	ldr	r3, [pc, #224]	@ (800e9dc <etharp_output+0x1fc>)
 800e8fc:	781b      	ldrb	r3, [r3, #0]
 800e8fe:	4618      	mov	r0, r3
 800e900:	4937      	ldr	r1, [pc, #220]	@ (800e9e0 <etharp_output+0x200>)
 800e902:	4603      	mov	r3, r0
 800e904:	005b      	lsls	r3, r3, #1
 800e906:	4403      	add	r3, r0
 800e908:	00db      	lsls	r3, r3, #3
 800e90a:	440b      	add	r3, r1
 800e90c:	3304      	adds	r3, #4
 800e90e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e910:	429a      	cmp	r2, r3
 800e912:	d108      	bne.n	800e926 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e914:	4b31      	ldr	r3, [pc, #196]	@ (800e9dc <etharp_output+0x1fc>)
 800e916:	781b      	ldrb	r3, [r3, #0]
 800e918:	461a      	mov	r2, r3
 800e91a:	68b9      	ldr	r1, [r7, #8]
 800e91c:	68f8      	ldr	r0, [r7, #12]
 800e91e:	f7ff fec5 	bl	800e6ac <etharp_output_to_arp_index>
 800e922:	4603      	mov	r3, r0
 800e924:	e04a      	b.n	800e9bc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e926:	2300      	movs	r3, #0
 800e928:	75fb      	strb	r3, [r7, #23]
 800e92a:	e031      	b.n	800e990 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e92c:	7dfa      	ldrb	r2, [r7, #23]
 800e92e:	492c      	ldr	r1, [pc, #176]	@ (800e9e0 <etharp_output+0x200>)
 800e930:	4613      	mov	r3, r2
 800e932:	005b      	lsls	r3, r3, #1
 800e934:	4413      	add	r3, r2
 800e936:	00db      	lsls	r3, r3, #3
 800e938:	440b      	add	r3, r1
 800e93a:	3314      	adds	r3, #20
 800e93c:	781b      	ldrb	r3, [r3, #0]
 800e93e:	2b01      	cmp	r3, #1
 800e940:	d923      	bls.n	800e98a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e942:	7dfa      	ldrb	r2, [r7, #23]
 800e944:	4926      	ldr	r1, [pc, #152]	@ (800e9e0 <etharp_output+0x200>)
 800e946:	4613      	mov	r3, r2
 800e948:	005b      	lsls	r3, r3, #1
 800e94a:	4413      	add	r3, r2
 800e94c:	00db      	lsls	r3, r3, #3
 800e94e:	440b      	add	r3, r1
 800e950:	3308      	adds	r3, #8
 800e952:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e954:	68fa      	ldr	r2, [r7, #12]
 800e956:	429a      	cmp	r2, r3
 800e958:	d117      	bne.n	800e98a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e95a:	69bb      	ldr	r3, [r7, #24]
 800e95c:	6819      	ldr	r1, [r3, #0]
 800e95e:	7dfa      	ldrb	r2, [r7, #23]
 800e960:	481f      	ldr	r0, [pc, #124]	@ (800e9e0 <etharp_output+0x200>)
 800e962:	4613      	mov	r3, r2
 800e964:	005b      	lsls	r3, r3, #1
 800e966:	4413      	add	r3, r2
 800e968:	00db      	lsls	r3, r3, #3
 800e96a:	4403      	add	r3, r0
 800e96c:	3304      	adds	r3, #4
 800e96e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800e970:	4299      	cmp	r1, r3
 800e972:	d10a      	bne.n	800e98a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800e974:	4a19      	ldr	r2, [pc, #100]	@ (800e9dc <etharp_output+0x1fc>)
 800e976:	7dfb      	ldrb	r3, [r7, #23]
 800e978:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e97a:	7dfb      	ldrb	r3, [r7, #23]
 800e97c:	461a      	mov	r2, r3
 800e97e:	68b9      	ldr	r1, [r7, #8]
 800e980:	68f8      	ldr	r0, [r7, #12]
 800e982:	f7ff fe93 	bl	800e6ac <etharp_output_to_arp_index>
 800e986:	4603      	mov	r3, r0
 800e988:	e018      	b.n	800e9bc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e98a:	7dfb      	ldrb	r3, [r7, #23]
 800e98c:	3301      	adds	r3, #1
 800e98e:	75fb      	strb	r3, [r7, #23]
 800e990:	7dfb      	ldrb	r3, [r7, #23]
 800e992:	2b09      	cmp	r3, #9
 800e994:	d9ca      	bls.n	800e92c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e996:	68ba      	ldr	r2, [r7, #8]
 800e998:	69b9      	ldr	r1, [r7, #24]
 800e99a:	68f8      	ldr	r0, [r7, #12]
 800e99c:	f000 f822 	bl	800e9e4 <etharp_query>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	e00b      	b.n	800e9bc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800e9aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e9ae:	9300      	str	r3, [sp, #0]
 800e9b0:	69fb      	ldr	r3, [r7, #28]
 800e9b2:	68b9      	ldr	r1, [r7, #8]
 800e9b4:	68f8      	ldr	r0, [r7, #12]
 800e9b6:	f001 fdc5 	bl	8010544 <ethernet_output>
 800e9ba:	4603      	mov	r3, r0
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3720      	adds	r7, #32
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}
 800e9c4:	08013ddc 	.word	0x08013ddc
 800e9c8:	08013f2c 	.word	0x08013f2c
 800e9cc:	08013e54 	.word	0x08013e54
 800e9d0:	08013f7c 	.word	0x08013f7c
 800e9d4:	08013f1c 	.word	0x08013f1c
 800e9d8:	08014598 	.word	0x08014598
 800e9dc:	2000896c 	.word	0x2000896c
 800e9e0:	2000887c 	.word	0x2000887c

0800e9e4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b08c      	sub	sp, #48	@ 0x30
 800e9e8:	af02      	add	r7, sp, #8
 800e9ea:	60f8      	str	r0, [r7, #12]
 800e9ec:	60b9      	str	r1, [r7, #8]
 800e9ee:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	3326      	adds	r3, #38	@ 0x26
 800e9f4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e9f6:	23ff      	movs	r3, #255	@ 0xff
 800e9f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	68f9      	ldr	r1, [r7, #12]
 800ea06:	4618      	mov	r0, r3
 800ea08:	f000 fe0e 	bl	800f628 <ip4_addr_isbroadcast_u32>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d10c      	bne.n	800ea2c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ea1a:	2be0      	cmp	r3, #224	@ 0xe0
 800ea1c:	d006      	beq.n	800ea2c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d003      	beq.n	800ea2c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d102      	bne.n	800ea32 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ea2c:	f06f 030f 	mvn.w	r3, #15
 800ea30:	e101      	b.n	800ec36 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ea32:	68fa      	ldr	r2, [r7, #12]
 800ea34:	2101      	movs	r1, #1
 800ea36:	68b8      	ldr	r0, [r7, #8]
 800ea38:	f7ff fb60 	bl	800e0fc <etharp_find_entry>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800ea40:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	da02      	bge.n	800ea4e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800ea48:	8a7b      	ldrh	r3, [r7, #18]
 800ea4a:	b25b      	sxtb	r3, r3
 800ea4c:	e0f3      	b.n	800ec36 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800ea4e:	8a7b      	ldrh	r3, [r7, #18]
 800ea50:	2b7e      	cmp	r3, #126	@ 0x7e
 800ea52:	d906      	bls.n	800ea62 <etharp_query+0x7e>
 800ea54:	4b7a      	ldr	r3, [pc, #488]	@ (800ec40 <etharp_query+0x25c>)
 800ea56:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800ea5a:	497a      	ldr	r1, [pc, #488]	@ (800ec44 <etharp_query+0x260>)
 800ea5c:	487a      	ldr	r0, [pc, #488]	@ (800ec48 <etharp_query+0x264>)
 800ea5e:	f001 feb9 	bl	80107d4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800ea62:	8a7b      	ldrh	r3, [r7, #18]
 800ea64:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ea66:	7c7a      	ldrb	r2, [r7, #17]
 800ea68:	4978      	ldr	r1, [pc, #480]	@ (800ec4c <etharp_query+0x268>)
 800ea6a:	4613      	mov	r3, r2
 800ea6c:	005b      	lsls	r3, r3, #1
 800ea6e:	4413      	add	r3, r2
 800ea70:	00db      	lsls	r3, r3, #3
 800ea72:	440b      	add	r3, r1
 800ea74:	3314      	adds	r3, #20
 800ea76:	781b      	ldrb	r3, [r3, #0]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d115      	bne.n	800eaa8 <etharp_query+0xc4>
    is_new_entry = 1;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ea80:	7c7a      	ldrb	r2, [r7, #17]
 800ea82:	4972      	ldr	r1, [pc, #456]	@ (800ec4c <etharp_query+0x268>)
 800ea84:	4613      	mov	r3, r2
 800ea86:	005b      	lsls	r3, r3, #1
 800ea88:	4413      	add	r3, r2
 800ea8a:	00db      	lsls	r3, r3, #3
 800ea8c:	440b      	add	r3, r1
 800ea8e:	3314      	adds	r3, #20
 800ea90:	2201      	movs	r2, #1
 800ea92:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ea94:	7c7a      	ldrb	r2, [r7, #17]
 800ea96:	496d      	ldr	r1, [pc, #436]	@ (800ec4c <etharp_query+0x268>)
 800ea98:	4613      	mov	r3, r2
 800ea9a:	005b      	lsls	r3, r3, #1
 800ea9c:	4413      	add	r3, r2
 800ea9e:	00db      	lsls	r3, r3, #3
 800eaa0:	440b      	add	r3, r1
 800eaa2:	3308      	adds	r3, #8
 800eaa4:	68fa      	ldr	r2, [r7, #12]
 800eaa6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800eaa8:	7c7a      	ldrb	r2, [r7, #17]
 800eaaa:	4968      	ldr	r1, [pc, #416]	@ (800ec4c <etharp_query+0x268>)
 800eaac:	4613      	mov	r3, r2
 800eaae:	005b      	lsls	r3, r3, #1
 800eab0:	4413      	add	r3, r2
 800eab2:	00db      	lsls	r3, r3, #3
 800eab4:	440b      	add	r3, r1
 800eab6:	3314      	adds	r3, #20
 800eab8:	781b      	ldrb	r3, [r3, #0]
 800eaba:	2b01      	cmp	r3, #1
 800eabc:	d011      	beq.n	800eae2 <etharp_query+0xfe>
 800eabe:	7c7a      	ldrb	r2, [r7, #17]
 800eac0:	4962      	ldr	r1, [pc, #392]	@ (800ec4c <etharp_query+0x268>)
 800eac2:	4613      	mov	r3, r2
 800eac4:	005b      	lsls	r3, r3, #1
 800eac6:	4413      	add	r3, r2
 800eac8:	00db      	lsls	r3, r3, #3
 800eaca:	440b      	add	r3, r1
 800eacc:	3314      	adds	r3, #20
 800eace:	781b      	ldrb	r3, [r3, #0]
 800ead0:	2b01      	cmp	r3, #1
 800ead2:	d806      	bhi.n	800eae2 <etharp_query+0xfe>
 800ead4:	4b5a      	ldr	r3, [pc, #360]	@ (800ec40 <etharp_query+0x25c>)
 800ead6:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800eada:	495d      	ldr	r1, [pc, #372]	@ (800ec50 <etharp_query+0x26c>)
 800eadc:	485a      	ldr	r0, [pc, #360]	@ (800ec48 <etharp_query+0x264>)
 800eade:	f001 fe79 	bl	80107d4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800eae2:	6a3b      	ldr	r3, [r7, #32]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d102      	bne.n	800eaee <etharp_query+0x10a>
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d10c      	bne.n	800eb08 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800eaee:	68b9      	ldr	r1, [r7, #8]
 800eaf0:	68f8      	ldr	r0, [r7, #12]
 800eaf2:	f000 f963 	bl	800edbc <etharp_request>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d102      	bne.n	800eb08 <etharp_query+0x124>
      return result;
 800eb02:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800eb06:	e096      	b.n	800ec36 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d106      	bne.n	800eb1c <etharp_query+0x138>
 800eb0e:	4b4c      	ldr	r3, [pc, #304]	@ (800ec40 <etharp_query+0x25c>)
 800eb10:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800eb14:	494f      	ldr	r1, [pc, #316]	@ (800ec54 <etharp_query+0x270>)
 800eb16:	484c      	ldr	r0, [pc, #304]	@ (800ec48 <etharp_query+0x264>)
 800eb18:	f001 fe5c 	bl	80107d4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800eb1c:	7c7a      	ldrb	r2, [r7, #17]
 800eb1e:	494b      	ldr	r1, [pc, #300]	@ (800ec4c <etharp_query+0x268>)
 800eb20:	4613      	mov	r3, r2
 800eb22:	005b      	lsls	r3, r3, #1
 800eb24:	4413      	add	r3, r2
 800eb26:	00db      	lsls	r3, r3, #3
 800eb28:	440b      	add	r3, r1
 800eb2a:	3314      	adds	r3, #20
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	2b01      	cmp	r3, #1
 800eb30:	d917      	bls.n	800eb62 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800eb32:	4a49      	ldr	r2, [pc, #292]	@ (800ec58 <etharp_query+0x274>)
 800eb34:	7c7b      	ldrb	r3, [r7, #17]
 800eb36:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800eb38:	7c7a      	ldrb	r2, [r7, #17]
 800eb3a:	4613      	mov	r3, r2
 800eb3c:	005b      	lsls	r3, r3, #1
 800eb3e:	4413      	add	r3, r2
 800eb40:	00db      	lsls	r3, r3, #3
 800eb42:	3308      	adds	r3, #8
 800eb44:	4a41      	ldr	r2, [pc, #260]	@ (800ec4c <etharp_query+0x268>)
 800eb46:	4413      	add	r3, r2
 800eb48:	3304      	adds	r3, #4
 800eb4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800eb4e:	9200      	str	r2, [sp, #0]
 800eb50:	697a      	ldr	r2, [r7, #20]
 800eb52:	6879      	ldr	r1, [r7, #4]
 800eb54:	68f8      	ldr	r0, [r7, #12]
 800eb56:	f001 fcf5 	bl	8010544 <ethernet_output>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800eb60:	e067      	b.n	800ec32 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800eb62:	7c7a      	ldrb	r2, [r7, #17]
 800eb64:	4939      	ldr	r1, [pc, #228]	@ (800ec4c <etharp_query+0x268>)
 800eb66:	4613      	mov	r3, r2
 800eb68:	005b      	lsls	r3, r3, #1
 800eb6a:	4413      	add	r3, r2
 800eb6c:	00db      	lsls	r3, r3, #3
 800eb6e:	440b      	add	r3, r1
 800eb70:	3314      	adds	r3, #20
 800eb72:	781b      	ldrb	r3, [r3, #0]
 800eb74:	2b01      	cmp	r3, #1
 800eb76:	d15c      	bne.n	800ec32 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800eb80:	e01c      	b.n	800ebbc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800eb82:	69fb      	ldr	r3, [r7, #28]
 800eb84:	895a      	ldrh	r2, [r3, #10]
 800eb86:	69fb      	ldr	r3, [r7, #28]
 800eb88:	891b      	ldrh	r3, [r3, #8]
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d10a      	bne.n	800eba4 <etharp_query+0x1c0>
 800eb8e:	69fb      	ldr	r3, [r7, #28]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d006      	beq.n	800eba4 <etharp_query+0x1c0>
 800eb96:	4b2a      	ldr	r3, [pc, #168]	@ (800ec40 <etharp_query+0x25c>)
 800eb98:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800eb9c:	492f      	ldr	r1, [pc, #188]	@ (800ec5c <etharp_query+0x278>)
 800eb9e:	482a      	ldr	r0, [pc, #168]	@ (800ec48 <etharp_query+0x264>)
 800eba0:	f001 fe18 	bl	80107d4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800eba4:	69fb      	ldr	r3, [r7, #28]
 800eba6:	7b1b      	ldrb	r3, [r3, #12]
 800eba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d002      	beq.n	800ebb6 <etharp_query+0x1d2>
        copy_needed = 1;
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	61bb      	str	r3, [r7, #24]
        break;
 800ebb4:	e005      	b.n	800ebc2 <etharp_query+0x1de>
      }
      p = p->next;
 800ebb6:	69fb      	ldr	r3, [r7, #28]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ebbc:	69fb      	ldr	r3, [r7, #28]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d1df      	bne.n	800eb82 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800ebc2:	69bb      	ldr	r3, [r7, #24]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d007      	beq.n	800ebd8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ebc8:	687a      	ldr	r2, [r7, #4]
 800ebca:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800ebce:	200e      	movs	r0, #14
 800ebd0:	f7f9 fa7e 	bl	80080d0 <pbuf_clone>
 800ebd4:	61f8      	str	r0, [r7, #28]
 800ebd6:	e004      	b.n	800ebe2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ebdc:	69f8      	ldr	r0, [r7, #28]
 800ebde:	f7f9 f819 	bl	8007c14 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ebe2:	69fb      	ldr	r3, [r7, #28]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d021      	beq.n	800ec2c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ebe8:	7c7a      	ldrb	r2, [r7, #17]
 800ebea:	4918      	ldr	r1, [pc, #96]	@ (800ec4c <etharp_query+0x268>)
 800ebec:	4613      	mov	r3, r2
 800ebee:	005b      	lsls	r3, r3, #1
 800ebf0:	4413      	add	r3, r2
 800ebf2:	00db      	lsls	r3, r3, #3
 800ebf4:	440b      	add	r3, r1
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d00a      	beq.n	800ec12 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800ebfc:	7c7a      	ldrb	r2, [r7, #17]
 800ebfe:	4913      	ldr	r1, [pc, #76]	@ (800ec4c <etharp_query+0x268>)
 800ec00:	4613      	mov	r3, r2
 800ec02:	005b      	lsls	r3, r3, #1
 800ec04:	4413      	add	r3, r2
 800ec06:	00db      	lsls	r3, r3, #3
 800ec08:	440b      	add	r3, r1
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f7f8 ff61 	bl	8007ad4 <pbuf_free>
      }
      arp_table[i].q = p;
 800ec12:	7c7a      	ldrb	r2, [r7, #17]
 800ec14:	490d      	ldr	r1, [pc, #52]	@ (800ec4c <etharp_query+0x268>)
 800ec16:	4613      	mov	r3, r2
 800ec18:	005b      	lsls	r3, r3, #1
 800ec1a:	4413      	add	r3, r2
 800ec1c:	00db      	lsls	r3, r3, #3
 800ec1e:	440b      	add	r3, r1
 800ec20:	69fa      	ldr	r2, [r7, #28]
 800ec22:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800ec24:	2300      	movs	r3, #0
 800ec26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ec2a:	e002      	b.n	800ec32 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800ec2c:	23ff      	movs	r3, #255	@ 0xff
 800ec2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800ec32:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3728      	adds	r7, #40	@ 0x28
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	08013ddc 	.word	0x08013ddc
 800ec44:	08013f88 	.word	0x08013f88
 800ec48:	08013e54 	.word	0x08013e54
 800ec4c:	2000887c 	.word	0x2000887c
 800ec50:	08013f98 	.word	0x08013f98
 800ec54:	08013f7c 	.word	0x08013f7c
 800ec58:	2000896c 	.word	0x2000896c
 800ec5c:	08013fc0 	.word	0x08013fc0

0800ec60 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b08a      	sub	sp, #40	@ 0x28
 800ec64:	af02      	add	r7, sp, #8
 800ec66:	60f8      	str	r0, [r7, #12]
 800ec68:	60b9      	str	r1, [r7, #8]
 800ec6a:	607a      	str	r2, [r7, #4]
 800ec6c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d106      	bne.n	800ec86 <etharp_raw+0x26>
 800ec78:	4b3a      	ldr	r3, [pc, #232]	@ (800ed64 <etharp_raw+0x104>)
 800ec7a:	f240 4257 	movw	r2, #1111	@ 0x457
 800ec7e:	493a      	ldr	r1, [pc, #232]	@ (800ed68 <etharp_raw+0x108>)
 800ec80:	483a      	ldr	r0, [pc, #232]	@ (800ed6c <etharp_raw+0x10c>)
 800ec82:	f001 fda7 	bl	80107d4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800ec86:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ec8a:	211c      	movs	r1, #28
 800ec8c:	200e      	movs	r0, #14
 800ec8e:	f7f8 fc3d 	bl	800750c <pbuf_alloc>
 800ec92:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800ec94:	69bb      	ldr	r3, [r7, #24]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d102      	bne.n	800eca0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800ec9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ec9e:	e05d      	b.n	800ed5c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800eca0:	69bb      	ldr	r3, [r7, #24]
 800eca2:	895b      	ldrh	r3, [r3, #10]
 800eca4:	2b1b      	cmp	r3, #27
 800eca6:	d806      	bhi.n	800ecb6 <etharp_raw+0x56>
 800eca8:	4b2e      	ldr	r3, [pc, #184]	@ (800ed64 <etharp_raw+0x104>)
 800ecaa:	f240 4262 	movw	r2, #1122	@ 0x462
 800ecae:	4930      	ldr	r1, [pc, #192]	@ (800ed70 <etharp_raw+0x110>)
 800ecb0:	482e      	ldr	r0, [pc, #184]	@ (800ed6c <etharp_raw+0x10c>)
 800ecb2:	f001 fd8f 	bl	80107d4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800ecb6:	69bb      	ldr	r3, [r7, #24]
 800ecb8:	685b      	ldr	r3, [r3, #4]
 800ecba:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800ecbc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7f7 fbaa 	bl	8006418 <lwip_htons>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	461a      	mov	r2, r3
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ecd2:	2b06      	cmp	r3, #6
 800ecd4:	d006      	beq.n	800ece4 <etharp_raw+0x84>
 800ecd6:	4b23      	ldr	r3, [pc, #140]	@ (800ed64 <etharp_raw+0x104>)
 800ecd8:	f240 4269 	movw	r2, #1129	@ 0x469
 800ecdc:	4925      	ldr	r1, [pc, #148]	@ (800ed74 <etharp_raw+0x114>)
 800ecde:	4823      	ldr	r0, [pc, #140]	@ (800ed6c <etharp_raw+0x10c>)
 800ece0:	f001 fd78 	bl	80107d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800ece4:	697b      	ldr	r3, [r7, #20]
 800ece6:	3308      	adds	r3, #8
 800ece8:	2206      	movs	r2, #6
 800ecea:	6839      	ldr	r1, [r7, #0]
 800ecec:	4618      	mov	r0, r3
 800ecee:	f001 fec2 	bl	8010a76 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	3312      	adds	r3, #18
 800ecf6:	2206      	movs	r2, #6
 800ecf8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f001 febb 	bl	8010a76 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	330e      	adds	r3, #14
 800ed04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ed06:	6812      	ldr	r2, [r2, #0]
 800ed08:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	3318      	adds	r3, #24
 800ed0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed10:	6812      	ldr	r2, [r2, #0]
 800ed12:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	2200      	movs	r2, #0
 800ed18:	701a      	strb	r2, [r3, #0]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	f042 0201 	orr.w	r2, r2, #1
 800ed20:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	2200      	movs	r2, #0
 800ed26:	f042 0208 	orr.w	r2, r2, #8
 800ed2a:	709a      	strb	r2, [r3, #2]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	2206      	movs	r2, #6
 800ed34:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	2204      	movs	r2, #4
 800ed3a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ed3c:	f640 0306 	movw	r3, #2054	@ 0x806
 800ed40:	9300      	str	r3, [sp, #0]
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	68ba      	ldr	r2, [r7, #8]
 800ed46:	69b9      	ldr	r1, [r7, #24]
 800ed48:	68f8      	ldr	r0, [r7, #12]
 800ed4a:	f001 fbfb 	bl	8010544 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ed4e:	69b8      	ldr	r0, [r7, #24]
 800ed50:	f7f8 fec0 	bl	8007ad4 <pbuf_free>
  p = NULL;
 800ed54:	2300      	movs	r3, #0
 800ed56:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800ed58:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	3720      	adds	r7, #32
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd80      	pop	{r7, pc}
 800ed64:	08013ddc 	.word	0x08013ddc
 800ed68:	08013f2c 	.word	0x08013f2c
 800ed6c:	08013e54 	.word	0x08013e54
 800ed70:	08013fdc 	.word	0x08013fdc
 800ed74:	08014010 	.word	0x08014010

0800ed78 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b088      	sub	sp, #32
 800ed7c:	af04      	add	r7, sp, #16
 800ed7e:	60f8      	str	r0, [r7, #12]
 800ed80:	60b9      	str	r1, [r7, #8]
 800ed82:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ed94:	2201      	movs	r2, #1
 800ed96:	9203      	str	r2, [sp, #12]
 800ed98:	68ba      	ldr	r2, [r7, #8]
 800ed9a:	9202      	str	r2, [sp, #8]
 800ed9c:	4a06      	ldr	r2, [pc, #24]	@ (800edb8 <etharp_request_dst+0x40>)
 800ed9e:	9201      	str	r2, [sp, #4]
 800eda0:	9300      	str	r3, [sp, #0]
 800eda2:	4603      	mov	r3, r0
 800eda4:	687a      	ldr	r2, [r7, #4]
 800eda6:	68f8      	ldr	r0, [r7, #12]
 800eda8:	f7ff ff5a 	bl	800ec60 <etharp_raw>
 800edac:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3710      	adds	r7, #16
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
 800edb6:	bf00      	nop
 800edb8:	080145a0 	.word	0x080145a0

0800edbc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b082      	sub	sp, #8
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800edc6:	4a05      	ldr	r2, [pc, #20]	@ (800eddc <etharp_request+0x20>)
 800edc8:	6839      	ldr	r1, [r7, #0]
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f7ff ffd4 	bl	800ed78 <etharp_request_dst>
 800edd0:	4603      	mov	r3, r0
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3708      	adds	r7, #8
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
 800edda:	bf00      	nop
 800eddc:	08014598 	.word	0x08014598

0800ede0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b08e      	sub	sp, #56	@ 0x38
 800ede4:	af04      	add	r7, sp, #16
 800ede6:	6078      	str	r0, [r7, #4]
 800ede8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800edea:	4b79      	ldr	r3, [pc, #484]	@ (800efd0 <icmp_input+0x1f0>)
 800edec:	689b      	ldr	r3, [r3, #8]
 800edee:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800edf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edf2:	781b      	ldrb	r3, [r3, #0]
 800edf4:	f003 030f 	and.w	r3, r3, #15
 800edf8:	b2db      	uxtb	r3, r3
 800edfa:	009b      	lsls	r3, r3, #2
 800edfc:	b2db      	uxtb	r3, r3
 800edfe:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800ee00:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ee02:	2b13      	cmp	r3, #19
 800ee04:	f240 80cd 	bls.w	800efa2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	895b      	ldrh	r3, [r3, #10]
 800ee0c:	2b03      	cmp	r3, #3
 800ee0e:	f240 80ca 	bls.w	800efa6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	685b      	ldr	r3, [r3, #4]
 800ee16:	781b      	ldrb	r3, [r3, #0]
 800ee18:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ee1c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	f000 80b7 	beq.w	800ef94 <icmp_input+0x1b4>
 800ee26:	2b08      	cmp	r3, #8
 800ee28:	f040 80b7 	bne.w	800ef9a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ee2c:	4b69      	ldr	r3, [pc, #420]	@ (800efd4 <icmp_input+0x1f4>)
 800ee2e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ee30:	4b67      	ldr	r3, [pc, #412]	@ (800efd0 <icmp_input+0x1f0>)
 800ee32:	695b      	ldr	r3, [r3, #20]
 800ee34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ee38:	2be0      	cmp	r3, #224	@ 0xe0
 800ee3a:	f000 80bb 	beq.w	800efb4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ee3e:	4b64      	ldr	r3, [pc, #400]	@ (800efd0 <icmp_input+0x1f0>)
 800ee40:	695b      	ldr	r3, [r3, #20]
 800ee42:	4a63      	ldr	r2, [pc, #396]	@ (800efd0 <icmp_input+0x1f0>)
 800ee44:	6812      	ldr	r2, [r2, #0]
 800ee46:	4611      	mov	r1, r2
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f000 fbed 	bl	800f628 <ip4_addr_isbroadcast_u32>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	f040 80b1 	bne.w	800efb8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	891b      	ldrh	r3, [r3, #8]
 800ee5a:	2b07      	cmp	r3, #7
 800ee5c:	f240 80a5 	bls.w	800efaa <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ee60:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ee62:	330e      	adds	r3, #14
 800ee64:	4619      	mov	r1, r3
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f7f8 fd9e 	bl	80079a8 <pbuf_add_header>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d04b      	beq.n	800ef0a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	891a      	ldrh	r2, [r3, #8]
 800ee76:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ee78:	4413      	add	r3, r2
 800ee7a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	891b      	ldrh	r3, [r3, #8]
 800ee80:	8b7a      	ldrh	r2, [r7, #26]
 800ee82:	429a      	cmp	r2, r3
 800ee84:	f0c0 809a 	bcc.w	800efbc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800ee88:	8b7b      	ldrh	r3, [r7, #26]
 800ee8a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ee8e:	4619      	mov	r1, r3
 800ee90:	200e      	movs	r0, #14
 800ee92:	f7f8 fb3b 	bl	800750c <pbuf_alloc>
 800ee96:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	f000 8090 	beq.w	800efc0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	895b      	ldrh	r3, [r3, #10]
 800eea4:	461a      	mov	r2, r3
 800eea6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800eea8:	3308      	adds	r3, #8
 800eeaa:	429a      	cmp	r2, r3
 800eeac:	d203      	bcs.n	800eeb6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800eeae:	6978      	ldr	r0, [r7, #20]
 800eeb0:	f7f8 fe10 	bl	8007ad4 <pbuf_free>
          goto icmperr;
 800eeb4:	e085      	b.n	800efc2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	685b      	ldr	r3, [r3, #4]
 800eeba:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800eebc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800eebe:	4618      	mov	r0, r3
 800eec0:	f001 fdd9 	bl	8010a76 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800eec4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800eec6:	4619      	mov	r1, r3
 800eec8:	6978      	ldr	r0, [r7, #20]
 800eeca:	f7f8 fd7d 	bl	80079c8 <pbuf_remove_header>
 800eece:	4603      	mov	r3, r0
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d009      	beq.n	800eee8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800eed4:	4b40      	ldr	r3, [pc, #256]	@ (800efd8 <icmp_input+0x1f8>)
 800eed6:	22b6      	movs	r2, #182	@ 0xb6
 800eed8:	4940      	ldr	r1, [pc, #256]	@ (800efdc <icmp_input+0x1fc>)
 800eeda:	4841      	ldr	r0, [pc, #260]	@ (800efe0 <icmp_input+0x200>)
 800eedc:	f001 fc7a 	bl	80107d4 <iprintf>
          pbuf_free(r);
 800eee0:	6978      	ldr	r0, [r7, #20]
 800eee2:	f7f8 fdf7 	bl	8007ad4 <pbuf_free>
          goto icmperr;
 800eee6:	e06c      	b.n	800efc2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800eee8:	6879      	ldr	r1, [r7, #4]
 800eeea:	6978      	ldr	r0, [r7, #20]
 800eeec:	f7f8 ff1a 	bl	8007d24 <pbuf_copy>
 800eef0:	4603      	mov	r3, r0
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d003      	beq.n	800eefe <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800eef6:	6978      	ldr	r0, [r7, #20]
 800eef8:	f7f8 fdec 	bl	8007ad4 <pbuf_free>
          goto icmperr;
 800eefc:	e061      	b.n	800efc2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800eefe:	6878      	ldr	r0, [r7, #4]
 800ef00:	f7f8 fde8 	bl	8007ad4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	607b      	str	r3, [r7, #4]
 800ef08:	e00f      	b.n	800ef2a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ef0a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ef0c:	330e      	adds	r3, #14
 800ef0e:	4619      	mov	r1, r3
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f7f8 fd59 	bl	80079c8 <pbuf_remove_header>
 800ef16:	4603      	mov	r3, r0
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d006      	beq.n	800ef2a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ef1c:	4b2e      	ldr	r3, [pc, #184]	@ (800efd8 <icmp_input+0x1f8>)
 800ef1e:	22c7      	movs	r2, #199	@ 0xc7
 800ef20:	4930      	ldr	r1, [pc, #192]	@ (800efe4 <icmp_input+0x204>)
 800ef22:	482f      	ldr	r0, [pc, #188]	@ (800efe0 <icmp_input+0x200>)
 800ef24:	f001 fc56 	bl	80107d4 <iprintf>
          goto icmperr;
 800ef28:	e04b      	b.n	800efc2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	685b      	ldr	r3, [r3, #4]
 800ef2e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800ef30:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ef32:	4619      	mov	r1, r3
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f7f8 fd37 	bl	80079a8 <pbuf_add_header>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d12b      	bne.n	800ef98 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	685b      	ldr	r3, [r3, #4]
 800ef44:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800ef46:	69fb      	ldr	r3, [r7, #28]
 800ef48:	681a      	ldr	r2, [r3, #0]
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800ef4e:	4b20      	ldr	r3, [pc, #128]	@ (800efd0 <icmp_input+0x1f0>)
 800ef50:	691a      	ldr	r2, [r3, #16]
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	2200      	movs	r2, #0
 800ef5a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	709a      	strb	r2, [r3, #2]
 800ef62:	2200      	movs	r2, #0
 800ef64:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	22ff      	movs	r2, #255	@ 0xff
 800ef6a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	2200      	movs	r2, #0
 800ef70:	729a      	strb	r2, [r3, #10]
 800ef72:	2200      	movs	r2, #0
 800ef74:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	9302      	str	r3, [sp, #8]
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	9301      	str	r3, [sp, #4]
 800ef7e:	2300      	movs	r3, #0
 800ef80:	9300      	str	r3, [sp, #0]
 800ef82:	23ff      	movs	r3, #255	@ 0xff
 800ef84:	2200      	movs	r2, #0
 800ef86:	69f9      	ldr	r1, [r7, #28]
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f000 fa75 	bl	800f478 <ip4_output_if>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800ef92:	e001      	b.n	800ef98 <icmp_input+0x1b8>
      break;
 800ef94:	bf00      	nop
 800ef96:	e000      	b.n	800ef9a <icmp_input+0x1ba>
      break;
 800ef98:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f7f8 fd9a 	bl	8007ad4 <pbuf_free>
  return;
 800efa0:	e013      	b.n	800efca <icmp_input+0x1ea>
    goto lenerr;
 800efa2:	bf00      	nop
 800efa4:	e002      	b.n	800efac <icmp_input+0x1cc>
    goto lenerr;
 800efa6:	bf00      	nop
 800efa8:	e000      	b.n	800efac <icmp_input+0x1cc>
        goto lenerr;
 800efaa:	bf00      	nop
lenerr:
  pbuf_free(p);
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f7f8 fd91 	bl	8007ad4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800efb2:	e00a      	b.n	800efca <icmp_input+0x1ea>
        goto icmperr;
 800efb4:	bf00      	nop
 800efb6:	e004      	b.n	800efc2 <icmp_input+0x1e2>
        goto icmperr;
 800efb8:	bf00      	nop
 800efba:	e002      	b.n	800efc2 <icmp_input+0x1e2>
          goto icmperr;
 800efbc:	bf00      	nop
 800efbe:	e000      	b.n	800efc2 <icmp_input+0x1e2>
          goto icmperr;
 800efc0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f7f8 fd86 	bl	8007ad4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800efc8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800efca:	3728      	adds	r7, #40	@ 0x28
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}
 800efd0:	200052ac 	.word	0x200052ac
 800efd4:	200052c0 	.word	0x200052c0
 800efd8:	08014054 	.word	0x08014054
 800efdc:	0801408c 	.word	0x0801408c
 800efe0:	080140c4 	.word	0x080140c4
 800efe4:	080140ec 	.word	0x080140ec

0800efe8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b082      	sub	sp, #8
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	460b      	mov	r3, r1
 800eff2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800eff4:	78fb      	ldrb	r3, [r7, #3]
 800eff6:	461a      	mov	r2, r3
 800eff8:	2103      	movs	r1, #3
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f000 f814 	bl	800f028 <icmp_send_response>
}
 800f000:	bf00      	nop
 800f002:	3708      	adds	r7, #8
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b082      	sub	sp, #8
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	460b      	mov	r3, r1
 800f012:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f014:	78fb      	ldrb	r3, [r7, #3]
 800f016:	461a      	mov	r2, r3
 800f018:	210b      	movs	r1, #11
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f000 f804 	bl	800f028 <icmp_send_response>
}
 800f020:	bf00      	nop
 800f022:	3708      	adds	r7, #8
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}

0800f028 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b08c      	sub	sp, #48	@ 0x30
 800f02c:	af04      	add	r7, sp, #16
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	460b      	mov	r3, r1
 800f032:	70fb      	strb	r3, [r7, #3]
 800f034:	4613      	mov	r3, r2
 800f036:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f038:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f03c:	2124      	movs	r1, #36	@ 0x24
 800f03e:	2022      	movs	r0, #34	@ 0x22
 800f040:	f7f8 fa64 	bl	800750c <pbuf_alloc>
 800f044:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f046:	69fb      	ldr	r3, [r7, #28]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d04c      	beq.n	800f0e6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f04c:	69fb      	ldr	r3, [r7, #28]
 800f04e:	895b      	ldrh	r3, [r3, #10]
 800f050:	2b23      	cmp	r3, #35	@ 0x23
 800f052:	d806      	bhi.n	800f062 <icmp_send_response+0x3a>
 800f054:	4b26      	ldr	r3, [pc, #152]	@ (800f0f0 <icmp_send_response+0xc8>)
 800f056:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800f05a:	4926      	ldr	r1, [pc, #152]	@ (800f0f4 <icmp_send_response+0xcc>)
 800f05c:	4826      	ldr	r0, [pc, #152]	@ (800f0f8 <icmp_send_response+0xd0>)
 800f05e:	f001 fbb9 	bl	80107d4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	685b      	ldr	r3, [r3, #4]
 800f066:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f068:	69fb      	ldr	r3, [r7, #28]
 800f06a:	685b      	ldr	r3, [r3, #4]
 800f06c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	78fa      	ldrb	r2, [r7, #3]
 800f072:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	78ba      	ldrb	r2, [r7, #2]
 800f078:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	2200      	movs	r2, #0
 800f07e:	711a      	strb	r2, [r3, #4]
 800f080:	2200      	movs	r2, #0
 800f082:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f084:	697b      	ldr	r3, [r7, #20]
 800f086:	2200      	movs	r2, #0
 800f088:	719a      	strb	r2, [r3, #6]
 800f08a:	2200      	movs	r2, #0
 800f08c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f08e:	69fb      	ldr	r3, [r7, #28]
 800f090:	685b      	ldr	r3, [r3, #4]
 800f092:	f103 0008 	add.w	r0, r3, #8
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	685b      	ldr	r3, [r3, #4]
 800f09a:	221c      	movs	r2, #28
 800f09c:	4619      	mov	r1, r3
 800f09e:	f001 fcea 	bl	8010a76 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f0a2:	69bb      	ldr	r3, [r7, #24]
 800f0a4:	68db      	ldr	r3, [r3, #12]
 800f0a6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f0a8:	f107 030c 	add.w	r3, r7, #12
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f000 f825 	bl	800f0fc <ip4_route>
 800f0b2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f0b4:	693b      	ldr	r3, [r7, #16]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d011      	beq.n	800f0de <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f0ba:	697b      	ldr	r3, [r7, #20]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	709a      	strb	r2, [r3, #2]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f0c4:	f107 020c 	add.w	r2, r7, #12
 800f0c8:	693b      	ldr	r3, [r7, #16]
 800f0ca:	9302      	str	r3, [sp, #8]
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	9301      	str	r3, [sp, #4]
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	9300      	str	r3, [sp, #0]
 800f0d4:	23ff      	movs	r3, #255	@ 0xff
 800f0d6:	2100      	movs	r1, #0
 800f0d8:	69f8      	ldr	r0, [r7, #28]
 800f0da:	f000 f9cd 	bl	800f478 <ip4_output_if>
  }
  pbuf_free(q);
 800f0de:	69f8      	ldr	r0, [r7, #28]
 800f0e0:	f7f8 fcf8 	bl	8007ad4 <pbuf_free>
 800f0e4:	e000      	b.n	800f0e8 <icmp_send_response+0xc0>
    return;
 800f0e6:	bf00      	nop
}
 800f0e8:	3720      	adds	r7, #32
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}
 800f0ee:	bf00      	nop
 800f0f0:	08014054 	.word	0x08014054
 800f0f4:	08014120 	.word	0x08014120
 800f0f8:	080140c4 	.word	0x080140c4

0800f0fc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b085      	sub	sp, #20
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f104:	4b33      	ldr	r3, [pc, #204]	@ (800f1d4 <ip4_route+0xd8>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	60fb      	str	r3, [r7, #12]
 800f10a:	e036      	b.n	800f17a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f112:	f003 0301 	and.w	r3, r3, #1
 800f116:	b2db      	uxtb	r3, r3
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d02b      	beq.n	800f174 <ip4_route+0x78>
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f122:	089b      	lsrs	r3, r3, #2
 800f124:	f003 0301 	and.w	r3, r3, #1
 800f128:	b2db      	uxtb	r3, r3
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d022      	beq.n	800f174 <ip4_route+0x78>
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	3304      	adds	r3, #4
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d01d      	beq.n	800f174 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681a      	ldr	r2, [r3, #0]
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	3304      	adds	r3, #4
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	405a      	eors	r2, r3
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	3308      	adds	r3, #8
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	4013      	ands	r3, r2
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d101      	bne.n	800f154 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	e038      	b.n	800f1c6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f15a:	f003 0302 	and.w	r3, r3, #2
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d108      	bne.n	800f174 <ip4_route+0x78>
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681a      	ldr	r2, [r3, #0]
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	330c      	adds	r3, #12
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d101      	bne.n	800f174 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	e028      	b.n	800f1c6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	60fb      	str	r3, [r7, #12]
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d1c5      	bne.n	800f10c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f180:	4b15      	ldr	r3, [pc, #84]	@ (800f1d8 <ip4_route+0xdc>)
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d01a      	beq.n	800f1be <ip4_route+0xc2>
 800f188:	4b13      	ldr	r3, [pc, #76]	@ (800f1d8 <ip4_route+0xdc>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f190:	f003 0301 	and.w	r3, r3, #1
 800f194:	2b00      	cmp	r3, #0
 800f196:	d012      	beq.n	800f1be <ip4_route+0xc2>
 800f198:	4b0f      	ldr	r3, [pc, #60]	@ (800f1d8 <ip4_route+0xdc>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f1a0:	f003 0304 	and.w	r3, r3, #4
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d00a      	beq.n	800f1be <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f1a8:	4b0b      	ldr	r3, [pc, #44]	@ (800f1d8 <ip4_route+0xdc>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	3304      	adds	r3, #4
 800f1ae:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d004      	beq.n	800f1be <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	b2db      	uxtb	r3, r3
 800f1ba:	2b7f      	cmp	r3, #127	@ 0x7f
 800f1bc:	d101      	bne.n	800f1c2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	e001      	b.n	800f1c6 <ip4_route+0xca>
  }

  return netif_default;
 800f1c2:	4b05      	ldr	r3, [pc, #20]	@ (800f1d8 <ip4_route+0xdc>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	3714      	adds	r7, #20
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d0:	4770      	bx	lr
 800f1d2:	bf00      	nop
 800f1d4:	20008810 	.word	0x20008810
 800f1d8:	20008814 	.word	0x20008814

0800f1dc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b082      	sub	sp, #8
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f1ea:	f003 0301 	and.w	r3, r3, #1
 800f1ee:	b2db      	uxtb	r3, r3
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d016      	beq.n	800f222 <ip4_input_accept+0x46>
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	3304      	adds	r3, #4
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d011      	beq.n	800f222 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f1fe:	4b0b      	ldr	r3, [pc, #44]	@ (800f22c <ip4_input_accept+0x50>)
 800f200:	695a      	ldr	r2, [r3, #20]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	3304      	adds	r3, #4
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	429a      	cmp	r2, r3
 800f20a:	d008      	beq.n	800f21e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f20c:	4b07      	ldr	r3, [pc, #28]	@ (800f22c <ip4_input_accept+0x50>)
 800f20e:	695b      	ldr	r3, [r3, #20]
 800f210:	6879      	ldr	r1, [r7, #4]
 800f212:	4618      	mov	r0, r3
 800f214:	f000 fa08 	bl	800f628 <ip4_addr_isbroadcast_u32>
 800f218:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d001      	beq.n	800f222 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f21e:	2301      	movs	r3, #1
 800f220:	e000      	b.n	800f224 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f222:	2300      	movs	r3, #0
}
 800f224:	4618      	mov	r0, r3
 800f226:	3708      	adds	r7, #8
 800f228:	46bd      	mov	sp, r7
 800f22a:	bd80      	pop	{r7, pc}
 800f22c:	200052ac 	.word	0x200052ac

0800f230 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b086      	sub	sp, #24
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	685b      	ldr	r3, [r3, #4]
 800f23e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	781b      	ldrb	r3, [r3, #0]
 800f244:	091b      	lsrs	r3, r3, #4
 800f246:	b2db      	uxtb	r3, r3
 800f248:	2b04      	cmp	r3, #4
 800f24a:	d004      	beq.n	800f256 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f7f8 fc41 	bl	8007ad4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f252:	2300      	movs	r3, #0
 800f254:	e107      	b.n	800f466 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	781b      	ldrb	r3, [r3, #0]
 800f25a:	f003 030f 	and.w	r3, r3, #15
 800f25e:	b2db      	uxtb	r3, r3
 800f260:	009b      	lsls	r3, r3, #2
 800f262:	b2db      	uxtb	r3, r3
 800f264:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	885b      	ldrh	r3, [r3, #2]
 800f26a:	b29b      	uxth	r3, r3
 800f26c:	4618      	mov	r0, r3
 800f26e:	f7f7 f8d3 	bl	8006418 <lwip_htons>
 800f272:	4603      	mov	r3, r0
 800f274:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	891b      	ldrh	r3, [r3, #8]
 800f27a:	89ba      	ldrh	r2, [r7, #12]
 800f27c:	429a      	cmp	r2, r3
 800f27e:	d204      	bcs.n	800f28a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800f280:	89bb      	ldrh	r3, [r7, #12]
 800f282:	4619      	mov	r1, r3
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f7f8 fa9f 	bl	80077c8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	895b      	ldrh	r3, [r3, #10]
 800f28e:	89fa      	ldrh	r2, [r7, #14]
 800f290:	429a      	cmp	r2, r3
 800f292:	d807      	bhi.n	800f2a4 <ip4_input+0x74>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	891b      	ldrh	r3, [r3, #8]
 800f298:	89ba      	ldrh	r2, [r7, #12]
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d802      	bhi.n	800f2a4 <ip4_input+0x74>
 800f29e:	89fb      	ldrh	r3, [r7, #14]
 800f2a0:	2b13      	cmp	r3, #19
 800f2a2:	d804      	bhi.n	800f2ae <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f7f8 fc15 	bl	8007ad4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	e0db      	b.n	800f466 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	691b      	ldr	r3, [r3, #16]
 800f2b2:	4a6f      	ldr	r2, [pc, #444]	@ (800f470 <ip4_input+0x240>)
 800f2b4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	68db      	ldr	r3, [r3, #12]
 800f2ba:	4a6d      	ldr	r2, [pc, #436]	@ (800f470 <ip4_input+0x240>)
 800f2bc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f2be:	4b6c      	ldr	r3, [pc, #432]	@ (800f470 <ip4_input+0x240>)
 800f2c0:	695b      	ldr	r3, [r3, #20]
 800f2c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f2c6:	2be0      	cmp	r3, #224	@ 0xe0
 800f2c8:	d112      	bne.n	800f2f0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f2d0:	f003 0301 	and.w	r3, r3, #1
 800f2d4:	b2db      	uxtb	r3, r3
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d007      	beq.n	800f2ea <ip4_input+0xba>
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	3304      	adds	r3, #4
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d002      	beq.n	800f2ea <ip4_input+0xba>
      netif = inp;
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	613b      	str	r3, [r7, #16]
 800f2e8:	e02a      	b.n	800f340 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	613b      	str	r3, [r7, #16]
 800f2ee:	e027      	b.n	800f340 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800f2f0:	6838      	ldr	r0, [r7, #0]
 800f2f2:	f7ff ff73 	bl	800f1dc <ip4_input_accept>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d002      	beq.n	800f302 <ip4_input+0xd2>
      netif = inp;
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	613b      	str	r3, [r7, #16]
 800f300:	e01e      	b.n	800f340 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f302:	2300      	movs	r3, #0
 800f304:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f306:	4b5a      	ldr	r3, [pc, #360]	@ (800f470 <ip4_input+0x240>)
 800f308:	695b      	ldr	r3, [r3, #20]
 800f30a:	b2db      	uxtb	r3, r3
 800f30c:	2b7f      	cmp	r3, #127	@ 0x7f
 800f30e:	d017      	beq.n	800f340 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800f310:	4b58      	ldr	r3, [pc, #352]	@ (800f474 <ip4_input+0x244>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	613b      	str	r3, [r7, #16]
 800f316:	e00e      	b.n	800f336 <ip4_input+0x106>
          if (netif == inp) {
 800f318:	693a      	ldr	r2, [r7, #16]
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d006      	beq.n	800f32e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800f320:	6938      	ldr	r0, [r7, #16]
 800f322:	f7ff ff5b 	bl	800f1dc <ip4_input_accept>
 800f326:	4603      	mov	r3, r0
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d108      	bne.n	800f33e <ip4_input+0x10e>
 800f32c:	e000      	b.n	800f330 <ip4_input+0x100>
            continue;
 800f32e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800f330:	693b      	ldr	r3, [r7, #16]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	613b      	str	r3, [r7, #16]
 800f336:	693b      	ldr	r3, [r7, #16]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d1ed      	bne.n	800f318 <ip4_input+0xe8>
 800f33c:	e000      	b.n	800f340 <ip4_input+0x110>
            break;
 800f33e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f340:	4b4b      	ldr	r3, [pc, #300]	@ (800f470 <ip4_input+0x240>)
 800f342:	691b      	ldr	r3, [r3, #16]
 800f344:	6839      	ldr	r1, [r7, #0]
 800f346:	4618      	mov	r0, r3
 800f348:	f000 f96e 	bl	800f628 <ip4_addr_isbroadcast_u32>
 800f34c:	4603      	mov	r3, r0
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d105      	bne.n	800f35e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f352:	4b47      	ldr	r3, [pc, #284]	@ (800f470 <ip4_input+0x240>)
 800f354:	691b      	ldr	r3, [r3, #16]
 800f356:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f35a:	2be0      	cmp	r3, #224	@ 0xe0
 800f35c:	d104      	bne.n	800f368 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f7f8 fbb8 	bl	8007ad4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800f364:	2300      	movs	r3, #0
 800f366:	e07e      	b.n	800f466 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d104      	bne.n	800f378 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f7f8 fbb0 	bl	8007ad4 <pbuf_free>
    return ERR_OK;
 800f374:	2300      	movs	r3, #0
 800f376:	e076      	b.n	800f466 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	88db      	ldrh	r3, [r3, #6]
 800f37c:	b29b      	uxth	r3, r3
 800f37e:	461a      	mov	r2, r3
 800f380:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800f384:	4013      	ands	r3, r2
 800f386:	2b00      	cmp	r3, #0
 800f388:	d00b      	beq.n	800f3a2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f000 fd12 	bl	800fdb4 <ip4_reass>
 800f390:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d101      	bne.n	800f39c <ip4_input+0x16c>
      return ERR_OK;
 800f398:	2300      	movs	r3, #0
 800f39a:	e064      	b.n	800f466 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	685b      	ldr	r3, [r3, #4]
 800f3a0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800f3a2:	4a33      	ldr	r2, [pc, #204]	@ (800f470 <ip4_input+0x240>)
 800f3a4:	693b      	ldr	r3, [r7, #16]
 800f3a6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800f3a8:	4a31      	ldr	r2, [pc, #196]	@ (800f470 <ip4_input+0x240>)
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f3ae:	4a30      	ldr	r2, [pc, #192]	@ (800f470 <ip4_input+0x240>)
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f3b4:	697b      	ldr	r3, [r7, #20]
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	f003 030f 	and.w	r3, r3, #15
 800f3bc:	b2db      	uxtb	r3, r3
 800f3be:	009b      	lsls	r3, r3, #2
 800f3c0:	b2db      	uxtb	r3, r3
 800f3c2:	461a      	mov	r2, r3
 800f3c4:	4b2a      	ldr	r3, [pc, #168]	@ (800f470 <ip4_input+0x240>)
 800f3c6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f3c8:	89fb      	ldrh	r3, [r7, #14]
 800f3ca:	4619      	mov	r1, r3
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f7f8 fafb 	bl	80079c8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	7a5b      	ldrb	r3, [r3, #9]
 800f3d6:	2b11      	cmp	r3, #17
 800f3d8:	d006      	beq.n	800f3e8 <ip4_input+0x1b8>
 800f3da:	2b11      	cmp	r3, #17
 800f3dc:	dc13      	bgt.n	800f406 <ip4_input+0x1d6>
 800f3de:	2b01      	cmp	r3, #1
 800f3e0:	d00c      	beq.n	800f3fc <ip4_input+0x1cc>
 800f3e2:	2b06      	cmp	r3, #6
 800f3e4:	d005      	beq.n	800f3f2 <ip4_input+0x1c2>
 800f3e6:	e00e      	b.n	800f406 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800f3e8:	6839      	ldr	r1, [r7, #0]
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f7fe f9f2 	bl	800d7d4 <udp_input>
        break;
 800f3f0:	e026      	b.n	800f440 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800f3f2:	6839      	ldr	r1, [r7, #0]
 800f3f4:	6878      	ldr	r0, [r7, #4]
 800f3f6:	f7fa fa39 	bl	800986c <tcp_input>
        break;
 800f3fa:	e021      	b.n	800f440 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800f3fc:	6839      	ldr	r1, [r7, #0]
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f7ff fcee 	bl	800ede0 <icmp_input>
        break;
 800f404:	e01c      	b.n	800f440 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f406:	4b1a      	ldr	r3, [pc, #104]	@ (800f470 <ip4_input+0x240>)
 800f408:	695b      	ldr	r3, [r3, #20]
 800f40a:	6939      	ldr	r1, [r7, #16]
 800f40c:	4618      	mov	r0, r3
 800f40e:	f000 f90b 	bl	800f628 <ip4_addr_isbroadcast_u32>
 800f412:	4603      	mov	r3, r0
 800f414:	2b00      	cmp	r3, #0
 800f416:	d10f      	bne.n	800f438 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f418:	4b15      	ldr	r3, [pc, #84]	@ (800f470 <ip4_input+0x240>)
 800f41a:	695b      	ldr	r3, [r3, #20]
 800f41c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f420:	2be0      	cmp	r3, #224	@ 0xe0
 800f422:	d009      	beq.n	800f438 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f424:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f428:	4619      	mov	r1, r3
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f7f8 fb3f 	bl	8007aae <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f430:	2102      	movs	r1, #2
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f7ff fdd8 	bl	800efe8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f7f8 fb4b 	bl	8007ad4 <pbuf_free>
        break;
 800f43e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800f440:	4b0b      	ldr	r3, [pc, #44]	@ (800f470 <ip4_input+0x240>)
 800f442:	2200      	movs	r2, #0
 800f444:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f446:	4b0a      	ldr	r3, [pc, #40]	@ (800f470 <ip4_input+0x240>)
 800f448:	2200      	movs	r2, #0
 800f44a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f44c:	4b08      	ldr	r3, [pc, #32]	@ (800f470 <ip4_input+0x240>)
 800f44e:	2200      	movs	r2, #0
 800f450:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f452:	4b07      	ldr	r3, [pc, #28]	@ (800f470 <ip4_input+0x240>)
 800f454:	2200      	movs	r2, #0
 800f456:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f458:	4b05      	ldr	r3, [pc, #20]	@ (800f470 <ip4_input+0x240>)
 800f45a:	2200      	movs	r2, #0
 800f45c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f45e:	4b04      	ldr	r3, [pc, #16]	@ (800f470 <ip4_input+0x240>)
 800f460:	2200      	movs	r2, #0
 800f462:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f464:	2300      	movs	r3, #0
}
 800f466:	4618      	mov	r0, r3
 800f468:	3718      	adds	r7, #24
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
 800f46e:	bf00      	nop
 800f470:	200052ac 	.word	0x200052ac
 800f474:	20008810 	.word	0x20008810

0800f478 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b08a      	sub	sp, #40	@ 0x28
 800f47c:	af04      	add	r7, sp, #16
 800f47e:	60f8      	str	r0, [r7, #12]
 800f480:	60b9      	str	r1, [r7, #8]
 800f482:	607a      	str	r2, [r7, #4]
 800f484:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d009      	beq.n	800f4a4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d003      	beq.n	800f49e <ip4_output_if+0x26>
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d102      	bne.n	800f4a4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4a0:	3304      	adds	r3, #4
 800f4a2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f4a4:	78fa      	ldrb	r2, [r7, #3]
 800f4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4a8:	9302      	str	r3, [sp, #8]
 800f4aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f4ae:	9301      	str	r3, [sp, #4]
 800f4b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f4b4:	9300      	str	r3, [sp, #0]
 800f4b6:	4613      	mov	r3, r2
 800f4b8:	687a      	ldr	r2, [r7, #4]
 800f4ba:	6979      	ldr	r1, [r7, #20]
 800f4bc:	68f8      	ldr	r0, [r7, #12]
 800f4be:	f000 f805 	bl	800f4cc <ip4_output_if_src>
 800f4c2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3718      	adds	r7, #24
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}

0800f4cc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b088      	sub	sp, #32
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	60f8      	str	r0, [r7, #12]
 800f4d4:	60b9      	str	r1, [r7, #8]
 800f4d6:	607a      	str	r2, [r7, #4]
 800f4d8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	7b9b      	ldrb	r3, [r3, #14]
 800f4de:	2b01      	cmp	r3, #1
 800f4e0:	d006      	beq.n	800f4f0 <ip4_output_if_src+0x24>
 800f4e2:	4b4b      	ldr	r3, [pc, #300]	@ (800f610 <ip4_output_if_src+0x144>)
 800f4e4:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800f4e8:	494a      	ldr	r1, [pc, #296]	@ (800f614 <ip4_output_if_src+0x148>)
 800f4ea:	484b      	ldr	r0, [pc, #300]	@ (800f618 <ip4_output_if_src+0x14c>)
 800f4ec:	f001 f972 	bl	80107d4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d060      	beq.n	800f5b8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f4f6:	2314      	movs	r3, #20
 800f4f8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f4fa:	2114      	movs	r1, #20
 800f4fc:	68f8      	ldr	r0, [r7, #12]
 800f4fe:	f7f8 fa53 	bl	80079a8 <pbuf_add_header>
 800f502:	4603      	mov	r3, r0
 800f504:	2b00      	cmp	r3, #0
 800f506:	d002      	beq.n	800f50e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f508:	f06f 0301 	mvn.w	r3, #1
 800f50c:	e07c      	b.n	800f608 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	685b      	ldr	r3, [r3, #4]
 800f512:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	895b      	ldrh	r3, [r3, #10]
 800f518:	2b13      	cmp	r3, #19
 800f51a:	d806      	bhi.n	800f52a <ip4_output_if_src+0x5e>
 800f51c:	4b3c      	ldr	r3, [pc, #240]	@ (800f610 <ip4_output_if_src+0x144>)
 800f51e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800f522:	493e      	ldr	r1, [pc, #248]	@ (800f61c <ip4_output_if_src+0x150>)
 800f524:	483c      	ldr	r0, [pc, #240]	@ (800f618 <ip4_output_if_src+0x14c>)
 800f526:	f001 f955 	bl	80107d4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f52a:	69fb      	ldr	r3, [r7, #28]
 800f52c:	78fa      	ldrb	r2, [r7, #3]
 800f52e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f530:	69fb      	ldr	r3, [r7, #28]
 800f532:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800f536:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681a      	ldr	r2, [r3, #0]
 800f53c:	69fb      	ldr	r3, [r7, #28]
 800f53e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f540:	8b7b      	ldrh	r3, [r7, #26]
 800f542:	089b      	lsrs	r3, r3, #2
 800f544:	b29b      	uxth	r3, r3
 800f546:	b2db      	uxtb	r3, r3
 800f548:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f54c:	b2da      	uxtb	r2, r3
 800f54e:	69fb      	ldr	r3, [r7, #28]
 800f550:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f552:	69fb      	ldr	r3, [r7, #28]
 800f554:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800f558:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	891b      	ldrh	r3, [r3, #8]
 800f55e:	4618      	mov	r0, r3
 800f560:	f7f6 ff5a 	bl	8006418 <lwip_htons>
 800f564:	4603      	mov	r3, r0
 800f566:	461a      	mov	r2, r3
 800f568:	69fb      	ldr	r3, [r7, #28]
 800f56a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f56c:	69fb      	ldr	r3, [r7, #28]
 800f56e:	2200      	movs	r2, #0
 800f570:	719a      	strb	r2, [r3, #6]
 800f572:	2200      	movs	r2, #0
 800f574:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f576:	4b2a      	ldr	r3, [pc, #168]	@ (800f620 <ip4_output_if_src+0x154>)
 800f578:	881b      	ldrh	r3, [r3, #0]
 800f57a:	4618      	mov	r0, r3
 800f57c:	f7f6 ff4c 	bl	8006418 <lwip_htons>
 800f580:	4603      	mov	r3, r0
 800f582:	461a      	mov	r2, r3
 800f584:	69fb      	ldr	r3, [r7, #28]
 800f586:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f588:	4b25      	ldr	r3, [pc, #148]	@ (800f620 <ip4_output_if_src+0x154>)
 800f58a:	881b      	ldrh	r3, [r3, #0]
 800f58c:	3301      	adds	r3, #1
 800f58e:	b29a      	uxth	r2, r3
 800f590:	4b23      	ldr	r3, [pc, #140]	@ (800f620 <ip4_output_if_src+0x154>)
 800f592:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d104      	bne.n	800f5a4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f59a:	4b22      	ldr	r3, [pc, #136]	@ (800f624 <ip4_output_if_src+0x158>)
 800f59c:	681a      	ldr	r2, [r3, #0]
 800f59e:	69fb      	ldr	r3, [r7, #28]
 800f5a0:	60da      	str	r2, [r3, #12]
 800f5a2:	e003      	b.n	800f5ac <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	681a      	ldr	r2, [r3, #0]
 800f5a8:	69fb      	ldr	r3, [r7, #28]
 800f5aa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f5ac:	69fb      	ldr	r3, [r7, #28]
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	729a      	strb	r2, [r3, #10]
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	72da      	strb	r2, [r3, #11]
 800f5b6:	e00f      	b.n	800f5d8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	895b      	ldrh	r3, [r3, #10]
 800f5bc:	2b13      	cmp	r3, #19
 800f5be:	d802      	bhi.n	800f5c6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f5c0:	f06f 0301 	mvn.w	r3, #1
 800f5c4:	e020      	b.n	800f608 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	685b      	ldr	r3, [r3, #4]
 800f5ca:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f5cc:	69fb      	ldr	r3, [r7, #28]
 800f5ce:	691b      	ldr	r3, [r3, #16]
 800f5d0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f5d2:	f107 0314 	add.w	r3, r7, #20
 800f5d6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5da:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d00c      	beq.n	800f5fa <ip4_output_if_src+0x12e>
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	891a      	ldrh	r2, [r3, #8]
 800f5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5e6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	d906      	bls.n	800f5fa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800f5ec:	687a      	ldr	r2, [r7, #4]
 800f5ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f5f0:	68f8      	ldr	r0, [r7, #12]
 800f5f2:	f000 fdd3 	bl	801019c <ip4_frag>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	e006      	b.n	800f608 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5fc:	695b      	ldr	r3, [r3, #20]
 800f5fe:	687a      	ldr	r2, [r7, #4]
 800f600:	68f9      	ldr	r1, [r7, #12]
 800f602:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f604:	4798      	blx	r3
 800f606:	4603      	mov	r3, r0
}
 800f608:	4618      	mov	r0, r3
 800f60a:	3720      	adds	r7, #32
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}
 800f610:	0801414c 	.word	0x0801414c
 800f614:	08014180 	.word	0x08014180
 800f618:	0801418c 	.word	0x0801418c
 800f61c:	080141b4 	.word	0x080141b4
 800f620:	2000896e 	.word	0x2000896e
 800f624:	08014594 	.word	0x08014594

0800f628 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f628:	b480      	push	{r7}
 800f62a:	b085      	sub	sp, #20
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f63c:	d002      	beq.n	800f644 <ip4_addr_isbroadcast_u32+0x1c>
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d101      	bne.n	800f648 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f644:	2301      	movs	r3, #1
 800f646:	e02a      	b.n	800f69e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f64e:	f003 0302 	and.w	r3, r3, #2
 800f652:	2b00      	cmp	r3, #0
 800f654:	d101      	bne.n	800f65a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f656:	2300      	movs	r3, #0
 800f658:	e021      	b.n	800f69e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	3304      	adds	r3, #4
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	687a      	ldr	r2, [r7, #4]
 800f662:	429a      	cmp	r2, r3
 800f664:	d101      	bne.n	800f66a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f666:	2300      	movs	r3, #0
 800f668:	e019      	b.n	800f69e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f66a:	68fa      	ldr	r2, [r7, #12]
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	3304      	adds	r3, #4
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	405a      	eors	r2, r3
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	3308      	adds	r3, #8
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	4013      	ands	r3, r2
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d10d      	bne.n	800f69c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	3308      	adds	r3, #8
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	43da      	mvns	r2, r3
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	3308      	adds	r3, #8
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f694:	429a      	cmp	r2, r3
 800f696:	d101      	bne.n	800f69c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f698:	2301      	movs	r3, #1
 800f69a:	e000      	b.n	800f69e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f69c:	2300      	movs	r3, #0
  }
}
 800f69e:	4618      	mov	r0, r3
 800f6a0:	3714      	adds	r7, #20
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a8:	4770      	bx	lr
	...

0800f6ac <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b08d      	sub	sp, #52	@ 0x34
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	60f8      	str	r0, [r7, #12]
 800f6b4:	60b9      	str	r1, [r7, #8]
 800f6b6:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 800f6c6:	f107 0318 	add.w	r3, r7, #24
 800f6ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f6d2:	e058      	b.n	800f786 <ip4addr_ntoa_r+0xda>
    i = 0;
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 800f6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6dc:	781a      	ldrb	r2, [r3, #0]
 800f6de:	4b32      	ldr	r3, [pc, #200]	@ (800f7a8 <ip4addr_ntoa_r+0xfc>)
 800f6e0:	fba3 1302 	umull	r1, r3, r3, r2
 800f6e4:	08d9      	lsrs	r1, r3, #3
 800f6e6:	460b      	mov	r3, r1
 800f6e8:	009b      	lsls	r3, r3, #2
 800f6ea:	440b      	add	r3, r1
 800f6ec:	005b      	lsls	r3, r3, #1
 800f6ee:	1ad3      	subs	r3, r2, r3
 800f6f0:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800f6f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	4a2c      	ldr	r2, [pc, #176]	@ (800f7a8 <ip4addr_ntoa_r+0xfc>)
 800f6f8:	fba2 2303 	umull	r2, r3, r2, r3
 800f6fc:	08db      	lsrs	r3, r3, #3
 800f6fe:	b2da      	uxtb	r2, r3
 800f700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f702:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800f704:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f708:	1c5a      	adds	r2, r3, #1
 800f70a:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800f70e:	4619      	mov	r1, r3
 800f710:	7ffb      	ldrb	r3, [r7, #31]
 800f712:	3330      	adds	r3, #48	@ 0x30
 800f714:	b2da      	uxtb	r2, r3
 800f716:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 800f71a:	443b      	add	r3, r7
 800f71c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800f720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f722:	781b      	ldrb	r3, [r3, #0]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d1d8      	bne.n	800f6da <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800f728:	e011      	b.n	800f74e <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800f72a:	6a3b      	ldr	r3, [r7, #32]
 800f72c:	1c5a      	adds	r2, r3, #1
 800f72e:	623a      	str	r2, [r7, #32]
 800f730:	687a      	ldr	r2, [r7, #4]
 800f732:	429a      	cmp	r2, r3
 800f734:	dc01      	bgt.n	800f73a <ip4addr_ntoa_r+0x8e>
        return NULL;
 800f736:	2300      	movs	r3, #0
 800f738:	e030      	b.n	800f79c <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800f73a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800f73e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f740:	1c59      	adds	r1, r3, #1
 800f742:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800f744:	3230      	adds	r2, #48	@ 0x30
 800f746:	443a      	add	r2, r7
 800f748:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800f74c:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800f74e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f752:	1e5a      	subs	r2, r3, #1
 800f754:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d1e6      	bne.n	800f72a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800f75c:	6a3b      	ldr	r3, [r7, #32]
 800f75e:	1c5a      	adds	r2, r3, #1
 800f760:	623a      	str	r2, [r7, #32]
 800f762:	687a      	ldr	r2, [r7, #4]
 800f764:	429a      	cmp	r2, r3
 800f766:	dc01      	bgt.n	800f76c <ip4addr_ntoa_r+0xc0>
      return NULL;
 800f768:	2300      	movs	r3, #0
 800f76a:	e017      	b.n	800f79c <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800f76c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f76e:	1c5a      	adds	r2, r3, #1
 800f770:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f772:	222e      	movs	r2, #46	@ 0x2e
 800f774:	701a      	strb	r2, [r3, #0]
    ap++;
 800f776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f778:	3301      	adds	r3, #1
 800f77a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 800f77c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f780:	3301      	adds	r3, #1
 800f782:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f786:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f78a:	2b03      	cmp	r3, #3
 800f78c:	d9a2      	bls.n	800f6d4 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800f78e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f790:	3b01      	subs	r3, #1
 800f792:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f796:	2200      	movs	r2, #0
 800f798:	701a      	strb	r2, [r3, #0]
  return buf;
 800f79a:	68bb      	ldr	r3, [r7, #8]
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	3734      	adds	r7, #52	@ 0x34
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a6:	4770      	bx	lr
 800f7a8:	cccccccd 	.word	0xcccccccd

0800f7ac <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b084      	sub	sp, #16
 800f7b0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f7b6:	4b12      	ldr	r3, [pc, #72]	@ (800f800 <ip_reass_tmr+0x54>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f7bc:	e018      	b.n	800f7f0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	7fdb      	ldrb	r3, [r3, #31]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d00b      	beq.n	800f7de <ip_reass_tmr+0x32>
      r->timer--;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	7fdb      	ldrb	r3, [r3, #31]
 800f7ca:	3b01      	subs	r3, #1
 800f7cc:	b2da      	uxtb	r2, r3
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	60fb      	str	r3, [r7, #12]
 800f7dc:	e008      	b.n	800f7f0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f7e8:	68b9      	ldr	r1, [r7, #8]
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f000 f80a 	bl	800f804 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d1e3      	bne.n	800f7be <ip_reass_tmr+0x12>
    }
  }
}
 800f7f6:	bf00      	nop
 800f7f8:	bf00      	nop
 800f7fa:	3710      	adds	r7, #16
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}
 800f800:	20008970 	.word	0x20008970

0800f804 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b088      	sub	sp, #32
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
 800f80c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f80e:	2300      	movs	r3, #0
 800f810:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f812:	683a      	ldr	r2, [r7, #0]
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	429a      	cmp	r2, r3
 800f818:	d105      	bne.n	800f826 <ip_reass_free_complete_datagram+0x22>
 800f81a:	4b45      	ldr	r3, [pc, #276]	@ (800f930 <ip_reass_free_complete_datagram+0x12c>)
 800f81c:	22ab      	movs	r2, #171	@ 0xab
 800f81e:	4945      	ldr	r1, [pc, #276]	@ (800f934 <ip_reass_free_complete_datagram+0x130>)
 800f820:	4845      	ldr	r0, [pc, #276]	@ (800f938 <ip_reass_free_complete_datagram+0x134>)
 800f822:	f000 ffd7 	bl	80107d4 <iprintf>
  if (prev != NULL) {
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d00a      	beq.n	800f842 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	687a      	ldr	r2, [r7, #4]
 800f832:	429a      	cmp	r2, r3
 800f834:	d005      	beq.n	800f842 <ip_reass_free_complete_datagram+0x3e>
 800f836:	4b3e      	ldr	r3, [pc, #248]	@ (800f930 <ip_reass_free_complete_datagram+0x12c>)
 800f838:	22ad      	movs	r2, #173	@ 0xad
 800f83a:	4940      	ldr	r1, [pc, #256]	@ (800f93c <ip_reass_free_complete_datagram+0x138>)
 800f83c:	483e      	ldr	r0, [pc, #248]	@ (800f938 <ip_reass_free_complete_datagram+0x134>)
 800f83e:	f000 ffc9 	bl	80107d4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	685b      	ldr	r3, [r3, #4]
 800f846:	685b      	ldr	r3, [r3, #4]
 800f848:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	889b      	ldrh	r3, [r3, #4]
 800f84e:	b29b      	uxth	r3, r3
 800f850:	2b00      	cmp	r3, #0
 800f852:	d12a      	bne.n	800f8aa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	685b      	ldr	r3, [r3, #4]
 800f858:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	681a      	ldr	r2, [r3, #0]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f862:	69bb      	ldr	r3, [r7, #24]
 800f864:	6858      	ldr	r0, [r3, #4]
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	3308      	adds	r3, #8
 800f86a:	2214      	movs	r2, #20
 800f86c:	4619      	mov	r1, r3
 800f86e:	f001 f902 	bl	8010a76 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f872:	2101      	movs	r1, #1
 800f874:	69b8      	ldr	r0, [r7, #24]
 800f876:	f7ff fbc7 	bl	800f008 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f87a:	69b8      	ldr	r0, [r7, #24]
 800f87c:	f7f8 f9b2 	bl	8007be4 <pbuf_clen>
 800f880:	4603      	mov	r3, r0
 800f882:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f884:	8bfa      	ldrh	r2, [r7, #30]
 800f886:	8a7b      	ldrh	r3, [r7, #18]
 800f888:	4413      	add	r3, r2
 800f88a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f88e:	db05      	blt.n	800f89c <ip_reass_free_complete_datagram+0x98>
 800f890:	4b27      	ldr	r3, [pc, #156]	@ (800f930 <ip_reass_free_complete_datagram+0x12c>)
 800f892:	22bc      	movs	r2, #188	@ 0xbc
 800f894:	492a      	ldr	r1, [pc, #168]	@ (800f940 <ip_reass_free_complete_datagram+0x13c>)
 800f896:	4828      	ldr	r0, [pc, #160]	@ (800f938 <ip_reass_free_complete_datagram+0x134>)
 800f898:	f000 ff9c 	bl	80107d4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f89c:	8bfa      	ldrh	r2, [r7, #30]
 800f89e:	8a7b      	ldrh	r3, [r7, #18]
 800f8a0:	4413      	add	r3, r2
 800f8a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f8a4:	69b8      	ldr	r0, [r7, #24]
 800f8a6:	f7f8 f915 	bl	8007ad4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	685b      	ldr	r3, [r3, #4]
 800f8ae:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f8b0:	e01f      	b.n	800f8f2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f8b2:	69bb      	ldr	r3, [r7, #24]
 800f8b4:	685b      	ldr	r3, [r3, #4]
 800f8b6:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f8b8:	69bb      	ldr	r3, [r7, #24]
 800f8ba:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f8c2:	68f8      	ldr	r0, [r7, #12]
 800f8c4:	f7f8 f98e 	bl	8007be4 <pbuf_clen>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f8cc:	8bfa      	ldrh	r2, [r7, #30]
 800f8ce:	8a7b      	ldrh	r3, [r7, #18]
 800f8d0:	4413      	add	r3, r2
 800f8d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f8d6:	db05      	blt.n	800f8e4 <ip_reass_free_complete_datagram+0xe0>
 800f8d8:	4b15      	ldr	r3, [pc, #84]	@ (800f930 <ip_reass_free_complete_datagram+0x12c>)
 800f8da:	22cc      	movs	r2, #204	@ 0xcc
 800f8dc:	4918      	ldr	r1, [pc, #96]	@ (800f940 <ip_reass_free_complete_datagram+0x13c>)
 800f8de:	4816      	ldr	r0, [pc, #88]	@ (800f938 <ip_reass_free_complete_datagram+0x134>)
 800f8e0:	f000 ff78 	bl	80107d4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f8e4:	8bfa      	ldrh	r2, [r7, #30]
 800f8e6:	8a7b      	ldrh	r3, [r7, #18]
 800f8e8:	4413      	add	r3, r2
 800f8ea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f8ec:	68f8      	ldr	r0, [r7, #12]
 800f8ee:	f7f8 f8f1 	bl	8007ad4 <pbuf_free>
  while (p != NULL) {
 800f8f2:	69bb      	ldr	r3, [r7, #24]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d1dc      	bne.n	800f8b2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f8f8:	6839      	ldr	r1, [r7, #0]
 800f8fa:	6878      	ldr	r0, [r7, #4]
 800f8fc:	f000 f8c2 	bl	800fa84 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f900:	4b10      	ldr	r3, [pc, #64]	@ (800f944 <ip_reass_free_complete_datagram+0x140>)
 800f902:	881b      	ldrh	r3, [r3, #0]
 800f904:	8bfa      	ldrh	r2, [r7, #30]
 800f906:	429a      	cmp	r2, r3
 800f908:	d905      	bls.n	800f916 <ip_reass_free_complete_datagram+0x112>
 800f90a:	4b09      	ldr	r3, [pc, #36]	@ (800f930 <ip_reass_free_complete_datagram+0x12c>)
 800f90c:	22d2      	movs	r2, #210	@ 0xd2
 800f90e:	490e      	ldr	r1, [pc, #56]	@ (800f948 <ip_reass_free_complete_datagram+0x144>)
 800f910:	4809      	ldr	r0, [pc, #36]	@ (800f938 <ip_reass_free_complete_datagram+0x134>)
 800f912:	f000 ff5f 	bl	80107d4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f916:	4b0b      	ldr	r3, [pc, #44]	@ (800f944 <ip_reass_free_complete_datagram+0x140>)
 800f918:	881a      	ldrh	r2, [r3, #0]
 800f91a:	8bfb      	ldrh	r3, [r7, #30]
 800f91c:	1ad3      	subs	r3, r2, r3
 800f91e:	b29a      	uxth	r2, r3
 800f920:	4b08      	ldr	r3, [pc, #32]	@ (800f944 <ip_reass_free_complete_datagram+0x140>)
 800f922:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f924:	8bfb      	ldrh	r3, [r7, #30]
}
 800f926:	4618      	mov	r0, r3
 800f928:	3720      	adds	r7, #32
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
 800f92e:	bf00      	nop
 800f930:	080141e4 	.word	0x080141e4
 800f934:	08014220 	.word	0x08014220
 800f938:	0801422c 	.word	0x0801422c
 800f93c:	08014254 	.word	0x08014254
 800f940:	08014268 	.word	0x08014268
 800f944:	20008974 	.word	0x20008974
 800f948:	08014288 	.word	0x08014288

0800f94c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b08a      	sub	sp, #40	@ 0x28
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f956:	2300      	movs	r3, #0
 800f958:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f95a:	2300      	movs	r3, #0
 800f95c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f95e:	2300      	movs	r3, #0
 800f960:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f962:	2300      	movs	r3, #0
 800f964:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f966:	2300      	movs	r3, #0
 800f968:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f96a:	4b28      	ldr	r3, [pc, #160]	@ (800fa0c <ip_reass_remove_oldest_datagram+0xc0>)
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800f970:	e030      	b.n	800f9d4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f974:	695a      	ldr	r2, [r3, #20]
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	68db      	ldr	r3, [r3, #12]
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d10c      	bne.n	800f998 <ip_reass_remove_oldest_datagram+0x4c>
 800f97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f980:	699a      	ldr	r2, [r3, #24]
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	691b      	ldr	r3, [r3, #16]
 800f986:	429a      	cmp	r2, r3
 800f988:	d106      	bne.n	800f998 <ip_reass_remove_oldest_datagram+0x4c>
 800f98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f98c:	899a      	ldrh	r2, [r3, #12]
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	889b      	ldrh	r3, [r3, #4]
 800f992:	b29b      	uxth	r3, r3
 800f994:	429a      	cmp	r2, r3
 800f996:	d014      	beq.n	800f9c2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f998:	693b      	ldr	r3, [r7, #16]
 800f99a:	3301      	adds	r3, #1
 800f99c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f99e:	6a3b      	ldr	r3, [r7, #32]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d104      	bne.n	800f9ae <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9a6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f9a8:	69fb      	ldr	r3, [r7, #28]
 800f9aa:	61bb      	str	r3, [r7, #24]
 800f9ac:	e009      	b.n	800f9c2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f9ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9b0:	7fda      	ldrb	r2, [r3, #31]
 800f9b2:	6a3b      	ldr	r3, [r7, #32]
 800f9b4:	7fdb      	ldrb	r3, [r3, #31]
 800f9b6:	429a      	cmp	r2, r3
 800f9b8:	d803      	bhi.n	800f9c2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9bc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f9be:	69fb      	ldr	r3, [r7, #28]
 800f9c0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d001      	beq.n	800f9ce <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9cc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f9ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800f9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d1cb      	bne.n	800f972 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f9da:	6a3b      	ldr	r3, [r7, #32]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d008      	beq.n	800f9f2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f9e0:	69b9      	ldr	r1, [r7, #24]
 800f9e2:	6a38      	ldr	r0, [r7, #32]
 800f9e4:	f7ff ff0e 	bl	800f804 <ip_reass_free_complete_datagram>
 800f9e8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f9ea:	697a      	ldr	r2, [r7, #20]
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	4413      	add	r3, r2
 800f9f0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f9f2:	697a      	ldr	r2, [r7, #20]
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	da02      	bge.n	800fa00 <ip_reass_remove_oldest_datagram+0xb4>
 800f9fa:	693b      	ldr	r3, [r7, #16]
 800f9fc:	2b01      	cmp	r3, #1
 800f9fe:	dcac      	bgt.n	800f95a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800fa00:	697b      	ldr	r3, [r7, #20]
}
 800fa02:	4618      	mov	r0, r3
 800fa04:	3728      	adds	r7, #40	@ 0x28
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bd80      	pop	{r7, pc}
 800fa0a:	bf00      	nop
 800fa0c:	20008970 	.word	0x20008970

0800fa10 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b084      	sub	sp, #16
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fa1a:	2004      	movs	r0, #4
 800fa1c:	f7f7 f974 	bl	8006d08 <memp_malloc>
 800fa20:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d110      	bne.n	800fa4a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800fa28:	6839      	ldr	r1, [r7, #0]
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	f7ff ff8e 	bl	800f94c <ip_reass_remove_oldest_datagram>
 800fa30:	4602      	mov	r2, r0
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	4293      	cmp	r3, r2
 800fa36:	dc03      	bgt.n	800fa40 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fa38:	2004      	movs	r0, #4
 800fa3a:	f7f7 f965 	bl	8006d08 <memp_malloc>
 800fa3e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d101      	bne.n	800fa4a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800fa46:	2300      	movs	r3, #0
 800fa48:	e016      	b.n	800fa78 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800fa4a:	2220      	movs	r2, #32
 800fa4c:	2100      	movs	r1, #0
 800fa4e:	68f8      	ldr	r0, [r7, #12]
 800fa50:	f000 ff5f 	bl	8010912 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	220f      	movs	r2, #15
 800fa58:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800fa5a:	4b09      	ldr	r3, [pc, #36]	@ (800fa80 <ip_reass_enqueue_new_datagram+0x70>)
 800fa5c:	681a      	ldr	r2, [r3, #0]
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800fa62:	4a07      	ldr	r2, [pc, #28]	@ (800fa80 <ip_reass_enqueue_new_datagram+0x70>)
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	3308      	adds	r3, #8
 800fa6c:	2214      	movs	r2, #20
 800fa6e:	6879      	ldr	r1, [r7, #4]
 800fa70:	4618      	mov	r0, r3
 800fa72:	f001 f800 	bl	8010a76 <memcpy>
  return ipr;
 800fa76:	68fb      	ldr	r3, [r7, #12]
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3710      	adds	r7, #16
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}
 800fa80:	20008970 	.word	0x20008970

0800fa84 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b082      	sub	sp, #8
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800fa8e:	4b10      	ldr	r3, [pc, #64]	@ (800fad0 <ip_reass_dequeue_datagram+0x4c>)
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	687a      	ldr	r2, [r7, #4]
 800fa94:	429a      	cmp	r2, r3
 800fa96:	d104      	bne.n	800faa2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	4a0c      	ldr	r2, [pc, #48]	@ (800fad0 <ip_reass_dequeue_datagram+0x4c>)
 800fa9e:	6013      	str	r3, [r2, #0]
 800faa0:	e00d      	b.n	800fabe <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d106      	bne.n	800fab6 <ip_reass_dequeue_datagram+0x32>
 800faa8:	4b0a      	ldr	r3, [pc, #40]	@ (800fad4 <ip_reass_dequeue_datagram+0x50>)
 800faaa:	f240 1245 	movw	r2, #325	@ 0x145
 800faae:	490a      	ldr	r1, [pc, #40]	@ (800fad8 <ip_reass_dequeue_datagram+0x54>)
 800fab0:	480a      	ldr	r0, [pc, #40]	@ (800fadc <ip_reass_dequeue_datagram+0x58>)
 800fab2:	f000 fe8f 	bl	80107d4 <iprintf>
    prev->next = ipr->next;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681a      	ldr	r2, [r3, #0]
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800fabe:	6879      	ldr	r1, [r7, #4]
 800fac0:	2004      	movs	r0, #4
 800fac2:	f7f7 f991 	bl	8006de8 <memp_free>
}
 800fac6:	bf00      	nop
 800fac8:	3708      	adds	r7, #8
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}
 800face:	bf00      	nop
 800fad0:	20008970 	.word	0x20008970
 800fad4:	080141e4 	.word	0x080141e4
 800fad8:	080142ac 	.word	0x080142ac
 800fadc:	0801422c 	.word	0x0801422c

0800fae0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b08c      	sub	sp, #48	@ 0x30
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	60f8      	str	r0, [r7, #12]
 800fae8:	60b9      	str	r1, [r7, #8]
 800faea:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800faec:	2300      	movs	r3, #0
 800faee:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800faf0:	2301      	movs	r3, #1
 800faf2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	685b      	ldr	r3, [r3, #4]
 800faf8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fafa:	69fb      	ldr	r3, [r7, #28]
 800fafc:	885b      	ldrh	r3, [r3, #2]
 800fafe:	b29b      	uxth	r3, r3
 800fb00:	4618      	mov	r0, r3
 800fb02:	f7f6 fc89 	bl	8006418 <lwip_htons>
 800fb06:	4603      	mov	r3, r0
 800fb08:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800fb0a:	69fb      	ldr	r3, [r7, #28]
 800fb0c:	781b      	ldrb	r3, [r3, #0]
 800fb0e:	f003 030f 	and.w	r3, r3, #15
 800fb12:	b2db      	uxtb	r3, r3
 800fb14:	009b      	lsls	r3, r3, #2
 800fb16:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800fb18:	7e7b      	ldrb	r3, [r7, #25]
 800fb1a:	b29b      	uxth	r3, r3
 800fb1c:	8b7a      	ldrh	r2, [r7, #26]
 800fb1e:	429a      	cmp	r2, r3
 800fb20:	d202      	bcs.n	800fb28 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fb22:	f04f 33ff 	mov.w	r3, #4294967295
 800fb26:	e135      	b.n	800fd94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800fb28:	7e7b      	ldrb	r3, [r7, #25]
 800fb2a:	b29b      	uxth	r3, r3
 800fb2c:	8b7a      	ldrh	r2, [r7, #26]
 800fb2e:	1ad3      	subs	r3, r2, r3
 800fb30:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800fb32:	69fb      	ldr	r3, [r7, #28]
 800fb34:	88db      	ldrh	r3, [r3, #6]
 800fb36:	b29b      	uxth	r3, r3
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7f6 fc6d 	bl	8006418 <lwip_htons>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fb44:	b29b      	uxth	r3, r3
 800fb46:	00db      	lsls	r3, r3, #3
 800fb48:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800fb4a:	68bb      	ldr	r3, [r7, #8]
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800fb50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb52:	2200      	movs	r2, #0
 800fb54:	701a      	strb	r2, [r3, #0]
 800fb56:	2200      	movs	r2, #0
 800fb58:	705a      	strb	r2, [r3, #1]
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	709a      	strb	r2, [r3, #2]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800fb62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb64:	8afa      	ldrh	r2, [r7, #22]
 800fb66:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800fb68:	8afa      	ldrh	r2, [r7, #22]
 800fb6a:	8b7b      	ldrh	r3, [r7, #26]
 800fb6c:	4413      	add	r3, r2
 800fb6e:	b29a      	uxth	r2, r3
 800fb70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb72:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800fb74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb76:	88db      	ldrh	r3, [r3, #6]
 800fb78:	b29b      	uxth	r3, r3
 800fb7a:	8afa      	ldrh	r2, [r7, #22]
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d902      	bls.n	800fb86 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fb80:	f04f 33ff 	mov.w	r3, #4294967295
 800fb84:	e106      	b.n	800fd94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	685b      	ldr	r3, [r3, #4]
 800fb8a:	627b      	str	r3, [r7, #36]	@ 0x24
 800fb8c:	e068      	b.n	800fc60 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800fb8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb90:	685b      	ldr	r3, [r3, #4]
 800fb92:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800fb94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb96:	889b      	ldrh	r3, [r3, #4]
 800fb98:	b29a      	uxth	r2, r3
 800fb9a:	693b      	ldr	r3, [r7, #16]
 800fb9c:	889b      	ldrh	r3, [r3, #4]
 800fb9e:	b29b      	uxth	r3, r3
 800fba0:	429a      	cmp	r2, r3
 800fba2:	d235      	bcs.n	800fc10 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800fba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fba8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800fbaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d020      	beq.n	800fbf2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800fbb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbb2:	889b      	ldrh	r3, [r3, #4]
 800fbb4:	b29a      	uxth	r2, r3
 800fbb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbb8:	88db      	ldrh	r3, [r3, #6]
 800fbba:	b29b      	uxth	r3, r3
 800fbbc:	429a      	cmp	r2, r3
 800fbbe:	d307      	bcc.n	800fbd0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800fbc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbc2:	88db      	ldrh	r3, [r3, #6]
 800fbc4:	b29a      	uxth	r2, r3
 800fbc6:	693b      	ldr	r3, [r7, #16]
 800fbc8:	889b      	ldrh	r3, [r3, #4]
 800fbca:	b29b      	uxth	r3, r3
 800fbcc:	429a      	cmp	r2, r3
 800fbce:	d902      	bls.n	800fbd6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fbd0:	f04f 33ff 	mov.w	r3, #4294967295
 800fbd4:	e0de      	b.n	800fd94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800fbd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbd8:	68ba      	ldr	r2, [r7, #8]
 800fbda:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800fbdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbde:	88db      	ldrh	r3, [r3, #6]
 800fbe0:	b29a      	uxth	r2, r3
 800fbe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbe4:	889b      	ldrh	r3, [r3, #4]
 800fbe6:	b29b      	uxth	r3, r3
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	d03d      	beq.n	800fc68 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800fbec:	2300      	movs	r3, #0
 800fbee:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800fbf0:	e03a      	b.n	800fc68 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800fbf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbf4:	88db      	ldrh	r3, [r3, #6]
 800fbf6:	b29a      	uxth	r2, r3
 800fbf8:	693b      	ldr	r3, [r7, #16]
 800fbfa:	889b      	ldrh	r3, [r3, #4]
 800fbfc:	b29b      	uxth	r3, r3
 800fbfe:	429a      	cmp	r2, r3
 800fc00:	d902      	bls.n	800fc08 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fc02:	f04f 33ff 	mov.w	r3, #4294967295
 800fc06:	e0c5      	b.n	800fd94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	68ba      	ldr	r2, [r7, #8]
 800fc0c:	605a      	str	r2, [r3, #4]
      break;
 800fc0e:	e02b      	b.n	800fc68 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800fc10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc12:	889b      	ldrh	r3, [r3, #4]
 800fc14:	b29a      	uxth	r2, r3
 800fc16:	693b      	ldr	r3, [r7, #16]
 800fc18:	889b      	ldrh	r3, [r3, #4]
 800fc1a:	b29b      	uxth	r3, r3
 800fc1c:	429a      	cmp	r2, r3
 800fc1e:	d102      	bne.n	800fc26 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fc20:	f04f 33ff 	mov.w	r3, #4294967295
 800fc24:	e0b6      	b.n	800fd94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800fc26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc28:	889b      	ldrh	r3, [r3, #4]
 800fc2a:	b29a      	uxth	r2, r3
 800fc2c:	693b      	ldr	r3, [r7, #16]
 800fc2e:	88db      	ldrh	r3, [r3, #6]
 800fc30:	b29b      	uxth	r3, r3
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d202      	bcs.n	800fc3c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fc36:	f04f 33ff 	mov.w	r3, #4294967295
 800fc3a:	e0ab      	b.n	800fd94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800fc3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d009      	beq.n	800fc56 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800fc42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc44:	88db      	ldrh	r3, [r3, #6]
 800fc46:	b29a      	uxth	r2, r3
 800fc48:	693b      	ldr	r3, [r7, #16]
 800fc4a:	889b      	ldrh	r3, [r3, #4]
 800fc4c:	b29b      	uxth	r3, r3
 800fc4e:	429a      	cmp	r2, r3
 800fc50:	d001      	beq.n	800fc56 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800fc52:	2300      	movs	r3, #0
 800fc54:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800fc56:	693b      	ldr	r3, [r7, #16]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800fc5c:	693b      	ldr	r3, [r7, #16]
 800fc5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800fc60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d193      	bne.n	800fb8e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800fc66:	e000      	b.n	800fc6a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800fc68:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800fc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d12d      	bne.n	800fccc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800fc70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d01c      	beq.n	800fcb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800fc76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc78:	88db      	ldrh	r3, [r3, #6]
 800fc7a:	b29a      	uxth	r2, r3
 800fc7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc7e:	889b      	ldrh	r3, [r3, #4]
 800fc80:	b29b      	uxth	r3, r3
 800fc82:	429a      	cmp	r2, r3
 800fc84:	d906      	bls.n	800fc94 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800fc86:	4b45      	ldr	r3, [pc, #276]	@ (800fd9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fc88:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800fc8c:	4944      	ldr	r1, [pc, #272]	@ (800fda0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800fc8e:	4845      	ldr	r0, [pc, #276]	@ (800fda4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fc90:	f000 fda0 	bl	80107d4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800fc94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc96:	68ba      	ldr	r2, [r7, #8]
 800fc98:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800fc9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc9c:	88db      	ldrh	r3, [r3, #6]
 800fc9e:	b29a      	uxth	r2, r3
 800fca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fca2:	889b      	ldrh	r3, [r3, #4]
 800fca4:	b29b      	uxth	r3, r3
 800fca6:	429a      	cmp	r2, r3
 800fca8:	d010      	beq.n	800fccc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	623b      	str	r3, [r7, #32]
 800fcae:	e00d      	b.n	800fccc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	685b      	ldr	r3, [r3, #4]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d006      	beq.n	800fcc6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800fcb8:	4b38      	ldr	r3, [pc, #224]	@ (800fd9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fcba:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800fcbe:	493a      	ldr	r1, [pc, #232]	@ (800fda8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800fcc0:	4838      	ldr	r0, [pc, #224]	@ (800fda4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fcc2:	f000 fd87 	bl	80107d4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	68ba      	ldr	r2, [r7, #8]
 800fcca:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d105      	bne.n	800fcde <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	7f9b      	ldrb	r3, [r3, #30]
 800fcd6:	f003 0301 	and.w	r3, r3, #1
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d059      	beq.n	800fd92 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800fcde:	6a3b      	ldr	r3, [r7, #32]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d04f      	beq.n	800fd84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	685b      	ldr	r3, [r3, #4]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d006      	beq.n	800fcfa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	685b      	ldr	r3, [r3, #4]
 800fcf0:	685b      	ldr	r3, [r3, #4]
 800fcf2:	889b      	ldrh	r3, [r3, #4]
 800fcf4:	b29b      	uxth	r3, r3
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d002      	beq.n	800fd00 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	623b      	str	r3, [r7, #32]
 800fcfe:	e041      	b.n	800fd84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800fd00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd02:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800fd04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800fd0a:	e012      	b.n	800fd32 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800fd0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd0e:	685b      	ldr	r3, [r3, #4]
 800fd10:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800fd12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd14:	88db      	ldrh	r3, [r3, #6]
 800fd16:	b29a      	uxth	r2, r3
 800fd18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd1a:	889b      	ldrh	r3, [r3, #4]
 800fd1c:	b29b      	uxth	r3, r3
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	d002      	beq.n	800fd28 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800fd22:	2300      	movs	r3, #0
 800fd24:	623b      	str	r3, [r7, #32]
            break;
 800fd26:	e007      	b.n	800fd38 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800fd28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd2a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800fd2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800fd32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d1e9      	bne.n	800fd0c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800fd38:	6a3b      	ldr	r3, [r7, #32]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d022      	beq.n	800fd84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	685b      	ldr	r3, [r3, #4]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d106      	bne.n	800fd54 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800fd46:	4b15      	ldr	r3, [pc, #84]	@ (800fd9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fd48:	f240 12df 	movw	r2, #479	@ 0x1df
 800fd4c:	4917      	ldr	r1, [pc, #92]	@ (800fdac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fd4e:	4815      	ldr	r0, [pc, #84]	@ (800fda4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fd50:	f000 fd40 	bl	80107d4 <iprintf>
          LWIP_ASSERT("sanity check",
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	685b      	ldr	r3, [r3, #4]
 800fd58:	685b      	ldr	r3, [r3, #4]
 800fd5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fd5c:	429a      	cmp	r2, r3
 800fd5e:	d106      	bne.n	800fd6e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800fd60:	4b0e      	ldr	r3, [pc, #56]	@ (800fd9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fd62:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800fd66:	4911      	ldr	r1, [pc, #68]	@ (800fdac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fd68:	480e      	ldr	r0, [pc, #56]	@ (800fda4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fd6a:	f000 fd33 	bl	80107d4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800fd6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d006      	beq.n	800fd84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800fd76:	4b09      	ldr	r3, [pc, #36]	@ (800fd9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fd78:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800fd7c:	490c      	ldr	r1, [pc, #48]	@ (800fdb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800fd7e:	4809      	ldr	r0, [pc, #36]	@ (800fda4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fd80:	f000 fd28 	bl	80107d4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800fd84:	6a3b      	ldr	r3, [r7, #32]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	bf14      	ite	ne
 800fd8a:	2301      	movne	r3, #1
 800fd8c:	2300      	moveq	r3, #0
 800fd8e:	b2db      	uxtb	r3, r3
 800fd90:	e000      	b.n	800fd94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800fd92:	2300      	movs	r3, #0
}
 800fd94:	4618      	mov	r0, r3
 800fd96:	3730      	adds	r7, #48	@ 0x30
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}
 800fd9c:	080141e4 	.word	0x080141e4
 800fda0:	080142c8 	.word	0x080142c8
 800fda4:	0801422c 	.word	0x0801422c
 800fda8:	080142e8 	.word	0x080142e8
 800fdac:	08014320 	.word	0x08014320
 800fdb0:	08014330 	.word	0x08014330

0800fdb4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b08e      	sub	sp, #56	@ 0x38
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	685b      	ldr	r3, [r3, #4]
 800fdc0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800fdc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdc4:	781b      	ldrb	r3, [r3, #0]
 800fdc6:	f003 030f 	and.w	r3, r3, #15
 800fdca:	b2db      	uxtb	r3, r3
 800fdcc:	009b      	lsls	r3, r3, #2
 800fdce:	b2db      	uxtb	r3, r3
 800fdd0:	2b14      	cmp	r3, #20
 800fdd2:	f040 8171 	bne.w	80100b8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800fdd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdd8:	88db      	ldrh	r3, [r3, #6]
 800fdda:	b29b      	uxth	r3, r3
 800fddc:	4618      	mov	r0, r3
 800fdde:	f7f6 fb1b 	bl	8006418 <lwip_htons>
 800fde2:	4603      	mov	r3, r0
 800fde4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fde8:	b29b      	uxth	r3, r3
 800fdea:	00db      	lsls	r3, r3, #3
 800fdec:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fdee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdf0:	885b      	ldrh	r3, [r3, #2]
 800fdf2:	b29b      	uxth	r3, r3
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f7f6 fb0f 	bl	8006418 <lwip_htons>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800fdfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe00:	781b      	ldrb	r3, [r3, #0]
 800fe02:	f003 030f 	and.w	r3, r3, #15
 800fe06:	b2db      	uxtb	r3, r3
 800fe08:	009b      	lsls	r3, r3, #2
 800fe0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800fe0e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800fe12:	b29b      	uxth	r3, r3
 800fe14:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800fe16:	429a      	cmp	r2, r3
 800fe18:	f0c0 8150 	bcc.w	80100bc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800fe1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800fe20:	b29b      	uxth	r3, r3
 800fe22:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800fe24:	1ad3      	subs	r3, r2, r3
 800fe26:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f7f7 fedb 	bl	8007be4 <pbuf_clen>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800fe32:	4b8c      	ldr	r3, [pc, #560]	@ (8010064 <ip4_reass+0x2b0>)
 800fe34:	881b      	ldrh	r3, [r3, #0]
 800fe36:	461a      	mov	r2, r3
 800fe38:	8c3b      	ldrh	r3, [r7, #32]
 800fe3a:	4413      	add	r3, r2
 800fe3c:	2b0a      	cmp	r3, #10
 800fe3e:	dd10      	ble.n	800fe62 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fe40:	8c3b      	ldrh	r3, [r7, #32]
 800fe42:	4619      	mov	r1, r3
 800fe44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fe46:	f7ff fd81 	bl	800f94c <ip_reass_remove_oldest_datagram>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	f000 8137 	beq.w	80100c0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800fe52:	4b84      	ldr	r3, [pc, #528]	@ (8010064 <ip4_reass+0x2b0>)
 800fe54:	881b      	ldrh	r3, [r3, #0]
 800fe56:	461a      	mov	r2, r3
 800fe58:	8c3b      	ldrh	r3, [r7, #32]
 800fe5a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fe5c:	2b0a      	cmp	r3, #10
 800fe5e:	f300 812f 	bgt.w	80100c0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fe62:	4b81      	ldr	r3, [pc, #516]	@ (8010068 <ip4_reass+0x2b4>)
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	633b      	str	r3, [r7, #48]	@ 0x30
 800fe68:	e015      	b.n	800fe96 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800fe6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe6c:	695a      	ldr	r2, [r3, #20]
 800fe6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe70:	68db      	ldr	r3, [r3, #12]
 800fe72:	429a      	cmp	r2, r3
 800fe74:	d10c      	bne.n	800fe90 <ip4_reass+0xdc>
 800fe76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe78:	699a      	ldr	r2, [r3, #24]
 800fe7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe7c:	691b      	ldr	r3, [r3, #16]
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d106      	bne.n	800fe90 <ip4_reass+0xdc>
 800fe82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe84:	899a      	ldrh	r2, [r3, #12]
 800fe86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe88:	889b      	ldrh	r3, [r3, #4]
 800fe8a:	b29b      	uxth	r3, r3
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	d006      	beq.n	800fe9e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fe90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	633b      	str	r3, [r7, #48]	@ 0x30
 800fe96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d1e6      	bne.n	800fe6a <ip4_reass+0xb6>
 800fe9c:	e000      	b.n	800fea0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800fe9e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800fea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d109      	bne.n	800feba <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800fea6:	8c3b      	ldrh	r3, [r7, #32]
 800fea8:	4619      	mov	r1, r3
 800feaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800feac:	f7ff fdb0 	bl	800fa10 <ip_reass_enqueue_new_datagram>
 800feb0:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800feb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d11c      	bne.n	800fef2 <ip4_reass+0x13e>
      goto nullreturn;
 800feb8:	e105      	b.n	80100c6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800feba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800febc:	88db      	ldrh	r3, [r3, #6]
 800febe:	b29b      	uxth	r3, r3
 800fec0:	4618      	mov	r0, r3
 800fec2:	f7f6 faa9 	bl	8006418 <lwip_htons>
 800fec6:	4603      	mov	r3, r0
 800fec8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d110      	bne.n	800fef2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800fed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fed2:	89db      	ldrh	r3, [r3, #14]
 800fed4:	4618      	mov	r0, r3
 800fed6:	f7f6 fa9f 	bl	8006418 <lwip_htons>
 800feda:	4603      	mov	r3, r0
 800fedc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d006      	beq.n	800fef2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800fee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fee6:	3308      	adds	r3, #8
 800fee8:	2214      	movs	r2, #20
 800feea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800feec:	4618      	mov	r0, r3
 800feee:	f000 fdc2 	bl	8010a76 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800fef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fef4:	88db      	ldrh	r3, [r3, #6]
 800fef6:	b29b      	uxth	r3, r3
 800fef8:	f003 0320 	and.w	r3, r3, #32
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	bf0c      	ite	eq
 800ff00:	2301      	moveq	r3, #1
 800ff02:	2300      	movne	r3, #0
 800ff04:	b2db      	uxtb	r3, r3
 800ff06:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ff08:	69fb      	ldr	r3, [r7, #28]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d00e      	beq.n	800ff2c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ff0e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ff10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff12:	4413      	add	r3, r2
 800ff14:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ff16:	8b7a      	ldrh	r2, [r7, #26]
 800ff18:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	f0c0 80a0 	bcc.w	8010060 <ip4_reass+0x2ac>
 800ff20:	8b7b      	ldrh	r3, [r7, #26]
 800ff22:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800ff26:	4293      	cmp	r3, r2
 800ff28:	f200 809a 	bhi.w	8010060 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ff2c:	69fa      	ldr	r2, [r7, #28]
 800ff2e:	6879      	ldr	r1, [r7, #4]
 800ff30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ff32:	f7ff fdd5 	bl	800fae0 <ip_reass_chain_frag_into_datagram_and_validate>
 800ff36:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ff38:	697b      	ldr	r3, [r7, #20]
 800ff3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff3e:	f000 809b 	beq.w	8010078 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ff42:	4b48      	ldr	r3, [pc, #288]	@ (8010064 <ip4_reass+0x2b0>)
 800ff44:	881a      	ldrh	r2, [r3, #0]
 800ff46:	8c3b      	ldrh	r3, [r7, #32]
 800ff48:	4413      	add	r3, r2
 800ff4a:	b29a      	uxth	r2, r3
 800ff4c:	4b45      	ldr	r3, [pc, #276]	@ (8010064 <ip4_reass+0x2b0>)
 800ff4e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ff50:	69fb      	ldr	r3, [r7, #28]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d00d      	beq.n	800ff72 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ff56:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ff58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff5a:	4413      	add	r3, r2
 800ff5c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ff5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff60:	8a7a      	ldrh	r2, [r7, #18]
 800ff62:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ff64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff66:	7f9b      	ldrb	r3, [r3, #30]
 800ff68:	f043 0301 	orr.w	r3, r3, #1
 800ff6c:	b2da      	uxtb	r2, r3
 800ff6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff70:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	2b01      	cmp	r3, #1
 800ff76:	d171      	bne.n	801005c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ff78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff7a:	8b9b      	ldrh	r3, [r3, #28]
 800ff7c:	3314      	adds	r3, #20
 800ff7e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ff80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff82:	685b      	ldr	r3, [r3, #4]
 800ff84:	685b      	ldr	r3, [r3, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ff8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff8c:	685b      	ldr	r3, [r3, #4]
 800ff8e:	685b      	ldr	r3, [r3, #4]
 800ff90:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ff92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff94:	3308      	adds	r3, #8
 800ff96:	2214      	movs	r2, #20
 800ff98:	4619      	mov	r1, r3
 800ff9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ff9c:	f000 fd6b 	bl	8010a76 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ffa0:	8a3b      	ldrh	r3, [r7, #16]
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7f6 fa38 	bl	8006418 <lwip_htons>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	461a      	mov	r2, r3
 800ffac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffae:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ffb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	719a      	strb	r2, [r3, #6]
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ffba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	729a      	strb	r2, [r3, #10]
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800ffc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffc6:	685b      	ldr	r3, [r3, #4]
 800ffc8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800ffca:	e00d      	b.n	800ffe8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800ffcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800ffd2:	2114      	movs	r1, #20
 800ffd4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ffd6:	f7f7 fcf7 	bl	80079c8 <pbuf_remove_header>
      pbuf_cat(p, r);
 800ffda:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f7f7 fe3b 	bl	8007c58 <pbuf_cat>
      r = iprh->next_pbuf;
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800ffe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d1ee      	bne.n	800ffcc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800ffee:	4b1e      	ldr	r3, [pc, #120]	@ (8010068 <ip4_reass+0x2b4>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fff4:	429a      	cmp	r2, r3
 800fff6:	d102      	bne.n	800fffe <ip4_reass+0x24a>
      ipr_prev = NULL;
 800fff8:	2300      	movs	r3, #0
 800fffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fffc:	e010      	b.n	8010020 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fffe:	4b1a      	ldr	r3, [pc, #104]	@ (8010068 <ip4_reass+0x2b4>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010004:	e007      	b.n	8010016 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8010006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801000c:	429a      	cmp	r2, r3
 801000e:	d006      	beq.n	801001e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010018:	2b00      	cmp	r3, #0
 801001a:	d1f4      	bne.n	8010006 <ip4_reass+0x252>
 801001c:	e000      	b.n	8010020 <ip4_reass+0x26c>
          break;
 801001e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010020:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010022:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010024:	f7ff fd2e 	bl	800fa84 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f7f7 fddb 	bl	8007be4 <pbuf_clen>
 801002e:	4603      	mov	r3, r0
 8010030:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010032:	4b0c      	ldr	r3, [pc, #48]	@ (8010064 <ip4_reass+0x2b0>)
 8010034:	881b      	ldrh	r3, [r3, #0]
 8010036:	8c3a      	ldrh	r2, [r7, #32]
 8010038:	429a      	cmp	r2, r3
 801003a:	d906      	bls.n	801004a <ip4_reass+0x296>
 801003c:	4b0b      	ldr	r3, [pc, #44]	@ (801006c <ip4_reass+0x2b8>)
 801003e:	f240 229b 	movw	r2, #667	@ 0x29b
 8010042:	490b      	ldr	r1, [pc, #44]	@ (8010070 <ip4_reass+0x2bc>)
 8010044:	480b      	ldr	r0, [pc, #44]	@ (8010074 <ip4_reass+0x2c0>)
 8010046:	f000 fbc5 	bl	80107d4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801004a:	4b06      	ldr	r3, [pc, #24]	@ (8010064 <ip4_reass+0x2b0>)
 801004c:	881a      	ldrh	r2, [r3, #0]
 801004e:	8c3b      	ldrh	r3, [r7, #32]
 8010050:	1ad3      	subs	r3, r2, r3
 8010052:	b29a      	uxth	r2, r3
 8010054:	4b03      	ldr	r3, [pc, #12]	@ (8010064 <ip4_reass+0x2b0>)
 8010056:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	e038      	b.n	80100ce <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801005c:	2300      	movs	r3, #0
 801005e:	e036      	b.n	80100ce <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8010060:	bf00      	nop
 8010062:	e00a      	b.n	801007a <ip4_reass+0x2c6>
 8010064:	20008974 	.word	0x20008974
 8010068:	20008970 	.word	0x20008970
 801006c:	080141e4 	.word	0x080141e4
 8010070:	08014354 	.word	0x08014354
 8010074:	0801422c 	.word	0x0801422c
    goto nullreturn_ipr;
 8010078:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801007a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801007c:	2b00      	cmp	r3, #0
 801007e:	d106      	bne.n	801008e <ip4_reass+0x2da>
 8010080:	4b15      	ldr	r3, [pc, #84]	@ (80100d8 <ip4_reass+0x324>)
 8010082:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8010086:	4915      	ldr	r1, [pc, #84]	@ (80100dc <ip4_reass+0x328>)
 8010088:	4815      	ldr	r0, [pc, #84]	@ (80100e0 <ip4_reass+0x32c>)
 801008a:	f000 fba3 	bl	80107d4 <iprintf>
  if (ipr->p == NULL) {
 801008e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010090:	685b      	ldr	r3, [r3, #4]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d116      	bne.n	80100c4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010096:	4b13      	ldr	r3, [pc, #76]	@ (80100e4 <ip4_reass+0x330>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801009c:	429a      	cmp	r2, r3
 801009e:	d006      	beq.n	80100ae <ip4_reass+0x2fa>
 80100a0:	4b0d      	ldr	r3, [pc, #52]	@ (80100d8 <ip4_reass+0x324>)
 80100a2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80100a6:	4910      	ldr	r1, [pc, #64]	@ (80100e8 <ip4_reass+0x334>)
 80100a8:	480d      	ldr	r0, [pc, #52]	@ (80100e0 <ip4_reass+0x32c>)
 80100aa:	f000 fb93 	bl	80107d4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80100ae:	2100      	movs	r1, #0
 80100b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80100b2:	f7ff fce7 	bl	800fa84 <ip_reass_dequeue_datagram>
 80100b6:	e006      	b.n	80100c6 <ip4_reass+0x312>
    goto nullreturn;
 80100b8:	bf00      	nop
 80100ba:	e004      	b.n	80100c6 <ip4_reass+0x312>
    goto nullreturn;
 80100bc:	bf00      	nop
 80100be:	e002      	b.n	80100c6 <ip4_reass+0x312>
      goto nullreturn;
 80100c0:	bf00      	nop
 80100c2:	e000      	b.n	80100c6 <ip4_reass+0x312>
  }

nullreturn:
 80100c4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80100c6:	6878      	ldr	r0, [r7, #4]
 80100c8:	f7f7 fd04 	bl	8007ad4 <pbuf_free>
  return NULL;
 80100cc:	2300      	movs	r3, #0
}
 80100ce:	4618      	mov	r0, r3
 80100d0:	3738      	adds	r7, #56	@ 0x38
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}
 80100d6:	bf00      	nop
 80100d8:	080141e4 	.word	0x080141e4
 80100dc:	08014370 	.word	0x08014370
 80100e0:	0801422c 	.word	0x0801422c
 80100e4:	20008970 	.word	0x20008970
 80100e8:	0801437c 	.word	0x0801437c

080100ec <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80100f0:	2005      	movs	r0, #5
 80100f2:	f7f6 fe09 	bl	8006d08 <memp_malloc>
 80100f6:	4603      	mov	r3, r0
}
 80100f8:	4618      	mov	r0, r3
 80100fa:	bd80      	pop	{r7, pc}

080100fc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b082      	sub	sp, #8
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d106      	bne.n	8010118 <ip_frag_free_pbuf_custom_ref+0x1c>
 801010a:	4b07      	ldr	r3, [pc, #28]	@ (8010128 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801010c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8010110:	4906      	ldr	r1, [pc, #24]	@ (801012c <ip_frag_free_pbuf_custom_ref+0x30>)
 8010112:	4807      	ldr	r0, [pc, #28]	@ (8010130 <ip_frag_free_pbuf_custom_ref+0x34>)
 8010114:	f000 fb5e 	bl	80107d4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010118:	6879      	ldr	r1, [r7, #4]
 801011a:	2005      	movs	r0, #5
 801011c:	f7f6 fe64 	bl	8006de8 <memp_free>
}
 8010120:	bf00      	nop
 8010122:	3708      	adds	r7, #8
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}
 8010128:	080141e4 	.word	0x080141e4
 801012c:	0801439c 	.word	0x0801439c
 8010130:	0801422c 	.word	0x0801422c

08010134 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b084      	sub	sp, #16
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d106      	bne.n	8010154 <ipfrag_free_pbuf_custom+0x20>
 8010146:	4b11      	ldr	r3, [pc, #68]	@ (801018c <ipfrag_free_pbuf_custom+0x58>)
 8010148:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801014c:	4910      	ldr	r1, [pc, #64]	@ (8010190 <ipfrag_free_pbuf_custom+0x5c>)
 801014e:	4811      	ldr	r0, [pc, #68]	@ (8010194 <ipfrag_free_pbuf_custom+0x60>)
 8010150:	f000 fb40 	bl	80107d4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010154:	68fa      	ldr	r2, [r7, #12]
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	429a      	cmp	r2, r3
 801015a:	d006      	beq.n	801016a <ipfrag_free_pbuf_custom+0x36>
 801015c:	4b0b      	ldr	r3, [pc, #44]	@ (801018c <ipfrag_free_pbuf_custom+0x58>)
 801015e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8010162:	490d      	ldr	r1, [pc, #52]	@ (8010198 <ipfrag_free_pbuf_custom+0x64>)
 8010164:	480b      	ldr	r0, [pc, #44]	@ (8010194 <ipfrag_free_pbuf_custom+0x60>)
 8010166:	f000 fb35 	bl	80107d4 <iprintf>
  if (pcr->original != NULL) {
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	695b      	ldr	r3, [r3, #20]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d004      	beq.n	801017c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	695b      	ldr	r3, [r3, #20]
 8010176:	4618      	mov	r0, r3
 8010178:	f7f7 fcac 	bl	8007ad4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801017c:	68f8      	ldr	r0, [r7, #12]
 801017e:	f7ff ffbd 	bl	80100fc <ip_frag_free_pbuf_custom_ref>
}
 8010182:	bf00      	nop
 8010184:	3710      	adds	r7, #16
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}
 801018a:	bf00      	nop
 801018c:	080141e4 	.word	0x080141e4
 8010190:	080143a8 	.word	0x080143a8
 8010194:	0801422c 	.word	0x0801422c
 8010198:	080143b4 	.word	0x080143b4

0801019c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b094      	sub	sp, #80	@ 0x50
 80101a0:	af02      	add	r7, sp, #8
 80101a2:	60f8      	str	r0, [r7, #12]
 80101a4:	60b9      	str	r1, [r7, #8]
 80101a6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80101a8:	2300      	movs	r3, #0
 80101aa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80101b2:	3b14      	subs	r3, #20
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	da00      	bge.n	80101ba <ip4_frag+0x1e>
 80101b8:	3307      	adds	r3, #7
 80101ba:	10db      	asrs	r3, r3, #3
 80101bc:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80101be:	2314      	movs	r3, #20
 80101c0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	685b      	ldr	r3, [r3, #4]
 80101c6:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80101c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101ca:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80101cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101ce:	781b      	ldrb	r3, [r3, #0]
 80101d0:	f003 030f 	and.w	r3, r3, #15
 80101d4:	b2db      	uxtb	r3, r3
 80101d6:	009b      	lsls	r3, r3, #2
 80101d8:	b2db      	uxtb	r3, r3
 80101da:	2b14      	cmp	r3, #20
 80101dc:	d002      	beq.n	80101e4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80101de:	f06f 0305 	mvn.w	r3, #5
 80101e2:	e110      	b.n	8010406 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	895b      	ldrh	r3, [r3, #10]
 80101e8:	2b13      	cmp	r3, #19
 80101ea:	d809      	bhi.n	8010200 <ip4_frag+0x64>
 80101ec:	4b88      	ldr	r3, [pc, #544]	@ (8010410 <ip4_frag+0x274>)
 80101ee:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80101f2:	4988      	ldr	r1, [pc, #544]	@ (8010414 <ip4_frag+0x278>)
 80101f4:	4888      	ldr	r0, [pc, #544]	@ (8010418 <ip4_frag+0x27c>)
 80101f6:	f000 faed 	bl	80107d4 <iprintf>
 80101fa:	f06f 0305 	mvn.w	r3, #5
 80101fe:	e102      	b.n	8010406 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010202:	88db      	ldrh	r3, [r3, #6]
 8010204:	b29b      	uxth	r3, r3
 8010206:	4618      	mov	r0, r3
 8010208:	f7f6 f906 	bl	8006418 <lwip_htons>
 801020c:	4603      	mov	r3, r0
 801020e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8010210:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010212:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010216:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801021a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801021c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010220:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	891b      	ldrh	r3, [r3, #8]
 8010226:	3b14      	subs	r3, #20
 8010228:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801022c:	e0e1      	b.n	80103f2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801022e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010230:	00db      	lsls	r3, r3, #3
 8010232:	b29b      	uxth	r3, r3
 8010234:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010238:	4293      	cmp	r3, r2
 801023a:	bf28      	it	cs
 801023c:	4613      	movcs	r3, r2
 801023e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010240:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010244:	2114      	movs	r1, #20
 8010246:	200e      	movs	r0, #14
 8010248:	f7f7 f960 	bl	800750c <pbuf_alloc>
 801024c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801024e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010250:	2b00      	cmp	r3, #0
 8010252:	f000 80d5 	beq.w	8010400 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010258:	895b      	ldrh	r3, [r3, #10]
 801025a:	2b13      	cmp	r3, #19
 801025c:	d806      	bhi.n	801026c <ip4_frag+0xd0>
 801025e:	4b6c      	ldr	r3, [pc, #432]	@ (8010410 <ip4_frag+0x274>)
 8010260:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8010264:	496d      	ldr	r1, [pc, #436]	@ (801041c <ip4_frag+0x280>)
 8010266:	486c      	ldr	r0, [pc, #432]	@ (8010418 <ip4_frag+0x27c>)
 8010268:	f000 fab4 	bl	80107d4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801026c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801026e:	685b      	ldr	r3, [r3, #4]
 8010270:	2214      	movs	r2, #20
 8010272:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010274:	4618      	mov	r0, r3
 8010276:	f000 fbfe 	bl	8010a76 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801027a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801027c:	685b      	ldr	r3, [r3, #4]
 801027e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8010280:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010282:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8010286:	e064      	b.n	8010352 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	895a      	ldrh	r2, [r3, #10]
 801028c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801028e:	1ad3      	subs	r3, r2, r3
 8010290:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	895b      	ldrh	r3, [r3, #10]
 8010296:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8010298:	429a      	cmp	r2, r3
 801029a:	d906      	bls.n	80102aa <ip4_frag+0x10e>
 801029c:	4b5c      	ldr	r3, [pc, #368]	@ (8010410 <ip4_frag+0x274>)
 801029e:	f240 322d 	movw	r2, #813	@ 0x32d
 80102a2:	495f      	ldr	r1, [pc, #380]	@ (8010420 <ip4_frag+0x284>)
 80102a4:	485c      	ldr	r0, [pc, #368]	@ (8010418 <ip4_frag+0x27c>)
 80102a6:	f000 fa95 	bl	80107d4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80102aa:	8bfa      	ldrh	r2, [r7, #30]
 80102ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80102b0:	4293      	cmp	r3, r2
 80102b2:	bf28      	it	cs
 80102b4:	4613      	movcs	r3, r2
 80102b6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80102ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d105      	bne.n	80102ce <ip4_frag+0x132>
        poff = 0;
 80102c2:	2300      	movs	r3, #0
 80102c4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	60fb      	str	r3, [r7, #12]
        continue;
 80102cc:	e041      	b.n	8010352 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80102ce:	f7ff ff0d 	bl	80100ec <ip_frag_alloc_pbuf_custom_ref>
 80102d2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80102d4:	69bb      	ldr	r3, [r7, #24]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d103      	bne.n	80102e2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80102da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80102dc:	f7f7 fbfa 	bl	8007ad4 <pbuf_free>
        goto memerr;
 80102e0:	e08f      	b.n	8010402 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80102e2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80102e8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80102ea:	4413      	add	r3, r2
 80102ec:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80102f0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80102f4:	9201      	str	r2, [sp, #4]
 80102f6:	9300      	str	r3, [sp, #0]
 80102f8:	4603      	mov	r3, r0
 80102fa:	2241      	movs	r2, #65	@ 0x41
 80102fc:	2000      	movs	r0, #0
 80102fe:	f7f7 fa2f 	bl	8007760 <pbuf_alloced_custom>
 8010302:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010304:	697b      	ldr	r3, [r7, #20]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d106      	bne.n	8010318 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801030a:	69b8      	ldr	r0, [r7, #24]
 801030c:	f7ff fef6 	bl	80100fc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010310:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010312:	f7f7 fbdf 	bl	8007ad4 <pbuf_free>
        goto memerr;
 8010316:	e074      	b.n	8010402 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010318:	68f8      	ldr	r0, [r7, #12]
 801031a:	f7f7 fc7b 	bl	8007c14 <pbuf_ref>
      pcr->original = p;
 801031e:	69bb      	ldr	r3, [r7, #24]
 8010320:	68fa      	ldr	r2, [r7, #12]
 8010322:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010324:	69bb      	ldr	r3, [r7, #24]
 8010326:	4a3f      	ldr	r2, [pc, #252]	@ (8010424 <ip4_frag+0x288>)
 8010328:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801032a:	6979      	ldr	r1, [r7, #20]
 801032c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801032e:	f7f7 fc93 	bl	8007c58 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010332:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8010336:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801033a:	1ad3      	subs	r3, r2, r3
 801033c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8010340:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010344:	2b00      	cmp	r3, #0
 8010346:	d004      	beq.n	8010352 <ip4_frag+0x1b6>
        poff = 0;
 8010348:	2300      	movs	r3, #0
 801034a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8010352:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010356:	2b00      	cmp	r3, #0
 8010358:	d196      	bne.n	8010288 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801035a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801035c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010360:	4413      	add	r3, r2
 8010362:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010368:	f1a3 0213 	sub.w	r2, r3, #19
 801036c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010370:	429a      	cmp	r2, r3
 8010372:	bfcc      	ite	gt
 8010374:	2301      	movgt	r3, #1
 8010376:	2300      	movle	r3, #0
 8010378:	b2db      	uxtb	r3, r3
 801037a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801037c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010380:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010384:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8010386:	6a3b      	ldr	r3, [r7, #32]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d002      	beq.n	8010392 <ip4_frag+0x1f6>
 801038c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801038e:	2b00      	cmp	r3, #0
 8010390:	d003      	beq.n	801039a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8010392:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010394:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8010398:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801039a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801039c:	4618      	mov	r0, r3
 801039e:	f7f6 f83b 	bl	8006418 <lwip_htons>
 80103a2:	4603      	mov	r3, r0
 80103a4:	461a      	mov	r2, r3
 80103a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103a8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80103aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80103ac:	3314      	adds	r3, #20
 80103ae:	b29b      	uxth	r3, r3
 80103b0:	4618      	mov	r0, r3
 80103b2:	f7f6 f831 	bl	8006418 <lwip_htons>
 80103b6:	4603      	mov	r3, r0
 80103b8:	461a      	mov	r2, r3
 80103ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103bc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80103be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103c0:	2200      	movs	r2, #0
 80103c2:	729a      	strb	r2, [r3, #10]
 80103c4:	2200      	movs	r2, #0
 80103c6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	695b      	ldr	r3, [r3, #20]
 80103cc:	687a      	ldr	r2, [r7, #4]
 80103ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80103d0:	68b8      	ldr	r0, [r7, #8]
 80103d2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80103d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80103d6:	f7f7 fb7d 	bl	8007ad4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80103da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80103de:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80103e0:	1ad3      	subs	r3, r2, r3
 80103e2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80103e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80103ea:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80103ec:	4413      	add	r3, r2
 80103ee:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80103f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	f47f af19 	bne.w	801022e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80103fc:	2300      	movs	r3, #0
 80103fe:	e002      	b.n	8010406 <ip4_frag+0x26a>
      goto memerr;
 8010400:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010402:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010406:	4618      	mov	r0, r3
 8010408:	3748      	adds	r7, #72	@ 0x48
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}
 801040e:	bf00      	nop
 8010410:	080141e4 	.word	0x080141e4
 8010414:	080143c0 	.word	0x080143c0
 8010418:	0801422c 	.word	0x0801422c
 801041c:	080143dc 	.word	0x080143dc
 8010420:	080143fc 	.word	0x080143fc
 8010424:	08010135 	.word	0x08010135

08010428 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b086      	sub	sp, #24
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010432:	230e      	movs	r3, #14
 8010434:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	895b      	ldrh	r3, [r3, #10]
 801043a:	2b0e      	cmp	r3, #14
 801043c:	d96e      	bls.n	801051c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	7bdb      	ldrb	r3, [r3, #15]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d106      	bne.n	8010454 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801044c:	3301      	adds	r3, #1
 801044e:	b2da      	uxtb	r2, r3
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	685b      	ldr	r3, [r3, #4]
 8010458:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801045a:	693b      	ldr	r3, [r7, #16]
 801045c:	7b1a      	ldrb	r2, [r3, #12]
 801045e:	7b5b      	ldrb	r3, [r3, #13]
 8010460:	021b      	lsls	r3, r3, #8
 8010462:	4313      	orrs	r3, r2
 8010464:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010466:	693b      	ldr	r3, [r7, #16]
 8010468:	781b      	ldrb	r3, [r3, #0]
 801046a:	f003 0301 	and.w	r3, r3, #1
 801046e:	2b00      	cmp	r3, #0
 8010470:	d023      	beq.n	80104ba <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010472:	693b      	ldr	r3, [r7, #16]
 8010474:	781b      	ldrb	r3, [r3, #0]
 8010476:	2b01      	cmp	r3, #1
 8010478:	d10f      	bne.n	801049a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801047a:	693b      	ldr	r3, [r7, #16]
 801047c:	785b      	ldrb	r3, [r3, #1]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d11b      	bne.n	80104ba <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010482:	693b      	ldr	r3, [r7, #16]
 8010484:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010486:	2b5e      	cmp	r3, #94	@ 0x5e
 8010488:	d117      	bne.n	80104ba <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	7b5b      	ldrb	r3, [r3, #13]
 801048e:	f043 0310 	orr.w	r3, r3, #16
 8010492:	b2da      	uxtb	r2, r3
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	735a      	strb	r2, [r3, #13]
 8010498:	e00f      	b.n	80104ba <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801049a:	693b      	ldr	r3, [r7, #16]
 801049c:	2206      	movs	r2, #6
 801049e:	4928      	ldr	r1, [pc, #160]	@ (8010540 <ethernet_input+0x118>)
 80104a0:	4618      	mov	r0, r3
 80104a2:	f000 fa0c 	bl	80108be <memcmp>
 80104a6:	4603      	mov	r3, r0
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d106      	bne.n	80104ba <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	7b5b      	ldrb	r3, [r3, #13]
 80104b0:	f043 0308 	orr.w	r3, r3, #8
 80104b4:	b2da      	uxtb	r2, r3
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80104ba:	89fb      	ldrh	r3, [r7, #14]
 80104bc:	2b08      	cmp	r3, #8
 80104be:	d003      	beq.n	80104c8 <ethernet_input+0xa0>
 80104c0:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80104c4:	d014      	beq.n	80104f0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80104c6:	e032      	b.n	801052e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80104ce:	f003 0308 	and.w	r3, r3, #8
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d024      	beq.n	8010520 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80104d6:	8afb      	ldrh	r3, [r7, #22]
 80104d8:	4619      	mov	r1, r3
 80104da:	6878      	ldr	r0, [r7, #4]
 80104dc:	f7f7 fa74 	bl	80079c8 <pbuf_remove_header>
 80104e0:	4603      	mov	r3, r0
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d11e      	bne.n	8010524 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80104e6:	6839      	ldr	r1, [r7, #0]
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	f7fe fea1 	bl	800f230 <ip4_input>
      break;
 80104ee:	e013      	b.n	8010518 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80104f6:	f003 0308 	and.w	r3, r3, #8
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d014      	beq.n	8010528 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80104fe:	8afb      	ldrh	r3, [r7, #22]
 8010500:	4619      	mov	r1, r3
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f7f7 fa60 	bl	80079c8 <pbuf_remove_header>
 8010508:	4603      	mov	r3, r0
 801050a:	2b00      	cmp	r3, #0
 801050c:	d10e      	bne.n	801052c <ethernet_input+0x104>
        etharp_input(p, netif);
 801050e:	6839      	ldr	r1, [r7, #0]
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	f7fe f841 	bl	800e598 <etharp_input>
      break;
 8010516:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010518:	2300      	movs	r3, #0
 801051a:	e00c      	b.n	8010536 <ethernet_input+0x10e>
    goto free_and_return;
 801051c:	bf00      	nop
 801051e:	e006      	b.n	801052e <ethernet_input+0x106>
        goto free_and_return;
 8010520:	bf00      	nop
 8010522:	e004      	b.n	801052e <ethernet_input+0x106>
        goto free_and_return;
 8010524:	bf00      	nop
 8010526:	e002      	b.n	801052e <ethernet_input+0x106>
        goto free_and_return;
 8010528:	bf00      	nop
 801052a:	e000      	b.n	801052e <ethernet_input+0x106>
        goto free_and_return;
 801052c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801052e:	6878      	ldr	r0, [r7, #4]
 8010530:	f7f7 fad0 	bl	8007ad4 <pbuf_free>
  return ERR_OK;
 8010534:	2300      	movs	r3, #0
}
 8010536:	4618      	mov	r0, r3
 8010538:	3718      	adds	r7, #24
 801053a:	46bd      	mov	sp, r7
 801053c:	bd80      	pop	{r7, pc}
 801053e:	bf00      	nop
 8010540:	08014598 	.word	0x08014598

08010544 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010544:	b580      	push	{r7, lr}
 8010546:	b086      	sub	sp, #24
 8010548:	af00      	add	r7, sp, #0
 801054a:	60f8      	str	r0, [r7, #12]
 801054c:	60b9      	str	r1, [r7, #8]
 801054e:	607a      	str	r2, [r7, #4]
 8010550:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010552:	8c3b      	ldrh	r3, [r7, #32]
 8010554:	4618      	mov	r0, r3
 8010556:	f7f5 ff5f 	bl	8006418 <lwip_htons>
 801055a:	4603      	mov	r3, r0
 801055c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801055e:	210e      	movs	r1, #14
 8010560:	68b8      	ldr	r0, [r7, #8]
 8010562:	f7f7 fa21 	bl	80079a8 <pbuf_add_header>
 8010566:	4603      	mov	r3, r0
 8010568:	2b00      	cmp	r3, #0
 801056a:	d125      	bne.n	80105b8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	685b      	ldr	r3, [r3, #4]
 8010570:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010572:	693b      	ldr	r3, [r7, #16]
 8010574:	8afa      	ldrh	r2, [r7, #22]
 8010576:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010578:	693b      	ldr	r3, [r7, #16]
 801057a:	2206      	movs	r2, #6
 801057c:	6839      	ldr	r1, [r7, #0]
 801057e:	4618      	mov	r0, r3
 8010580:	f000 fa79 	bl	8010a76 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010584:	693b      	ldr	r3, [r7, #16]
 8010586:	3306      	adds	r3, #6
 8010588:	2206      	movs	r2, #6
 801058a:	6879      	ldr	r1, [r7, #4]
 801058c:	4618      	mov	r0, r3
 801058e:	f000 fa72 	bl	8010a76 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010598:	2b06      	cmp	r3, #6
 801059a:	d006      	beq.n	80105aa <ethernet_output+0x66>
 801059c:	4b0a      	ldr	r3, [pc, #40]	@ (80105c8 <ethernet_output+0x84>)
 801059e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80105a2:	490a      	ldr	r1, [pc, #40]	@ (80105cc <ethernet_output+0x88>)
 80105a4:	480a      	ldr	r0, [pc, #40]	@ (80105d0 <ethernet_output+0x8c>)
 80105a6:	f000 f915 	bl	80107d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	699b      	ldr	r3, [r3, #24]
 80105ae:	68b9      	ldr	r1, [r7, #8]
 80105b0:	68f8      	ldr	r0, [r7, #12]
 80105b2:	4798      	blx	r3
 80105b4:	4603      	mov	r3, r0
 80105b6:	e002      	b.n	80105be <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80105b8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80105ba:	f06f 0301 	mvn.w	r3, #1
}
 80105be:	4618      	mov	r0, r3
 80105c0:	3718      	adds	r7, #24
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}
 80105c6:	bf00      	nop
 80105c8:	0801440c 	.word	0x0801440c
 80105cc:	08014444 	.word	0x08014444
 80105d0:	08014478 	.word	0x08014478

080105d4 <rand>:
 80105d4:	4b16      	ldr	r3, [pc, #88]	@ (8010630 <rand+0x5c>)
 80105d6:	b510      	push	{r4, lr}
 80105d8:	681c      	ldr	r4, [r3, #0]
 80105da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80105dc:	b9b3      	cbnz	r3, 801060c <rand+0x38>
 80105de:	2018      	movs	r0, #24
 80105e0:	f000 fac0 	bl	8010b64 <malloc>
 80105e4:	4602      	mov	r2, r0
 80105e6:	6320      	str	r0, [r4, #48]	@ 0x30
 80105e8:	b920      	cbnz	r0, 80105f4 <rand+0x20>
 80105ea:	4b12      	ldr	r3, [pc, #72]	@ (8010634 <rand+0x60>)
 80105ec:	4812      	ldr	r0, [pc, #72]	@ (8010638 <rand+0x64>)
 80105ee:	2152      	movs	r1, #82	@ 0x52
 80105f0:	f000 fa50 	bl	8010a94 <__assert_func>
 80105f4:	4911      	ldr	r1, [pc, #68]	@ (801063c <rand+0x68>)
 80105f6:	4b12      	ldr	r3, [pc, #72]	@ (8010640 <rand+0x6c>)
 80105f8:	e9c0 1300 	strd	r1, r3, [r0]
 80105fc:	4b11      	ldr	r3, [pc, #68]	@ (8010644 <rand+0x70>)
 80105fe:	6083      	str	r3, [r0, #8]
 8010600:	230b      	movs	r3, #11
 8010602:	8183      	strh	r3, [r0, #12]
 8010604:	2100      	movs	r1, #0
 8010606:	2001      	movs	r0, #1
 8010608:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801060c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801060e:	480e      	ldr	r0, [pc, #56]	@ (8010648 <rand+0x74>)
 8010610:	690b      	ldr	r3, [r1, #16]
 8010612:	694c      	ldr	r4, [r1, #20]
 8010614:	4a0d      	ldr	r2, [pc, #52]	@ (801064c <rand+0x78>)
 8010616:	4358      	muls	r0, r3
 8010618:	fb02 0004 	mla	r0, r2, r4, r0
 801061c:	fba3 3202 	umull	r3, r2, r3, r2
 8010620:	3301      	adds	r3, #1
 8010622:	eb40 0002 	adc.w	r0, r0, r2
 8010626:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801062a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801062e:	bd10      	pop	{r4, pc}
 8010630:	20000038 	.word	0x20000038
 8010634:	080145a6 	.word	0x080145a6
 8010638:	080145bd 	.word	0x080145bd
 801063c:	abcd330e 	.word	0xabcd330e
 8010640:	e66d1234 	.word	0xe66d1234
 8010644:	0005deec 	.word	0x0005deec
 8010648:	5851f42d 	.word	0x5851f42d
 801064c:	4c957f2d 	.word	0x4c957f2d

08010650 <std>:
 8010650:	2300      	movs	r3, #0
 8010652:	b510      	push	{r4, lr}
 8010654:	4604      	mov	r4, r0
 8010656:	e9c0 3300 	strd	r3, r3, [r0]
 801065a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801065e:	6083      	str	r3, [r0, #8]
 8010660:	8181      	strh	r1, [r0, #12]
 8010662:	6643      	str	r3, [r0, #100]	@ 0x64
 8010664:	81c2      	strh	r2, [r0, #14]
 8010666:	6183      	str	r3, [r0, #24]
 8010668:	4619      	mov	r1, r3
 801066a:	2208      	movs	r2, #8
 801066c:	305c      	adds	r0, #92	@ 0x5c
 801066e:	f000 f950 	bl	8010912 <memset>
 8010672:	4b0d      	ldr	r3, [pc, #52]	@ (80106a8 <std+0x58>)
 8010674:	6263      	str	r3, [r4, #36]	@ 0x24
 8010676:	4b0d      	ldr	r3, [pc, #52]	@ (80106ac <std+0x5c>)
 8010678:	62a3      	str	r3, [r4, #40]	@ 0x28
 801067a:	4b0d      	ldr	r3, [pc, #52]	@ (80106b0 <std+0x60>)
 801067c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801067e:	4b0d      	ldr	r3, [pc, #52]	@ (80106b4 <std+0x64>)
 8010680:	6323      	str	r3, [r4, #48]	@ 0x30
 8010682:	4b0d      	ldr	r3, [pc, #52]	@ (80106b8 <std+0x68>)
 8010684:	6224      	str	r4, [r4, #32]
 8010686:	429c      	cmp	r4, r3
 8010688:	d006      	beq.n	8010698 <std+0x48>
 801068a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801068e:	4294      	cmp	r4, r2
 8010690:	d002      	beq.n	8010698 <std+0x48>
 8010692:	33d0      	adds	r3, #208	@ 0xd0
 8010694:	429c      	cmp	r4, r3
 8010696:	d105      	bne.n	80106a4 <std+0x54>
 8010698:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801069c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106a0:	f000 b9de 	b.w	8010a60 <__retarget_lock_init_recursive>
 80106a4:	bd10      	pop	{r4, pc}
 80106a6:	bf00      	nop
 80106a8:	08010839 	.word	0x08010839
 80106ac:	0801085b 	.word	0x0801085b
 80106b0:	08010893 	.word	0x08010893
 80106b4:	080108b7 	.word	0x080108b7
 80106b8:	20008978 	.word	0x20008978

080106bc <stdio_exit_handler>:
 80106bc:	4a02      	ldr	r2, [pc, #8]	@ (80106c8 <stdio_exit_handler+0xc>)
 80106be:	4903      	ldr	r1, [pc, #12]	@ (80106cc <stdio_exit_handler+0x10>)
 80106c0:	4803      	ldr	r0, [pc, #12]	@ (80106d0 <stdio_exit_handler+0x14>)
 80106c2:	f000 b869 	b.w	8010798 <_fwalk_sglue>
 80106c6:	bf00      	nop
 80106c8:	2000002c 	.word	0x2000002c
 80106cc:	08011629 	.word	0x08011629
 80106d0:	2000003c 	.word	0x2000003c

080106d4 <cleanup_stdio>:
 80106d4:	6841      	ldr	r1, [r0, #4]
 80106d6:	4b0c      	ldr	r3, [pc, #48]	@ (8010708 <cleanup_stdio+0x34>)
 80106d8:	4299      	cmp	r1, r3
 80106da:	b510      	push	{r4, lr}
 80106dc:	4604      	mov	r4, r0
 80106de:	d001      	beq.n	80106e4 <cleanup_stdio+0x10>
 80106e0:	f000 ffa2 	bl	8011628 <_fflush_r>
 80106e4:	68a1      	ldr	r1, [r4, #8]
 80106e6:	4b09      	ldr	r3, [pc, #36]	@ (801070c <cleanup_stdio+0x38>)
 80106e8:	4299      	cmp	r1, r3
 80106ea:	d002      	beq.n	80106f2 <cleanup_stdio+0x1e>
 80106ec:	4620      	mov	r0, r4
 80106ee:	f000 ff9b 	bl	8011628 <_fflush_r>
 80106f2:	68e1      	ldr	r1, [r4, #12]
 80106f4:	4b06      	ldr	r3, [pc, #24]	@ (8010710 <cleanup_stdio+0x3c>)
 80106f6:	4299      	cmp	r1, r3
 80106f8:	d004      	beq.n	8010704 <cleanup_stdio+0x30>
 80106fa:	4620      	mov	r0, r4
 80106fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010700:	f000 bf92 	b.w	8011628 <_fflush_r>
 8010704:	bd10      	pop	{r4, pc}
 8010706:	bf00      	nop
 8010708:	20008978 	.word	0x20008978
 801070c:	200089e0 	.word	0x200089e0
 8010710:	20008a48 	.word	0x20008a48

08010714 <global_stdio_init.part.0>:
 8010714:	b510      	push	{r4, lr}
 8010716:	4b0b      	ldr	r3, [pc, #44]	@ (8010744 <global_stdio_init.part.0+0x30>)
 8010718:	4c0b      	ldr	r4, [pc, #44]	@ (8010748 <global_stdio_init.part.0+0x34>)
 801071a:	4a0c      	ldr	r2, [pc, #48]	@ (801074c <global_stdio_init.part.0+0x38>)
 801071c:	601a      	str	r2, [r3, #0]
 801071e:	4620      	mov	r0, r4
 8010720:	2200      	movs	r2, #0
 8010722:	2104      	movs	r1, #4
 8010724:	f7ff ff94 	bl	8010650 <std>
 8010728:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801072c:	2201      	movs	r2, #1
 801072e:	2109      	movs	r1, #9
 8010730:	f7ff ff8e 	bl	8010650 <std>
 8010734:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010738:	2202      	movs	r2, #2
 801073a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801073e:	2112      	movs	r1, #18
 8010740:	f7ff bf86 	b.w	8010650 <std>
 8010744:	20008ab0 	.word	0x20008ab0
 8010748:	20008978 	.word	0x20008978
 801074c:	080106bd 	.word	0x080106bd

08010750 <__sfp_lock_acquire>:
 8010750:	4801      	ldr	r0, [pc, #4]	@ (8010758 <__sfp_lock_acquire+0x8>)
 8010752:	f000 b986 	b.w	8010a62 <__retarget_lock_acquire_recursive>
 8010756:	bf00      	nop
 8010758:	20008ab9 	.word	0x20008ab9

0801075c <__sfp_lock_release>:
 801075c:	4801      	ldr	r0, [pc, #4]	@ (8010764 <__sfp_lock_release+0x8>)
 801075e:	f000 b981 	b.w	8010a64 <__retarget_lock_release_recursive>
 8010762:	bf00      	nop
 8010764:	20008ab9 	.word	0x20008ab9

08010768 <__sinit>:
 8010768:	b510      	push	{r4, lr}
 801076a:	4604      	mov	r4, r0
 801076c:	f7ff fff0 	bl	8010750 <__sfp_lock_acquire>
 8010770:	6a23      	ldr	r3, [r4, #32]
 8010772:	b11b      	cbz	r3, 801077c <__sinit+0x14>
 8010774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010778:	f7ff bff0 	b.w	801075c <__sfp_lock_release>
 801077c:	4b04      	ldr	r3, [pc, #16]	@ (8010790 <__sinit+0x28>)
 801077e:	6223      	str	r3, [r4, #32]
 8010780:	4b04      	ldr	r3, [pc, #16]	@ (8010794 <__sinit+0x2c>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d1f5      	bne.n	8010774 <__sinit+0xc>
 8010788:	f7ff ffc4 	bl	8010714 <global_stdio_init.part.0>
 801078c:	e7f2      	b.n	8010774 <__sinit+0xc>
 801078e:	bf00      	nop
 8010790:	080106d5 	.word	0x080106d5
 8010794:	20008ab0 	.word	0x20008ab0

08010798 <_fwalk_sglue>:
 8010798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801079c:	4607      	mov	r7, r0
 801079e:	4688      	mov	r8, r1
 80107a0:	4614      	mov	r4, r2
 80107a2:	2600      	movs	r6, #0
 80107a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80107a8:	f1b9 0901 	subs.w	r9, r9, #1
 80107ac:	d505      	bpl.n	80107ba <_fwalk_sglue+0x22>
 80107ae:	6824      	ldr	r4, [r4, #0]
 80107b0:	2c00      	cmp	r4, #0
 80107b2:	d1f7      	bne.n	80107a4 <_fwalk_sglue+0xc>
 80107b4:	4630      	mov	r0, r6
 80107b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107ba:	89ab      	ldrh	r3, [r5, #12]
 80107bc:	2b01      	cmp	r3, #1
 80107be:	d907      	bls.n	80107d0 <_fwalk_sglue+0x38>
 80107c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80107c4:	3301      	adds	r3, #1
 80107c6:	d003      	beq.n	80107d0 <_fwalk_sglue+0x38>
 80107c8:	4629      	mov	r1, r5
 80107ca:	4638      	mov	r0, r7
 80107cc:	47c0      	blx	r8
 80107ce:	4306      	orrs	r6, r0
 80107d0:	3568      	adds	r5, #104	@ 0x68
 80107d2:	e7e9      	b.n	80107a8 <_fwalk_sglue+0x10>

080107d4 <iprintf>:
 80107d4:	b40f      	push	{r0, r1, r2, r3}
 80107d6:	b507      	push	{r0, r1, r2, lr}
 80107d8:	4906      	ldr	r1, [pc, #24]	@ (80107f4 <iprintf+0x20>)
 80107da:	ab04      	add	r3, sp, #16
 80107dc:	6808      	ldr	r0, [r1, #0]
 80107de:	f853 2b04 	ldr.w	r2, [r3], #4
 80107e2:	6881      	ldr	r1, [r0, #8]
 80107e4:	9301      	str	r3, [sp, #4]
 80107e6:	f000 fbf5 	bl	8010fd4 <_vfiprintf_r>
 80107ea:	b003      	add	sp, #12
 80107ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80107f0:	b004      	add	sp, #16
 80107f2:	4770      	bx	lr
 80107f4:	20000038 	.word	0x20000038

080107f8 <siprintf>:
 80107f8:	b40e      	push	{r1, r2, r3}
 80107fa:	b500      	push	{lr}
 80107fc:	b09c      	sub	sp, #112	@ 0x70
 80107fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8010800:	9002      	str	r0, [sp, #8]
 8010802:	9006      	str	r0, [sp, #24]
 8010804:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010808:	4809      	ldr	r0, [pc, #36]	@ (8010830 <siprintf+0x38>)
 801080a:	9107      	str	r1, [sp, #28]
 801080c:	9104      	str	r1, [sp, #16]
 801080e:	4909      	ldr	r1, [pc, #36]	@ (8010834 <siprintf+0x3c>)
 8010810:	f853 2b04 	ldr.w	r2, [r3], #4
 8010814:	9105      	str	r1, [sp, #20]
 8010816:	6800      	ldr	r0, [r0, #0]
 8010818:	9301      	str	r3, [sp, #4]
 801081a:	a902      	add	r1, sp, #8
 801081c:	f000 fab4 	bl	8010d88 <_svfiprintf_r>
 8010820:	9b02      	ldr	r3, [sp, #8]
 8010822:	2200      	movs	r2, #0
 8010824:	701a      	strb	r2, [r3, #0]
 8010826:	b01c      	add	sp, #112	@ 0x70
 8010828:	f85d eb04 	ldr.w	lr, [sp], #4
 801082c:	b003      	add	sp, #12
 801082e:	4770      	bx	lr
 8010830:	20000038 	.word	0x20000038
 8010834:	ffff0208 	.word	0xffff0208

08010838 <__sread>:
 8010838:	b510      	push	{r4, lr}
 801083a:	460c      	mov	r4, r1
 801083c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010840:	f000 f8c6 	bl	80109d0 <_read_r>
 8010844:	2800      	cmp	r0, #0
 8010846:	bfab      	itete	ge
 8010848:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801084a:	89a3      	ldrhlt	r3, [r4, #12]
 801084c:	181b      	addge	r3, r3, r0
 801084e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010852:	bfac      	ite	ge
 8010854:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010856:	81a3      	strhlt	r3, [r4, #12]
 8010858:	bd10      	pop	{r4, pc}

0801085a <__swrite>:
 801085a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801085e:	461f      	mov	r7, r3
 8010860:	898b      	ldrh	r3, [r1, #12]
 8010862:	05db      	lsls	r3, r3, #23
 8010864:	4605      	mov	r5, r0
 8010866:	460c      	mov	r4, r1
 8010868:	4616      	mov	r6, r2
 801086a:	d505      	bpl.n	8010878 <__swrite+0x1e>
 801086c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010870:	2302      	movs	r3, #2
 8010872:	2200      	movs	r2, #0
 8010874:	f000 f89a 	bl	80109ac <_lseek_r>
 8010878:	89a3      	ldrh	r3, [r4, #12]
 801087a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801087e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010882:	81a3      	strh	r3, [r4, #12]
 8010884:	4632      	mov	r2, r6
 8010886:	463b      	mov	r3, r7
 8010888:	4628      	mov	r0, r5
 801088a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801088e:	f000 b8b1 	b.w	80109f4 <_write_r>

08010892 <__sseek>:
 8010892:	b510      	push	{r4, lr}
 8010894:	460c      	mov	r4, r1
 8010896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801089a:	f000 f887 	bl	80109ac <_lseek_r>
 801089e:	1c43      	adds	r3, r0, #1
 80108a0:	89a3      	ldrh	r3, [r4, #12]
 80108a2:	bf15      	itete	ne
 80108a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80108a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80108aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80108ae:	81a3      	strheq	r3, [r4, #12]
 80108b0:	bf18      	it	ne
 80108b2:	81a3      	strhne	r3, [r4, #12]
 80108b4:	bd10      	pop	{r4, pc}

080108b6 <__sclose>:
 80108b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108ba:	f000 b867 	b.w	801098c <_close_r>

080108be <memcmp>:
 80108be:	b510      	push	{r4, lr}
 80108c0:	3901      	subs	r1, #1
 80108c2:	4402      	add	r2, r0
 80108c4:	4290      	cmp	r0, r2
 80108c6:	d101      	bne.n	80108cc <memcmp+0xe>
 80108c8:	2000      	movs	r0, #0
 80108ca:	e005      	b.n	80108d8 <memcmp+0x1a>
 80108cc:	7803      	ldrb	r3, [r0, #0]
 80108ce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80108d2:	42a3      	cmp	r3, r4
 80108d4:	d001      	beq.n	80108da <memcmp+0x1c>
 80108d6:	1b18      	subs	r0, r3, r4
 80108d8:	bd10      	pop	{r4, pc}
 80108da:	3001      	adds	r0, #1
 80108dc:	e7f2      	b.n	80108c4 <memcmp+0x6>

080108de <memmove>:
 80108de:	4288      	cmp	r0, r1
 80108e0:	b510      	push	{r4, lr}
 80108e2:	eb01 0402 	add.w	r4, r1, r2
 80108e6:	d902      	bls.n	80108ee <memmove+0x10>
 80108e8:	4284      	cmp	r4, r0
 80108ea:	4623      	mov	r3, r4
 80108ec:	d807      	bhi.n	80108fe <memmove+0x20>
 80108ee:	1e43      	subs	r3, r0, #1
 80108f0:	42a1      	cmp	r1, r4
 80108f2:	d008      	beq.n	8010906 <memmove+0x28>
 80108f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80108f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80108fc:	e7f8      	b.n	80108f0 <memmove+0x12>
 80108fe:	4402      	add	r2, r0
 8010900:	4601      	mov	r1, r0
 8010902:	428a      	cmp	r2, r1
 8010904:	d100      	bne.n	8010908 <memmove+0x2a>
 8010906:	bd10      	pop	{r4, pc}
 8010908:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801090c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010910:	e7f7      	b.n	8010902 <memmove+0x24>

08010912 <memset>:
 8010912:	4402      	add	r2, r0
 8010914:	4603      	mov	r3, r0
 8010916:	4293      	cmp	r3, r2
 8010918:	d100      	bne.n	801091c <memset+0xa>
 801091a:	4770      	bx	lr
 801091c:	f803 1b01 	strb.w	r1, [r3], #1
 8010920:	e7f9      	b.n	8010916 <memset+0x4>

08010922 <strcat>:
 8010922:	b510      	push	{r4, lr}
 8010924:	4602      	mov	r2, r0
 8010926:	7814      	ldrb	r4, [r2, #0]
 8010928:	4613      	mov	r3, r2
 801092a:	3201      	adds	r2, #1
 801092c:	2c00      	cmp	r4, #0
 801092e:	d1fa      	bne.n	8010926 <strcat+0x4>
 8010930:	3b01      	subs	r3, #1
 8010932:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010936:	f803 2f01 	strb.w	r2, [r3, #1]!
 801093a:	2a00      	cmp	r2, #0
 801093c:	d1f9      	bne.n	8010932 <strcat+0x10>
 801093e:	bd10      	pop	{r4, pc}

08010940 <strncmp>:
 8010940:	b510      	push	{r4, lr}
 8010942:	b16a      	cbz	r2, 8010960 <strncmp+0x20>
 8010944:	3901      	subs	r1, #1
 8010946:	1884      	adds	r4, r0, r2
 8010948:	f810 2b01 	ldrb.w	r2, [r0], #1
 801094c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010950:	429a      	cmp	r2, r3
 8010952:	d103      	bne.n	801095c <strncmp+0x1c>
 8010954:	42a0      	cmp	r0, r4
 8010956:	d001      	beq.n	801095c <strncmp+0x1c>
 8010958:	2a00      	cmp	r2, #0
 801095a:	d1f5      	bne.n	8010948 <strncmp+0x8>
 801095c:	1ad0      	subs	r0, r2, r3
 801095e:	bd10      	pop	{r4, pc}
 8010960:	4610      	mov	r0, r2
 8010962:	e7fc      	b.n	801095e <strncmp+0x1e>

08010964 <strncpy>:
 8010964:	b510      	push	{r4, lr}
 8010966:	3901      	subs	r1, #1
 8010968:	4603      	mov	r3, r0
 801096a:	b132      	cbz	r2, 801097a <strncpy+0x16>
 801096c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010970:	f803 4b01 	strb.w	r4, [r3], #1
 8010974:	3a01      	subs	r2, #1
 8010976:	2c00      	cmp	r4, #0
 8010978:	d1f7      	bne.n	801096a <strncpy+0x6>
 801097a:	441a      	add	r2, r3
 801097c:	2100      	movs	r1, #0
 801097e:	4293      	cmp	r3, r2
 8010980:	d100      	bne.n	8010984 <strncpy+0x20>
 8010982:	bd10      	pop	{r4, pc}
 8010984:	f803 1b01 	strb.w	r1, [r3], #1
 8010988:	e7f9      	b.n	801097e <strncpy+0x1a>
	...

0801098c <_close_r>:
 801098c:	b538      	push	{r3, r4, r5, lr}
 801098e:	4d06      	ldr	r5, [pc, #24]	@ (80109a8 <_close_r+0x1c>)
 8010990:	2300      	movs	r3, #0
 8010992:	4604      	mov	r4, r0
 8010994:	4608      	mov	r0, r1
 8010996:	602b      	str	r3, [r5, #0]
 8010998:	f7f0 f9ce 	bl	8000d38 <_close>
 801099c:	1c43      	adds	r3, r0, #1
 801099e:	d102      	bne.n	80109a6 <_close_r+0x1a>
 80109a0:	682b      	ldr	r3, [r5, #0]
 80109a2:	b103      	cbz	r3, 80109a6 <_close_r+0x1a>
 80109a4:	6023      	str	r3, [r4, #0]
 80109a6:	bd38      	pop	{r3, r4, r5, pc}
 80109a8:	20008ab4 	.word	0x20008ab4

080109ac <_lseek_r>:
 80109ac:	b538      	push	{r3, r4, r5, lr}
 80109ae:	4d07      	ldr	r5, [pc, #28]	@ (80109cc <_lseek_r+0x20>)
 80109b0:	4604      	mov	r4, r0
 80109b2:	4608      	mov	r0, r1
 80109b4:	4611      	mov	r1, r2
 80109b6:	2200      	movs	r2, #0
 80109b8:	602a      	str	r2, [r5, #0]
 80109ba:	461a      	mov	r2, r3
 80109bc:	f7f0 f9e3 	bl	8000d86 <_lseek>
 80109c0:	1c43      	adds	r3, r0, #1
 80109c2:	d102      	bne.n	80109ca <_lseek_r+0x1e>
 80109c4:	682b      	ldr	r3, [r5, #0]
 80109c6:	b103      	cbz	r3, 80109ca <_lseek_r+0x1e>
 80109c8:	6023      	str	r3, [r4, #0]
 80109ca:	bd38      	pop	{r3, r4, r5, pc}
 80109cc:	20008ab4 	.word	0x20008ab4

080109d0 <_read_r>:
 80109d0:	b538      	push	{r3, r4, r5, lr}
 80109d2:	4d07      	ldr	r5, [pc, #28]	@ (80109f0 <_read_r+0x20>)
 80109d4:	4604      	mov	r4, r0
 80109d6:	4608      	mov	r0, r1
 80109d8:	4611      	mov	r1, r2
 80109da:	2200      	movs	r2, #0
 80109dc:	602a      	str	r2, [r5, #0]
 80109de:	461a      	mov	r2, r3
 80109e0:	f7f0 f971 	bl	8000cc6 <_read>
 80109e4:	1c43      	adds	r3, r0, #1
 80109e6:	d102      	bne.n	80109ee <_read_r+0x1e>
 80109e8:	682b      	ldr	r3, [r5, #0]
 80109ea:	b103      	cbz	r3, 80109ee <_read_r+0x1e>
 80109ec:	6023      	str	r3, [r4, #0]
 80109ee:	bd38      	pop	{r3, r4, r5, pc}
 80109f0:	20008ab4 	.word	0x20008ab4

080109f4 <_write_r>:
 80109f4:	b538      	push	{r3, r4, r5, lr}
 80109f6:	4d07      	ldr	r5, [pc, #28]	@ (8010a14 <_write_r+0x20>)
 80109f8:	4604      	mov	r4, r0
 80109fa:	4608      	mov	r0, r1
 80109fc:	4611      	mov	r1, r2
 80109fe:	2200      	movs	r2, #0
 8010a00:	602a      	str	r2, [r5, #0]
 8010a02:	461a      	mov	r2, r3
 8010a04:	f7f0 f97c 	bl	8000d00 <_write>
 8010a08:	1c43      	adds	r3, r0, #1
 8010a0a:	d102      	bne.n	8010a12 <_write_r+0x1e>
 8010a0c:	682b      	ldr	r3, [r5, #0]
 8010a0e:	b103      	cbz	r3, 8010a12 <_write_r+0x1e>
 8010a10:	6023      	str	r3, [r4, #0]
 8010a12:	bd38      	pop	{r3, r4, r5, pc}
 8010a14:	20008ab4 	.word	0x20008ab4

08010a18 <__libc_init_array>:
 8010a18:	b570      	push	{r4, r5, r6, lr}
 8010a1a:	4d0d      	ldr	r5, [pc, #52]	@ (8010a50 <__libc_init_array+0x38>)
 8010a1c:	4c0d      	ldr	r4, [pc, #52]	@ (8010a54 <__libc_init_array+0x3c>)
 8010a1e:	1b64      	subs	r4, r4, r5
 8010a20:	10a4      	asrs	r4, r4, #2
 8010a22:	2600      	movs	r6, #0
 8010a24:	42a6      	cmp	r6, r4
 8010a26:	d109      	bne.n	8010a3c <__libc_init_array+0x24>
 8010a28:	4d0b      	ldr	r5, [pc, #44]	@ (8010a58 <__libc_init_array+0x40>)
 8010a2a:	4c0c      	ldr	r4, [pc, #48]	@ (8010a5c <__libc_init_array+0x44>)
 8010a2c:	f000 ffe0 	bl	80119f0 <_init>
 8010a30:	1b64      	subs	r4, r4, r5
 8010a32:	10a4      	asrs	r4, r4, #2
 8010a34:	2600      	movs	r6, #0
 8010a36:	42a6      	cmp	r6, r4
 8010a38:	d105      	bne.n	8010a46 <__libc_init_array+0x2e>
 8010a3a:	bd70      	pop	{r4, r5, r6, pc}
 8010a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a40:	4798      	blx	r3
 8010a42:	3601      	adds	r6, #1
 8010a44:	e7ee      	b.n	8010a24 <__libc_init_array+0xc>
 8010a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a4a:	4798      	blx	r3
 8010a4c:	3601      	adds	r6, #1
 8010a4e:	e7f2      	b.n	8010a36 <__libc_init_array+0x1e>
 8010a50:	0801468c 	.word	0x0801468c
 8010a54:	0801468c 	.word	0x0801468c
 8010a58:	0801468c 	.word	0x0801468c
 8010a5c:	08014690 	.word	0x08014690

08010a60 <__retarget_lock_init_recursive>:
 8010a60:	4770      	bx	lr

08010a62 <__retarget_lock_acquire_recursive>:
 8010a62:	4770      	bx	lr

08010a64 <__retarget_lock_release_recursive>:
 8010a64:	4770      	bx	lr

08010a66 <strcpy>:
 8010a66:	4603      	mov	r3, r0
 8010a68:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010a6c:	f803 2b01 	strb.w	r2, [r3], #1
 8010a70:	2a00      	cmp	r2, #0
 8010a72:	d1f9      	bne.n	8010a68 <strcpy+0x2>
 8010a74:	4770      	bx	lr

08010a76 <memcpy>:
 8010a76:	440a      	add	r2, r1
 8010a78:	4291      	cmp	r1, r2
 8010a7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8010a7e:	d100      	bne.n	8010a82 <memcpy+0xc>
 8010a80:	4770      	bx	lr
 8010a82:	b510      	push	{r4, lr}
 8010a84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010a8c:	4291      	cmp	r1, r2
 8010a8e:	d1f9      	bne.n	8010a84 <memcpy+0xe>
 8010a90:	bd10      	pop	{r4, pc}
	...

08010a94 <__assert_func>:
 8010a94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a96:	4614      	mov	r4, r2
 8010a98:	461a      	mov	r2, r3
 8010a9a:	4b09      	ldr	r3, [pc, #36]	@ (8010ac0 <__assert_func+0x2c>)
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	4605      	mov	r5, r0
 8010aa0:	68d8      	ldr	r0, [r3, #12]
 8010aa2:	b954      	cbnz	r4, 8010aba <__assert_func+0x26>
 8010aa4:	4b07      	ldr	r3, [pc, #28]	@ (8010ac4 <__assert_func+0x30>)
 8010aa6:	461c      	mov	r4, r3
 8010aa8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010aac:	9100      	str	r1, [sp, #0]
 8010aae:	462b      	mov	r3, r5
 8010ab0:	4905      	ldr	r1, [pc, #20]	@ (8010ac8 <__assert_func+0x34>)
 8010ab2:	f000 fde1 	bl	8011678 <fiprintf>
 8010ab6:	f000 fe95 	bl	80117e4 <abort>
 8010aba:	4b04      	ldr	r3, [pc, #16]	@ (8010acc <__assert_func+0x38>)
 8010abc:	e7f4      	b.n	8010aa8 <__assert_func+0x14>
 8010abe:	bf00      	nop
 8010ac0:	20000038 	.word	0x20000038
 8010ac4:	08014650 	.word	0x08014650
 8010ac8:	08014622 	.word	0x08014622
 8010acc:	08014615 	.word	0x08014615

08010ad0 <_free_r>:
 8010ad0:	b538      	push	{r3, r4, r5, lr}
 8010ad2:	4605      	mov	r5, r0
 8010ad4:	2900      	cmp	r1, #0
 8010ad6:	d041      	beq.n	8010b5c <_free_r+0x8c>
 8010ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010adc:	1f0c      	subs	r4, r1, #4
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	bfb8      	it	lt
 8010ae2:	18e4      	addlt	r4, r4, r3
 8010ae4:	f000 f8e8 	bl	8010cb8 <__malloc_lock>
 8010ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8010b60 <_free_r+0x90>)
 8010aea:	6813      	ldr	r3, [r2, #0]
 8010aec:	b933      	cbnz	r3, 8010afc <_free_r+0x2c>
 8010aee:	6063      	str	r3, [r4, #4]
 8010af0:	6014      	str	r4, [r2, #0]
 8010af2:	4628      	mov	r0, r5
 8010af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010af8:	f000 b8e4 	b.w	8010cc4 <__malloc_unlock>
 8010afc:	42a3      	cmp	r3, r4
 8010afe:	d908      	bls.n	8010b12 <_free_r+0x42>
 8010b00:	6820      	ldr	r0, [r4, #0]
 8010b02:	1821      	adds	r1, r4, r0
 8010b04:	428b      	cmp	r3, r1
 8010b06:	bf01      	itttt	eq
 8010b08:	6819      	ldreq	r1, [r3, #0]
 8010b0a:	685b      	ldreq	r3, [r3, #4]
 8010b0c:	1809      	addeq	r1, r1, r0
 8010b0e:	6021      	streq	r1, [r4, #0]
 8010b10:	e7ed      	b.n	8010aee <_free_r+0x1e>
 8010b12:	461a      	mov	r2, r3
 8010b14:	685b      	ldr	r3, [r3, #4]
 8010b16:	b10b      	cbz	r3, 8010b1c <_free_r+0x4c>
 8010b18:	42a3      	cmp	r3, r4
 8010b1a:	d9fa      	bls.n	8010b12 <_free_r+0x42>
 8010b1c:	6811      	ldr	r1, [r2, #0]
 8010b1e:	1850      	adds	r0, r2, r1
 8010b20:	42a0      	cmp	r0, r4
 8010b22:	d10b      	bne.n	8010b3c <_free_r+0x6c>
 8010b24:	6820      	ldr	r0, [r4, #0]
 8010b26:	4401      	add	r1, r0
 8010b28:	1850      	adds	r0, r2, r1
 8010b2a:	4283      	cmp	r3, r0
 8010b2c:	6011      	str	r1, [r2, #0]
 8010b2e:	d1e0      	bne.n	8010af2 <_free_r+0x22>
 8010b30:	6818      	ldr	r0, [r3, #0]
 8010b32:	685b      	ldr	r3, [r3, #4]
 8010b34:	6053      	str	r3, [r2, #4]
 8010b36:	4408      	add	r0, r1
 8010b38:	6010      	str	r0, [r2, #0]
 8010b3a:	e7da      	b.n	8010af2 <_free_r+0x22>
 8010b3c:	d902      	bls.n	8010b44 <_free_r+0x74>
 8010b3e:	230c      	movs	r3, #12
 8010b40:	602b      	str	r3, [r5, #0]
 8010b42:	e7d6      	b.n	8010af2 <_free_r+0x22>
 8010b44:	6820      	ldr	r0, [r4, #0]
 8010b46:	1821      	adds	r1, r4, r0
 8010b48:	428b      	cmp	r3, r1
 8010b4a:	bf04      	itt	eq
 8010b4c:	6819      	ldreq	r1, [r3, #0]
 8010b4e:	685b      	ldreq	r3, [r3, #4]
 8010b50:	6063      	str	r3, [r4, #4]
 8010b52:	bf04      	itt	eq
 8010b54:	1809      	addeq	r1, r1, r0
 8010b56:	6021      	streq	r1, [r4, #0]
 8010b58:	6054      	str	r4, [r2, #4]
 8010b5a:	e7ca      	b.n	8010af2 <_free_r+0x22>
 8010b5c:	bd38      	pop	{r3, r4, r5, pc}
 8010b5e:	bf00      	nop
 8010b60:	20008ac0 	.word	0x20008ac0

08010b64 <malloc>:
 8010b64:	4b02      	ldr	r3, [pc, #8]	@ (8010b70 <malloc+0xc>)
 8010b66:	4601      	mov	r1, r0
 8010b68:	6818      	ldr	r0, [r3, #0]
 8010b6a:	f000 b825 	b.w	8010bb8 <_malloc_r>
 8010b6e:	bf00      	nop
 8010b70:	20000038 	.word	0x20000038

08010b74 <sbrk_aligned>:
 8010b74:	b570      	push	{r4, r5, r6, lr}
 8010b76:	4e0f      	ldr	r6, [pc, #60]	@ (8010bb4 <sbrk_aligned+0x40>)
 8010b78:	460c      	mov	r4, r1
 8010b7a:	6831      	ldr	r1, [r6, #0]
 8010b7c:	4605      	mov	r5, r0
 8010b7e:	b911      	cbnz	r1, 8010b86 <sbrk_aligned+0x12>
 8010b80:	f000 fe20 	bl	80117c4 <_sbrk_r>
 8010b84:	6030      	str	r0, [r6, #0]
 8010b86:	4621      	mov	r1, r4
 8010b88:	4628      	mov	r0, r5
 8010b8a:	f000 fe1b 	bl	80117c4 <_sbrk_r>
 8010b8e:	1c43      	adds	r3, r0, #1
 8010b90:	d103      	bne.n	8010b9a <sbrk_aligned+0x26>
 8010b92:	f04f 34ff 	mov.w	r4, #4294967295
 8010b96:	4620      	mov	r0, r4
 8010b98:	bd70      	pop	{r4, r5, r6, pc}
 8010b9a:	1cc4      	adds	r4, r0, #3
 8010b9c:	f024 0403 	bic.w	r4, r4, #3
 8010ba0:	42a0      	cmp	r0, r4
 8010ba2:	d0f8      	beq.n	8010b96 <sbrk_aligned+0x22>
 8010ba4:	1a21      	subs	r1, r4, r0
 8010ba6:	4628      	mov	r0, r5
 8010ba8:	f000 fe0c 	bl	80117c4 <_sbrk_r>
 8010bac:	3001      	adds	r0, #1
 8010bae:	d1f2      	bne.n	8010b96 <sbrk_aligned+0x22>
 8010bb0:	e7ef      	b.n	8010b92 <sbrk_aligned+0x1e>
 8010bb2:	bf00      	nop
 8010bb4:	20008abc 	.word	0x20008abc

08010bb8 <_malloc_r>:
 8010bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bbc:	1ccd      	adds	r5, r1, #3
 8010bbe:	f025 0503 	bic.w	r5, r5, #3
 8010bc2:	3508      	adds	r5, #8
 8010bc4:	2d0c      	cmp	r5, #12
 8010bc6:	bf38      	it	cc
 8010bc8:	250c      	movcc	r5, #12
 8010bca:	2d00      	cmp	r5, #0
 8010bcc:	4606      	mov	r6, r0
 8010bce:	db01      	blt.n	8010bd4 <_malloc_r+0x1c>
 8010bd0:	42a9      	cmp	r1, r5
 8010bd2:	d904      	bls.n	8010bde <_malloc_r+0x26>
 8010bd4:	230c      	movs	r3, #12
 8010bd6:	6033      	str	r3, [r6, #0]
 8010bd8:	2000      	movs	r0, #0
 8010bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010cb4 <_malloc_r+0xfc>
 8010be2:	f000 f869 	bl	8010cb8 <__malloc_lock>
 8010be6:	f8d8 3000 	ldr.w	r3, [r8]
 8010bea:	461c      	mov	r4, r3
 8010bec:	bb44      	cbnz	r4, 8010c40 <_malloc_r+0x88>
 8010bee:	4629      	mov	r1, r5
 8010bf0:	4630      	mov	r0, r6
 8010bf2:	f7ff ffbf 	bl	8010b74 <sbrk_aligned>
 8010bf6:	1c43      	adds	r3, r0, #1
 8010bf8:	4604      	mov	r4, r0
 8010bfa:	d158      	bne.n	8010cae <_malloc_r+0xf6>
 8010bfc:	f8d8 4000 	ldr.w	r4, [r8]
 8010c00:	4627      	mov	r7, r4
 8010c02:	2f00      	cmp	r7, #0
 8010c04:	d143      	bne.n	8010c8e <_malloc_r+0xd6>
 8010c06:	2c00      	cmp	r4, #0
 8010c08:	d04b      	beq.n	8010ca2 <_malloc_r+0xea>
 8010c0a:	6823      	ldr	r3, [r4, #0]
 8010c0c:	4639      	mov	r1, r7
 8010c0e:	4630      	mov	r0, r6
 8010c10:	eb04 0903 	add.w	r9, r4, r3
 8010c14:	f000 fdd6 	bl	80117c4 <_sbrk_r>
 8010c18:	4581      	cmp	r9, r0
 8010c1a:	d142      	bne.n	8010ca2 <_malloc_r+0xea>
 8010c1c:	6821      	ldr	r1, [r4, #0]
 8010c1e:	1a6d      	subs	r5, r5, r1
 8010c20:	4629      	mov	r1, r5
 8010c22:	4630      	mov	r0, r6
 8010c24:	f7ff ffa6 	bl	8010b74 <sbrk_aligned>
 8010c28:	3001      	adds	r0, #1
 8010c2a:	d03a      	beq.n	8010ca2 <_malloc_r+0xea>
 8010c2c:	6823      	ldr	r3, [r4, #0]
 8010c2e:	442b      	add	r3, r5
 8010c30:	6023      	str	r3, [r4, #0]
 8010c32:	f8d8 3000 	ldr.w	r3, [r8]
 8010c36:	685a      	ldr	r2, [r3, #4]
 8010c38:	bb62      	cbnz	r2, 8010c94 <_malloc_r+0xdc>
 8010c3a:	f8c8 7000 	str.w	r7, [r8]
 8010c3e:	e00f      	b.n	8010c60 <_malloc_r+0xa8>
 8010c40:	6822      	ldr	r2, [r4, #0]
 8010c42:	1b52      	subs	r2, r2, r5
 8010c44:	d420      	bmi.n	8010c88 <_malloc_r+0xd0>
 8010c46:	2a0b      	cmp	r2, #11
 8010c48:	d917      	bls.n	8010c7a <_malloc_r+0xc2>
 8010c4a:	1961      	adds	r1, r4, r5
 8010c4c:	42a3      	cmp	r3, r4
 8010c4e:	6025      	str	r5, [r4, #0]
 8010c50:	bf18      	it	ne
 8010c52:	6059      	strne	r1, [r3, #4]
 8010c54:	6863      	ldr	r3, [r4, #4]
 8010c56:	bf08      	it	eq
 8010c58:	f8c8 1000 	streq.w	r1, [r8]
 8010c5c:	5162      	str	r2, [r4, r5]
 8010c5e:	604b      	str	r3, [r1, #4]
 8010c60:	4630      	mov	r0, r6
 8010c62:	f000 f82f 	bl	8010cc4 <__malloc_unlock>
 8010c66:	f104 000b 	add.w	r0, r4, #11
 8010c6a:	1d23      	adds	r3, r4, #4
 8010c6c:	f020 0007 	bic.w	r0, r0, #7
 8010c70:	1ac2      	subs	r2, r0, r3
 8010c72:	bf1c      	itt	ne
 8010c74:	1a1b      	subne	r3, r3, r0
 8010c76:	50a3      	strne	r3, [r4, r2]
 8010c78:	e7af      	b.n	8010bda <_malloc_r+0x22>
 8010c7a:	6862      	ldr	r2, [r4, #4]
 8010c7c:	42a3      	cmp	r3, r4
 8010c7e:	bf0c      	ite	eq
 8010c80:	f8c8 2000 	streq.w	r2, [r8]
 8010c84:	605a      	strne	r2, [r3, #4]
 8010c86:	e7eb      	b.n	8010c60 <_malloc_r+0xa8>
 8010c88:	4623      	mov	r3, r4
 8010c8a:	6864      	ldr	r4, [r4, #4]
 8010c8c:	e7ae      	b.n	8010bec <_malloc_r+0x34>
 8010c8e:	463c      	mov	r4, r7
 8010c90:	687f      	ldr	r7, [r7, #4]
 8010c92:	e7b6      	b.n	8010c02 <_malloc_r+0x4a>
 8010c94:	461a      	mov	r2, r3
 8010c96:	685b      	ldr	r3, [r3, #4]
 8010c98:	42a3      	cmp	r3, r4
 8010c9a:	d1fb      	bne.n	8010c94 <_malloc_r+0xdc>
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	6053      	str	r3, [r2, #4]
 8010ca0:	e7de      	b.n	8010c60 <_malloc_r+0xa8>
 8010ca2:	230c      	movs	r3, #12
 8010ca4:	6033      	str	r3, [r6, #0]
 8010ca6:	4630      	mov	r0, r6
 8010ca8:	f000 f80c 	bl	8010cc4 <__malloc_unlock>
 8010cac:	e794      	b.n	8010bd8 <_malloc_r+0x20>
 8010cae:	6005      	str	r5, [r0, #0]
 8010cb0:	e7d6      	b.n	8010c60 <_malloc_r+0xa8>
 8010cb2:	bf00      	nop
 8010cb4:	20008ac0 	.word	0x20008ac0

08010cb8 <__malloc_lock>:
 8010cb8:	4801      	ldr	r0, [pc, #4]	@ (8010cc0 <__malloc_lock+0x8>)
 8010cba:	f7ff bed2 	b.w	8010a62 <__retarget_lock_acquire_recursive>
 8010cbe:	bf00      	nop
 8010cc0:	20008ab8 	.word	0x20008ab8

08010cc4 <__malloc_unlock>:
 8010cc4:	4801      	ldr	r0, [pc, #4]	@ (8010ccc <__malloc_unlock+0x8>)
 8010cc6:	f7ff becd 	b.w	8010a64 <__retarget_lock_release_recursive>
 8010cca:	bf00      	nop
 8010ccc:	20008ab8 	.word	0x20008ab8

08010cd0 <__ssputs_r>:
 8010cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cd4:	688e      	ldr	r6, [r1, #8]
 8010cd6:	461f      	mov	r7, r3
 8010cd8:	42be      	cmp	r6, r7
 8010cda:	680b      	ldr	r3, [r1, #0]
 8010cdc:	4682      	mov	sl, r0
 8010cde:	460c      	mov	r4, r1
 8010ce0:	4690      	mov	r8, r2
 8010ce2:	d82d      	bhi.n	8010d40 <__ssputs_r+0x70>
 8010ce4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010ce8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010cec:	d026      	beq.n	8010d3c <__ssputs_r+0x6c>
 8010cee:	6965      	ldr	r5, [r4, #20]
 8010cf0:	6909      	ldr	r1, [r1, #16]
 8010cf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010cf6:	eba3 0901 	sub.w	r9, r3, r1
 8010cfa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010cfe:	1c7b      	adds	r3, r7, #1
 8010d00:	444b      	add	r3, r9
 8010d02:	106d      	asrs	r5, r5, #1
 8010d04:	429d      	cmp	r5, r3
 8010d06:	bf38      	it	cc
 8010d08:	461d      	movcc	r5, r3
 8010d0a:	0553      	lsls	r3, r2, #21
 8010d0c:	d527      	bpl.n	8010d5e <__ssputs_r+0x8e>
 8010d0e:	4629      	mov	r1, r5
 8010d10:	f7ff ff52 	bl	8010bb8 <_malloc_r>
 8010d14:	4606      	mov	r6, r0
 8010d16:	b360      	cbz	r0, 8010d72 <__ssputs_r+0xa2>
 8010d18:	6921      	ldr	r1, [r4, #16]
 8010d1a:	464a      	mov	r2, r9
 8010d1c:	f7ff feab 	bl	8010a76 <memcpy>
 8010d20:	89a3      	ldrh	r3, [r4, #12]
 8010d22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d2a:	81a3      	strh	r3, [r4, #12]
 8010d2c:	6126      	str	r6, [r4, #16]
 8010d2e:	6165      	str	r5, [r4, #20]
 8010d30:	444e      	add	r6, r9
 8010d32:	eba5 0509 	sub.w	r5, r5, r9
 8010d36:	6026      	str	r6, [r4, #0]
 8010d38:	60a5      	str	r5, [r4, #8]
 8010d3a:	463e      	mov	r6, r7
 8010d3c:	42be      	cmp	r6, r7
 8010d3e:	d900      	bls.n	8010d42 <__ssputs_r+0x72>
 8010d40:	463e      	mov	r6, r7
 8010d42:	6820      	ldr	r0, [r4, #0]
 8010d44:	4632      	mov	r2, r6
 8010d46:	4641      	mov	r1, r8
 8010d48:	f7ff fdc9 	bl	80108de <memmove>
 8010d4c:	68a3      	ldr	r3, [r4, #8]
 8010d4e:	1b9b      	subs	r3, r3, r6
 8010d50:	60a3      	str	r3, [r4, #8]
 8010d52:	6823      	ldr	r3, [r4, #0]
 8010d54:	4433      	add	r3, r6
 8010d56:	6023      	str	r3, [r4, #0]
 8010d58:	2000      	movs	r0, #0
 8010d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d5e:	462a      	mov	r2, r5
 8010d60:	f000 fd47 	bl	80117f2 <_realloc_r>
 8010d64:	4606      	mov	r6, r0
 8010d66:	2800      	cmp	r0, #0
 8010d68:	d1e0      	bne.n	8010d2c <__ssputs_r+0x5c>
 8010d6a:	6921      	ldr	r1, [r4, #16]
 8010d6c:	4650      	mov	r0, sl
 8010d6e:	f7ff feaf 	bl	8010ad0 <_free_r>
 8010d72:	230c      	movs	r3, #12
 8010d74:	f8ca 3000 	str.w	r3, [sl]
 8010d78:	89a3      	ldrh	r3, [r4, #12]
 8010d7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d7e:	81a3      	strh	r3, [r4, #12]
 8010d80:	f04f 30ff 	mov.w	r0, #4294967295
 8010d84:	e7e9      	b.n	8010d5a <__ssputs_r+0x8a>
	...

08010d88 <_svfiprintf_r>:
 8010d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d8c:	4698      	mov	r8, r3
 8010d8e:	898b      	ldrh	r3, [r1, #12]
 8010d90:	061b      	lsls	r3, r3, #24
 8010d92:	b09d      	sub	sp, #116	@ 0x74
 8010d94:	4607      	mov	r7, r0
 8010d96:	460d      	mov	r5, r1
 8010d98:	4614      	mov	r4, r2
 8010d9a:	d510      	bpl.n	8010dbe <_svfiprintf_r+0x36>
 8010d9c:	690b      	ldr	r3, [r1, #16]
 8010d9e:	b973      	cbnz	r3, 8010dbe <_svfiprintf_r+0x36>
 8010da0:	2140      	movs	r1, #64	@ 0x40
 8010da2:	f7ff ff09 	bl	8010bb8 <_malloc_r>
 8010da6:	6028      	str	r0, [r5, #0]
 8010da8:	6128      	str	r0, [r5, #16]
 8010daa:	b930      	cbnz	r0, 8010dba <_svfiprintf_r+0x32>
 8010dac:	230c      	movs	r3, #12
 8010dae:	603b      	str	r3, [r7, #0]
 8010db0:	f04f 30ff 	mov.w	r0, #4294967295
 8010db4:	b01d      	add	sp, #116	@ 0x74
 8010db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dba:	2340      	movs	r3, #64	@ 0x40
 8010dbc:	616b      	str	r3, [r5, #20]
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8010dc2:	2320      	movs	r3, #32
 8010dc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010dc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8010dcc:	2330      	movs	r3, #48	@ 0x30
 8010dce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010f6c <_svfiprintf_r+0x1e4>
 8010dd2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010dd6:	f04f 0901 	mov.w	r9, #1
 8010dda:	4623      	mov	r3, r4
 8010ddc:	469a      	mov	sl, r3
 8010dde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010de2:	b10a      	cbz	r2, 8010de8 <_svfiprintf_r+0x60>
 8010de4:	2a25      	cmp	r2, #37	@ 0x25
 8010de6:	d1f9      	bne.n	8010ddc <_svfiprintf_r+0x54>
 8010de8:	ebba 0b04 	subs.w	fp, sl, r4
 8010dec:	d00b      	beq.n	8010e06 <_svfiprintf_r+0x7e>
 8010dee:	465b      	mov	r3, fp
 8010df0:	4622      	mov	r2, r4
 8010df2:	4629      	mov	r1, r5
 8010df4:	4638      	mov	r0, r7
 8010df6:	f7ff ff6b 	bl	8010cd0 <__ssputs_r>
 8010dfa:	3001      	adds	r0, #1
 8010dfc:	f000 80a7 	beq.w	8010f4e <_svfiprintf_r+0x1c6>
 8010e00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e02:	445a      	add	r2, fp
 8010e04:	9209      	str	r2, [sp, #36]	@ 0x24
 8010e06:	f89a 3000 	ldrb.w	r3, [sl]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	f000 809f 	beq.w	8010f4e <_svfiprintf_r+0x1c6>
 8010e10:	2300      	movs	r3, #0
 8010e12:	f04f 32ff 	mov.w	r2, #4294967295
 8010e16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e1a:	f10a 0a01 	add.w	sl, sl, #1
 8010e1e:	9304      	str	r3, [sp, #16]
 8010e20:	9307      	str	r3, [sp, #28]
 8010e22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010e26:	931a      	str	r3, [sp, #104]	@ 0x68
 8010e28:	4654      	mov	r4, sl
 8010e2a:	2205      	movs	r2, #5
 8010e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e30:	484e      	ldr	r0, [pc, #312]	@ (8010f6c <_svfiprintf_r+0x1e4>)
 8010e32:	f7ef fa1d 	bl	8000270 <memchr>
 8010e36:	9a04      	ldr	r2, [sp, #16]
 8010e38:	b9d8      	cbnz	r0, 8010e72 <_svfiprintf_r+0xea>
 8010e3a:	06d0      	lsls	r0, r2, #27
 8010e3c:	bf44      	itt	mi
 8010e3e:	2320      	movmi	r3, #32
 8010e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e44:	0711      	lsls	r1, r2, #28
 8010e46:	bf44      	itt	mi
 8010e48:	232b      	movmi	r3, #43	@ 0x2b
 8010e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e4e:	f89a 3000 	ldrb.w	r3, [sl]
 8010e52:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e54:	d015      	beq.n	8010e82 <_svfiprintf_r+0xfa>
 8010e56:	9a07      	ldr	r2, [sp, #28]
 8010e58:	4654      	mov	r4, sl
 8010e5a:	2000      	movs	r0, #0
 8010e5c:	f04f 0c0a 	mov.w	ip, #10
 8010e60:	4621      	mov	r1, r4
 8010e62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e66:	3b30      	subs	r3, #48	@ 0x30
 8010e68:	2b09      	cmp	r3, #9
 8010e6a:	d94b      	bls.n	8010f04 <_svfiprintf_r+0x17c>
 8010e6c:	b1b0      	cbz	r0, 8010e9c <_svfiprintf_r+0x114>
 8010e6e:	9207      	str	r2, [sp, #28]
 8010e70:	e014      	b.n	8010e9c <_svfiprintf_r+0x114>
 8010e72:	eba0 0308 	sub.w	r3, r0, r8
 8010e76:	fa09 f303 	lsl.w	r3, r9, r3
 8010e7a:	4313      	orrs	r3, r2
 8010e7c:	9304      	str	r3, [sp, #16]
 8010e7e:	46a2      	mov	sl, r4
 8010e80:	e7d2      	b.n	8010e28 <_svfiprintf_r+0xa0>
 8010e82:	9b03      	ldr	r3, [sp, #12]
 8010e84:	1d19      	adds	r1, r3, #4
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	9103      	str	r1, [sp, #12]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	bfbb      	ittet	lt
 8010e8e:	425b      	neglt	r3, r3
 8010e90:	f042 0202 	orrlt.w	r2, r2, #2
 8010e94:	9307      	strge	r3, [sp, #28]
 8010e96:	9307      	strlt	r3, [sp, #28]
 8010e98:	bfb8      	it	lt
 8010e9a:	9204      	strlt	r2, [sp, #16]
 8010e9c:	7823      	ldrb	r3, [r4, #0]
 8010e9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010ea0:	d10a      	bne.n	8010eb8 <_svfiprintf_r+0x130>
 8010ea2:	7863      	ldrb	r3, [r4, #1]
 8010ea4:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ea6:	d132      	bne.n	8010f0e <_svfiprintf_r+0x186>
 8010ea8:	9b03      	ldr	r3, [sp, #12]
 8010eaa:	1d1a      	adds	r2, r3, #4
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	9203      	str	r2, [sp, #12]
 8010eb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010eb4:	3402      	adds	r4, #2
 8010eb6:	9305      	str	r3, [sp, #20]
 8010eb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010f7c <_svfiprintf_r+0x1f4>
 8010ebc:	7821      	ldrb	r1, [r4, #0]
 8010ebe:	2203      	movs	r2, #3
 8010ec0:	4650      	mov	r0, sl
 8010ec2:	f7ef f9d5 	bl	8000270 <memchr>
 8010ec6:	b138      	cbz	r0, 8010ed8 <_svfiprintf_r+0x150>
 8010ec8:	9b04      	ldr	r3, [sp, #16]
 8010eca:	eba0 000a 	sub.w	r0, r0, sl
 8010ece:	2240      	movs	r2, #64	@ 0x40
 8010ed0:	4082      	lsls	r2, r0
 8010ed2:	4313      	orrs	r3, r2
 8010ed4:	3401      	adds	r4, #1
 8010ed6:	9304      	str	r3, [sp, #16]
 8010ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010edc:	4824      	ldr	r0, [pc, #144]	@ (8010f70 <_svfiprintf_r+0x1e8>)
 8010ede:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010ee2:	2206      	movs	r2, #6
 8010ee4:	f7ef f9c4 	bl	8000270 <memchr>
 8010ee8:	2800      	cmp	r0, #0
 8010eea:	d036      	beq.n	8010f5a <_svfiprintf_r+0x1d2>
 8010eec:	4b21      	ldr	r3, [pc, #132]	@ (8010f74 <_svfiprintf_r+0x1ec>)
 8010eee:	bb1b      	cbnz	r3, 8010f38 <_svfiprintf_r+0x1b0>
 8010ef0:	9b03      	ldr	r3, [sp, #12]
 8010ef2:	3307      	adds	r3, #7
 8010ef4:	f023 0307 	bic.w	r3, r3, #7
 8010ef8:	3308      	adds	r3, #8
 8010efa:	9303      	str	r3, [sp, #12]
 8010efc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010efe:	4433      	add	r3, r6
 8010f00:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f02:	e76a      	b.n	8010dda <_svfiprintf_r+0x52>
 8010f04:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f08:	460c      	mov	r4, r1
 8010f0a:	2001      	movs	r0, #1
 8010f0c:	e7a8      	b.n	8010e60 <_svfiprintf_r+0xd8>
 8010f0e:	2300      	movs	r3, #0
 8010f10:	3401      	adds	r4, #1
 8010f12:	9305      	str	r3, [sp, #20]
 8010f14:	4619      	mov	r1, r3
 8010f16:	f04f 0c0a 	mov.w	ip, #10
 8010f1a:	4620      	mov	r0, r4
 8010f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f20:	3a30      	subs	r2, #48	@ 0x30
 8010f22:	2a09      	cmp	r2, #9
 8010f24:	d903      	bls.n	8010f2e <_svfiprintf_r+0x1a6>
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d0c6      	beq.n	8010eb8 <_svfiprintf_r+0x130>
 8010f2a:	9105      	str	r1, [sp, #20]
 8010f2c:	e7c4      	b.n	8010eb8 <_svfiprintf_r+0x130>
 8010f2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f32:	4604      	mov	r4, r0
 8010f34:	2301      	movs	r3, #1
 8010f36:	e7f0      	b.n	8010f1a <_svfiprintf_r+0x192>
 8010f38:	ab03      	add	r3, sp, #12
 8010f3a:	9300      	str	r3, [sp, #0]
 8010f3c:	462a      	mov	r2, r5
 8010f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8010f78 <_svfiprintf_r+0x1f0>)
 8010f40:	a904      	add	r1, sp, #16
 8010f42:	4638      	mov	r0, r7
 8010f44:	f3af 8000 	nop.w
 8010f48:	1c42      	adds	r2, r0, #1
 8010f4a:	4606      	mov	r6, r0
 8010f4c:	d1d6      	bne.n	8010efc <_svfiprintf_r+0x174>
 8010f4e:	89ab      	ldrh	r3, [r5, #12]
 8010f50:	065b      	lsls	r3, r3, #25
 8010f52:	f53f af2d 	bmi.w	8010db0 <_svfiprintf_r+0x28>
 8010f56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010f58:	e72c      	b.n	8010db4 <_svfiprintf_r+0x2c>
 8010f5a:	ab03      	add	r3, sp, #12
 8010f5c:	9300      	str	r3, [sp, #0]
 8010f5e:	462a      	mov	r2, r5
 8010f60:	4b05      	ldr	r3, [pc, #20]	@ (8010f78 <_svfiprintf_r+0x1f0>)
 8010f62:	a904      	add	r1, sp, #16
 8010f64:	4638      	mov	r0, r7
 8010f66:	f000 f9bb 	bl	80112e0 <_printf_i>
 8010f6a:	e7ed      	b.n	8010f48 <_svfiprintf_r+0x1c0>
 8010f6c:	08014651 	.word	0x08014651
 8010f70:	0801465b 	.word	0x0801465b
 8010f74:	00000000 	.word	0x00000000
 8010f78:	08010cd1 	.word	0x08010cd1
 8010f7c:	08014657 	.word	0x08014657

08010f80 <__sfputc_r>:
 8010f80:	6893      	ldr	r3, [r2, #8]
 8010f82:	3b01      	subs	r3, #1
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	b410      	push	{r4}
 8010f88:	6093      	str	r3, [r2, #8]
 8010f8a:	da08      	bge.n	8010f9e <__sfputc_r+0x1e>
 8010f8c:	6994      	ldr	r4, [r2, #24]
 8010f8e:	42a3      	cmp	r3, r4
 8010f90:	db01      	blt.n	8010f96 <__sfputc_r+0x16>
 8010f92:	290a      	cmp	r1, #10
 8010f94:	d103      	bne.n	8010f9e <__sfputc_r+0x1e>
 8010f96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f9a:	f000 bb7f 	b.w	801169c <__swbuf_r>
 8010f9e:	6813      	ldr	r3, [r2, #0]
 8010fa0:	1c58      	adds	r0, r3, #1
 8010fa2:	6010      	str	r0, [r2, #0]
 8010fa4:	7019      	strb	r1, [r3, #0]
 8010fa6:	4608      	mov	r0, r1
 8010fa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010fac:	4770      	bx	lr

08010fae <__sfputs_r>:
 8010fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fb0:	4606      	mov	r6, r0
 8010fb2:	460f      	mov	r7, r1
 8010fb4:	4614      	mov	r4, r2
 8010fb6:	18d5      	adds	r5, r2, r3
 8010fb8:	42ac      	cmp	r4, r5
 8010fba:	d101      	bne.n	8010fc0 <__sfputs_r+0x12>
 8010fbc:	2000      	movs	r0, #0
 8010fbe:	e007      	b.n	8010fd0 <__sfputs_r+0x22>
 8010fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fc4:	463a      	mov	r2, r7
 8010fc6:	4630      	mov	r0, r6
 8010fc8:	f7ff ffda 	bl	8010f80 <__sfputc_r>
 8010fcc:	1c43      	adds	r3, r0, #1
 8010fce:	d1f3      	bne.n	8010fb8 <__sfputs_r+0xa>
 8010fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010fd4 <_vfiprintf_r>:
 8010fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fd8:	460d      	mov	r5, r1
 8010fda:	b09d      	sub	sp, #116	@ 0x74
 8010fdc:	4614      	mov	r4, r2
 8010fde:	4698      	mov	r8, r3
 8010fe0:	4606      	mov	r6, r0
 8010fe2:	b118      	cbz	r0, 8010fec <_vfiprintf_r+0x18>
 8010fe4:	6a03      	ldr	r3, [r0, #32]
 8010fe6:	b90b      	cbnz	r3, 8010fec <_vfiprintf_r+0x18>
 8010fe8:	f7ff fbbe 	bl	8010768 <__sinit>
 8010fec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010fee:	07d9      	lsls	r1, r3, #31
 8010ff0:	d405      	bmi.n	8010ffe <_vfiprintf_r+0x2a>
 8010ff2:	89ab      	ldrh	r3, [r5, #12]
 8010ff4:	059a      	lsls	r2, r3, #22
 8010ff6:	d402      	bmi.n	8010ffe <_vfiprintf_r+0x2a>
 8010ff8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010ffa:	f7ff fd32 	bl	8010a62 <__retarget_lock_acquire_recursive>
 8010ffe:	89ab      	ldrh	r3, [r5, #12]
 8011000:	071b      	lsls	r3, r3, #28
 8011002:	d501      	bpl.n	8011008 <_vfiprintf_r+0x34>
 8011004:	692b      	ldr	r3, [r5, #16]
 8011006:	b99b      	cbnz	r3, 8011030 <_vfiprintf_r+0x5c>
 8011008:	4629      	mov	r1, r5
 801100a:	4630      	mov	r0, r6
 801100c:	f000 fb84 	bl	8011718 <__swsetup_r>
 8011010:	b170      	cbz	r0, 8011030 <_vfiprintf_r+0x5c>
 8011012:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011014:	07dc      	lsls	r4, r3, #31
 8011016:	d504      	bpl.n	8011022 <_vfiprintf_r+0x4e>
 8011018:	f04f 30ff 	mov.w	r0, #4294967295
 801101c:	b01d      	add	sp, #116	@ 0x74
 801101e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011022:	89ab      	ldrh	r3, [r5, #12]
 8011024:	0598      	lsls	r0, r3, #22
 8011026:	d4f7      	bmi.n	8011018 <_vfiprintf_r+0x44>
 8011028:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801102a:	f7ff fd1b 	bl	8010a64 <__retarget_lock_release_recursive>
 801102e:	e7f3      	b.n	8011018 <_vfiprintf_r+0x44>
 8011030:	2300      	movs	r3, #0
 8011032:	9309      	str	r3, [sp, #36]	@ 0x24
 8011034:	2320      	movs	r3, #32
 8011036:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801103a:	f8cd 800c 	str.w	r8, [sp, #12]
 801103e:	2330      	movs	r3, #48	@ 0x30
 8011040:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80111f0 <_vfiprintf_r+0x21c>
 8011044:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011048:	f04f 0901 	mov.w	r9, #1
 801104c:	4623      	mov	r3, r4
 801104e:	469a      	mov	sl, r3
 8011050:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011054:	b10a      	cbz	r2, 801105a <_vfiprintf_r+0x86>
 8011056:	2a25      	cmp	r2, #37	@ 0x25
 8011058:	d1f9      	bne.n	801104e <_vfiprintf_r+0x7a>
 801105a:	ebba 0b04 	subs.w	fp, sl, r4
 801105e:	d00b      	beq.n	8011078 <_vfiprintf_r+0xa4>
 8011060:	465b      	mov	r3, fp
 8011062:	4622      	mov	r2, r4
 8011064:	4629      	mov	r1, r5
 8011066:	4630      	mov	r0, r6
 8011068:	f7ff ffa1 	bl	8010fae <__sfputs_r>
 801106c:	3001      	adds	r0, #1
 801106e:	f000 80a7 	beq.w	80111c0 <_vfiprintf_r+0x1ec>
 8011072:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011074:	445a      	add	r2, fp
 8011076:	9209      	str	r2, [sp, #36]	@ 0x24
 8011078:	f89a 3000 	ldrb.w	r3, [sl]
 801107c:	2b00      	cmp	r3, #0
 801107e:	f000 809f 	beq.w	80111c0 <_vfiprintf_r+0x1ec>
 8011082:	2300      	movs	r3, #0
 8011084:	f04f 32ff 	mov.w	r2, #4294967295
 8011088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801108c:	f10a 0a01 	add.w	sl, sl, #1
 8011090:	9304      	str	r3, [sp, #16]
 8011092:	9307      	str	r3, [sp, #28]
 8011094:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011098:	931a      	str	r3, [sp, #104]	@ 0x68
 801109a:	4654      	mov	r4, sl
 801109c:	2205      	movs	r2, #5
 801109e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110a2:	4853      	ldr	r0, [pc, #332]	@ (80111f0 <_vfiprintf_r+0x21c>)
 80110a4:	f7ef f8e4 	bl	8000270 <memchr>
 80110a8:	9a04      	ldr	r2, [sp, #16]
 80110aa:	b9d8      	cbnz	r0, 80110e4 <_vfiprintf_r+0x110>
 80110ac:	06d1      	lsls	r1, r2, #27
 80110ae:	bf44      	itt	mi
 80110b0:	2320      	movmi	r3, #32
 80110b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80110b6:	0713      	lsls	r3, r2, #28
 80110b8:	bf44      	itt	mi
 80110ba:	232b      	movmi	r3, #43	@ 0x2b
 80110bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80110c0:	f89a 3000 	ldrb.w	r3, [sl]
 80110c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80110c6:	d015      	beq.n	80110f4 <_vfiprintf_r+0x120>
 80110c8:	9a07      	ldr	r2, [sp, #28]
 80110ca:	4654      	mov	r4, sl
 80110cc:	2000      	movs	r0, #0
 80110ce:	f04f 0c0a 	mov.w	ip, #10
 80110d2:	4621      	mov	r1, r4
 80110d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80110d8:	3b30      	subs	r3, #48	@ 0x30
 80110da:	2b09      	cmp	r3, #9
 80110dc:	d94b      	bls.n	8011176 <_vfiprintf_r+0x1a2>
 80110de:	b1b0      	cbz	r0, 801110e <_vfiprintf_r+0x13a>
 80110e0:	9207      	str	r2, [sp, #28]
 80110e2:	e014      	b.n	801110e <_vfiprintf_r+0x13a>
 80110e4:	eba0 0308 	sub.w	r3, r0, r8
 80110e8:	fa09 f303 	lsl.w	r3, r9, r3
 80110ec:	4313      	orrs	r3, r2
 80110ee:	9304      	str	r3, [sp, #16]
 80110f0:	46a2      	mov	sl, r4
 80110f2:	e7d2      	b.n	801109a <_vfiprintf_r+0xc6>
 80110f4:	9b03      	ldr	r3, [sp, #12]
 80110f6:	1d19      	adds	r1, r3, #4
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	9103      	str	r1, [sp, #12]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	bfbb      	ittet	lt
 8011100:	425b      	neglt	r3, r3
 8011102:	f042 0202 	orrlt.w	r2, r2, #2
 8011106:	9307      	strge	r3, [sp, #28]
 8011108:	9307      	strlt	r3, [sp, #28]
 801110a:	bfb8      	it	lt
 801110c:	9204      	strlt	r2, [sp, #16]
 801110e:	7823      	ldrb	r3, [r4, #0]
 8011110:	2b2e      	cmp	r3, #46	@ 0x2e
 8011112:	d10a      	bne.n	801112a <_vfiprintf_r+0x156>
 8011114:	7863      	ldrb	r3, [r4, #1]
 8011116:	2b2a      	cmp	r3, #42	@ 0x2a
 8011118:	d132      	bne.n	8011180 <_vfiprintf_r+0x1ac>
 801111a:	9b03      	ldr	r3, [sp, #12]
 801111c:	1d1a      	adds	r2, r3, #4
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	9203      	str	r2, [sp, #12]
 8011122:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011126:	3402      	adds	r4, #2
 8011128:	9305      	str	r3, [sp, #20]
 801112a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011200 <_vfiprintf_r+0x22c>
 801112e:	7821      	ldrb	r1, [r4, #0]
 8011130:	2203      	movs	r2, #3
 8011132:	4650      	mov	r0, sl
 8011134:	f7ef f89c 	bl	8000270 <memchr>
 8011138:	b138      	cbz	r0, 801114a <_vfiprintf_r+0x176>
 801113a:	9b04      	ldr	r3, [sp, #16]
 801113c:	eba0 000a 	sub.w	r0, r0, sl
 8011140:	2240      	movs	r2, #64	@ 0x40
 8011142:	4082      	lsls	r2, r0
 8011144:	4313      	orrs	r3, r2
 8011146:	3401      	adds	r4, #1
 8011148:	9304      	str	r3, [sp, #16]
 801114a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801114e:	4829      	ldr	r0, [pc, #164]	@ (80111f4 <_vfiprintf_r+0x220>)
 8011150:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011154:	2206      	movs	r2, #6
 8011156:	f7ef f88b 	bl	8000270 <memchr>
 801115a:	2800      	cmp	r0, #0
 801115c:	d03f      	beq.n	80111de <_vfiprintf_r+0x20a>
 801115e:	4b26      	ldr	r3, [pc, #152]	@ (80111f8 <_vfiprintf_r+0x224>)
 8011160:	bb1b      	cbnz	r3, 80111aa <_vfiprintf_r+0x1d6>
 8011162:	9b03      	ldr	r3, [sp, #12]
 8011164:	3307      	adds	r3, #7
 8011166:	f023 0307 	bic.w	r3, r3, #7
 801116a:	3308      	adds	r3, #8
 801116c:	9303      	str	r3, [sp, #12]
 801116e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011170:	443b      	add	r3, r7
 8011172:	9309      	str	r3, [sp, #36]	@ 0x24
 8011174:	e76a      	b.n	801104c <_vfiprintf_r+0x78>
 8011176:	fb0c 3202 	mla	r2, ip, r2, r3
 801117a:	460c      	mov	r4, r1
 801117c:	2001      	movs	r0, #1
 801117e:	e7a8      	b.n	80110d2 <_vfiprintf_r+0xfe>
 8011180:	2300      	movs	r3, #0
 8011182:	3401      	adds	r4, #1
 8011184:	9305      	str	r3, [sp, #20]
 8011186:	4619      	mov	r1, r3
 8011188:	f04f 0c0a 	mov.w	ip, #10
 801118c:	4620      	mov	r0, r4
 801118e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011192:	3a30      	subs	r2, #48	@ 0x30
 8011194:	2a09      	cmp	r2, #9
 8011196:	d903      	bls.n	80111a0 <_vfiprintf_r+0x1cc>
 8011198:	2b00      	cmp	r3, #0
 801119a:	d0c6      	beq.n	801112a <_vfiprintf_r+0x156>
 801119c:	9105      	str	r1, [sp, #20]
 801119e:	e7c4      	b.n	801112a <_vfiprintf_r+0x156>
 80111a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80111a4:	4604      	mov	r4, r0
 80111a6:	2301      	movs	r3, #1
 80111a8:	e7f0      	b.n	801118c <_vfiprintf_r+0x1b8>
 80111aa:	ab03      	add	r3, sp, #12
 80111ac:	9300      	str	r3, [sp, #0]
 80111ae:	462a      	mov	r2, r5
 80111b0:	4b12      	ldr	r3, [pc, #72]	@ (80111fc <_vfiprintf_r+0x228>)
 80111b2:	a904      	add	r1, sp, #16
 80111b4:	4630      	mov	r0, r6
 80111b6:	f3af 8000 	nop.w
 80111ba:	4607      	mov	r7, r0
 80111bc:	1c78      	adds	r0, r7, #1
 80111be:	d1d6      	bne.n	801116e <_vfiprintf_r+0x19a>
 80111c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80111c2:	07d9      	lsls	r1, r3, #31
 80111c4:	d405      	bmi.n	80111d2 <_vfiprintf_r+0x1fe>
 80111c6:	89ab      	ldrh	r3, [r5, #12]
 80111c8:	059a      	lsls	r2, r3, #22
 80111ca:	d402      	bmi.n	80111d2 <_vfiprintf_r+0x1fe>
 80111cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80111ce:	f7ff fc49 	bl	8010a64 <__retarget_lock_release_recursive>
 80111d2:	89ab      	ldrh	r3, [r5, #12]
 80111d4:	065b      	lsls	r3, r3, #25
 80111d6:	f53f af1f 	bmi.w	8011018 <_vfiprintf_r+0x44>
 80111da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80111dc:	e71e      	b.n	801101c <_vfiprintf_r+0x48>
 80111de:	ab03      	add	r3, sp, #12
 80111e0:	9300      	str	r3, [sp, #0]
 80111e2:	462a      	mov	r2, r5
 80111e4:	4b05      	ldr	r3, [pc, #20]	@ (80111fc <_vfiprintf_r+0x228>)
 80111e6:	a904      	add	r1, sp, #16
 80111e8:	4630      	mov	r0, r6
 80111ea:	f000 f879 	bl	80112e0 <_printf_i>
 80111ee:	e7e4      	b.n	80111ba <_vfiprintf_r+0x1e6>
 80111f0:	08014651 	.word	0x08014651
 80111f4:	0801465b 	.word	0x0801465b
 80111f8:	00000000 	.word	0x00000000
 80111fc:	08010faf 	.word	0x08010faf
 8011200:	08014657 	.word	0x08014657

08011204 <_printf_common>:
 8011204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011208:	4616      	mov	r6, r2
 801120a:	4698      	mov	r8, r3
 801120c:	688a      	ldr	r2, [r1, #8]
 801120e:	690b      	ldr	r3, [r1, #16]
 8011210:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011214:	4293      	cmp	r3, r2
 8011216:	bfb8      	it	lt
 8011218:	4613      	movlt	r3, r2
 801121a:	6033      	str	r3, [r6, #0]
 801121c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011220:	4607      	mov	r7, r0
 8011222:	460c      	mov	r4, r1
 8011224:	b10a      	cbz	r2, 801122a <_printf_common+0x26>
 8011226:	3301      	adds	r3, #1
 8011228:	6033      	str	r3, [r6, #0]
 801122a:	6823      	ldr	r3, [r4, #0]
 801122c:	0699      	lsls	r1, r3, #26
 801122e:	bf42      	ittt	mi
 8011230:	6833      	ldrmi	r3, [r6, #0]
 8011232:	3302      	addmi	r3, #2
 8011234:	6033      	strmi	r3, [r6, #0]
 8011236:	6825      	ldr	r5, [r4, #0]
 8011238:	f015 0506 	ands.w	r5, r5, #6
 801123c:	d106      	bne.n	801124c <_printf_common+0x48>
 801123e:	f104 0a19 	add.w	sl, r4, #25
 8011242:	68e3      	ldr	r3, [r4, #12]
 8011244:	6832      	ldr	r2, [r6, #0]
 8011246:	1a9b      	subs	r3, r3, r2
 8011248:	42ab      	cmp	r3, r5
 801124a:	dc26      	bgt.n	801129a <_printf_common+0x96>
 801124c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011250:	6822      	ldr	r2, [r4, #0]
 8011252:	3b00      	subs	r3, #0
 8011254:	bf18      	it	ne
 8011256:	2301      	movne	r3, #1
 8011258:	0692      	lsls	r2, r2, #26
 801125a:	d42b      	bmi.n	80112b4 <_printf_common+0xb0>
 801125c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011260:	4641      	mov	r1, r8
 8011262:	4638      	mov	r0, r7
 8011264:	47c8      	blx	r9
 8011266:	3001      	adds	r0, #1
 8011268:	d01e      	beq.n	80112a8 <_printf_common+0xa4>
 801126a:	6823      	ldr	r3, [r4, #0]
 801126c:	6922      	ldr	r2, [r4, #16]
 801126e:	f003 0306 	and.w	r3, r3, #6
 8011272:	2b04      	cmp	r3, #4
 8011274:	bf02      	ittt	eq
 8011276:	68e5      	ldreq	r5, [r4, #12]
 8011278:	6833      	ldreq	r3, [r6, #0]
 801127a:	1aed      	subeq	r5, r5, r3
 801127c:	68a3      	ldr	r3, [r4, #8]
 801127e:	bf0c      	ite	eq
 8011280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011284:	2500      	movne	r5, #0
 8011286:	4293      	cmp	r3, r2
 8011288:	bfc4      	itt	gt
 801128a:	1a9b      	subgt	r3, r3, r2
 801128c:	18ed      	addgt	r5, r5, r3
 801128e:	2600      	movs	r6, #0
 8011290:	341a      	adds	r4, #26
 8011292:	42b5      	cmp	r5, r6
 8011294:	d11a      	bne.n	80112cc <_printf_common+0xc8>
 8011296:	2000      	movs	r0, #0
 8011298:	e008      	b.n	80112ac <_printf_common+0xa8>
 801129a:	2301      	movs	r3, #1
 801129c:	4652      	mov	r2, sl
 801129e:	4641      	mov	r1, r8
 80112a0:	4638      	mov	r0, r7
 80112a2:	47c8      	blx	r9
 80112a4:	3001      	adds	r0, #1
 80112a6:	d103      	bne.n	80112b0 <_printf_common+0xac>
 80112a8:	f04f 30ff 	mov.w	r0, #4294967295
 80112ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112b0:	3501      	adds	r5, #1
 80112b2:	e7c6      	b.n	8011242 <_printf_common+0x3e>
 80112b4:	18e1      	adds	r1, r4, r3
 80112b6:	1c5a      	adds	r2, r3, #1
 80112b8:	2030      	movs	r0, #48	@ 0x30
 80112ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80112be:	4422      	add	r2, r4
 80112c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80112c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80112c8:	3302      	adds	r3, #2
 80112ca:	e7c7      	b.n	801125c <_printf_common+0x58>
 80112cc:	2301      	movs	r3, #1
 80112ce:	4622      	mov	r2, r4
 80112d0:	4641      	mov	r1, r8
 80112d2:	4638      	mov	r0, r7
 80112d4:	47c8      	blx	r9
 80112d6:	3001      	adds	r0, #1
 80112d8:	d0e6      	beq.n	80112a8 <_printf_common+0xa4>
 80112da:	3601      	adds	r6, #1
 80112dc:	e7d9      	b.n	8011292 <_printf_common+0x8e>
	...

080112e0 <_printf_i>:
 80112e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80112e4:	7e0f      	ldrb	r7, [r1, #24]
 80112e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80112e8:	2f78      	cmp	r7, #120	@ 0x78
 80112ea:	4691      	mov	r9, r2
 80112ec:	4680      	mov	r8, r0
 80112ee:	460c      	mov	r4, r1
 80112f0:	469a      	mov	sl, r3
 80112f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80112f6:	d807      	bhi.n	8011308 <_printf_i+0x28>
 80112f8:	2f62      	cmp	r7, #98	@ 0x62
 80112fa:	d80a      	bhi.n	8011312 <_printf_i+0x32>
 80112fc:	2f00      	cmp	r7, #0
 80112fe:	f000 80d2 	beq.w	80114a6 <_printf_i+0x1c6>
 8011302:	2f58      	cmp	r7, #88	@ 0x58
 8011304:	f000 80b9 	beq.w	801147a <_printf_i+0x19a>
 8011308:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801130c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011310:	e03a      	b.n	8011388 <_printf_i+0xa8>
 8011312:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011316:	2b15      	cmp	r3, #21
 8011318:	d8f6      	bhi.n	8011308 <_printf_i+0x28>
 801131a:	a101      	add	r1, pc, #4	@ (adr r1, 8011320 <_printf_i+0x40>)
 801131c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011320:	08011379 	.word	0x08011379
 8011324:	0801138d 	.word	0x0801138d
 8011328:	08011309 	.word	0x08011309
 801132c:	08011309 	.word	0x08011309
 8011330:	08011309 	.word	0x08011309
 8011334:	08011309 	.word	0x08011309
 8011338:	0801138d 	.word	0x0801138d
 801133c:	08011309 	.word	0x08011309
 8011340:	08011309 	.word	0x08011309
 8011344:	08011309 	.word	0x08011309
 8011348:	08011309 	.word	0x08011309
 801134c:	0801148d 	.word	0x0801148d
 8011350:	080113b7 	.word	0x080113b7
 8011354:	08011447 	.word	0x08011447
 8011358:	08011309 	.word	0x08011309
 801135c:	08011309 	.word	0x08011309
 8011360:	080114af 	.word	0x080114af
 8011364:	08011309 	.word	0x08011309
 8011368:	080113b7 	.word	0x080113b7
 801136c:	08011309 	.word	0x08011309
 8011370:	08011309 	.word	0x08011309
 8011374:	0801144f 	.word	0x0801144f
 8011378:	6833      	ldr	r3, [r6, #0]
 801137a:	1d1a      	adds	r2, r3, #4
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	6032      	str	r2, [r6, #0]
 8011380:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011384:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011388:	2301      	movs	r3, #1
 801138a:	e09d      	b.n	80114c8 <_printf_i+0x1e8>
 801138c:	6833      	ldr	r3, [r6, #0]
 801138e:	6820      	ldr	r0, [r4, #0]
 8011390:	1d19      	adds	r1, r3, #4
 8011392:	6031      	str	r1, [r6, #0]
 8011394:	0606      	lsls	r6, r0, #24
 8011396:	d501      	bpl.n	801139c <_printf_i+0xbc>
 8011398:	681d      	ldr	r5, [r3, #0]
 801139a:	e003      	b.n	80113a4 <_printf_i+0xc4>
 801139c:	0645      	lsls	r5, r0, #25
 801139e:	d5fb      	bpl.n	8011398 <_printf_i+0xb8>
 80113a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80113a4:	2d00      	cmp	r5, #0
 80113a6:	da03      	bge.n	80113b0 <_printf_i+0xd0>
 80113a8:	232d      	movs	r3, #45	@ 0x2d
 80113aa:	426d      	negs	r5, r5
 80113ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80113b0:	4859      	ldr	r0, [pc, #356]	@ (8011518 <_printf_i+0x238>)
 80113b2:	230a      	movs	r3, #10
 80113b4:	e011      	b.n	80113da <_printf_i+0xfa>
 80113b6:	6821      	ldr	r1, [r4, #0]
 80113b8:	6833      	ldr	r3, [r6, #0]
 80113ba:	0608      	lsls	r0, r1, #24
 80113bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80113c0:	d402      	bmi.n	80113c8 <_printf_i+0xe8>
 80113c2:	0649      	lsls	r1, r1, #25
 80113c4:	bf48      	it	mi
 80113c6:	b2ad      	uxthmi	r5, r5
 80113c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80113ca:	4853      	ldr	r0, [pc, #332]	@ (8011518 <_printf_i+0x238>)
 80113cc:	6033      	str	r3, [r6, #0]
 80113ce:	bf14      	ite	ne
 80113d0:	230a      	movne	r3, #10
 80113d2:	2308      	moveq	r3, #8
 80113d4:	2100      	movs	r1, #0
 80113d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80113da:	6866      	ldr	r6, [r4, #4]
 80113dc:	60a6      	str	r6, [r4, #8]
 80113de:	2e00      	cmp	r6, #0
 80113e0:	bfa2      	ittt	ge
 80113e2:	6821      	ldrge	r1, [r4, #0]
 80113e4:	f021 0104 	bicge.w	r1, r1, #4
 80113e8:	6021      	strge	r1, [r4, #0]
 80113ea:	b90d      	cbnz	r5, 80113f0 <_printf_i+0x110>
 80113ec:	2e00      	cmp	r6, #0
 80113ee:	d04b      	beq.n	8011488 <_printf_i+0x1a8>
 80113f0:	4616      	mov	r6, r2
 80113f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80113f6:	fb03 5711 	mls	r7, r3, r1, r5
 80113fa:	5dc7      	ldrb	r7, [r0, r7]
 80113fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011400:	462f      	mov	r7, r5
 8011402:	42bb      	cmp	r3, r7
 8011404:	460d      	mov	r5, r1
 8011406:	d9f4      	bls.n	80113f2 <_printf_i+0x112>
 8011408:	2b08      	cmp	r3, #8
 801140a:	d10b      	bne.n	8011424 <_printf_i+0x144>
 801140c:	6823      	ldr	r3, [r4, #0]
 801140e:	07df      	lsls	r7, r3, #31
 8011410:	d508      	bpl.n	8011424 <_printf_i+0x144>
 8011412:	6923      	ldr	r3, [r4, #16]
 8011414:	6861      	ldr	r1, [r4, #4]
 8011416:	4299      	cmp	r1, r3
 8011418:	bfde      	ittt	le
 801141a:	2330      	movle	r3, #48	@ 0x30
 801141c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011420:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011424:	1b92      	subs	r2, r2, r6
 8011426:	6122      	str	r2, [r4, #16]
 8011428:	f8cd a000 	str.w	sl, [sp]
 801142c:	464b      	mov	r3, r9
 801142e:	aa03      	add	r2, sp, #12
 8011430:	4621      	mov	r1, r4
 8011432:	4640      	mov	r0, r8
 8011434:	f7ff fee6 	bl	8011204 <_printf_common>
 8011438:	3001      	adds	r0, #1
 801143a:	d14a      	bne.n	80114d2 <_printf_i+0x1f2>
 801143c:	f04f 30ff 	mov.w	r0, #4294967295
 8011440:	b004      	add	sp, #16
 8011442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011446:	6823      	ldr	r3, [r4, #0]
 8011448:	f043 0320 	orr.w	r3, r3, #32
 801144c:	6023      	str	r3, [r4, #0]
 801144e:	4833      	ldr	r0, [pc, #204]	@ (801151c <_printf_i+0x23c>)
 8011450:	2778      	movs	r7, #120	@ 0x78
 8011452:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011456:	6823      	ldr	r3, [r4, #0]
 8011458:	6831      	ldr	r1, [r6, #0]
 801145a:	061f      	lsls	r7, r3, #24
 801145c:	f851 5b04 	ldr.w	r5, [r1], #4
 8011460:	d402      	bmi.n	8011468 <_printf_i+0x188>
 8011462:	065f      	lsls	r7, r3, #25
 8011464:	bf48      	it	mi
 8011466:	b2ad      	uxthmi	r5, r5
 8011468:	6031      	str	r1, [r6, #0]
 801146a:	07d9      	lsls	r1, r3, #31
 801146c:	bf44      	itt	mi
 801146e:	f043 0320 	orrmi.w	r3, r3, #32
 8011472:	6023      	strmi	r3, [r4, #0]
 8011474:	b11d      	cbz	r5, 801147e <_printf_i+0x19e>
 8011476:	2310      	movs	r3, #16
 8011478:	e7ac      	b.n	80113d4 <_printf_i+0xf4>
 801147a:	4827      	ldr	r0, [pc, #156]	@ (8011518 <_printf_i+0x238>)
 801147c:	e7e9      	b.n	8011452 <_printf_i+0x172>
 801147e:	6823      	ldr	r3, [r4, #0]
 8011480:	f023 0320 	bic.w	r3, r3, #32
 8011484:	6023      	str	r3, [r4, #0]
 8011486:	e7f6      	b.n	8011476 <_printf_i+0x196>
 8011488:	4616      	mov	r6, r2
 801148a:	e7bd      	b.n	8011408 <_printf_i+0x128>
 801148c:	6833      	ldr	r3, [r6, #0]
 801148e:	6825      	ldr	r5, [r4, #0]
 8011490:	6961      	ldr	r1, [r4, #20]
 8011492:	1d18      	adds	r0, r3, #4
 8011494:	6030      	str	r0, [r6, #0]
 8011496:	062e      	lsls	r6, r5, #24
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	d501      	bpl.n	80114a0 <_printf_i+0x1c0>
 801149c:	6019      	str	r1, [r3, #0]
 801149e:	e002      	b.n	80114a6 <_printf_i+0x1c6>
 80114a0:	0668      	lsls	r0, r5, #25
 80114a2:	d5fb      	bpl.n	801149c <_printf_i+0x1bc>
 80114a4:	8019      	strh	r1, [r3, #0]
 80114a6:	2300      	movs	r3, #0
 80114a8:	6123      	str	r3, [r4, #16]
 80114aa:	4616      	mov	r6, r2
 80114ac:	e7bc      	b.n	8011428 <_printf_i+0x148>
 80114ae:	6833      	ldr	r3, [r6, #0]
 80114b0:	1d1a      	adds	r2, r3, #4
 80114b2:	6032      	str	r2, [r6, #0]
 80114b4:	681e      	ldr	r6, [r3, #0]
 80114b6:	6862      	ldr	r2, [r4, #4]
 80114b8:	2100      	movs	r1, #0
 80114ba:	4630      	mov	r0, r6
 80114bc:	f7ee fed8 	bl	8000270 <memchr>
 80114c0:	b108      	cbz	r0, 80114c6 <_printf_i+0x1e6>
 80114c2:	1b80      	subs	r0, r0, r6
 80114c4:	6060      	str	r0, [r4, #4]
 80114c6:	6863      	ldr	r3, [r4, #4]
 80114c8:	6123      	str	r3, [r4, #16]
 80114ca:	2300      	movs	r3, #0
 80114cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80114d0:	e7aa      	b.n	8011428 <_printf_i+0x148>
 80114d2:	6923      	ldr	r3, [r4, #16]
 80114d4:	4632      	mov	r2, r6
 80114d6:	4649      	mov	r1, r9
 80114d8:	4640      	mov	r0, r8
 80114da:	47d0      	blx	sl
 80114dc:	3001      	adds	r0, #1
 80114de:	d0ad      	beq.n	801143c <_printf_i+0x15c>
 80114e0:	6823      	ldr	r3, [r4, #0]
 80114e2:	079b      	lsls	r3, r3, #30
 80114e4:	d413      	bmi.n	801150e <_printf_i+0x22e>
 80114e6:	68e0      	ldr	r0, [r4, #12]
 80114e8:	9b03      	ldr	r3, [sp, #12]
 80114ea:	4298      	cmp	r0, r3
 80114ec:	bfb8      	it	lt
 80114ee:	4618      	movlt	r0, r3
 80114f0:	e7a6      	b.n	8011440 <_printf_i+0x160>
 80114f2:	2301      	movs	r3, #1
 80114f4:	4632      	mov	r2, r6
 80114f6:	4649      	mov	r1, r9
 80114f8:	4640      	mov	r0, r8
 80114fa:	47d0      	blx	sl
 80114fc:	3001      	adds	r0, #1
 80114fe:	d09d      	beq.n	801143c <_printf_i+0x15c>
 8011500:	3501      	adds	r5, #1
 8011502:	68e3      	ldr	r3, [r4, #12]
 8011504:	9903      	ldr	r1, [sp, #12]
 8011506:	1a5b      	subs	r3, r3, r1
 8011508:	42ab      	cmp	r3, r5
 801150a:	dcf2      	bgt.n	80114f2 <_printf_i+0x212>
 801150c:	e7eb      	b.n	80114e6 <_printf_i+0x206>
 801150e:	2500      	movs	r5, #0
 8011510:	f104 0619 	add.w	r6, r4, #25
 8011514:	e7f5      	b.n	8011502 <_printf_i+0x222>
 8011516:	bf00      	nop
 8011518:	08014662 	.word	0x08014662
 801151c:	08014673 	.word	0x08014673

08011520 <__sflush_r>:
 8011520:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011528:	0716      	lsls	r6, r2, #28
 801152a:	4605      	mov	r5, r0
 801152c:	460c      	mov	r4, r1
 801152e:	d454      	bmi.n	80115da <__sflush_r+0xba>
 8011530:	684b      	ldr	r3, [r1, #4]
 8011532:	2b00      	cmp	r3, #0
 8011534:	dc02      	bgt.n	801153c <__sflush_r+0x1c>
 8011536:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011538:	2b00      	cmp	r3, #0
 801153a:	dd48      	ble.n	80115ce <__sflush_r+0xae>
 801153c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801153e:	2e00      	cmp	r6, #0
 8011540:	d045      	beq.n	80115ce <__sflush_r+0xae>
 8011542:	2300      	movs	r3, #0
 8011544:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011548:	682f      	ldr	r7, [r5, #0]
 801154a:	6a21      	ldr	r1, [r4, #32]
 801154c:	602b      	str	r3, [r5, #0]
 801154e:	d030      	beq.n	80115b2 <__sflush_r+0x92>
 8011550:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011552:	89a3      	ldrh	r3, [r4, #12]
 8011554:	0759      	lsls	r1, r3, #29
 8011556:	d505      	bpl.n	8011564 <__sflush_r+0x44>
 8011558:	6863      	ldr	r3, [r4, #4]
 801155a:	1ad2      	subs	r2, r2, r3
 801155c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801155e:	b10b      	cbz	r3, 8011564 <__sflush_r+0x44>
 8011560:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011562:	1ad2      	subs	r2, r2, r3
 8011564:	2300      	movs	r3, #0
 8011566:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011568:	6a21      	ldr	r1, [r4, #32]
 801156a:	4628      	mov	r0, r5
 801156c:	47b0      	blx	r6
 801156e:	1c43      	adds	r3, r0, #1
 8011570:	89a3      	ldrh	r3, [r4, #12]
 8011572:	d106      	bne.n	8011582 <__sflush_r+0x62>
 8011574:	6829      	ldr	r1, [r5, #0]
 8011576:	291d      	cmp	r1, #29
 8011578:	d82b      	bhi.n	80115d2 <__sflush_r+0xb2>
 801157a:	4a2a      	ldr	r2, [pc, #168]	@ (8011624 <__sflush_r+0x104>)
 801157c:	410a      	asrs	r2, r1
 801157e:	07d6      	lsls	r6, r2, #31
 8011580:	d427      	bmi.n	80115d2 <__sflush_r+0xb2>
 8011582:	2200      	movs	r2, #0
 8011584:	6062      	str	r2, [r4, #4]
 8011586:	04d9      	lsls	r1, r3, #19
 8011588:	6922      	ldr	r2, [r4, #16]
 801158a:	6022      	str	r2, [r4, #0]
 801158c:	d504      	bpl.n	8011598 <__sflush_r+0x78>
 801158e:	1c42      	adds	r2, r0, #1
 8011590:	d101      	bne.n	8011596 <__sflush_r+0x76>
 8011592:	682b      	ldr	r3, [r5, #0]
 8011594:	b903      	cbnz	r3, 8011598 <__sflush_r+0x78>
 8011596:	6560      	str	r0, [r4, #84]	@ 0x54
 8011598:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801159a:	602f      	str	r7, [r5, #0]
 801159c:	b1b9      	cbz	r1, 80115ce <__sflush_r+0xae>
 801159e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80115a2:	4299      	cmp	r1, r3
 80115a4:	d002      	beq.n	80115ac <__sflush_r+0x8c>
 80115a6:	4628      	mov	r0, r5
 80115a8:	f7ff fa92 	bl	8010ad0 <_free_r>
 80115ac:	2300      	movs	r3, #0
 80115ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80115b0:	e00d      	b.n	80115ce <__sflush_r+0xae>
 80115b2:	2301      	movs	r3, #1
 80115b4:	4628      	mov	r0, r5
 80115b6:	47b0      	blx	r6
 80115b8:	4602      	mov	r2, r0
 80115ba:	1c50      	adds	r0, r2, #1
 80115bc:	d1c9      	bne.n	8011552 <__sflush_r+0x32>
 80115be:	682b      	ldr	r3, [r5, #0]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d0c6      	beq.n	8011552 <__sflush_r+0x32>
 80115c4:	2b1d      	cmp	r3, #29
 80115c6:	d001      	beq.n	80115cc <__sflush_r+0xac>
 80115c8:	2b16      	cmp	r3, #22
 80115ca:	d11e      	bne.n	801160a <__sflush_r+0xea>
 80115cc:	602f      	str	r7, [r5, #0]
 80115ce:	2000      	movs	r0, #0
 80115d0:	e022      	b.n	8011618 <__sflush_r+0xf8>
 80115d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80115d6:	b21b      	sxth	r3, r3
 80115d8:	e01b      	b.n	8011612 <__sflush_r+0xf2>
 80115da:	690f      	ldr	r7, [r1, #16]
 80115dc:	2f00      	cmp	r7, #0
 80115de:	d0f6      	beq.n	80115ce <__sflush_r+0xae>
 80115e0:	0793      	lsls	r3, r2, #30
 80115e2:	680e      	ldr	r6, [r1, #0]
 80115e4:	bf08      	it	eq
 80115e6:	694b      	ldreq	r3, [r1, #20]
 80115e8:	600f      	str	r7, [r1, #0]
 80115ea:	bf18      	it	ne
 80115ec:	2300      	movne	r3, #0
 80115ee:	eba6 0807 	sub.w	r8, r6, r7
 80115f2:	608b      	str	r3, [r1, #8]
 80115f4:	f1b8 0f00 	cmp.w	r8, #0
 80115f8:	dde9      	ble.n	80115ce <__sflush_r+0xae>
 80115fa:	6a21      	ldr	r1, [r4, #32]
 80115fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80115fe:	4643      	mov	r3, r8
 8011600:	463a      	mov	r2, r7
 8011602:	4628      	mov	r0, r5
 8011604:	47b0      	blx	r6
 8011606:	2800      	cmp	r0, #0
 8011608:	dc08      	bgt.n	801161c <__sflush_r+0xfc>
 801160a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801160e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011612:	81a3      	strh	r3, [r4, #12]
 8011614:	f04f 30ff 	mov.w	r0, #4294967295
 8011618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801161c:	4407      	add	r7, r0
 801161e:	eba8 0800 	sub.w	r8, r8, r0
 8011622:	e7e7      	b.n	80115f4 <__sflush_r+0xd4>
 8011624:	dfbffffe 	.word	0xdfbffffe

08011628 <_fflush_r>:
 8011628:	b538      	push	{r3, r4, r5, lr}
 801162a:	690b      	ldr	r3, [r1, #16]
 801162c:	4605      	mov	r5, r0
 801162e:	460c      	mov	r4, r1
 8011630:	b913      	cbnz	r3, 8011638 <_fflush_r+0x10>
 8011632:	2500      	movs	r5, #0
 8011634:	4628      	mov	r0, r5
 8011636:	bd38      	pop	{r3, r4, r5, pc}
 8011638:	b118      	cbz	r0, 8011642 <_fflush_r+0x1a>
 801163a:	6a03      	ldr	r3, [r0, #32]
 801163c:	b90b      	cbnz	r3, 8011642 <_fflush_r+0x1a>
 801163e:	f7ff f893 	bl	8010768 <__sinit>
 8011642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d0f3      	beq.n	8011632 <_fflush_r+0xa>
 801164a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801164c:	07d0      	lsls	r0, r2, #31
 801164e:	d404      	bmi.n	801165a <_fflush_r+0x32>
 8011650:	0599      	lsls	r1, r3, #22
 8011652:	d402      	bmi.n	801165a <_fflush_r+0x32>
 8011654:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011656:	f7ff fa04 	bl	8010a62 <__retarget_lock_acquire_recursive>
 801165a:	4628      	mov	r0, r5
 801165c:	4621      	mov	r1, r4
 801165e:	f7ff ff5f 	bl	8011520 <__sflush_r>
 8011662:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011664:	07da      	lsls	r2, r3, #31
 8011666:	4605      	mov	r5, r0
 8011668:	d4e4      	bmi.n	8011634 <_fflush_r+0xc>
 801166a:	89a3      	ldrh	r3, [r4, #12]
 801166c:	059b      	lsls	r3, r3, #22
 801166e:	d4e1      	bmi.n	8011634 <_fflush_r+0xc>
 8011670:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011672:	f7ff f9f7 	bl	8010a64 <__retarget_lock_release_recursive>
 8011676:	e7dd      	b.n	8011634 <_fflush_r+0xc>

08011678 <fiprintf>:
 8011678:	b40e      	push	{r1, r2, r3}
 801167a:	b503      	push	{r0, r1, lr}
 801167c:	4601      	mov	r1, r0
 801167e:	ab03      	add	r3, sp, #12
 8011680:	4805      	ldr	r0, [pc, #20]	@ (8011698 <fiprintf+0x20>)
 8011682:	f853 2b04 	ldr.w	r2, [r3], #4
 8011686:	6800      	ldr	r0, [r0, #0]
 8011688:	9301      	str	r3, [sp, #4]
 801168a:	f7ff fca3 	bl	8010fd4 <_vfiprintf_r>
 801168e:	b002      	add	sp, #8
 8011690:	f85d eb04 	ldr.w	lr, [sp], #4
 8011694:	b003      	add	sp, #12
 8011696:	4770      	bx	lr
 8011698:	20000038 	.word	0x20000038

0801169c <__swbuf_r>:
 801169c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801169e:	460e      	mov	r6, r1
 80116a0:	4614      	mov	r4, r2
 80116a2:	4605      	mov	r5, r0
 80116a4:	b118      	cbz	r0, 80116ae <__swbuf_r+0x12>
 80116a6:	6a03      	ldr	r3, [r0, #32]
 80116a8:	b90b      	cbnz	r3, 80116ae <__swbuf_r+0x12>
 80116aa:	f7ff f85d 	bl	8010768 <__sinit>
 80116ae:	69a3      	ldr	r3, [r4, #24]
 80116b0:	60a3      	str	r3, [r4, #8]
 80116b2:	89a3      	ldrh	r3, [r4, #12]
 80116b4:	071a      	lsls	r2, r3, #28
 80116b6:	d501      	bpl.n	80116bc <__swbuf_r+0x20>
 80116b8:	6923      	ldr	r3, [r4, #16]
 80116ba:	b943      	cbnz	r3, 80116ce <__swbuf_r+0x32>
 80116bc:	4621      	mov	r1, r4
 80116be:	4628      	mov	r0, r5
 80116c0:	f000 f82a 	bl	8011718 <__swsetup_r>
 80116c4:	b118      	cbz	r0, 80116ce <__swbuf_r+0x32>
 80116c6:	f04f 37ff 	mov.w	r7, #4294967295
 80116ca:	4638      	mov	r0, r7
 80116cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116ce:	6823      	ldr	r3, [r4, #0]
 80116d0:	6922      	ldr	r2, [r4, #16]
 80116d2:	1a98      	subs	r0, r3, r2
 80116d4:	6963      	ldr	r3, [r4, #20]
 80116d6:	b2f6      	uxtb	r6, r6
 80116d8:	4283      	cmp	r3, r0
 80116da:	4637      	mov	r7, r6
 80116dc:	dc05      	bgt.n	80116ea <__swbuf_r+0x4e>
 80116de:	4621      	mov	r1, r4
 80116e0:	4628      	mov	r0, r5
 80116e2:	f7ff ffa1 	bl	8011628 <_fflush_r>
 80116e6:	2800      	cmp	r0, #0
 80116e8:	d1ed      	bne.n	80116c6 <__swbuf_r+0x2a>
 80116ea:	68a3      	ldr	r3, [r4, #8]
 80116ec:	3b01      	subs	r3, #1
 80116ee:	60a3      	str	r3, [r4, #8]
 80116f0:	6823      	ldr	r3, [r4, #0]
 80116f2:	1c5a      	adds	r2, r3, #1
 80116f4:	6022      	str	r2, [r4, #0]
 80116f6:	701e      	strb	r6, [r3, #0]
 80116f8:	6962      	ldr	r2, [r4, #20]
 80116fa:	1c43      	adds	r3, r0, #1
 80116fc:	429a      	cmp	r2, r3
 80116fe:	d004      	beq.n	801170a <__swbuf_r+0x6e>
 8011700:	89a3      	ldrh	r3, [r4, #12]
 8011702:	07db      	lsls	r3, r3, #31
 8011704:	d5e1      	bpl.n	80116ca <__swbuf_r+0x2e>
 8011706:	2e0a      	cmp	r6, #10
 8011708:	d1df      	bne.n	80116ca <__swbuf_r+0x2e>
 801170a:	4621      	mov	r1, r4
 801170c:	4628      	mov	r0, r5
 801170e:	f7ff ff8b 	bl	8011628 <_fflush_r>
 8011712:	2800      	cmp	r0, #0
 8011714:	d0d9      	beq.n	80116ca <__swbuf_r+0x2e>
 8011716:	e7d6      	b.n	80116c6 <__swbuf_r+0x2a>

08011718 <__swsetup_r>:
 8011718:	b538      	push	{r3, r4, r5, lr}
 801171a:	4b29      	ldr	r3, [pc, #164]	@ (80117c0 <__swsetup_r+0xa8>)
 801171c:	4605      	mov	r5, r0
 801171e:	6818      	ldr	r0, [r3, #0]
 8011720:	460c      	mov	r4, r1
 8011722:	b118      	cbz	r0, 801172c <__swsetup_r+0x14>
 8011724:	6a03      	ldr	r3, [r0, #32]
 8011726:	b90b      	cbnz	r3, 801172c <__swsetup_r+0x14>
 8011728:	f7ff f81e 	bl	8010768 <__sinit>
 801172c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011730:	0719      	lsls	r1, r3, #28
 8011732:	d422      	bmi.n	801177a <__swsetup_r+0x62>
 8011734:	06da      	lsls	r2, r3, #27
 8011736:	d407      	bmi.n	8011748 <__swsetup_r+0x30>
 8011738:	2209      	movs	r2, #9
 801173a:	602a      	str	r2, [r5, #0]
 801173c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011740:	81a3      	strh	r3, [r4, #12]
 8011742:	f04f 30ff 	mov.w	r0, #4294967295
 8011746:	e033      	b.n	80117b0 <__swsetup_r+0x98>
 8011748:	0758      	lsls	r0, r3, #29
 801174a:	d512      	bpl.n	8011772 <__swsetup_r+0x5a>
 801174c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801174e:	b141      	cbz	r1, 8011762 <__swsetup_r+0x4a>
 8011750:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011754:	4299      	cmp	r1, r3
 8011756:	d002      	beq.n	801175e <__swsetup_r+0x46>
 8011758:	4628      	mov	r0, r5
 801175a:	f7ff f9b9 	bl	8010ad0 <_free_r>
 801175e:	2300      	movs	r3, #0
 8011760:	6363      	str	r3, [r4, #52]	@ 0x34
 8011762:	89a3      	ldrh	r3, [r4, #12]
 8011764:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011768:	81a3      	strh	r3, [r4, #12]
 801176a:	2300      	movs	r3, #0
 801176c:	6063      	str	r3, [r4, #4]
 801176e:	6923      	ldr	r3, [r4, #16]
 8011770:	6023      	str	r3, [r4, #0]
 8011772:	89a3      	ldrh	r3, [r4, #12]
 8011774:	f043 0308 	orr.w	r3, r3, #8
 8011778:	81a3      	strh	r3, [r4, #12]
 801177a:	6923      	ldr	r3, [r4, #16]
 801177c:	b94b      	cbnz	r3, 8011792 <__swsetup_r+0x7a>
 801177e:	89a3      	ldrh	r3, [r4, #12]
 8011780:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011784:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011788:	d003      	beq.n	8011792 <__swsetup_r+0x7a>
 801178a:	4621      	mov	r1, r4
 801178c:	4628      	mov	r0, r5
 801178e:	f000 f884 	bl	801189a <__smakebuf_r>
 8011792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011796:	f013 0201 	ands.w	r2, r3, #1
 801179a:	d00a      	beq.n	80117b2 <__swsetup_r+0x9a>
 801179c:	2200      	movs	r2, #0
 801179e:	60a2      	str	r2, [r4, #8]
 80117a0:	6962      	ldr	r2, [r4, #20]
 80117a2:	4252      	negs	r2, r2
 80117a4:	61a2      	str	r2, [r4, #24]
 80117a6:	6922      	ldr	r2, [r4, #16]
 80117a8:	b942      	cbnz	r2, 80117bc <__swsetup_r+0xa4>
 80117aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80117ae:	d1c5      	bne.n	801173c <__swsetup_r+0x24>
 80117b0:	bd38      	pop	{r3, r4, r5, pc}
 80117b2:	0799      	lsls	r1, r3, #30
 80117b4:	bf58      	it	pl
 80117b6:	6962      	ldrpl	r2, [r4, #20]
 80117b8:	60a2      	str	r2, [r4, #8]
 80117ba:	e7f4      	b.n	80117a6 <__swsetup_r+0x8e>
 80117bc:	2000      	movs	r0, #0
 80117be:	e7f7      	b.n	80117b0 <__swsetup_r+0x98>
 80117c0:	20000038 	.word	0x20000038

080117c4 <_sbrk_r>:
 80117c4:	b538      	push	{r3, r4, r5, lr}
 80117c6:	4d06      	ldr	r5, [pc, #24]	@ (80117e0 <_sbrk_r+0x1c>)
 80117c8:	2300      	movs	r3, #0
 80117ca:	4604      	mov	r4, r0
 80117cc:	4608      	mov	r0, r1
 80117ce:	602b      	str	r3, [r5, #0]
 80117d0:	f7ef fae6 	bl	8000da0 <_sbrk>
 80117d4:	1c43      	adds	r3, r0, #1
 80117d6:	d102      	bne.n	80117de <_sbrk_r+0x1a>
 80117d8:	682b      	ldr	r3, [r5, #0]
 80117da:	b103      	cbz	r3, 80117de <_sbrk_r+0x1a>
 80117dc:	6023      	str	r3, [r4, #0]
 80117de:	bd38      	pop	{r3, r4, r5, pc}
 80117e0:	20008ab4 	.word	0x20008ab4

080117e4 <abort>:
 80117e4:	b508      	push	{r3, lr}
 80117e6:	2006      	movs	r0, #6
 80117e8:	f000 f8bc 	bl	8011964 <raise>
 80117ec:	2001      	movs	r0, #1
 80117ee:	f7ef fa5f 	bl	8000cb0 <_exit>

080117f2 <_realloc_r>:
 80117f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117f6:	4680      	mov	r8, r0
 80117f8:	4615      	mov	r5, r2
 80117fa:	460c      	mov	r4, r1
 80117fc:	b921      	cbnz	r1, 8011808 <_realloc_r+0x16>
 80117fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011802:	4611      	mov	r1, r2
 8011804:	f7ff b9d8 	b.w	8010bb8 <_malloc_r>
 8011808:	b92a      	cbnz	r2, 8011816 <_realloc_r+0x24>
 801180a:	f7ff f961 	bl	8010ad0 <_free_r>
 801180e:	2400      	movs	r4, #0
 8011810:	4620      	mov	r0, r4
 8011812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011816:	f000 f8e3 	bl	80119e0 <_malloc_usable_size_r>
 801181a:	4285      	cmp	r5, r0
 801181c:	4606      	mov	r6, r0
 801181e:	d802      	bhi.n	8011826 <_realloc_r+0x34>
 8011820:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011824:	d8f4      	bhi.n	8011810 <_realloc_r+0x1e>
 8011826:	4629      	mov	r1, r5
 8011828:	4640      	mov	r0, r8
 801182a:	f7ff f9c5 	bl	8010bb8 <_malloc_r>
 801182e:	4607      	mov	r7, r0
 8011830:	2800      	cmp	r0, #0
 8011832:	d0ec      	beq.n	801180e <_realloc_r+0x1c>
 8011834:	42b5      	cmp	r5, r6
 8011836:	462a      	mov	r2, r5
 8011838:	4621      	mov	r1, r4
 801183a:	bf28      	it	cs
 801183c:	4632      	movcs	r2, r6
 801183e:	f7ff f91a 	bl	8010a76 <memcpy>
 8011842:	4621      	mov	r1, r4
 8011844:	4640      	mov	r0, r8
 8011846:	f7ff f943 	bl	8010ad0 <_free_r>
 801184a:	463c      	mov	r4, r7
 801184c:	e7e0      	b.n	8011810 <_realloc_r+0x1e>

0801184e <__swhatbuf_r>:
 801184e:	b570      	push	{r4, r5, r6, lr}
 8011850:	460c      	mov	r4, r1
 8011852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011856:	2900      	cmp	r1, #0
 8011858:	b096      	sub	sp, #88	@ 0x58
 801185a:	4615      	mov	r5, r2
 801185c:	461e      	mov	r6, r3
 801185e:	da0d      	bge.n	801187c <__swhatbuf_r+0x2e>
 8011860:	89a3      	ldrh	r3, [r4, #12]
 8011862:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011866:	f04f 0100 	mov.w	r1, #0
 801186a:	bf14      	ite	ne
 801186c:	2340      	movne	r3, #64	@ 0x40
 801186e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011872:	2000      	movs	r0, #0
 8011874:	6031      	str	r1, [r6, #0]
 8011876:	602b      	str	r3, [r5, #0]
 8011878:	b016      	add	sp, #88	@ 0x58
 801187a:	bd70      	pop	{r4, r5, r6, pc}
 801187c:	466a      	mov	r2, sp
 801187e:	f000 f879 	bl	8011974 <_fstat_r>
 8011882:	2800      	cmp	r0, #0
 8011884:	dbec      	blt.n	8011860 <__swhatbuf_r+0x12>
 8011886:	9901      	ldr	r1, [sp, #4]
 8011888:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801188c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011890:	4259      	negs	r1, r3
 8011892:	4159      	adcs	r1, r3
 8011894:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011898:	e7eb      	b.n	8011872 <__swhatbuf_r+0x24>

0801189a <__smakebuf_r>:
 801189a:	898b      	ldrh	r3, [r1, #12]
 801189c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801189e:	079d      	lsls	r5, r3, #30
 80118a0:	4606      	mov	r6, r0
 80118a2:	460c      	mov	r4, r1
 80118a4:	d507      	bpl.n	80118b6 <__smakebuf_r+0x1c>
 80118a6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80118aa:	6023      	str	r3, [r4, #0]
 80118ac:	6123      	str	r3, [r4, #16]
 80118ae:	2301      	movs	r3, #1
 80118b0:	6163      	str	r3, [r4, #20]
 80118b2:	b003      	add	sp, #12
 80118b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118b6:	ab01      	add	r3, sp, #4
 80118b8:	466a      	mov	r2, sp
 80118ba:	f7ff ffc8 	bl	801184e <__swhatbuf_r>
 80118be:	9f00      	ldr	r7, [sp, #0]
 80118c0:	4605      	mov	r5, r0
 80118c2:	4639      	mov	r1, r7
 80118c4:	4630      	mov	r0, r6
 80118c6:	f7ff f977 	bl	8010bb8 <_malloc_r>
 80118ca:	b948      	cbnz	r0, 80118e0 <__smakebuf_r+0x46>
 80118cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118d0:	059a      	lsls	r2, r3, #22
 80118d2:	d4ee      	bmi.n	80118b2 <__smakebuf_r+0x18>
 80118d4:	f023 0303 	bic.w	r3, r3, #3
 80118d8:	f043 0302 	orr.w	r3, r3, #2
 80118dc:	81a3      	strh	r3, [r4, #12]
 80118de:	e7e2      	b.n	80118a6 <__smakebuf_r+0xc>
 80118e0:	89a3      	ldrh	r3, [r4, #12]
 80118e2:	6020      	str	r0, [r4, #0]
 80118e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80118e8:	81a3      	strh	r3, [r4, #12]
 80118ea:	9b01      	ldr	r3, [sp, #4]
 80118ec:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80118f0:	b15b      	cbz	r3, 801190a <__smakebuf_r+0x70>
 80118f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80118f6:	4630      	mov	r0, r6
 80118f8:	f000 f84e 	bl	8011998 <_isatty_r>
 80118fc:	b128      	cbz	r0, 801190a <__smakebuf_r+0x70>
 80118fe:	89a3      	ldrh	r3, [r4, #12]
 8011900:	f023 0303 	bic.w	r3, r3, #3
 8011904:	f043 0301 	orr.w	r3, r3, #1
 8011908:	81a3      	strh	r3, [r4, #12]
 801190a:	89a3      	ldrh	r3, [r4, #12]
 801190c:	431d      	orrs	r5, r3
 801190e:	81a5      	strh	r5, [r4, #12]
 8011910:	e7cf      	b.n	80118b2 <__smakebuf_r+0x18>

08011912 <_raise_r>:
 8011912:	291f      	cmp	r1, #31
 8011914:	b538      	push	{r3, r4, r5, lr}
 8011916:	4605      	mov	r5, r0
 8011918:	460c      	mov	r4, r1
 801191a:	d904      	bls.n	8011926 <_raise_r+0x14>
 801191c:	2316      	movs	r3, #22
 801191e:	6003      	str	r3, [r0, #0]
 8011920:	f04f 30ff 	mov.w	r0, #4294967295
 8011924:	bd38      	pop	{r3, r4, r5, pc}
 8011926:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011928:	b112      	cbz	r2, 8011930 <_raise_r+0x1e>
 801192a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801192e:	b94b      	cbnz	r3, 8011944 <_raise_r+0x32>
 8011930:	4628      	mov	r0, r5
 8011932:	f000 f853 	bl	80119dc <_getpid_r>
 8011936:	4622      	mov	r2, r4
 8011938:	4601      	mov	r1, r0
 801193a:	4628      	mov	r0, r5
 801193c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011940:	f000 b83a 	b.w	80119b8 <_kill_r>
 8011944:	2b01      	cmp	r3, #1
 8011946:	d00a      	beq.n	801195e <_raise_r+0x4c>
 8011948:	1c59      	adds	r1, r3, #1
 801194a:	d103      	bne.n	8011954 <_raise_r+0x42>
 801194c:	2316      	movs	r3, #22
 801194e:	6003      	str	r3, [r0, #0]
 8011950:	2001      	movs	r0, #1
 8011952:	e7e7      	b.n	8011924 <_raise_r+0x12>
 8011954:	2100      	movs	r1, #0
 8011956:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801195a:	4620      	mov	r0, r4
 801195c:	4798      	blx	r3
 801195e:	2000      	movs	r0, #0
 8011960:	e7e0      	b.n	8011924 <_raise_r+0x12>
	...

08011964 <raise>:
 8011964:	4b02      	ldr	r3, [pc, #8]	@ (8011970 <raise+0xc>)
 8011966:	4601      	mov	r1, r0
 8011968:	6818      	ldr	r0, [r3, #0]
 801196a:	f7ff bfd2 	b.w	8011912 <_raise_r>
 801196e:	bf00      	nop
 8011970:	20000038 	.word	0x20000038

08011974 <_fstat_r>:
 8011974:	b538      	push	{r3, r4, r5, lr}
 8011976:	4d07      	ldr	r5, [pc, #28]	@ (8011994 <_fstat_r+0x20>)
 8011978:	2300      	movs	r3, #0
 801197a:	4604      	mov	r4, r0
 801197c:	4608      	mov	r0, r1
 801197e:	4611      	mov	r1, r2
 8011980:	602b      	str	r3, [r5, #0]
 8011982:	f7ef f9e5 	bl	8000d50 <_fstat>
 8011986:	1c43      	adds	r3, r0, #1
 8011988:	d102      	bne.n	8011990 <_fstat_r+0x1c>
 801198a:	682b      	ldr	r3, [r5, #0]
 801198c:	b103      	cbz	r3, 8011990 <_fstat_r+0x1c>
 801198e:	6023      	str	r3, [r4, #0]
 8011990:	bd38      	pop	{r3, r4, r5, pc}
 8011992:	bf00      	nop
 8011994:	20008ab4 	.word	0x20008ab4

08011998 <_isatty_r>:
 8011998:	b538      	push	{r3, r4, r5, lr}
 801199a:	4d06      	ldr	r5, [pc, #24]	@ (80119b4 <_isatty_r+0x1c>)
 801199c:	2300      	movs	r3, #0
 801199e:	4604      	mov	r4, r0
 80119a0:	4608      	mov	r0, r1
 80119a2:	602b      	str	r3, [r5, #0]
 80119a4:	f7ef f9e4 	bl	8000d70 <_isatty>
 80119a8:	1c43      	adds	r3, r0, #1
 80119aa:	d102      	bne.n	80119b2 <_isatty_r+0x1a>
 80119ac:	682b      	ldr	r3, [r5, #0]
 80119ae:	b103      	cbz	r3, 80119b2 <_isatty_r+0x1a>
 80119b0:	6023      	str	r3, [r4, #0]
 80119b2:	bd38      	pop	{r3, r4, r5, pc}
 80119b4:	20008ab4 	.word	0x20008ab4

080119b8 <_kill_r>:
 80119b8:	b538      	push	{r3, r4, r5, lr}
 80119ba:	4d07      	ldr	r5, [pc, #28]	@ (80119d8 <_kill_r+0x20>)
 80119bc:	2300      	movs	r3, #0
 80119be:	4604      	mov	r4, r0
 80119c0:	4608      	mov	r0, r1
 80119c2:	4611      	mov	r1, r2
 80119c4:	602b      	str	r3, [r5, #0]
 80119c6:	f7ef f961 	bl	8000c8c <_kill>
 80119ca:	1c43      	adds	r3, r0, #1
 80119cc:	d102      	bne.n	80119d4 <_kill_r+0x1c>
 80119ce:	682b      	ldr	r3, [r5, #0]
 80119d0:	b103      	cbz	r3, 80119d4 <_kill_r+0x1c>
 80119d2:	6023      	str	r3, [r4, #0]
 80119d4:	bd38      	pop	{r3, r4, r5, pc}
 80119d6:	bf00      	nop
 80119d8:	20008ab4 	.word	0x20008ab4

080119dc <_getpid_r>:
 80119dc:	f7ef b94e 	b.w	8000c7c <_getpid>

080119e0 <_malloc_usable_size_r>:
 80119e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119e4:	1f18      	subs	r0, r3, #4
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	bfbc      	itt	lt
 80119ea:	580b      	ldrlt	r3, [r1, r0]
 80119ec:	18c0      	addlt	r0, r0, r3
 80119ee:	4770      	bx	lr

080119f0 <_init>:
 80119f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119f2:	bf00      	nop
 80119f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119f6:	bc08      	pop	{r3}
 80119f8:	469e      	mov	lr, r3
 80119fa:	4770      	bx	lr

080119fc <_fini>:
 80119fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119fe:	bf00      	nop
 8011a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a02:	bc08      	pop	{r3}
 8011a04:	469e      	mov	lr, r3
 8011a06:	4770      	bx	lr
